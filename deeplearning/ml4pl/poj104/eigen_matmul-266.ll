; ModuleID = 'expanded/eigen_matmul-266.cpp'
source_filename = "expanded/eigen_matmul-266.cpp"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.13.0"

%"struct.Eigen::internal::CacheSizes" = type { i64, i64, i64 }
%"class.Eigen::Matrix" = type { %"class.Eigen::PlainObjectBase" }
%"class.Eigen::PlainObjectBase" = type { %"class.Eigen::DenseStorage" }
%"class.Eigen::DenseStorage" = type { double*, i64, i64 }
%"class.Eigen::Matrix.2" = type { %"class.Eigen::PlainObjectBase.3" }
%"class.Eigen::PlainObjectBase.3" = type { %"class.Eigen::DenseStorage.10" }
%"class.Eigen::DenseStorage.10" = type { double*, i64 }
%"class.Eigen::CwiseBinaryOp" = type <{ %"class.Eigen::Product", %"class.Eigen::Matrix.2"*, %"struct.Eigen::internal::scalar_difference_op", [7 x i8] }>
%"class.Eigen::Product" = type { %"class.Eigen::Matrix"*, %"class.Eigen::Matrix.2"* }
%"struct.Eigen::internal::scalar_difference_op" = type { i8 }
%"class.Eigen::MatrixBase.15" = type { i8 }
%"class.Eigen::internal::redux_evaluator" = type { %"struct.Eigen::internal::evaluator", %"class.Eigen::CwiseUnaryOp"* }
%"struct.Eigen::internal::evaluator" = type { %"struct.Eigen::internal::unary_evaluator" }
%"struct.Eigen::internal::unary_evaluator" = type { %"struct.Eigen::internal::scalar_abs2_op", %"struct.Eigen::internal::evaluator.476" }
%"struct.Eigen::internal::scalar_abs2_op" = type { i8 }
%"struct.Eigen::internal::evaluator.476" = type { %"struct.Eigen::internal::evaluator.477" }
%"struct.Eigen::internal::evaluator.477" = type { %"struct.Eigen::internal::binary_evaluator" }
%"struct.Eigen::internal::binary_evaluator" = type { %"struct.Eigen::internal::scalar_difference_op", %"struct.Eigen::internal::evaluator.479", %"struct.Eigen::internal::evaluator.487" }
%"struct.Eigen::internal::evaluator.479" = type { %"struct.Eigen::internal::evaluator.480" }
%"struct.Eigen::internal::evaluator.480" = type { %"struct.Eigen::internal::product_evaluator" }
%"struct.Eigen::internal::product_evaluator" = type { %"struct.Eigen::internal::evaluator.base.486", %"class.Eigen::Matrix.2" }
%"struct.Eigen::internal::evaluator.base.486" = type { %"struct.Eigen::internal::evaluator.base" }
%"struct.Eigen::internal::evaluator.base" = type <{ double*, %"class.Eigen::internal::variable_if_dynamic.484" }>
%"class.Eigen::internal::variable_if_dynamic.484" = type { i8 }
%"struct.Eigen::internal::evaluator.487" = type { %"struct.Eigen::internal::evaluator.base.486", [7 x i8] }
%"class.Eigen::CwiseUnaryOp" = type { [8 x i8], %"class.Eigen::CwiseBinaryOp", %"struct.Eigen::internal::scalar_abs2_op", [7 x i8] }
%"struct.Eigen::internal::evaluator.840" = type { %"struct.Eigen::internal::product_evaluator.841" }
%"struct.Eigen::internal::product_evaluator.841" = type { %"class.Eigen::Matrix.77"*, %"class.Eigen::Matrix.185"*, %"struct.Eigen::internal::evaluator.545", %"struct.Eigen::internal::evaluator.599", i64 }
%"class.Eigen::Matrix.77" = type { %"class.Eigen::PlainObjectBase.78" }
%"class.Eigen::PlainObjectBase.78" = type { %"class.Eigen::DenseStorage.85" }
%"class.Eigen::DenseStorage.85" = type { %"struct.Eigen::internal::plain_array.86" }
%"struct.Eigen::internal::plain_array.86" = type { [282 x i32] }
%"class.Eigen::Matrix.185" = type { %"class.Eigen::PlainObjectBase.186" }
%"class.Eigen::PlainObjectBase.186" = type { %"class.Eigen::DenseStorage.193" }
%"class.Eigen::DenseStorage.193" = type { %"struct.Eigen::internal::plain_array.194" }
%"struct.Eigen::internal::plain_array.194" = type { [6 x i32] }
%"struct.Eigen::internal::evaluator.545" = type { %"struct.Eigen::internal::evaluator.base.548", [7 x i8] }
%"struct.Eigen::internal::evaluator.base.548" = type <{ i32*, %"class.Eigen::internal::variable_if_dynamic.46" }>
%"class.Eigen::internal::variable_if_dynamic.46" = type { i8 }
%"struct.Eigen::internal::evaluator.599" = type { %"struct.Eigen::internal::evaluator.base.602", [7 x i8] }
%"struct.Eigen::internal::evaluator.base.602" = type <{ i32*, %"class.Eigen::internal::variable_if_dynamic.484" }>
%"struct.Eigen::internal::evaluator.583" = type { %"struct.Eigen::internal::evaluator.base.586", [7 x i8] }
%"struct.Eigen::internal::evaluator.base.586" = type <{ i32*, %"class.Eigen::internal::variable_if_dynamic.484" }>
%"class.Eigen::internal::generic_dense_assignment_kernel.843" = type { %"struct.Eigen::internal::evaluator.583"*, %"struct.Eigen::internal::evaluator.840"*, %"struct.Eigen::internal::assign_op.512"*, %"class.Eigen::Matrix.153"* }
%"struct.Eigen::internal::assign_op.512" = type { i8 }
%"class.Eigen::Matrix.153" = type { %"class.Eigen::PlainObjectBase.154" }
%"class.Eigen::PlainObjectBase.154" = type { %"class.Eigen::DenseStorage.161" }
%"class.Eigen::DenseStorage.161" = type { %"struct.Eigen::internal::plain_array.162" }
%"struct.Eigen::internal::plain_array.162" = type { [47 x i32] }
%"struct.Eigen::internal::add_assign_op" = type { i8 }
%"class.Eigen::Matrix.63" = type { %"class.Eigen::PlainObjectBase.64" }
%"class.Eigen::PlainObjectBase.64" = type { %"class.Eigen::DenseStorage.71" }
%"class.Eigen::DenseStorage.71" = type { %"struct.Eigen::internal::plain_array" }
%"struct.Eigen::internal::plain_array" = type { [2209 x i32] }
%"class.Eigen::Transpose.798" = type { %"class.Eigen::Matrix.170"* }
%"class.Eigen::Matrix.170" = type { %"class.Eigen::PlainObjectBase.171" }
%"class.Eigen::PlainObjectBase.171" = type { %"class.Eigen::DenseStorage.178" }
%"class.Eigen::DenseStorage.178" = type { i32*, i64 }
%"class.Eigen::Matrix.724" = type { %"class.Eigen::PlainObjectBase.725" }
%"class.Eigen::PlainObjectBase.725" = type { %"class.Eigen::DenseStorage.732" }
%"class.Eigen::DenseStorage.732" = type { i32*, i64 }
%"struct.Eigen::internal::evaluator.817" = type { %"struct.Eigen::internal::binary_evaluator.818" }
%"struct.Eigen::internal::binary_evaluator.818" = type { %"struct.Eigen::internal::scalar_sum_op", [7 x i8], %"struct.Eigen::internal::evaluator.820", %"struct.Eigen::internal::evaluator.823" }
%"struct.Eigen::internal::scalar_sum_op" = type { i8 }
%"struct.Eigen::internal::evaluator.820" = type { %"struct.Eigen::internal::evaluator.821" }
%"struct.Eigen::internal::evaluator.821" = type { %"struct.Eigen::internal::product_evaluator.822" }
%"struct.Eigen::internal::product_evaluator.822" = type { %"struct.Eigen::internal::evaluator.base.587", %"class.Eigen::Matrix.153" }
%"struct.Eigen::internal::evaluator.base.587" = type { %"struct.Eigen::internal::evaluator.base.586" }
%"struct.Eigen::internal::evaluator.823" = type { %"struct.Eigen::internal::evaluator.base.830", [6 x i8] }
%"struct.Eigen::internal::evaluator.base.830" = type { %"struct.Eigen::internal::block_evaluator.base.829" }
%"struct.Eigen::internal::block_evaluator.base.829" = type { %"struct.Eigen::internal::mapbase_evaluator.base.828" }
%"struct.Eigen::internal::mapbase_evaluator.base.828" = type <{ i32*, %"class.Eigen::internal::variable_if_dynamic.168", %"class.Eigen::internal::variable_if_dynamic.46" }>
%"class.Eigen::internal::variable_if_dynamic.168" = type { i8 }
%"class.Eigen::Matrix.94" = type { %"class.Eigen::PlainObjectBase.95" }
%"class.Eigen::PlainObjectBase.95" = type { %"class.Eigen::DenseStorage.102" }
%"class.Eigen::DenseStorage.102" = type { %"struct.Eigen::internal::plain_array.86" }
%"class.Eigen::internal::gemm_blocking_space.1501" = type { %"class.Eigen::internal::level3_blocking", [24 x i8], [282 x i32], [24 x i8], [282 x i32], [24 x i8] }
%"class.Eigen::internal::level3_blocking" = type { i32*, i32*, i64, i64, i64 }
%"class.Eigen::Matrix.108" = type { %"class.Eigen::PlainObjectBase.109" }
%"class.Eigen::PlainObjectBase.109" = type { %"class.Eigen::DenseStorage.116" }
%"class.Eigen::DenseStorage.116" = type { %"struct.Eigen::internal::plain_array.117" }
%"struct.Eigen::internal::plain_array.117" = type { [36 x i32] }
%"class.Eigen::Matrix.123" = type { %"class.Eigen::PlainObjectBase.124" }
%"class.Eigen::PlainObjectBase.124" = type { %"class.Eigen::DenseStorage.131" }
%"class.Eigen::DenseStorage.131" = type { i32*, i64 }
%"struct.Eigen::internal::evaluator.701" = type { %"struct.Eigen::internal::binary_evaluator.702" }
%"struct.Eigen::internal::binary_evaluator.702" = type { %"struct.Eigen::internal::scalar_product_op", %"struct.Eigen::internal::evaluator.704", %"struct.Eigen::internal::evaluator.612" }
%"struct.Eigen::internal::scalar_product_op" = type { i8 }
%"struct.Eigen::internal::evaluator.704" = type { %"struct.Eigen::internal::evaluator.705" }
%"struct.Eigen::internal::evaluator.705" = type { %"struct.Eigen::internal::product_evaluator.706" }
%"struct.Eigen::internal::product_evaluator.706" = type { %"struct.Eigen::internal::evaluator.base.595", %"class.Eigen::Matrix.170" }
%"struct.Eigen::internal::evaluator.base.595" = type { %"struct.Eigen::internal::evaluator.base.594" }
%"struct.Eigen::internal::evaluator.base.594" = type <{ i32*, %"class.Eigen::internal::variable_if_dynamic.484" }>
%"struct.Eigen::internal::evaluator.612" = type { %"struct.Eigen::internal::evaluator.base.616", [3 x i8] }
%"struct.Eigen::internal::evaluator.base.616" = type <{ %"struct.Eigen::internal::scalar_constant_op", %"struct.Eigen::internal::nullary_wrapper.615" }>
%"struct.Eigen::internal::scalar_constant_op" = type { i32 }
%"struct.Eigen::internal::nullary_wrapper.615" = type { i8 }
%"struct.Eigen::internal::evaluator.1227" = type { %"struct.Eigen::internal::product_evaluator.1228" }
%"struct.Eigen::internal::product_evaluator.1228" = type { %"class.Eigen::Transpose.346", %"class.Eigen::Transpose.354", %"struct.Eigen::internal::evaluator.1230", %"struct.Eigen::internal::evaluator.1233", i64 }
%"class.Eigen::Transpose.346" = type { %"class.Eigen::Matrix.185"* }
%"class.Eigen::Transpose.354" = type { %"class.Eigen::Matrix.77"* }
%"struct.Eigen::internal::evaluator.1230" = type { %"struct.Eigen::internal::unary_evaluator.1231" }
%"struct.Eigen::internal::unary_evaluator.1231" = type { [8 x i8], %"struct.Eigen::internal::evaluator.599" }
%"struct.Eigen::internal::evaluator.1233" = type { %"struct.Eigen::internal::unary_evaluator.1234" }
%"struct.Eigen::internal::unary_evaluator.1234" = type { [8 x i8], %"struct.Eigen::internal::evaluator.545" }
%"struct.Eigen::internal::evaluator.1236" = type { %"struct.Eigen::internal::evaluator.base.1239", [7 x i8] }
%"struct.Eigen::internal::evaluator.base.1239" = type <{ i32*, %"class.Eigen::internal::variable_if_dynamic.484" }>
%"class.Eigen::internal::generic_dense_assignment_kernel.1241" = type { %"struct.Eigen::internal::evaluator.1236"*, %"struct.Eigen::internal::evaluator.1227"*, %"struct.Eigen::internal::assign_op.512"*, %"class.Eigen::Matrix.1210"* }
%"class.Eigen::Matrix.1210" = type { %"class.Eigen::PlainObjectBase.1211" }
%"class.Eigen::PlainObjectBase.1211" = type { %"class.Eigen::DenseStorage.1218" }
%"class.Eigen::DenseStorage.1218" = type { %"struct.Eigen::internal::plain_array.1219" }
%"struct.Eigen::internal::plain_array.1219" = type { [47 x i32] }
%"struct.Eigen::internal::sub_assign_op" = type { i8 }
%"class.Eigen::Matrix.19" = type { %"class.Eigen::PlainObjectBase.20" }
%"class.Eigen::PlainObjectBase.20" = type { %"class.Eigen::DenseStorage.27" }
%"class.Eigen::DenseStorage.27" = type { i32*, i64, i64 }
%"class.Eigen::Matrix.32" = type { %"class.Eigen::PlainObjectBase.33" }
%"class.Eigen::PlainObjectBase.33" = type { %"class.Eigen::DenseStorage.40" }
%"class.Eigen::DenseStorage.40" = type { i32*, i64 }
%"class.Eigen::Matrix.48" = type { %"class.Eigen::PlainObjectBase.49" }
%"class.Eigen::PlainObjectBase.49" = type { %"class.Eigen::DenseStorage.56" }
%"class.Eigen::DenseStorage.56" = type { i32*, i64 }
%"class.Eigen::CwiseNullaryOp.118" = type { %"class.Eigen::internal::variable_if_dynamic.92", %"class.Eigen::internal::variable_if_dynamic.92", %"struct.Eigen::internal::scalar_random_op" }
%"class.Eigen::internal::variable_if_dynamic.92" = type { i8 }
%"struct.Eigen::internal::scalar_random_op" = type { i8 }
%"class.Eigen::CwiseBinaryOp.200" = type <{ %"class.Eigen::Product.206", %"class.Eigen::CwiseNullaryOp.213", %"struct.Eigen::internal::scalar_product_op", [7 x i8] }>
%"class.Eigen::Product.206" = type { %"class.Eigen::Matrix.123"*, %"class.Eigen::Matrix.185"* }
%"class.Eigen::CwiseNullaryOp.213" = type { %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic.168", %"struct.Eigen::internal::scalar_constant_op" }
%"class.Eigen::internal::variable_if_dynamic" = type { i64 }
%"class.Eigen::CwiseBinaryOp.220" = type <{ %"class.Eigen::Product.226", %"class.Eigen::CwiseNullaryOp.213", %"struct.Eigen::internal::scalar_product_op", [7 x i8] }>
%"class.Eigen::Product.226" = type { %"class.Eigen::Matrix.32"*, %"class.Eigen::Matrix.153"* }
%"class.Eigen::Product.234" = type { %"class.Eigen::Transpose", %"class.Eigen::Transpose.247" }
%"class.Eigen::Transpose" = type { %"class.Eigen::Matrix.153"* }
%"class.Eigen::Transpose.247" = type { %"class.Eigen::Matrix.32"* }
%"class.Eigen::Product.277" = type { %"class.Eigen::CwiseBinaryOp.284", %"class.Eigen::Transpose.296" }
%"class.Eigen::CwiseBinaryOp.284" = type <{ [4 x i8], %"class.Eigen::CwiseNullaryOp.290", [4 x i8], %"class.Eigen::Matrix.77"*, %"struct.Eigen::internal::scalar_product_op", [7 x i8] }>
%"class.Eigen::CwiseNullaryOp.290" = type { %"class.Eigen::internal::variable_if_dynamic.46", %"class.Eigen::internal::variable_if_dynamic.92", %"struct.Eigen::internal::scalar_constant_op" }
%"class.Eigen::Transpose.296" = type { %"class.Eigen::Matrix.123"* }
%"class.Eigen::Product.310" = type { %"class.Eigen::Product.317", %"class.Eigen::Transpose.296" }
%"class.Eigen::Product.317" = type { %"class.Eigen::Matrix.32"*, %"class.Eigen::Matrix.77"* }
%"class.Eigen::Product.324" = type { %"class.Eigen::Product.317", %"class.Eigen::Transpose.331" }
%"class.Eigen::Transpose.331" = type { %"class.Eigen::Matrix.123"* }
%"class.Eigen::Product.362" = type { %"class.Eigen::Transpose.346", %"class.Eigen::Transpose.331" }
%"class.Eigen::Product.369" = type { %"class.Eigen::CwiseBinaryOp.284", %"class.Eigen::Transpose.331" }
%"class.Eigen::Product.376" = type { %"class.Eigen::Product.383", %"class.Eigen::Matrix.77"* }
%"class.Eigen::Product.383" = type { %"class.Eigen::Transpose.331", %"class.Eigen::Matrix.32"* }
%"class.Eigen::Product.390" = type { %"class.Eigen::Product.397", %"class.Eigen::Matrix.77"* }
%"class.Eigen::Product.397" = type { %"class.Eigen::Transpose.296", %"class.Eigen::Matrix.32"* }
%"class.Eigen::Product.423" = type { %"class.Eigen::Product.430", %"class.Eigen::Matrix.32"* }
%"class.Eigen::Product.430" = type { %"class.Eigen::Matrix.77"*, %"class.Eigen::Transpose.296" }
%"class.Eigen::Product.437" = type { %"class.Eigen::Product.444", %"class.Eigen::Matrix.32"* }
%"class.Eigen::Product.444" = type { %"class.Eigen::Matrix.77"*, %"class.Eigen::Transpose.331" }
%"struct.Eigen::internal::GemmParallelInfo" = type opaque
%"class.Eigen::internal::const_blas_data_mapper" = type { %"class.Eigen::internal::blas_data_mapper" }
%"class.Eigen::internal::blas_data_mapper" = type { double*, i64 }
%"class.Eigen::internal::const_blas_data_mapper.498" = type { %"class.Eigen::internal::blas_data_mapper.499" }
%"class.Eigen::internal::blas_data_mapper.499" = type { double*, i64 }
%"class.Eigen::Product.619" = type { %"class.Eigen::Matrix.123"*, %"class.Eigen::Matrix.185"* }
%"struct.Eigen::internal::evaluator.606" = type { %"struct.Eigen::internal::binary_evaluator.607" }
%"struct.Eigen::internal::binary_evaluator.607" = type { %"struct.Eigen::internal::scalar_product_op", %"struct.Eigen::internal::evaluator.609", %"struct.Eigen::internal::evaluator.612" }
%"struct.Eigen::internal::evaluator.609" = type { %"struct.Eigen::internal::evaluator.610" }
%"struct.Eigen::internal::evaluator.610" = type { %"struct.Eigen::internal::product_evaluator.611" }
%"struct.Eigen::internal::product_evaluator.611" = type { %"struct.Eigen::internal::evaluator.base.595", %"class.Eigen::Matrix.170" }
%"class.Eigen::CwiseBinaryOp.652" = type <{ %"class.Eigen::Transpose.640", %"class.Eigen::Block.658", %"struct.Eigen::internal::scalar_product_op", [7 x i8] }>
%"class.Eigen::Transpose.640" = type { %"class.Eigen::Block.630" }
%"class.Eigen::Block.630" = type { %"class.Eigen::BlockImpl.631" }
%"class.Eigen::BlockImpl.631" = type { %"class.Eigen::internal::BlockImpl_dense.632" }
%"class.Eigen::internal::BlockImpl_dense.632" = type { %"class.Eigen::MapBase.base.639", %"class.Eigen::Matrix.123"*, %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic", i64 }
%"class.Eigen::MapBase.base.639" = type <{ i32*, %"class.Eigen::internal::variable_if_dynamic.168", %"class.Eigen::internal::variable_if_dynamic.92" }>
%"class.Eigen::Block.658" = type { %"class.Eigen::BlockImpl.659" }
%"class.Eigen::BlockImpl.659" = type { %"class.Eigen::internal::BlockImpl_dense.660" }
%"class.Eigen::internal::BlockImpl_dense.660" = type { %"class.Eigen::MapBase.base.662", %"class.Eigen::Matrix.185"*, %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic.484", i64 }
%"class.Eigen::MapBase.base.662" = type <{ i32*, %"class.Eigen::internal::variable_if_dynamic.92", %"class.Eigen::internal::variable_if_dynamic.168" }>
%"class.Eigen::DenseBase.126" = type { i8 }
%"class.Eigen::DenseBase.188" = type { i8 }
%"class.Eigen::DenseBase.655" = type { i8 }
%"class.Eigen::internal::const_blas_data_mapper.717" = type { %"class.Eigen::internal::blas_data_mapper.718" }
%"class.Eigen::internal::blas_data_mapper.718" = type { i32*, i64 }
%"class.Eigen::internal::const_blas_data_mapper.719" = type { %"class.Eigen::internal::blas_data_mapper.720" }
%"class.Eigen::internal::blas_data_mapper.720" = type { i32*, i64 }
%"struct.Eigen::internal::evaluator.584" = type <{ i32*, %"class.Eigen::internal::variable_if_dynamic.484", [7 x i8] }>
%"class.Eigen::Product.885" = type { %"class.Eigen::CwiseBinaryOp.284", %"class.Eigen::Transpose.296" }
%"class.Eigen::internal::gemm_blocking_space" = type { %"class.Eigen::internal::level3_blocking", i64, i64 }
%"struct.Eigen::internal::evaluator.892" = type { %"struct.Eigen::internal::product_evaluator.893" }
%"struct.Eigen::internal::product_evaluator.893" = type { %"class.Eigen::Matrix.77", %"class.Eigen::Transpose.296", %"struct.Eigen::internal::evaluator.545", %"struct.Eigen::internal::evaluator.895", i64 }
%"struct.Eigen::internal::evaluator.895" = type { %"struct.Eigen::internal::unary_evaluator.896" }
%"struct.Eigen::internal::unary_evaluator.896" = type { [8 x i8], %"struct.Eigen::internal::evaluator.898" }
%"struct.Eigen::internal::evaluator.898" = type { %"struct.Eigen::internal::evaluator.569" }
%"struct.Eigen::internal::evaluator.569" = type { %"struct.Eigen::internal::evaluator.570" }
%"struct.Eigen::internal::evaluator.570" = type { i32*, %"class.Eigen::internal::variable_if_dynamic" }
%"struct.Eigen::internal::evaluator.529" = type { %"struct.Eigen::internal::evaluator.base.532", [7 x i8] }
%"struct.Eigen::internal::evaluator.base.532" = type <{ i32*, %"class.Eigen::internal::variable_if_dynamic.46" }>
%"class.Eigen::internal::generic_dense_assignment_kernel.899" = type { %"struct.Eigen::internal::evaluator.529"*, %"struct.Eigen::internal::evaluator.892"*, %"struct.Eigen::internal::assign_op.512"*, %"class.Eigen::Matrix.48"* }
%"class.Eigen::CwiseBinaryOp.916" = type <{ %"class.Eigen::Transpose.854", %"class.Eigen::Block.922", %"struct.Eigen::internal::scalar_product_op", [7 x i8] }>
%"class.Eigen::Transpose.854" = type { %"class.Eigen::Block.844" }
%"class.Eigen::Block.844" = type { %"class.Eigen::BlockImpl.845" }
%"class.Eigen::BlockImpl.845" = type { %"class.Eigen::internal::BlockImpl_dense.846" }
%"class.Eigen::internal::BlockImpl_dense.846" = type { %"class.Eigen::MapBase.base.853", %"class.Eigen::Matrix.77"*, %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic", i64 }
%"class.Eigen::MapBase.base.853" = type <{ i32*, %"class.Eigen::internal::variable_if_dynamic.168", %"class.Eigen::internal::variable_if_dynamic.92" }>
%"class.Eigen::Block.922" = type { %"class.Eigen::BlockImpl.923" }
%"class.Eigen::BlockImpl.923" = type { %"class.Eigen::internal::BlockImpl_dense.924" }
%"class.Eigen::internal::BlockImpl_dense.924" = type { %"class.Eigen::MapBase.base.926", %"class.Eigen::Transpose.296", %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic", i64 }
%"class.Eigen::MapBase.base.926" = type <{ i32*, %"class.Eigen::internal::variable_if_dynamic.92", %"class.Eigen::internal::variable_if_dynamic.168" }>
%"class.Eigen::DenseBase.51" = type { i8 }
%"struct.Eigen::internal::evaluator.530" = type <{ i32*, %"class.Eigen::internal::variable_if_dynamic.46", [7 x i8] }>
%"class.Eigen::DenseBase.919" = type { i8 }
%"struct.Eigen::internal::gemm_pack_lhs" = type { i8 }
%"struct.Eigen::internal::gemm_pack_rhs" = type { i8 }
%"struct.Eigen::internal::gebp_kernel" = type { i8 }
%"class.Eigen::internal::blas_data_mapper.951" = type { i32*, i64 }
%"struct.Eigen::internal::evaluator.961" = type { %"struct.Eigen::internal::product_evaluator.962" }
%"struct.Eigen::internal::product_evaluator.962" = type { %"class.Eigen::Matrix.48"*, %"class.Eigen::Matrix.123"*, %"struct.Eigen::internal::evaluator.529", %"struct.Eigen::internal::evaluator.569", i64 }
%"class.Eigen::internal::generic_dense_assignment_kernel.964" = type { %"struct.Eigen::internal::evaluator.545"*, %"struct.Eigen::internal::evaluator.961"*, %"struct.Eigen::internal::assign_op.512"*, %"class.Eigen::Matrix.77"* }
%"struct.Eigen::internal::evaluator.1025" = type <{ %"struct.Eigen::internal::scalar_constant_op", %"struct.Eigen::internal::nullary_wrapper.615", [3 x i8] }>
%"class.Eigen::internal::generic_dense_assignment_kernel.1028" = type { %"struct.Eigen::internal::evaluator.545"*, %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::assign_op.512"*, %"class.Eigen::Matrix.77"* }
%"struct.Eigen::internal::evaluator.546" = type <{ i32*, %"class.Eigen::internal::variable_if_dynamic.46", [7 x i8] }>
%"class.Eigen::internal::gemm_blocking_space.1029" = type { %"class.Eigen::internal::level3_blocking", i64, i64 }
%"struct.Eigen::internal::gemm_pack_rhs.1031" = type { i8 }
%"class.Eigen::Matrix.1034" = type { %"class.Eigen::PlainObjectBase.1035" }
%"class.Eigen::PlainObjectBase.1035" = type { %"class.Eigen::DenseStorage.1042" }
%"class.Eigen::DenseStorage.1042" = type { i32*, i64, i64 }
%"class.Eigen::Product.1043" = type { %"class.Eigen::Product.317", %"class.Eigen::Transpose.296" }
%"class.Eigen::internal::gemm_blocking_space.1160" = type { %"class.Eigen::internal::level3_blocking", i64, i64 }
%"class.Eigen::CwiseBinaryOp.1139" = type <{ %"class.Eigen::Transpose.640", %"class.Eigen::Block.922", %"struct.Eigen::internal::scalar_product_op", [7 x i8] }>
%"struct.Eigen::internal::evaluator.1050" = type { %"struct.Eigen::internal::product_evaluator.1051" }
%"struct.Eigen::internal::product_evaluator.1051" = type { %"class.Eigen::Matrix.123", %"class.Eigen::Transpose.296", %"struct.Eigen::internal::evaluator.569", %"struct.Eigen::internal::evaluator.895", i64 }
%"class.Eigen::DenseBase.1142" = type { i8 }
%"class.Eigen::Product.1057" = type { %"class.Eigen::Matrix.32"*, %"class.Eigen::Matrix.77"* }
%"class.Eigen::CwiseNullaryOp.1128" = type { %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic.92", %"struct.Eigen::internal::scalar_constant_op" }
%"class.Eigen::internal::gemm_blocking_space.1137" = type { %"class.Eigen::internal::level3_blocking", i64, i64 }
%"struct.Eigen::internal::evaluator.1064" = type { %"struct.Eigen::internal::product_evaluator.1065" }
%"struct.Eigen::internal::product_evaluator.1065" = type { %"class.Eigen::Matrix.32"*, %"class.Eigen::Matrix.77"*, %"struct.Eigen::internal::evaluator.523", %"struct.Eigen::internal::evaluator.545", i64 }
%"struct.Eigen::internal::evaluator.523" = type { %"struct.Eigen::internal::evaluator.524" }
%"struct.Eigen::internal::evaluator.524" = type { i32*, %"class.Eigen::internal::variable_if_dynamic" }
%"class.Eigen::internal::generic_dense_assignment_kernel.1067" = type { %"struct.Eigen::internal::evaluator.569"*, %"struct.Eigen::internal::evaluator.1064"*, %"struct.Eigen::internal::assign_op.512"*, %"class.Eigen::Matrix.123"* }
%"class.Eigen::DenseBase.35" = type { i8 }
%"class.Eigen::Product.1164" = type { %"class.Eigen::Product.317", %"class.Eigen::Transpose.331" }
%"class.Eigen::CwiseBinaryOp.1183" = type <{ %"class.Eigen::Transpose.640", %"class.Eigen::Block.1189", %"struct.Eigen::internal::scalar_product_op", [7 x i8] }>
%"class.Eigen::Block.1189" = type { %"class.Eigen::BlockImpl.1190" }
%"class.Eigen::BlockImpl.1190" = type { %"class.Eigen::internal::BlockImpl_dense.1191" }
%"class.Eigen::internal::BlockImpl_dense.1191" = type { %"class.Eigen::MapBase.base.1193", %"class.Eigen::Transpose.331", %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic", i64 }
%"class.Eigen::MapBase.base.1193" = type <{ i32*, %"class.Eigen::internal::variable_if_dynamic.92", %"class.Eigen::internal::variable_if_dynamic.168" }>
%"struct.Eigen::internal::evaluator.1171" = type { %"struct.Eigen::internal::product_evaluator.1172" }
%"struct.Eigen::internal::product_evaluator.1172" = type { %"class.Eigen::Matrix.123", %"class.Eigen::Transpose.331", %"struct.Eigen::internal::evaluator.569", %"struct.Eigen::internal::evaluator.1174", i64 }
%"struct.Eigen::internal::evaluator.1174" = type { %"struct.Eigen::internal::unary_evaluator.1175" }
%"struct.Eigen::internal::unary_evaluator.1175" = type { [8 x i8], %"struct.Eigen::internal::evaluator.569" }
%"class.Eigen::DenseBase.1186" = type { i8 }
%"struct.Eigen::internal::evaluator.1237" = type <{ i32*, %"class.Eigen::internal::variable_if_dynamic.484", [7 x i8] }>
%"class.Eigen::Product.1306" = type { %"class.Eigen::Transpose.346", %"class.Eigen::Transpose.331" }
%"class.Eigen::CwiseBinaryOp.1317" = type <{ %"class.Eigen::Transpose.1252", %"class.Eigen::Block.1189", %"struct.Eigen::internal::scalar_product_op", [7 x i8] }>
%"class.Eigen::Transpose.1252" = type { %"class.Eigen::Block.1242" }
%"class.Eigen::Block.1242" = type { %"class.Eigen::BlockImpl.1243" }
%"class.Eigen::BlockImpl.1243" = type { %"class.Eigen::internal::BlockImpl_dense.1244" }
%"class.Eigen::internal::BlockImpl_dense.1244" = type { %"class.Eigen::MapBase.base.1251", %"class.Eigen::Transpose.346", %"class.Eigen::internal::variable_if_dynamic.484", %"class.Eigen::internal::variable_if_dynamic", i64 }
%"class.Eigen::MapBase.base.1251" = type <{ i32*, %"class.Eigen::internal::variable_if_dynamic.168", %"class.Eigen::internal::variable_if_dynamic.92" }>
%"class.Eigen::DenseBase.1320" = type { i8 }
%"class.Eigen::Product.1342" = type { %"class.Eigen::CwiseBinaryOp.284", %"class.Eigen::Transpose.331" }
%"struct.Eigen::internal::evaluator.1349" = type { %"struct.Eigen::internal::product_evaluator.1350" }
%"struct.Eigen::internal::product_evaluator.1350" = type { %"class.Eigen::Matrix.77", %"class.Eigen::Transpose.331", %"struct.Eigen::internal::evaluator.545", %"struct.Eigen::internal::evaluator.1174", i64 }
%"class.Eigen::internal::generic_dense_assignment_kernel.1352" = type { %"struct.Eigen::internal::evaluator.529"*, %"struct.Eigen::internal::evaluator.1349"*, %"struct.Eigen::internal::assign_op.512"*, %"class.Eigen::Matrix.48"* }
%"class.Eigen::CwiseBinaryOp.1353" = type <{ %"class.Eigen::Transpose.854", %"class.Eigen::Block.1189", %"struct.Eigen::internal::scalar_product_op", [7 x i8] }>
%"class.Eigen::DenseBase.1356" = type { i8 }
%"struct.Eigen::internal::evaluator.1384" = type { %"struct.Eigen::internal::product_evaluator.1385" }
%"struct.Eigen::internal::product_evaluator.1385" = type { %"class.Eigen::Transpose.331", %"class.Eigen::Matrix.32"*, %"struct.Eigen::internal::evaluator.1174", %"struct.Eigen::internal::evaluator.523", i64 }
%"struct.Eigen::internal::evaluator.553" = type { %"struct.Eigen::internal::evaluator.base.556", [7 x i8] }
%"struct.Eigen::internal::evaluator.base.556" = type <{ i32*, %"class.Eigen::internal::variable_if_dynamic.92" }>
%"class.Eigen::internal::generic_dense_assignment_kernel.1387" = type { %"struct.Eigen::internal::evaluator.553"*, %"struct.Eigen::internal::evaluator.1384"*, %"struct.Eigen::internal::assign_op.512"*, %"class.Eigen::Matrix.94"* }
%"struct.Eigen::internal::evaluator.1444" = type <{ %"struct.Eigen::internal::scalar_constant_op", %"struct.Eigen::internal::nullary_wrapper.615", [3 x i8] }>
%"class.Eigen::internal::generic_dense_assignment_kernel.1447" = type { %"struct.Eigen::internal::evaluator.553"*, %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::assign_op.512"*, %"class.Eigen::Matrix.94"* }
%"struct.Eigen::internal::evaluator.554" = type <{ i32*, %"class.Eigen::internal::variable_if_dynamic.92", [7 x i8] }>
%"class.Eigen::internal::gemm_blocking_space.1448" = type { %"class.Eigen::internal::level3_blocking", i64, i64 }
%"struct.Eigen::internal::gemm_pack_lhs.1450" = type { i8 }
%"struct.Eigen::internal::evaluator.1526" = type { %"struct.Eigen::internal::product_evaluator.1527" }
%"struct.Eigen::internal::product_evaluator.1527" = type { %"class.Eigen::Transpose.296", %"class.Eigen::Matrix.32"*, %"struct.Eigen::internal::evaluator.895", %"struct.Eigen::internal::evaluator.523", i64 }
%"class.Eigen::internal::generic_dense_assignment_kernel.1529" = type { %"struct.Eigen::internal::evaluator.553"*, %"struct.Eigen::internal::evaluator.1526"*, %"struct.Eigen::internal::assign_op.512"*, %"class.Eigen::Matrix.94"* }
%"class.Eigen::Product.1582" = type { %"class.Eigen::Product.430", %"class.Eigen::Matrix.32"* }
%"class.Eigen::DenseBase.66" = type { i8 }
%"class.Eigen::internal::gemm_blocking_space.1624" = type { %"class.Eigen::internal::level3_blocking", i64, i64 }
%"class.Eigen::DenseBase.434" = type { i8 }
%"struct.Eigen::internal::evaluator.1589" = type { %"struct.Eigen::internal::product_evaluator.1590" }
%"struct.Eigen::internal::product_evaluator.1590" = type { %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.32"*, %"struct.Eigen::internal::evaluator.529", %"struct.Eigen::internal::evaluator.523", i64 }
%"struct.Eigen::internal::evaluator.537" = type { %"struct.Eigen::internal::evaluator.base.540", [7 x i8] }
%"struct.Eigen::internal::evaluator.base.540" = type <{ i32*, %"class.Eigen::internal::variable_if_dynamic.46" }>
%"class.Eigen::internal::generic_dense_assignment_kernel.1592" = type { %"struct.Eigen::internal::evaluator.537"*, %"struct.Eigen::internal::evaluator.1589"*, %"struct.Eigen::internal::assign_op.512"*, %"class.Eigen::Matrix.63"* }
%"struct.Eigen::internal::evaluator.538" = type <{ i32*, %"class.Eigen::internal::variable_if_dynamic.46", [7 x i8] }>
%"class.Eigen::Product.1593" = type { %"class.Eigen::Matrix.77"*, %"class.Eigen::Transpose.296" }
%"struct.Eigen::internal::evaluator.1600" = type { %"struct.Eigen::internal::product_evaluator.1601" }
%"struct.Eigen::internal::product_evaluator.1601" = type { %"class.Eigen::Matrix.77"*, %"class.Eigen::Transpose.296", %"struct.Eigen::internal::evaluator.545", %"struct.Eigen::internal::evaluator.895", i64 }
%"class.Eigen::internal::generic_dense_assignment_kernel.1603" = type { %"struct.Eigen::internal::evaluator.529"*, %"struct.Eigen::internal::evaluator.1600"*, %"struct.Eigen::internal::assign_op.512"*, %"class.Eigen::Matrix.48"* }
%"class.Eigen::DenseBase.80" = type { i8 }
%"class.Eigen::Product.1627" = type { %"class.Eigen::Product.444", %"class.Eigen::Matrix.32"* }
%"class.Eigen::DenseBase.448" = type { i8 }
%"struct.Eigen::internal::evaluator.1634" = type { %"struct.Eigen::internal::product_evaluator.1635" }
%"struct.Eigen::internal::product_evaluator.1635" = type { %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.32"*, %"struct.Eigen::internal::evaluator.529", %"struct.Eigen::internal::evaluator.523", i64 }
%"class.Eigen::internal::generic_dense_assignment_kernel.1637" = type { %"struct.Eigen::internal::evaluator.537"*, %"struct.Eigen::internal::evaluator.1634"*, %"struct.Eigen::internal::assign_op.512"*, %"class.Eigen::Matrix.63"* }
%"class.Eigen::Product.1638" = type { %"class.Eigen::Matrix.77"*, %"class.Eigen::Transpose.331" }
%"struct.Eigen::internal::evaluator.1645" = type { %"struct.Eigen::internal::product_evaluator.1646" }
%"struct.Eigen::internal::product_evaluator.1646" = type { %"class.Eigen::Matrix.77"*, %"class.Eigen::Transpose.331", %"struct.Eigen::internal::evaluator.545", %"struct.Eigen::internal::evaluator.1174", i64 }
%"class.Eigen::internal::generic_dense_assignment_kernel.1648" = type { %"struct.Eigen::internal::evaluator.529"*, %"struct.Eigen::internal::evaluator.1645"*, %"struct.Eigen::internal::assign_op.512"*, %"class.Eigen::Matrix.48"* }

@__func__._ZN5Eigen7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS1_IdLin1ELi1ELi0ELin1ELi1EEELi0EEC2ERKS2_RKS3_ = private unnamed_addr constant [8 x i8] c"Product\00", align 1
@.str.1 = private unnamed_addr constant [70 x i8] c"/usr/local/Cellar/eigen/3.3.4/include/eigen3/Eigen/src/Core/Product.h\00", align 1
@.str.2 = private unnamed_addr constant [140 x i8] c"lhs.cols() == rhs.rows() && \22invalid matrix product\22 && \22if you wanted a coeff-wise or a dot product use the respective explicit functions\22\00", align 1
@__func__._ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIddEEKNS_7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS5_IdLin1ELi1ELi0ELin1ELi1EEELi0EEEKS7_EC2ERS9_RSA_RKS3_ = private unnamed_addr constant [14 x i8] c"CwiseBinaryOp\00", align 1
@.str.3 = private unnamed_addr constant [76 x i8] c"/usr/local/Cellar/eigen/3.3.4/include/eigen3/Eigen/src/Core/CwiseBinaryOp.h\00", align 1
@.str.4 = private unnamed_addr constant [57 x i8] c"aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols()\00", align 1
@__func__._ZNK5Eigen9DenseBaseINS_12CwiseUnaryOpINS_8internal14scalar_abs2_opIdEEKNS_13CwiseBinaryOpINS2_20scalar_difference_opIddEEKNS_7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS9_IdLin1ELi1ELi0ELin1ELi1EEELi0EEEKSB_EEEEE5reduxINS2_13scalar_sum_opIddEEEEdRKT_ = private unnamed_addr constant [6 x i8] c"redux\00", align 1
@.str.6 = private unnamed_addr constant [68 x i8] c"/usr/local/Cellar/eigen/3.3.4/include/eigen3/Eigen/src/Core/Redux.h\00", align 1
@.str.7 = private unnamed_addr constant [68 x i8] c"this->rows()>0 && this->cols()>0 && \22you are using an empty matrix\22\00", align 1
@__func__._ZN5Eigen8internal19variable_if_dynamicIlLi0EEC2El = private unnamed_addr constant [20 x i8] c"variable_if_dynamic\00", align 1
@.str.8 = private unnamed_addr constant [77 x i8] c"/usr/local/Cellar/eigen/3.3.4/include/eigen3/Eigen/src/Core/util/XprHelper.h\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"v == T(Value)\00", align 1
@__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll = private unnamed_addr constant [7 x i8] c"resize\00", align 1
@.str.11 = private unnamed_addr constant [78 x i8] c"/usr/local/Cellar/eigen/3.3.4/include/eigen3/Eigen/src/Core/PlainObjectBase.h\00", align 1
@.str.12 = private unnamed_addr constant [399 x i8] c"(!(RowsAtCompileTime!=Dynamic) || (rows==RowsAtCompileTime)) && (!(ColsAtCompileTime!=Dynamic) || (cols==ColsAtCompileTime)) && (!(RowsAtCompileTime==Dynamic && MaxRowsAtCompileTime!=Dynamic) || (rows<=MaxRowsAtCompileTime)) && (!(ColsAtCompileTime==Dynamic && MaxColsAtCompileTime!=Dynamic) || (cols<=MaxColsAtCompileTime)) && rows>=0 && cols>=0 && \22Invalid sizes when resizing a matrix or array.\22\00", align 1
@__func__._ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEENS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEC2EllRKS3_ = private unnamed_addr constant [15 x i8] c"CwiseNullaryOp\00", align 1
@.str.13 = private unnamed_addr constant [77 x i8] c"/usr/local/Cellar/eigen/3.3.4/include/eigen3/Eigen/src/Core/CwiseNullaryOp.h\00", align 1
@.str.14 = private unnamed_addr constant [149 x i8] c"rows >= 0 && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows) && cols >= 0 && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols)\00", align 1
@__func__._ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEENS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES3_EEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE = private unnamed_addr constant [18 x i8] c"resize_if_allowed\00", align 1
@.str.15 = private unnamed_addr constant [78 x i8] c"/usr/local/Cellar/eigen/3.3.4/include/eigen3/Eigen/src/Core/AssignEvaluator.h\00", align 1
@.str.16 = private unnamed_addr constant [47 x i8] c"dst.rows() == dstRows && dst.cols() == dstCols\00", align 1
@__func__._ZN5Eigen8internal10redux_implINS0_17scalar_product_opIiiEENS0_15redux_evaluatorINS_6MatrixIiLi6ELi1ELi0ELi6ELi1EEEEELi3ELi2EE3runERKS7_RKS3_ = private unnamed_addr constant [4 x i8] c"run\00", align 1
@__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l = private unnamed_addr constant [6 x i8] c"Block\00", align 1
@.str.22 = private unnamed_addr constant [68 x i8] c"/usr/local/Cellar/eigen/3.3.4/include/eigen3/Eigen/src/Core/Block.h\00", align 1
@.str.23 = private unnamed_addr constant [167 x i8] c"(i>=0) && ( ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && i<xpr.rows()) ||((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && i<xpr.cols()))\00", align 1
@__func__._ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEELi0EEC2EPKill = private unnamed_addr constant [8 x i8] c"MapBase\00", align 1
@.str.24 = private unnamed_addr constant [70 x i8] c"/usr/local/Cellar/eigen/3.3.4/include/eigen3/Eigen/src/Core/MapBase.h\00", align 1
@.str.25 = private unnamed_addr constant [170 x i8] c"(dataPtr == 0) || ( rows >= 0 && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows) && cols >= 0 && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols))\00", align 1
@.str.29 = private unnamed_addr constant [53 x i8] c"dst.rows() == src.rows() && dst.cols() == src.cols()\00", align 1
@.str.31 = private unnamed_addr constant [72 x i8] c"/usr/local/Cellar/eigen/3.3.4/include/eigen3/Eigen/src/Core/Transpose.h\00", align 1
@.str.32 = private unnamed_addr constant [275 x i8] c"(!check_transpose_aliasing_run_time_selector <typename Derived::Scalar,blas_traits<Derived>::IsTransposed,OtherDerived> ::run(extract_data(dst), other)) && \22aliasing detected during transposition, use transposeInPlace() \22 \22or evaluate the rhs into a temporary using .eval()\22\00", align 1
@__func__._ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EENS_9TransposeIKNS8_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeESI_Li8EE13scaleAndAddToINS8_IiLi47ELin1ELi0ELi47ELin1EEEEEvRT_RKSD_RKSH_RKi = private unnamed_addr constant [14 x i8] c"scaleAndAddTo\00", align 1
@.str.33 = private unnamed_addr constant [91 x i8] c"/usr/local/Cellar/eigen/3.3.4/include/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h\00", align 1
@.str.34 = private unnamed_addr constant [53 x i8] c"dst.rows()==a_lhs.rows() && dst.cols()==a_rhs.cols()\00", align 1
@_ZZN5Eigen8internal20manage_caching_sizesENS_6ActionEPlS2_S2_E12m_cacheSizes = linkonce_odr global %"struct.Eigen::internal::CacheSizes" zeroinitializer, align 8
@_ZGVZN5Eigen8internal20manage_caching_sizesENS_6ActionEPlS2_S2_E12m_cacheSizes = linkonce_odr global i64 0, align 8
@__func__._ZN5Eigen8internal13gemm_pack_lhsIilNS0_22const_blas_data_mapperIilLi0EEELi12ELi4ELi0ELb0ELb0EEclEPiRKS3_llll = private unnamed_addr constant [11 x i8] c"operator()\00", align 1
@.str.35 = private unnamed_addr constant [95 x i8] c"/usr/local/Cellar/eigen/3.3.4/include/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h\00", align 1
@.str.36 = private unnamed_addr constant [91 x i8] c"((!PanelMode) && stride==0 && offset==0) || (PanelMode && stride>=depth && offset<=stride)\00", align 1

; Function Attrs: nounwind ssp uwtable
define i32 @_Z6relerrRKN5Eigen6MatrixIdLin1ELin1ELi0ELin1ELin1EEERKNS0_IdLin1ELi1ELi0ELin1ELi1EEES6_(%"class.Eigen::Matrix"* dereferenceable(24), %"class.Eigen::Matrix.2"* dereferenceable(16), %"class.Eigen::Matrix.2"* dereferenceable(16)) local_unnamed_addr #0 {
  %4 = alloca %"class.Eigen::CwiseBinaryOp", align 8
  %5 = getelementptr inbounds %"class.Eigen::Matrix", %"class.Eigen::Matrix"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i64, i64* %5, align 8, !tbaa !2
  %7 = getelementptr inbounds %"class.Eigen::Matrix.2", %"class.Eigen::Matrix.2"* %1, i64 0, i32 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8, !tbaa !8
  %9 = icmp eq i64 %6, %8
  br i1 %9, label %11, label %10, !prof !10

; <label>:10:                                     ; preds = %3
  tail call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS1_IdLin1ELi1ELi0ELin1ELi1EEELi0EEC2ERKS2_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 97, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2, i64 0, i64 0)) #13
  unreachable

; <label>:11:                                     ; preds = %3
  %12 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp", %"class.Eigen::CwiseBinaryOp"* %4, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix"* %0, %"class.Eigen::Matrix"** %12, align 8
  %13 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp", %"class.Eigen::CwiseBinaryOp"* %4, i64 0, i32 0, i32 1
  store %"class.Eigen::Matrix.2"* %1, %"class.Eigen::Matrix.2"** %13, align 8
  %14 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp", %"class.Eigen::CwiseBinaryOp"* %4, i64 0, i32 1
  store %"class.Eigen::Matrix.2"* %2, %"class.Eigen::Matrix.2"** %14, align 8, !tbaa !11, !alias.scope !12
  %15 = getelementptr inbounds %"class.Eigen::Matrix", %"class.Eigen::Matrix"* %0, i64 0, i32 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8, !tbaa !15, !noalias !12
  %17 = getelementptr inbounds %"class.Eigen::Matrix.2", %"class.Eigen::Matrix.2"* %2, i64 0, i32 0, i32 0, i32 1
  %18 = load i64, i64* %17, align 8, !tbaa !8, !noalias !12
  %19 = icmp eq i64 %16, %18
  br i1 %19, label %21, label %20

; <label>:20:                                     ; preds = %11
  tail call void @__assert_rtn(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__func__._ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIddEEKNS_7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS5_IdLin1ELi1ELi0ELin1ELi1EEELi0EEEKS7_EC2ERS9_RSA_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.3, i64 0, i64 0), i32 110, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.4, i64 0, i64 0)) #13, !noalias !12
  unreachable

; <label>:21:                                     ; preds = %11
  %22 = bitcast %"class.Eigen::CwiseBinaryOp"* %4 to %"class.Eigen::MatrixBase.15"*
  %23 = call double @_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIddEEKNS_7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS6_IdLin1ELi1ELi0ELin1ELi1EEELi0EEEKS8_EEE4normEv(%"class.Eigen::MatrixBase.15"* nonnull %22)
  %24 = load i64, i64* %17, align 8, !tbaa !8
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %309, label %26

; <label>:26:                                     ; preds = %21
  %27 = icmp sgt i64 %24, 0
  br i1 %27, label %29, label %28

; <label>:28:                                     ; preds = %26
  call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZNK5Eigen9DenseBaseINS_12CwiseUnaryOpINS_8internal14scalar_abs2_opIdEEKNS_13CwiseBinaryOpINS2_20scalar_difference_opIddEEKNS_7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS9_IdLin1ELi1ELi0ELin1ELi1EEELi0EEEKSB_EEEEE5reduxINS2_13scalar_sum_opIddEEEEdRKT_, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.6, i64 0, i64 0), i32 413, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.7, i64 0, i64 0)) #13
  unreachable

; <label>:29:                                     ; preds = %26
  %30 = getelementptr inbounds %"class.Eigen::Matrix.2", %"class.Eigen::Matrix.2"* %2, i64 0, i32 0, i32 0, i32 0
  %31 = load double*, double** %30, align 8, !tbaa !16
  %32 = and i64 %24, -8
  %33 = and i64 %24, -4
  %34 = add i64 %24, 3
  %35 = icmp ugt i64 %34, 6
  br i1 %35, label %36, label %231

; <label>:36:                                     ; preds = %29
  %37 = bitcast double* %31 to <4 x double>*
  %38 = load <4 x double>, <4 x double>* %37, align 16, !tbaa !11
  %39 = fmul <4 x double> %38, %38
  %40 = icmp sgt i64 %33, 4
  br i1 %40, label %41, label %153

; <label>:41:                                     ; preds = %36
  %42 = getelementptr inbounds double, double* %31, i64 4
  %43 = bitcast double* %42 to <4 x double>*
  %44 = load <4 x double>, <4 x double>* %43, align 16, !tbaa !11
  %45 = fmul <4 x double> %44, %44
  %46 = icmp sgt i64 %32, 8
  br i1 %46, label %47, label %88

; <label>:47:                                     ; preds = %41
  %48 = add i64 %32, -9
  %49 = lshr i64 %48, 3
  %50 = add nuw nsw i64 %49, 1
  %51 = and i64 %50, 3
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %75, label %53

; <label>:53:                                     ; preds = %47
  br label %54

; <label>:54:                                     ; preds = %54, %53
  %55 = phi i64 [ %71, %54 ], [ 8, %53 ]
  %56 = phi i64 [ %55, %54 ], [ 0, %53 ]
  %57 = phi <4 x double> [ %64, %54 ], [ %39, %53 ]
  %58 = phi <4 x double> [ %70, %54 ], [ %45, %53 ]
  %59 = phi i64 [ %72, %54 ], [ %51, %53 ]
  %60 = getelementptr inbounds double, double* %31, i64 %55
  %61 = bitcast double* %60 to <4 x double>*
  %62 = load <4 x double>, <4 x double>* %61, align 16, !tbaa !11
  %63 = fmul <4 x double> %62, %62
  %64 = fadd <4 x double> %57, %63
  %65 = add nuw nsw i64 %56, 12
  %66 = getelementptr inbounds double, double* %31, i64 %65
  %67 = bitcast double* %66 to <4 x double>*
  %68 = load <4 x double>, <4 x double>* %67, align 16, !tbaa !11
  %69 = fmul <4 x double> %68, %68
  %70 = fadd <4 x double> %58, %69
  %71 = add nuw nsw i64 %55, 8
  %72 = add i64 %59, -1
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %54, !llvm.loop !17

; <label>:74:                                     ; preds = %54
  br label %75

; <label>:75:                                     ; preds = %47, %74
  %76 = phi i64 [ 8, %47 ], [ %71, %74 ]
  %77 = phi i64 [ 0, %47 ], [ %55, %74 ]
  %78 = phi <4 x double> [ %39, %47 ], [ %64, %74 ]
  %79 = phi <4 x double> [ %45, %47 ], [ %70, %74 ]
  %80 = phi <4 x double> [ undef, %47 ], [ %64, %74 ]
  %81 = phi <4 x double> [ undef, %47 ], [ %70, %74 ]
  %82 = icmp ult i64 %48, 24
  br i1 %82, label %85, label %83

; <label>:83:                                     ; preds = %75
  br label %93

; <label>:84:                                     ; preds = %93
  br label %85

; <label>:85:                                     ; preds = %75, %84
  %86 = phi <4 x double> [ %80, %75 ], [ %138, %84 ]
  %87 = phi <4 x double> [ %81, %75 ], [ %144, %84 ]
  br label %88

; <label>:88:                                     ; preds = %85, %41
  %89 = phi <4 x double> [ %45, %41 ], [ %87, %85 ]
  %90 = phi <4 x double> [ %39, %41 ], [ %86, %85 ]
  %91 = fadd <4 x double> %89, %90
  %92 = icmp sgt i64 %33, %32
  br i1 %92, label %147, label %153

; <label>:93:                                     ; preds = %93, %83
  %94 = phi i64 [ %76, %83 ], [ %145, %93 ]
  %95 = phi i64 [ %77, %83 ], [ %133, %93 ]
  %96 = phi <4 x double> [ %78, %83 ], [ %138, %93 ]
  %97 = phi <4 x double> [ %79, %83 ], [ %144, %93 ]
  %98 = getelementptr inbounds double, double* %31, i64 %94
  %99 = bitcast double* %98 to <4 x double>*
  %100 = load <4 x double>, <4 x double>* %99, align 16, !tbaa !11
  %101 = fmul <4 x double> %100, %100
  %102 = fadd <4 x double> %96, %101
  %103 = add nuw nsw i64 %95, 12
  %104 = getelementptr inbounds double, double* %31, i64 %103
  %105 = bitcast double* %104 to <4 x double>*
  %106 = load <4 x double>, <4 x double>* %105, align 16, !tbaa !11
  %107 = fmul <4 x double> %106, %106
  %108 = fadd <4 x double> %97, %107
  %109 = add nuw nsw i64 %94, 8
  %110 = getelementptr inbounds double, double* %31, i64 %109
  %111 = bitcast double* %110 to <4 x double>*
  %112 = load <4 x double>, <4 x double>* %111, align 16, !tbaa !11
  %113 = fmul <4 x double> %112, %112
  %114 = fadd <4 x double> %102, %113
  %115 = add nuw nsw i64 %94, 12
  %116 = getelementptr inbounds double, double* %31, i64 %115
  %117 = bitcast double* %116 to <4 x double>*
  %118 = load <4 x double>, <4 x double>* %117, align 16, !tbaa !11
  %119 = fmul <4 x double> %118, %118
  %120 = fadd <4 x double> %108, %119
  %121 = add nsw i64 %94, 16
  %122 = getelementptr inbounds double, double* %31, i64 %121
  %123 = bitcast double* %122 to <4 x double>*
  %124 = load <4 x double>, <4 x double>* %123, align 16, !tbaa !11
  %125 = fmul <4 x double> %124, %124
  %126 = fadd <4 x double> %114, %125
  %127 = add nsw i64 %94, 20
  %128 = getelementptr inbounds double, double* %31, i64 %127
  %129 = bitcast double* %128 to <4 x double>*
  %130 = load <4 x double>, <4 x double>* %129, align 16, !tbaa !11
  %131 = fmul <4 x double> %130, %130
  %132 = fadd <4 x double> %120, %131
  %133 = add nsw i64 %94, 24
  %134 = getelementptr inbounds double, double* %31, i64 %133
  %135 = bitcast double* %134 to <4 x double>*
  %136 = load <4 x double>, <4 x double>* %135, align 16, !tbaa !11
  %137 = fmul <4 x double> %136, %136
  %138 = fadd <4 x double> %126, %137
  %139 = add nsw i64 %94, 28
  %140 = getelementptr inbounds double, double* %31, i64 %139
  %141 = bitcast double* %140 to <4 x double>*
  %142 = load <4 x double>, <4 x double>* %141, align 16, !tbaa !11
  %143 = fmul <4 x double> %142, %142
  %144 = fadd <4 x double> %132, %143
  %145 = add nsw i64 %94, 32
  %146 = icmp slt i64 %145, %32
  br i1 %146, label %93, label %84

; <label>:147:                                    ; preds = %88
  %148 = getelementptr inbounds double, double* %31, i64 %32
  %149 = bitcast double* %148 to <4 x double>*
  %150 = load <4 x double>, <4 x double>* %149, align 16, !tbaa !11
  %151 = fmul <4 x double> %150, %150
  %152 = fadd <4 x double> %91, %151
  br label %153

; <label>:153:                                    ; preds = %147, %88, %36
  %154 = phi <4 x double> [ %39, %36 ], [ %152, %147 ], [ %91, %88 ]
  %155 = shufflevector <4 x double> %154, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %156 = shufflevector <4 x double> %154, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %157 = fadd <2 x double> %155, %156
  %158 = extractelement <2 x double> %157, i32 1
  %159 = extractelement <2 x double> %157, i32 0
  %160 = fadd double %159, %158
  %161 = icmp sgt i64 %24, %33
  br i1 %161, label %162, label %309

; <label>:162:                                    ; preds = %153
  %163 = sub i64 %24, %33
  %164 = add i64 %24, -1
  %165 = sub i64 %164, %33
  %166 = and i64 %163, 7
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %181, label %168

; <label>:168:                                    ; preds = %162
  br label %169

; <label>:169:                                    ; preds = %169, %168
  %170 = phi i64 [ %177, %169 ], [ %33, %168 ]
  %171 = phi double [ %176, %169 ], [ %160, %168 ]
  %172 = phi i64 [ %178, %169 ], [ %166, %168 ]
  %173 = getelementptr inbounds double, double* %31, i64 %170
  %174 = load double, double* %173, align 8, !tbaa !19
  %175 = fmul double %174, %174
  %176 = fadd double %171, %175
  %177 = add nsw i64 %170, 1
  %178 = add i64 %172, -1
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %180, label %169, !llvm.loop !21

; <label>:180:                                    ; preds = %169
  br label %181

; <label>:181:                                    ; preds = %162, %180
  %182 = phi double [ undef, %162 ], [ %176, %180 ]
  %183 = phi i64 [ %33, %162 ], [ %177, %180 ]
  %184 = phi double [ %160, %162 ], [ %176, %180 ]
  %185 = icmp ult i64 %165, 7
  br i1 %185, label %304, label %186

; <label>:186:                                    ; preds = %181
  br label %187

; <label>:187:                                    ; preds = %187, %186
  %188 = phi i64 [ %183, %186 ], [ %229, %187 ]
  %189 = phi double [ %184, %186 ], [ %228, %187 ]
  %190 = getelementptr inbounds double, double* %31, i64 %188
  %191 = load double, double* %190, align 8, !tbaa !19
  %192 = fmul double %191, %191
  %193 = fadd double %189, %192
  %194 = add nsw i64 %188, 1
  %195 = getelementptr inbounds double, double* %31, i64 %194
  %196 = load double, double* %195, align 8, !tbaa !19
  %197 = fmul double %196, %196
  %198 = fadd double %193, %197
  %199 = add nsw i64 %188, 2
  %200 = getelementptr inbounds double, double* %31, i64 %199
  %201 = load double, double* %200, align 8, !tbaa !19
  %202 = fmul double %201, %201
  %203 = fadd double %198, %202
  %204 = add nsw i64 %188, 3
  %205 = getelementptr inbounds double, double* %31, i64 %204
  %206 = load double, double* %205, align 8, !tbaa !19
  %207 = fmul double %206, %206
  %208 = fadd double %203, %207
  %209 = add nsw i64 %188, 4
  %210 = getelementptr inbounds double, double* %31, i64 %209
  %211 = load double, double* %210, align 8, !tbaa !19
  %212 = fmul double %211, %211
  %213 = fadd double %208, %212
  %214 = add nsw i64 %188, 5
  %215 = getelementptr inbounds double, double* %31, i64 %214
  %216 = load double, double* %215, align 8, !tbaa !19
  %217 = fmul double %216, %216
  %218 = fadd double %213, %217
  %219 = add nsw i64 %188, 6
  %220 = getelementptr inbounds double, double* %31, i64 %219
  %221 = load double, double* %220, align 8, !tbaa !19
  %222 = fmul double %221, %221
  %223 = fadd double %218, %222
  %224 = add nsw i64 %188, 7
  %225 = getelementptr inbounds double, double* %31, i64 %224
  %226 = load double, double* %225, align 8, !tbaa !19
  %227 = fmul double %226, %226
  %228 = fadd double %223, %227
  %229 = add nsw i64 %188, 8
  %230 = icmp eq i64 %229, %24
  br i1 %230, label %303, label %187

; <label>:231:                                    ; preds = %29
  %232 = load double, double* %31, align 8, !tbaa !19
  %233 = fmul double %232, %232
  %234 = icmp sgt i64 %24, 1
  br i1 %234, label %235, label %309

; <label>:235:                                    ; preds = %231
  %236 = add i64 %24, 7
  %237 = add i64 %24, -2
  %238 = and i64 %236, 7
  %239 = icmp eq i64 %238, 0
  br i1 %239, label %253, label %240

; <label>:240:                                    ; preds = %235
  br label %241

; <label>:241:                                    ; preds = %241, %240
  %242 = phi i64 [ %249, %241 ], [ 1, %240 ]
  %243 = phi double [ %248, %241 ], [ %233, %240 ]
  %244 = phi i64 [ %250, %241 ], [ %238, %240 ]
  %245 = getelementptr inbounds double, double* %31, i64 %242
  %246 = load double, double* %245, align 8, !tbaa !19
  %247 = fmul double %246, %246
  %248 = fadd double %243, %247
  %249 = add nuw nsw i64 %242, 1
  %250 = add i64 %244, -1
  %251 = icmp eq i64 %250, 0
  br i1 %251, label %252, label %241, !llvm.loop !22

; <label>:252:                                    ; preds = %241
  br label %253

; <label>:253:                                    ; preds = %235, %252
  %254 = phi double [ undef, %235 ], [ %248, %252 ]
  %255 = phi i64 [ 1, %235 ], [ %249, %252 ]
  %256 = phi double [ %233, %235 ], [ %248, %252 ]
  %257 = icmp ult i64 %237, 7
  br i1 %257, label %307, label %258

; <label>:258:                                    ; preds = %253
  br label %259

; <label>:259:                                    ; preds = %259, %258
  %260 = phi i64 [ %255, %258 ], [ %301, %259 ]
  %261 = phi double [ %256, %258 ], [ %300, %259 ]
  %262 = getelementptr inbounds double, double* %31, i64 %260
  %263 = load double, double* %262, align 8, !tbaa !19
  %264 = fmul double %263, %263
  %265 = fadd double %261, %264
  %266 = add nuw nsw i64 %260, 1
  %267 = getelementptr inbounds double, double* %31, i64 %266
  %268 = load double, double* %267, align 8, !tbaa !19
  %269 = fmul double %268, %268
  %270 = fadd double %265, %269
  %271 = add nsw i64 %260, 2
  %272 = getelementptr inbounds double, double* %31, i64 %271
  %273 = load double, double* %272, align 8, !tbaa !19
  %274 = fmul double %273, %273
  %275 = fadd double %270, %274
  %276 = add nsw i64 %260, 3
  %277 = getelementptr inbounds double, double* %31, i64 %276
  %278 = load double, double* %277, align 8, !tbaa !19
  %279 = fmul double %278, %278
  %280 = fadd double %275, %279
  %281 = add nsw i64 %260, 4
  %282 = getelementptr inbounds double, double* %31, i64 %281
  %283 = load double, double* %282, align 8, !tbaa !19
  %284 = fmul double %283, %283
  %285 = fadd double %280, %284
  %286 = add nsw i64 %260, 5
  %287 = getelementptr inbounds double, double* %31, i64 %286
  %288 = load double, double* %287, align 8, !tbaa !19
  %289 = fmul double %288, %288
  %290 = fadd double %285, %289
  %291 = add nsw i64 %260, 6
  %292 = getelementptr inbounds double, double* %31, i64 %291
  %293 = load double, double* %292, align 8, !tbaa !19
  %294 = fmul double %293, %293
  %295 = fadd double %290, %294
  %296 = add nsw i64 %260, 7
  %297 = getelementptr inbounds double, double* %31, i64 %296
  %298 = load double, double* %297, align 8, !tbaa !19
  %299 = fmul double %298, %298
  %300 = fadd double %295, %299
  %301 = add nsw i64 %260, 8
  %302 = icmp eq i64 %301, %24
  br i1 %302, label %306, label %259

; <label>:303:                                    ; preds = %187
  br label %304

; <label>:304:                                    ; preds = %181, %303
  %305 = phi double [ %182, %181 ], [ %228, %303 ]
  br label %309

; <label>:306:                                    ; preds = %259
  br label %307

; <label>:307:                                    ; preds = %253, %306
  %308 = phi double [ %254, %253 ], [ %300, %306 ]
  br label %309

; <label>:309:                                    ; preds = %307, %304, %231, %153, %21
  %310 = phi double [ 0.000000e+00, %21 ], [ %160, %153 ], [ %233, %231 ], [ %305, %304 ], [ %308, %307 ]
  %311 = insertelement <2 x double> undef, double %310, i32 0
  %312 = insertelement <2 x double> %311, double 0.000000e+00, i32 1
  %313 = call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %312) #11
  %314 = extractelement <2 x double> %313, i32 0
  %315 = fdiv double %23, %314
  %316 = fptosi double %315 to i32
  ret i32 %316
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr double @_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIddEEKNS_7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS6_IdLin1ELi1ELi0ELin1ELi1EEELi0EEEKS8_EEE4normEv(%"class.Eigen::MatrixBase.15"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.Eigen::internal::redux_evaluator", align 8
  %3 = alloca %"class.Eigen::CwiseUnaryOp", align 8
  %4 = getelementptr inbounds %"class.Eigen::CwiseUnaryOp", %"class.Eigen::CwiseUnaryOp"* %3, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start(i64 48, i8* nonnull %4)
  %5 = getelementptr inbounds %"class.Eigen::CwiseUnaryOp", %"class.Eigen::CwiseUnaryOp"* %3, i64 0, i32 1
  %6 = bitcast %"class.Eigen::CwiseBinaryOp"* %5 to i8*
  %7 = getelementptr inbounds %"class.Eigen::MatrixBase.15", %"class.Eigen::MatrixBase.15"* %0, i64 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %6, i8* nonnull %7, i64 24, i32 8, i1 false) #11
  %8 = getelementptr inbounds %"class.Eigen::CwiseUnaryOp", %"class.Eigen::CwiseUnaryOp"* %3, i64 0, i32 1, i32 1
  %9 = bitcast %"class.Eigen::Matrix.2"** %8 to %"class.Eigen::PlainObjectBase.3"**
  %10 = load %"class.Eigen::PlainObjectBase.3"*, %"class.Eigen::PlainObjectBase.3"** %9, align 8, !tbaa !11
  %11 = getelementptr inbounds %"class.Eigen::PlainObjectBase.3", %"class.Eigen::PlainObjectBase.3"* %10, i64 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8, !tbaa !8
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %428, label %14

; <label>:14:                                     ; preds = %1
  %15 = icmp sgt i64 %12, 0
  br i1 %15, label %17, label %16

; <label>:16:                                     ; preds = %14
  tail call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZNK5Eigen9DenseBaseINS_12CwiseUnaryOpINS_8internal14scalar_abs2_opIdEEKNS_13CwiseBinaryOpINS2_20scalar_difference_opIddEEKNS_7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS9_IdLin1ELi1ELi0ELin1ELi1EEELi0EEEKSB_EEEEE5reduxINS2_13scalar_sum_opIddEEEEdRKT_, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.6, i64 0, i64 0), i32 413, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.7, i64 0, i64 0)) #13
  unreachable

; <label>:17:                                     ; preds = %14
  %18 = getelementptr inbounds %"class.Eigen::internal::redux_evaluator", %"class.Eigen::internal::redux_evaluator"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start(i64 72, i8* nonnull %18) #11
  %19 = getelementptr inbounds %"class.Eigen::CwiseUnaryOp", %"class.Eigen::CwiseUnaryOp"* %3, i64 0, i32 1, i32 0
  %20 = getelementptr inbounds %"class.Eigen::internal::redux_evaluator", %"class.Eigen::internal::redux_evaluator"* %2, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0
  call void @_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS3_IdLin1ELi1ELi0ELin1ELi1EEELi0EEELi7ENS_10DenseShapeES7_ddEC2ERKS6_(%"struct.Eigen::internal::product_evaluator"* %20, %"class.Eigen::Product"* nonnull dereferenceable(16) %19) #11
  %21 = getelementptr inbounds %"class.Eigen::internal::redux_evaluator", %"class.Eigen::internal::redux_evaluator"* %2, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2
  %22 = bitcast %"class.Eigen::Matrix.2"** %8 to i64**
  %23 = load i64*, i64** %22, align 8, !tbaa !11
  %24 = load i64, i64* %23, align 8, !tbaa !16
  %25 = bitcast %"struct.Eigen::internal::evaluator.487"* %21 to i64*
  store i64 %24, i64* %25, align 8, !tbaa !23
  %26 = getelementptr inbounds %"class.Eigen::internal::redux_evaluator", %"class.Eigen::internal::redux_evaluator"* %2, i64 0, i32 1
  store %"class.Eigen::CwiseUnaryOp"* %3, %"class.Eigen::CwiseUnaryOp"** %26, align 8, !tbaa !11
  %27 = getelementptr inbounds i64, i64* %23, i64 1
  %28 = load i64, i64* %27, align 8, !tbaa !8
  %29 = sdiv i64 %28, 8
  %30 = shl nsw i64 %29, 3
  %31 = sdiv i64 %28, 4
  %32 = shl nsw i64 %31, 2
  %33 = add i64 %28, 3
  %34 = icmp ugt i64 %33, 6
  %35 = getelementptr inbounds %"class.Eigen::internal::redux_evaluator", %"class.Eigen::internal::redux_evaluator"* %2, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load double*, double** %35, align 8, !tbaa !23
  %37 = inttoptr i64 %24 to double*
  br i1 %34, label %38, label %311

; <label>:38:                                     ; preds = %17
  %39 = bitcast double* %36 to <4 x double>*
  %40 = load <4 x double>, <4 x double>* %39, align 16, !tbaa !11
  %41 = inttoptr i64 %24 to <4 x double>*
  %42 = load <4 x double>, <4 x double>* %41, align 16, !tbaa !11
  %43 = fsub <4 x double> %40, %42
  %44 = fmul <4 x double> %43, %43
  %45 = icmp sgt i64 %32, 4
  br i1 %45, label %46, label %206

; <label>:46:                                     ; preds = %38
  %47 = getelementptr inbounds double, double* %36, i64 4
  %48 = bitcast double* %47 to <4 x double>*
  %49 = load <4 x double>, <4 x double>* %48, align 16, !tbaa !11
  %50 = getelementptr inbounds double, double* %37, i64 4
  %51 = bitcast double* %50 to <4 x double>*
  %52 = load <4 x double>, <4 x double>* %51, align 16, !tbaa !11
  %53 = fsub <4 x double> %49, %52
  %54 = fmul <4 x double> %53, %53
  %55 = icmp sgt i64 %30, 8
  br i1 %55, label %56, label %105

; <label>:56:                                     ; preds = %46
  %57 = add i64 %30, -9
  %58 = lshr i64 %57, 3
  %59 = add nuw nsw i64 %58, 1
  %60 = and i64 %59, 3
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %92, label %62

; <label>:62:                                     ; preds = %56
  br label %63

; <label>:63:                                     ; preds = %63, %62
  %64 = phi i64 [ %88, %63 ], [ 8, %62 ]
  %65 = phi i64 [ %64, %63 ], [ 0, %62 ]
  %66 = phi <4 x double> [ %77, %63 ], [ %44, %62 ]
  %67 = phi <4 x double> [ %87, %63 ], [ %54, %62 ]
  %68 = phi i64 [ %89, %63 ], [ %60, %62 ]
  %69 = getelementptr inbounds double, double* %36, i64 %64
  %70 = bitcast double* %69 to <4 x double>*
  %71 = load <4 x double>, <4 x double>* %70, align 16, !tbaa !11
  %72 = getelementptr inbounds double, double* %37, i64 %64
  %73 = bitcast double* %72 to <4 x double>*
  %74 = load <4 x double>, <4 x double>* %73, align 16, !tbaa !11
  %75 = fsub <4 x double> %71, %74
  %76 = fmul <4 x double> %75, %75
  %77 = fadd <4 x double> %66, %76
  %78 = add nuw nsw i64 %65, 12
  %79 = getelementptr inbounds double, double* %36, i64 %78
  %80 = bitcast double* %79 to <4 x double>*
  %81 = load <4 x double>, <4 x double>* %80, align 16, !tbaa !11
  %82 = getelementptr inbounds double, double* %37, i64 %78
  %83 = bitcast double* %82 to <4 x double>*
  %84 = load <4 x double>, <4 x double>* %83, align 16, !tbaa !11
  %85 = fsub <4 x double> %81, %84
  %86 = fmul <4 x double> %85, %85
  %87 = fadd <4 x double> %67, %86
  %88 = add nuw nsw i64 %64, 8
  %89 = add i64 %68, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %63, !llvm.loop !26

; <label>:91:                                     ; preds = %63
  br label %92

; <label>:92:                                     ; preds = %56, %91
  %93 = phi i64 [ 8, %56 ], [ %88, %91 ]
  %94 = phi i64 [ 0, %56 ], [ %64, %91 ]
  %95 = phi <4 x double> [ %44, %56 ], [ %77, %91 ]
  %96 = phi <4 x double> [ %54, %56 ], [ %87, %91 ]
  %97 = phi <4 x double> [ undef, %56 ], [ %77, %91 ]
  %98 = phi <4 x double> [ undef, %56 ], [ %87, %91 ]
  %99 = icmp ult i64 %57, 24
  br i1 %99, label %102, label %100

; <label>:100:                                    ; preds = %92
  br label %110

; <label>:101:                                    ; preds = %110
  br label %102

; <label>:102:                                    ; preds = %92, %101
  %103 = phi <4 x double> [ %97, %92 ], [ %183, %101 ]
  %104 = phi <4 x double> [ %98, %92 ], [ %193, %101 ]
  br label %105

; <label>:105:                                    ; preds = %102, %46
  %106 = phi <4 x double> [ %54, %46 ], [ %104, %102 ]
  %107 = phi <4 x double> [ %44, %46 ], [ %103, %102 ]
  %108 = fadd <4 x double> %106, %107
  %109 = icmp sgt i64 %32, %30
  br i1 %109, label %196, label %206

; <label>:110:                                    ; preds = %110, %100
  %111 = phi i64 [ %93, %100 ], [ %194, %110 ]
  %112 = phi i64 [ %94, %100 ], [ %174, %110 ]
  %113 = phi <4 x double> [ %95, %100 ], [ %183, %110 ]
  %114 = phi <4 x double> [ %96, %100 ], [ %193, %110 ]
  %115 = getelementptr inbounds double, double* %36, i64 %111
  %116 = bitcast double* %115 to <4 x double>*
  %117 = load <4 x double>, <4 x double>* %116, align 16, !tbaa !11
  %118 = getelementptr inbounds double, double* %37, i64 %111
  %119 = bitcast double* %118 to <4 x double>*
  %120 = load <4 x double>, <4 x double>* %119, align 16, !tbaa !11
  %121 = fsub <4 x double> %117, %120
  %122 = fmul <4 x double> %121, %121
  %123 = fadd <4 x double> %113, %122
  %124 = add nuw nsw i64 %112, 12
  %125 = getelementptr inbounds double, double* %36, i64 %124
  %126 = bitcast double* %125 to <4 x double>*
  %127 = load <4 x double>, <4 x double>* %126, align 16, !tbaa !11
  %128 = getelementptr inbounds double, double* %37, i64 %124
  %129 = bitcast double* %128 to <4 x double>*
  %130 = load <4 x double>, <4 x double>* %129, align 16, !tbaa !11
  %131 = fsub <4 x double> %127, %130
  %132 = fmul <4 x double> %131, %131
  %133 = fadd <4 x double> %114, %132
  %134 = add nuw nsw i64 %111, 8
  %135 = getelementptr inbounds double, double* %36, i64 %134
  %136 = bitcast double* %135 to <4 x double>*
  %137 = load <4 x double>, <4 x double>* %136, align 16, !tbaa !11
  %138 = getelementptr inbounds double, double* %37, i64 %134
  %139 = bitcast double* %138 to <4 x double>*
  %140 = load <4 x double>, <4 x double>* %139, align 16, !tbaa !11
  %141 = fsub <4 x double> %137, %140
  %142 = fmul <4 x double> %141, %141
  %143 = fadd <4 x double> %123, %142
  %144 = add nuw nsw i64 %111, 12
  %145 = getelementptr inbounds double, double* %36, i64 %144
  %146 = bitcast double* %145 to <4 x double>*
  %147 = load <4 x double>, <4 x double>* %146, align 16, !tbaa !11
  %148 = getelementptr inbounds double, double* %37, i64 %144
  %149 = bitcast double* %148 to <4 x double>*
  %150 = load <4 x double>, <4 x double>* %149, align 16, !tbaa !11
  %151 = fsub <4 x double> %147, %150
  %152 = fmul <4 x double> %151, %151
  %153 = fadd <4 x double> %133, %152
  %154 = add nsw i64 %111, 16
  %155 = getelementptr inbounds double, double* %36, i64 %154
  %156 = bitcast double* %155 to <4 x double>*
  %157 = load <4 x double>, <4 x double>* %156, align 16, !tbaa !11
  %158 = getelementptr inbounds double, double* %37, i64 %154
  %159 = bitcast double* %158 to <4 x double>*
  %160 = load <4 x double>, <4 x double>* %159, align 16, !tbaa !11
  %161 = fsub <4 x double> %157, %160
  %162 = fmul <4 x double> %161, %161
  %163 = fadd <4 x double> %143, %162
  %164 = add nsw i64 %111, 20
  %165 = getelementptr inbounds double, double* %36, i64 %164
  %166 = bitcast double* %165 to <4 x double>*
  %167 = load <4 x double>, <4 x double>* %166, align 16, !tbaa !11
  %168 = getelementptr inbounds double, double* %37, i64 %164
  %169 = bitcast double* %168 to <4 x double>*
  %170 = load <4 x double>, <4 x double>* %169, align 16, !tbaa !11
  %171 = fsub <4 x double> %167, %170
  %172 = fmul <4 x double> %171, %171
  %173 = fadd <4 x double> %153, %172
  %174 = add nsw i64 %111, 24
  %175 = getelementptr inbounds double, double* %36, i64 %174
  %176 = bitcast double* %175 to <4 x double>*
  %177 = load <4 x double>, <4 x double>* %176, align 16, !tbaa !11
  %178 = getelementptr inbounds double, double* %37, i64 %174
  %179 = bitcast double* %178 to <4 x double>*
  %180 = load <4 x double>, <4 x double>* %179, align 16, !tbaa !11
  %181 = fsub <4 x double> %177, %180
  %182 = fmul <4 x double> %181, %181
  %183 = fadd <4 x double> %163, %182
  %184 = add nsw i64 %111, 28
  %185 = getelementptr inbounds double, double* %36, i64 %184
  %186 = bitcast double* %185 to <4 x double>*
  %187 = load <4 x double>, <4 x double>* %186, align 16, !tbaa !11
  %188 = getelementptr inbounds double, double* %37, i64 %184
  %189 = bitcast double* %188 to <4 x double>*
  %190 = load <4 x double>, <4 x double>* %189, align 16, !tbaa !11
  %191 = fsub <4 x double> %187, %190
  %192 = fmul <4 x double> %191, %191
  %193 = fadd <4 x double> %173, %192
  %194 = add nsw i64 %111, 32
  %195 = icmp slt i64 %194, %30
  br i1 %195, label %110, label %101

; <label>:196:                                    ; preds = %105
  %197 = getelementptr inbounds double, double* %36, i64 %30
  %198 = bitcast double* %197 to <4 x double>*
  %199 = load <4 x double>, <4 x double>* %198, align 16, !tbaa !11
  %200 = getelementptr inbounds double, double* %37, i64 %30
  %201 = bitcast double* %200 to <4 x double>*
  %202 = load <4 x double>, <4 x double>* %201, align 16, !tbaa !11
  %203 = fsub <4 x double> %199, %202
  %204 = fmul <4 x double> %203, %203
  %205 = fadd <4 x double> %108, %204
  br label %206

; <label>:206:                                    ; preds = %196, %105, %38
  %207 = phi <4 x double> [ %44, %38 ], [ %205, %196 ], [ %108, %105 ]
  %208 = shufflevector <4 x double> %207, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %209 = shufflevector <4 x double> %207, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %210 = fadd <2 x double> %208, %209
  %211 = extractelement <2 x double> %210, i32 1
  %212 = extractelement <2 x double> %210, i32 0
  %213 = fadd double %212, %211
  %214 = icmp sgt i64 %28, %32
  br i1 %214, label %215, label %418

; <label>:215:                                    ; preds = %206
  %216 = sub i64 %28, %32
  %217 = add i64 %28, -1
  %218 = sub i64 %217, %32
  %219 = and i64 %216, 7
  %220 = icmp eq i64 %219, 0
  br i1 %220, label %237, label %221

; <label>:221:                                    ; preds = %215
  br label %222

; <label>:222:                                    ; preds = %222, %221
  %223 = phi i64 [ %233, %222 ], [ %32, %221 ]
  %224 = phi double [ %232, %222 ], [ %213, %221 ]
  %225 = phi i64 [ %234, %222 ], [ %219, %221 ]
  %226 = getelementptr inbounds double, double* %36, i64 %223
  %227 = getelementptr inbounds double, double* %37, i64 %223
  %228 = load double, double* %226, align 8, !tbaa !19
  %229 = load double, double* %227, align 8, !tbaa !19
  %230 = fsub double %228, %229
  %231 = fmul double %230, %230
  %232 = fadd double %224, %231
  %233 = add nsw i64 %223, 1
  %234 = add i64 %225, -1
  %235 = icmp eq i64 %234, 0
  br i1 %235, label %236, label %222, !llvm.loop !27

; <label>:236:                                    ; preds = %222
  br label %237

; <label>:237:                                    ; preds = %215, %236
  %238 = phi double [ undef, %215 ], [ %232, %236 ]
  %239 = phi i64 [ %32, %215 ], [ %233, %236 ]
  %240 = phi double [ %213, %215 ], [ %232, %236 ]
  %241 = icmp ult i64 %218, 7
  br i1 %241, label %413, label %242

; <label>:242:                                    ; preds = %237
  br label %243

; <label>:243:                                    ; preds = %243, %242
  %244 = phi i64 [ %239, %242 ], [ %309, %243 ]
  %245 = phi double [ %240, %242 ], [ %308, %243 ]
  %246 = getelementptr inbounds double, double* %36, i64 %244
  %247 = getelementptr inbounds double, double* %37, i64 %244
  %248 = load double, double* %246, align 8, !tbaa !19
  %249 = load double, double* %247, align 8, !tbaa !19
  %250 = fsub double %248, %249
  %251 = fmul double %250, %250
  %252 = fadd double %245, %251
  %253 = add nsw i64 %244, 1
  %254 = getelementptr inbounds double, double* %36, i64 %253
  %255 = getelementptr inbounds double, double* %37, i64 %253
  %256 = load double, double* %254, align 8, !tbaa !19
  %257 = load double, double* %255, align 8, !tbaa !19
  %258 = fsub double %256, %257
  %259 = fmul double %258, %258
  %260 = fadd double %252, %259
  %261 = add nsw i64 %244, 2
  %262 = getelementptr inbounds double, double* %36, i64 %261
  %263 = getelementptr inbounds double, double* %37, i64 %261
  %264 = load double, double* %262, align 8, !tbaa !19
  %265 = load double, double* %263, align 8, !tbaa !19
  %266 = fsub double %264, %265
  %267 = fmul double %266, %266
  %268 = fadd double %260, %267
  %269 = add nsw i64 %244, 3
  %270 = getelementptr inbounds double, double* %36, i64 %269
  %271 = getelementptr inbounds double, double* %37, i64 %269
  %272 = load double, double* %270, align 8, !tbaa !19
  %273 = load double, double* %271, align 8, !tbaa !19
  %274 = fsub double %272, %273
  %275 = fmul double %274, %274
  %276 = fadd double %268, %275
  %277 = add nsw i64 %244, 4
  %278 = getelementptr inbounds double, double* %36, i64 %277
  %279 = getelementptr inbounds double, double* %37, i64 %277
  %280 = load double, double* %278, align 8, !tbaa !19
  %281 = load double, double* %279, align 8, !tbaa !19
  %282 = fsub double %280, %281
  %283 = fmul double %282, %282
  %284 = fadd double %276, %283
  %285 = add nsw i64 %244, 5
  %286 = getelementptr inbounds double, double* %36, i64 %285
  %287 = getelementptr inbounds double, double* %37, i64 %285
  %288 = load double, double* %286, align 8, !tbaa !19
  %289 = load double, double* %287, align 8, !tbaa !19
  %290 = fsub double %288, %289
  %291 = fmul double %290, %290
  %292 = fadd double %284, %291
  %293 = add nsw i64 %244, 6
  %294 = getelementptr inbounds double, double* %36, i64 %293
  %295 = getelementptr inbounds double, double* %37, i64 %293
  %296 = load double, double* %294, align 8, !tbaa !19
  %297 = load double, double* %295, align 8, !tbaa !19
  %298 = fsub double %296, %297
  %299 = fmul double %298, %298
  %300 = fadd double %292, %299
  %301 = add nsw i64 %244, 7
  %302 = getelementptr inbounds double, double* %36, i64 %301
  %303 = getelementptr inbounds double, double* %37, i64 %301
  %304 = load double, double* %302, align 8, !tbaa !19
  %305 = load double, double* %303, align 8, !tbaa !19
  %306 = fsub double %304, %305
  %307 = fmul double %306, %306
  %308 = fadd double %300, %307
  %309 = add nsw i64 %244, 8
  %310 = icmp eq i64 %309, %28
  br i1 %310, label %412, label %243

; <label>:311:                                    ; preds = %17
  %312 = load double, double* %36, align 8, !tbaa !19
  %313 = load double, double* %37, align 8, !tbaa !19
  %314 = fsub double %312, %313
  %315 = fmul double %314, %314
  %316 = icmp sgt i64 %28, 1
  br i1 %316, label %317, label %418

; <label>:317:                                    ; preds = %311
  %318 = add i64 %28, 7
  %319 = add i64 %28, -2
  %320 = and i64 %318, 7
  %321 = icmp eq i64 %320, 0
  br i1 %321, label %338, label %322

; <label>:322:                                    ; preds = %317
  br label %323

; <label>:323:                                    ; preds = %323, %322
  %324 = phi i64 [ %334, %323 ], [ 1, %322 ]
  %325 = phi double [ %333, %323 ], [ %315, %322 ]
  %326 = phi i64 [ %335, %323 ], [ %320, %322 ]
  %327 = getelementptr inbounds double, double* %36, i64 %324
  %328 = getelementptr inbounds double, double* %37, i64 %324
  %329 = load double, double* %327, align 8, !tbaa !19
  %330 = load double, double* %328, align 8, !tbaa !19
  %331 = fsub double %329, %330
  %332 = fmul double %331, %331
  %333 = fadd double %325, %332
  %334 = add nuw nsw i64 %324, 1
  %335 = add i64 %326, -1
  %336 = icmp eq i64 %335, 0
  br i1 %336, label %337, label %323, !llvm.loop !28

; <label>:337:                                    ; preds = %323
  br label %338

; <label>:338:                                    ; preds = %317, %337
  %339 = phi double [ undef, %317 ], [ %333, %337 ]
  %340 = phi i64 [ 1, %317 ], [ %334, %337 ]
  %341 = phi double [ %315, %317 ], [ %333, %337 ]
  %342 = icmp ult i64 %319, 7
  br i1 %342, label %416, label %343

; <label>:343:                                    ; preds = %338
  br label %344

; <label>:344:                                    ; preds = %344, %343
  %345 = phi i64 [ %340, %343 ], [ %410, %344 ]
  %346 = phi double [ %341, %343 ], [ %409, %344 ]
  %347 = getelementptr inbounds double, double* %36, i64 %345
  %348 = getelementptr inbounds double, double* %37, i64 %345
  %349 = load double, double* %347, align 8, !tbaa !19
  %350 = load double, double* %348, align 8, !tbaa !19
  %351 = fsub double %349, %350
  %352 = fmul double %351, %351
  %353 = fadd double %346, %352
  %354 = add nuw nsw i64 %345, 1
  %355 = getelementptr inbounds double, double* %36, i64 %354
  %356 = getelementptr inbounds double, double* %37, i64 %354
  %357 = load double, double* %355, align 8, !tbaa !19
  %358 = load double, double* %356, align 8, !tbaa !19
  %359 = fsub double %357, %358
  %360 = fmul double %359, %359
  %361 = fadd double %353, %360
  %362 = add nsw i64 %345, 2
  %363 = getelementptr inbounds double, double* %36, i64 %362
  %364 = getelementptr inbounds double, double* %37, i64 %362
  %365 = load double, double* %363, align 8, !tbaa !19
  %366 = load double, double* %364, align 8, !tbaa !19
  %367 = fsub double %365, %366
  %368 = fmul double %367, %367
  %369 = fadd double %361, %368
  %370 = add nsw i64 %345, 3
  %371 = getelementptr inbounds double, double* %36, i64 %370
  %372 = getelementptr inbounds double, double* %37, i64 %370
  %373 = load double, double* %371, align 8, !tbaa !19
  %374 = load double, double* %372, align 8, !tbaa !19
  %375 = fsub double %373, %374
  %376 = fmul double %375, %375
  %377 = fadd double %369, %376
  %378 = add nsw i64 %345, 4
  %379 = getelementptr inbounds double, double* %36, i64 %378
  %380 = getelementptr inbounds double, double* %37, i64 %378
  %381 = load double, double* %379, align 8, !tbaa !19
  %382 = load double, double* %380, align 8, !tbaa !19
  %383 = fsub double %381, %382
  %384 = fmul double %383, %383
  %385 = fadd double %377, %384
  %386 = add nsw i64 %345, 5
  %387 = getelementptr inbounds double, double* %36, i64 %386
  %388 = getelementptr inbounds double, double* %37, i64 %386
  %389 = load double, double* %387, align 8, !tbaa !19
  %390 = load double, double* %388, align 8, !tbaa !19
  %391 = fsub double %389, %390
  %392 = fmul double %391, %391
  %393 = fadd double %385, %392
  %394 = add nsw i64 %345, 6
  %395 = getelementptr inbounds double, double* %36, i64 %394
  %396 = getelementptr inbounds double, double* %37, i64 %394
  %397 = load double, double* %395, align 8, !tbaa !19
  %398 = load double, double* %396, align 8, !tbaa !19
  %399 = fsub double %397, %398
  %400 = fmul double %399, %399
  %401 = fadd double %393, %400
  %402 = add nsw i64 %345, 7
  %403 = getelementptr inbounds double, double* %36, i64 %402
  %404 = getelementptr inbounds double, double* %37, i64 %402
  %405 = load double, double* %403, align 8, !tbaa !19
  %406 = load double, double* %404, align 8, !tbaa !19
  %407 = fsub double %405, %406
  %408 = fmul double %407, %407
  %409 = fadd double %401, %408
  %410 = add nsw i64 %345, 8
  %411 = icmp eq i64 %410, %28
  br i1 %411, label %415, label %344

; <label>:412:                                    ; preds = %243
  br label %413

; <label>:413:                                    ; preds = %237, %412
  %414 = phi double [ %238, %237 ], [ %308, %412 ]
  br label %418

; <label>:415:                                    ; preds = %344
  br label %416

; <label>:416:                                    ; preds = %338, %415
  %417 = phi double [ %339, %338 ], [ %409, %415 ]
  br label %418

; <label>:418:                                    ; preds = %416, %413, %206, %311
  %419 = phi double [ %213, %206 ], [ %315, %311 ], [ %414, %413 ], [ %417, %416 ]
  %420 = getelementptr inbounds %"class.Eigen::internal::redux_evaluator", %"class.Eigen::internal::redux_evaluator"* %2, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %421 = load double*, double** %420, align 8, !tbaa !16
  %422 = icmp eq double* %421, null
  br i1 %422, label %427, label %423

; <label>:423:                                    ; preds = %418
  %424 = getelementptr inbounds double, double* %421, i64 -1
  %425 = bitcast double* %424 to i8**
  %426 = load i8*, i8** %425, align 8, !tbaa !29
  call void @free(i8* %426) #11
  br label %427

; <label>:427:                                    ; preds = %423, %418
  call void @llvm.lifetime.end(i64 72, i8* nonnull %18) #11
  br label %428

; <label>:428:                                    ; preds = %1, %427
  %429 = phi double [ %419, %427 ], [ 0.000000e+00, %1 ]
  call void @llvm.lifetime.end(i64 48, i8* nonnull %4)
  %430 = insertelement <2 x double> undef, double %429, i32 0
  %431 = insertelement <2 x double> %430, double 0.000000e+00, i32 1
  %432 = call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %431) #11
  %433 = extractelement <2 x double> %432, i32 0
  ret double %433
}

; Function Attrs: norecurse nounwind ssp uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = alloca %"struct.Eigen::internal::evaluator.840", align 8
  %2 = alloca %"struct.Eigen::internal::evaluator.583", align 8
  %3 = alloca %"class.Eigen::internal::generic_dense_assignment_kernel.843", align 8
  %4 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %5 = alloca %"class.Eigen::Matrix.153", align 16
  %6 = alloca %"struct.Eigen::internal::add_assign_op", align 1
  %7 = alloca %"class.Eigen::Matrix.63", align 4
  %8 = alloca %"class.Eigen::Transpose.798", align 8
  %9 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %10 = alloca %"class.Eigen::Matrix.724", align 8
  %11 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %12 = alloca %"struct.Eigen::internal::add_assign_op", align 1
  %13 = alloca %"struct.Eigen::internal::evaluator.840", align 8
  %14 = alloca %"struct.Eigen::internal::evaluator.583", align 8
  %15 = alloca %"class.Eigen::internal::generic_dense_assignment_kernel.843", align 8
  %16 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %17 = alloca %"struct.Eigen::internal::evaluator.817", align 8
  %18 = alloca %"class.Eigen::Matrix.63", align 4
  %19 = alloca %"class.Eigen::Matrix.63", align 4
  %20 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %21 = alloca %"struct.Eigen::internal::add_assign_op", align 1
  %22 = alloca %"class.Eigen::Matrix.77", align 4
  %23 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %24 = alloca %"class.Eigen::Matrix.77", align 4
  %25 = alloca %"class.Eigen::Matrix.94", align 4
  %26 = alloca %"class.Eigen::internal::gemm_blocking_space.1501", align 32
  %27 = alloca %"class.Eigen::Matrix.108", align 16
  %28 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %29 = alloca %"class.Eigen::Matrix.123", align 8
  %30 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %31 = alloca %"struct.Eigen::internal::add_assign_op", align 1
  %32 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %33 = alloca %"class.Eigen::Matrix.77", align 4
  %34 = alloca %"struct.Eigen::internal::evaluator.840", align 8
  %35 = alloca %"struct.Eigen::internal::evaluator.583", align 8
  %36 = alloca %"class.Eigen::internal::generic_dense_assignment_kernel.843", align 8
  %37 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %38 = alloca %"struct.Eigen::internal::evaluator.817", align 8
  %39 = alloca %"struct.Eigen::internal::evaluator.840", align 8
  %40 = alloca %"struct.Eigen::internal::evaluator.583", align 8
  %41 = alloca %"class.Eigen::internal::generic_dense_assignment_kernel.843", align 8
  %42 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %43 = alloca %"struct.Eigen::internal::evaluator.817", align 8
  %44 = alloca %"struct.Eigen::internal::evaluator.701", align 8
  %45 = alloca %"class.Eigen::Transpose.798", align 8
  %46 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %47 = alloca %"class.Eigen::Matrix.724", align 8
  %48 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %49 = alloca %"class.Eigen::Matrix.94", align 4
  %50 = alloca %"class.Eigen::internal::gemm_blocking_space.1501", align 32
  %51 = alloca %"class.Eigen::Matrix.108", align 16
  %52 = alloca %"struct.Eigen::internal::add_assign_op", align 1
  %53 = alloca %"class.Eigen::Matrix.77", align 4
  %54 = alloca %"struct.Eigen::internal::add_assign_op", align 1
  %55 = alloca %"struct.Eigen::internal::evaluator.701", align 8
  %56 = alloca %"struct.Eigen::internal::add_assign_op", align 1
  %57 = alloca %"struct.Eigen::internal::evaluator.701", align 8
  %58 = alloca %"struct.Eigen::internal::evaluator.701", align 8
  %59 = alloca %"struct.Eigen::internal::evaluator.1227", align 8
  %60 = alloca %"struct.Eigen::internal::evaluator.1236", align 8
  %61 = alloca %"class.Eigen::internal::generic_dense_assignment_kernel.1241", align 8
  %62 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %63 = alloca %"class.Eigen::Matrix.1210", align 16
  %64 = alloca %"struct.Eigen::internal::add_assign_op", align 1
  %65 = alloca %"class.Eigen::Matrix.77", align 4
  %66 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %67 = alloca %"struct.Eigen::internal::add_assign_op", align 1
  %68 = alloca %"struct.Eigen::internal::sub_assign_op", align 1
  %69 = alloca %"struct.Eigen::internal::evaluator.1227", align 8
  %70 = alloca %"struct.Eigen::internal::evaluator.1236", align 8
  %71 = alloca %"class.Eigen::internal::generic_dense_assignment_kernel.1241", align 8
  %72 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %73 = alloca %"class.Eigen::Matrix.1210", align 16
  %74 = alloca %"struct.Eigen::internal::evaluator.840", align 8
  %75 = alloca %"struct.Eigen::internal::evaluator.583", align 8
  %76 = alloca %"class.Eigen::internal::generic_dense_assignment_kernel.843", align 8
  %77 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %78 = alloca %"class.Eigen::Matrix.153", align 16
  %79 = alloca %"struct.Eigen::internal::add_assign_op", align 1
  %80 = alloca %"class.Eigen::Matrix.77", align 4
  %81 = alloca %"struct.Eigen::internal::add_assign_op", align 1
  %82 = alloca %"struct.Eigen::internal::sub_assign_op", align 1
  %83 = alloca %"class.Eigen::Matrix.77", align 4
  %84 = alloca %"struct.Eigen::internal::sub_assign_op", align 1
  %85 = alloca %"struct.Eigen::internal::add_assign_op", align 1
  %86 = alloca %"struct.Eigen::internal::evaluator.840", align 8
  %87 = alloca %"struct.Eigen::internal::evaluator.583", align 8
  %88 = alloca %"class.Eigen::internal::generic_dense_assignment_kernel.843", align 8
  %89 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %90 = alloca %"struct.Eigen::internal::evaluator.817", align 8
  %91 = alloca %"struct.Eigen::internal::add_assign_op", align 1
  %92 = alloca %"struct.Eigen::internal::evaluator.701", align 8
  %93 = alloca %"struct.Eigen::internal::evaluator.701", align 8
  %94 = alloca %"struct.Eigen::internal::add_assign_op", align 1
  %95 = alloca %"struct.Eigen::internal::add_assign_op", align 1
  %96 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %97 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %98 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %99 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %100 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %101 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %102 = alloca %"class.Eigen::Matrix.19", align 8
  %103 = alloca %"class.Eigen::Matrix.19", align 8
  %104 = alloca %"class.Eigen::Matrix.19", align 8
  %105 = alloca %"class.Eigen::Matrix.19", align 8
  %106 = alloca %"class.Eigen::Matrix.19", align 8
  %107 = alloca %"class.Eigen::Matrix.32", align 8
  %108 = alloca %"class.Eigen::Matrix.32", align 8
  %109 = alloca %"class.Eigen::Matrix.32", align 8
  %110 = alloca %"class.Eigen::Matrix.32", align 8
  %111 = alloca %"class.Eigen::Matrix.32", align 8
  %112 = alloca %"class.Eigen::Matrix.32", align 8
  %113 = alloca %"class.Eigen::Matrix.48", align 8
  %114 = alloca %"class.Eigen::Matrix.48", align 8
  %115 = alloca %"class.Eigen::Matrix.48", align 8
  %116 = alloca %"class.Eigen::Matrix.48", align 8
  %117 = alloca %"class.Eigen::Matrix.48", align 8
  %118 = alloca %"class.Eigen::Matrix.63", align 4
  %119 = alloca %"class.Eigen::Matrix.63", align 4
  %120 = alloca %"class.Eigen::Matrix.63", align 4
  %121 = alloca %"class.Eigen::Matrix.77", align 4
  %122 = alloca %"class.Eigen::Matrix.77", align 4
  %123 = alloca %"class.Eigen::Matrix.77", align 4
  %124 = alloca %"class.Eigen::Matrix.77", align 4
  %125 = alloca %"class.Eigen::Matrix.77", align 4
  %126 = alloca %"class.Eigen::Matrix.77", align 4
  %127 = alloca %"class.Eigen::Matrix.108", align 16
  %128 = alloca %"class.Eigen::CwiseNullaryOp.118", align 1
  %129 = alloca %"class.Eigen::Matrix.108", align 16
  %130 = alloca %"class.Eigen::CwiseNullaryOp.118", align 1
  %131 = alloca %"class.Eigen::Matrix.108", align 16
  %132 = alloca %"class.Eigen::CwiseNullaryOp.118", align 1
  %133 = alloca %"class.Eigen::Matrix.108", align 16
  %134 = alloca %"class.Eigen::CwiseNullaryOp.118", align 1
  %135 = alloca %"class.Eigen::Matrix.108", align 16
  %136 = alloca %"class.Eigen::CwiseNullaryOp.118", align 1
  %137 = alloca %"class.Eigen::Matrix.108", align 16
  %138 = alloca %"class.Eigen::CwiseNullaryOp.118", align 1
  %139 = alloca %"class.Eigen::Matrix.123", align 8
  %140 = alloca %"class.Eigen::Matrix.123", align 8
  %141 = alloca %"class.Eigen::Matrix.123", align 8
  %142 = alloca %"class.Eigen::Matrix.123", align 8
  %143 = alloca %"class.Eigen::Matrix.123", align 8
  %144 = alloca %"class.Eigen::Matrix.123", align 8
  %145 = alloca %"class.Eigen::Matrix.153", align 4
  %146 = alloca %"class.Eigen::Matrix.153", align 16
  %147 = alloca %"class.Eigen::Matrix.153", align 16
  %148 = alloca %"class.Eigen::Matrix.153", align 16
  %149 = alloca %"class.Eigen::Matrix.153", align 4
  %150 = alloca %"class.Eigen::Matrix.153", align 4
  %151 = alloca %"class.Eigen::Matrix.170", align 8
  %152 = alloca %"class.Eigen::Matrix.170", align 8
  %153 = alloca %"class.Eigen::Matrix.170", align 8
  %154 = alloca %"class.Eigen::Matrix.170", align 8
  %155 = alloca %"class.Eigen::Matrix.170", align 8
  %156 = alloca %"class.Eigen::Matrix.185", align 8
  %157 = alloca %"class.Eigen::Matrix.185", align 4
  %158 = alloca %"class.Eigen::Matrix.185", align 8
  %159 = alloca %"class.Eigen::Matrix.185", align 8
  %160 = alloca %"class.Eigen::Matrix.153", align 16
  %161 = alloca %"class.Eigen::Matrix.153", align 16
  %162 = alloca %"class.Eigen::Matrix.153", align 16
  %163 = alloca %"class.Eigen::Matrix.153", align 16
  %164 = alloca %"class.Eigen::Matrix.153", align 16
  %165 = alloca %"class.Eigen::Matrix.185", align 16
  %166 = alloca %"class.Eigen::Matrix.185", align 16
  %167 = alloca %"class.Eigen::Matrix.185", align 4
  %168 = alloca %"class.Eigen::Matrix.170", align 8
  %169 = alloca %"class.Eigen::Matrix.170", align 8
  %170 = alloca %"class.Eigen::Matrix.170", align 8
  %171 = alloca %"class.Eigen::Matrix.170", align 8
  %172 = alloca %"class.Eigen::Matrix.170", align 8
  %173 = alloca %"class.Eigen::CwiseBinaryOp.200", align 8
  %174 = alloca %"class.Eigen::CwiseBinaryOp.200", align 8
  %175 = alloca %"class.Eigen::CwiseBinaryOp.220", align 8
  %176 = alloca %"class.Eigen::CwiseBinaryOp.220", align 8
  %177 = alloca %"class.Eigen::Product.234", align 8
  %178 = alloca %"class.Eigen::CwiseBinaryOp.200", align 8
  %179 = alloca %"class.Eigen::Product.277", align 8
  %180 = alloca %"class.Eigen::Product.310", align 8
  %181 = alloca %"class.Eigen::Product.234", align 8
  %182 = alloca %"class.Eigen::Product.324", align 8
  %183 = alloca %"class.Eigen::Product.362", align 8
  %184 = alloca %"class.Eigen::CwiseBinaryOp.200", align 8
  %185 = alloca %"class.Eigen::CwiseBinaryOp.220", align 8
  %186 = alloca %"class.Eigen::Product.324", align 8
  %187 = alloca %"class.Eigen::CwiseBinaryOp.220", align 8
  %188 = alloca %"class.Eigen::CwiseBinaryOp.220", align 8
  %189 = alloca %"class.Eigen::Product.369", align 8
  %190 = alloca %"class.Eigen::CwiseBinaryOp.220", align 8
  %191 = alloca %"class.Eigen::Product.369", align 8
  %192 = alloca %"class.Eigen::Product.310", align 8
  %193 = alloca %"class.Eigen::Product.376", align 8
  %194 = alloca %"class.Eigen::Product.234", align 8
  %195 = alloca %"class.Eigen::CwiseBinaryOp.220", align 8
  %196 = alloca %"class.Eigen::Product.324", align 8
  %197 = alloca %"class.Eigen::Product.234", align 8
  %198 = alloca %"class.Eigen::CwiseBinaryOp.200", align 8
  %199 = alloca %"class.Eigen::Product.317", align 8
  %200 = alloca %"class.Eigen::Product.390", align 8
  %201 = alloca %"class.Eigen::Product.324", align 8
  %202 = alloca %"class.Eigen::Product.310", align 8
  %203 = alloca %"class.Eigen::CwiseBinaryOp.220", align 8
  %204 = alloca %"class.Eigen::Product.423", align 8
  %205 = alloca %"class.Eigen::Product.437", align 8
  %206 = alloca %"class.Eigen::Product.277", align 8
  %207 = alloca %"class.Eigen::Product.234", align 8
  %208 = alloca %"class.Eigen::Product.423", align 8
  %209 = alloca %"class.Eigen::CwiseBinaryOp.200", align 8
  %210 = bitcast %"class.Eigen::Matrix.19"* %102 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %210) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %210, i8 0, i64 24, i32 8, i1 false) #11
  %211 = getelementptr inbounds %"class.Eigen::Matrix.19", %"class.Eigen::Matrix.19"* %102, i64 0, i32 0, i32 0, i32 1
  %212 = getelementptr inbounds %"class.Eigen::Matrix.19", %"class.Eigen::Matrix.19"* %102, i64 0, i32 0, i32 0, i32 0
  %213 = tail call i8* @malloc(i64 1328) #14
  %214 = icmp eq i8* %213, null
  br i1 %214, label %222, label %215

; <label>:215:                                    ; preds = %0
  %216 = ptrtoint i8* %213 to i64
  %217 = add i64 %216, 32
  %218 = and i64 %217, -32
  %219 = inttoptr i64 %218 to i8**
  %220 = getelementptr inbounds i8*, i8** %219, i64 -1
  store i8* %213, i8** %220, align 8, !tbaa !29
  %221 = inttoptr i64 %218 to i32*
  br label %222

; <label>:222:                                    ; preds = %0, %215
  %223 = phi i32* [ %221, %215 ], [ null, %0 ]
  store i32* %223, i32** %212, align 8, !tbaa !30
  %224 = bitcast i64* %211 to <2 x i64>*
  store <2 x i64> <i64 18, i64 18>, <2 x i64>* %224, align 8, !tbaa !32
  br label %225

; <label>:225:                                    ; preds = %222, %225
  %226 = phi i64 [ %230, %225 ], [ 0, %222 ]
  %227 = getelementptr inbounds i32, i32* %223, i64 %226
  %228 = tail call i32 @rand() #11
  %229 = add nsw i32 %228, -1073741824
  store i32 %229, i32* %227, align 4, !tbaa !33
  %230 = add nuw nsw i64 %226, 1
  %231 = icmp eq i64 %230, 324
  br i1 %231, label %232, label %225

; <label>:232:                                    ; preds = %225
  %233 = bitcast %"class.Eigen::Matrix.19"* %103 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %233) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %233, i8 0, i64 24, i32 8, i1 false) #11
  %234 = getelementptr inbounds %"class.Eigen::Matrix.19", %"class.Eigen::Matrix.19"* %103, i64 0, i32 0, i32 0, i32 1
  %235 = getelementptr inbounds %"class.Eigen::Matrix.19", %"class.Eigen::Matrix.19"* %103, i64 0, i32 0, i32 0, i32 0
  %236 = tail call i8* @malloc(i64 1328) #14
  %237 = icmp eq i8* %236, null
  br i1 %237, label %245, label %238

; <label>:238:                                    ; preds = %232
  %239 = ptrtoint i8* %236 to i64
  %240 = add i64 %239, 32
  %241 = and i64 %240, -32
  %242 = inttoptr i64 %241 to i8**
  %243 = getelementptr inbounds i8*, i8** %242, i64 -1
  store i8* %236, i8** %243, align 8, !tbaa !29
  %244 = inttoptr i64 %241 to i32*
  br label %245

; <label>:245:                                    ; preds = %232, %238
  %246 = phi i32* [ %244, %238 ], [ null, %232 ]
  store i32* %246, i32** %235, align 8, !tbaa !30
  %247 = bitcast i64* %234 to <2 x i64>*
  store <2 x i64> <i64 18, i64 18>, <2 x i64>* %247, align 8, !tbaa !32
  br label %248

; <label>:248:                                    ; preds = %245, %248
  %249 = phi i64 [ %253, %248 ], [ 0, %245 ]
  %250 = getelementptr inbounds i32, i32* %246, i64 %249
  %251 = tail call i32 @rand() #11
  %252 = add nsw i32 %251, -1073741824
  store i32 %252, i32* %250, align 4, !tbaa !33
  %253 = add nuw nsw i64 %249, 1
  %254 = icmp eq i64 %253, 324
  br i1 %254, label %255, label %248

; <label>:255:                                    ; preds = %248
  %256 = tail call i8* @malloc(i64 1328) #14
  %257 = icmp eq i8* %256, null
  br i1 %257, label %265, label %258

; <label>:258:                                    ; preds = %255
  %259 = ptrtoint i8* %256 to i64
  %260 = add i64 %259, 32
  %261 = and i64 %260, -32
  %262 = inttoptr i64 %261 to i8**
  %263 = getelementptr inbounds i8*, i8** %262, i64 -1
  store i8* %256, i8** %263, align 8, !tbaa !29
  %264 = inttoptr i64 %261 to i32*
  br label %265

; <label>:265:                                    ; preds = %258, %255
  %266 = phi i32* [ %264, %258 ], [ null, %255 ]
  br label %267

; <label>:267:                                    ; preds = %265, %267
  %268 = phi i64 [ %272, %267 ], [ 0, %265 ]
  %269 = getelementptr inbounds i32, i32* %266, i64 %268
  %270 = tail call i32 @rand() #11
  %271 = add nsw i32 %270, -1073741824
  store i32 %271, i32* %269, align 4, !tbaa !33
  %272 = add nuw nsw i64 %268, 1
  %273 = icmp eq i64 %272, 324
  br i1 %273, label %274, label %267

; <label>:274:                                    ; preds = %267
  %275 = bitcast %"class.Eigen::Matrix.19"* %104 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %275) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %275, i8 0, i64 24, i32 8, i1 false) #11
  %276 = getelementptr inbounds %"class.Eigen::Matrix.19", %"class.Eigen::Matrix.19"* %104, i64 0, i32 0, i32 0, i32 1
  %277 = getelementptr inbounds %"class.Eigen::Matrix.19", %"class.Eigen::Matrix.19"* %104, i64 0, i32 0, i32 0, i32 0
  %278 = tail call i8* @malloc(i64 1328) #14
  %279 = icmp eq i8* %278, null
  br i1 %279, label %287, label %280

; <label>:280:                                    ; preds = %274
  %281 = ptrtoint i8* %278 to i64
  %282 = add i64 %281, 32
  %283 = and i64 %282, -32
  %284 = inttoptr i64 %283 to i8**
  %285 = getelementptr inbounds i8*, i8** %284, i64 -1
  store i8* %278, i8** %285, align 8, !tbaa !29
  %286 = inttoptr i64 %283 to i32*
  br label %287

; <label>:287:                                    ; preds = %274, %280
  %288 = phi i32* [ %286, %280 ], [ null, %274 ]
  store i32* %288, i32** %277, align 8, !tbaa !30
  %289 = bitcast i64* %276 to <2 x i64>*
  store <2 x i64> <i64 18, i64 18>, <2 x i64>* %289, align 8, !tbaa !32
  br label %290

; <label>:290:                                    ; preds = %287, %290
  %291 = phi i64 [ %295, %290 ], [ 0, %287 ]
  %292 = getelementptr inbounds i32, i32* %288, i64 %291
  %293 = tail call i32 @rand() #11
  %294 = add nsw i32 %293, -1073741824
  store i32 %294, i32* %292, align 4, !tbaa !33
  %295 = add nuw nsw i64 %291, 1
  %296 = icmp eq i64 %295, 324
  br i1 %296, label %297, label %290

; <label>:297:                                    ; preds = %290
  %298 = bitcast %"class.Eigen::Matrix.19"* %105 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %298) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %298, i8 0, i64 24, i32 8, i1 false) #11
  %299 = getelementptr inbounds %"class.Eigen::Matrix.19", %"class.Eigen::Matrix.19"* %105, i64 0, i32 0, i32 0, i32 1
  %300 = getelementptr inbounds %"class.Eigen::Matrix.19", %"class.Eigen::Matrix.19"* %105, i64 0, i32 0, i32 0, i32 0
  %301 = tail call i8* @malloc(i64 1328) #14
  %302 = icmp eq i8* %301, null
  br i1 %302, label %310, label %303

; <label>:303:                                    ; preds = %297
  %304 = ptrtoint i8* %301 to i64
  %305 = add i64 %304, 32
  %306 = and i64 %305, -32
  %307 = inttoptr i64 %306 to i8**
  %308 = getelementptr inbounds i8*, i8** %307, i64 -1
  store i8* %301, i8** %308, align 8, !tbaa !29
  %309 = inttoptr i64 %306 to i32*
  br label %310

; <label>:310:                                    ; preds = %297, %303
  %311 = phi i32* [ %309, %303 ], [ null, %297 ]
  store i32* %311, i32** %300, align 8, !tbaa !30
  %312 = bitcast i64* %299 to <2 x i64>*
  store <2 x i64> <i64 18, i64 18>, <2 x i64>* %312, align 8, !tbaa !32
  br label %313

; <label>:313:                                    ; preds = %310, %313
  %314 = phi i64 [ %318, %313 ], [ 0, %310 ]
  %315 = getelementptr inbounds i32, i32* %311, i64 %314
  %316 = tail call i32 @rand() #11
  %317 = add nsw i32 %316, -1073741824
  store i32 %317, i32* %315, align 4, !tbaa !33
  %318 = add nuw nsw i64 %314, 1
  %319 = icmp eq i64 %318, 324
  br i1 %319, label %320, label %313

; <label>:320:                                    ; preds = %313
  %321 = bitcast %"class.Eigen::Matrix.19"* %106 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %321) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %321, i8 0, i64 24, i32 8, i1 false) #11
  %322 = getelementptr inbounds %"class.Eigen::Matrix.19", %"class.Eigen::Matrix.19"* %106, i64 0, i32 0, i32 0, i32 1
  %323 = getelementptr inbounds %"class.Eigen::Matrix.19", %"class.Eigen::Matrix.19"* %106, i64 0, i32 0, i32 0, i32 0
  %324 = tail call i8* @malloc(i64 1328) #14
  %325 = icmp eq i8* %324, null
  br i1 %325, label %333, label %326

; <label>:326:                                    ; preds = %320
  %327 = ptrtoint i8* %324 to i64
  %328 = add i64 %327, 32
  %329 = and i64 %328, -32
  %330 = inttoptr i64 %329 to i8**
  %331 = getelementptr inbounds i8*, i8** %330, i64 -1
  store i8* %324, i8** %331, align 8, !tbaa !29
  %332 = inttoptr i64 %329 to i32*
  br label %333

; <label>:333:                                    ; preds = %320, %326
  %334 = phi i32* [ %332, %326 ], [ null, %320 ]
  store i32* %334, i32** %323, align 8, !tbaa !30
  %335 = bitcast i64* %322 to <2 x i64>*
  store <2 x i64> <i64 18, i64 18>, <2 x i64>* %335, align 8, !tbaa !32
  br label %336

; <label>:336:                                    ; preds = %333, %336
  %337 = phi i64 [ %341, %336 ], [ 0, %333 ]
  %338 = getelementptr inbounds i32, i32* %334, i64 %337
  %339 = tail call i32 @rand() #11
  %340 = add nsw i32 %339, -1073741824
  store i32 %340, i32* %338, align 4, !tbaa !33
  %341 = add nuw nsw i64 %337, 1
  %342 = icmp eq i64 %341, 324
  br i1 %342, label %343, label %336

; <label>:343:                                    ; preds = %336
  %344 = bitcast %"class.Eigen::Matrix.32"* %107 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %344) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %344, i8 0, i64 16, i32 8, i1 false) #11
  %345 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %107, i64 0, i32 0, i32 0, i32 1
  %346 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %107, i64 0, i32 0, i32 0, i32 0
  %347 = tail call i8* @malloc(i64 3416) #14
  %348 = icmp eq i8* %347, null
  br i1 %348, label %356, label %349

; <label>:349:                                    ; preds = %343
  %350 = ptrtoint i8* %347 to i64
  %351 = add i64 %350, 32
  %352 = and i64 %351, -32
  %353 = inttoptr i64 %352 to i8**
  %354 = getelementptr inbounds i8*, i8** %353, i64 -1
  store i8* %347, i8** %354, align 8, !tbaa !29
  %355 = inttoptr i64 %352 to i32*
  br label %356

; <label>:356:                                    ; preds = %349, %343
  %357 = phi i32* [ %355, %349 ], [ null, %343 ]
  store i32* %357, i32** %346, align 8, !tbaa !35
  store i64 18, i64* %345, align 8, !tbaa !37
  br label %358

; <label>:358:                                    ; preds = %358, %356
  %359 = phi i64 [ %363, %358 ], [ 0, %356 ]
  %360 = getelementptr inbounds i32, i32* %357, i64 %359
  %361 = tail call i32 @rand() #11
  %362 = add nsw i32 %361, -1073741824
  store i32 %362, i32* %360, align 4, !tbaa !33
  %363 = add nuw nsw i64 %359, 1
  %364 = icmp eq i64 %363, 846
  br i1 %364, label %365, label %358

; <label>:365:                                    ; preds = %358
  %366 = bitcast %"class.Eigen::Matrix.32"* %108 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %366) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %366, i8 0, i64 16, i32 8, i1 false) #11
  %367 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %108, i64 0, i32 0, i32 0, i32 1
  %368 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %108, i64 0, i32 0, i32 0, i32 0
  %369 = tail call i8* @malloc(i64 3416) #14
  %370 = icmp eq i8* %369, null
  br i1 %370, label %378, label %371

; <label>:371:                                    ; preds = %365
  %372 = ptrtoint i8* %369 to i64
  %373 = add i64 %372, 32
  %374 = and i64 %373, -32
  %375 = inttoptr i64 %374 to i8**
  %376 = getelementptr inbounds i8*, i8** %375, i64 -1
  store i8* %369, i8** %376, align 8, !tbaa !29
  %377 = inttoptr i64 %374 to i32*
  br label %378

; <label>:378:                                    ; preds = %371, %365
  %379 = phi i32* [ %377, %371 ], [ null, %365 ]
  store i32* %379, i32** %368, align 8, !tbaa !35
  store i64 18, i64* %367, align 8, !tbaa !37
  br label %380

; <label>:380:                                    ; preds = %380, %378
  %381 = phi i64 [ %385, %380 ], [ 0, %378 ]
  %382 = getelementptr inbounds i32, i32* %379, i64 %381
  %383 = tail call i32 @rand() #11
  %384 = add nsw i32 %383, -1073741824
  store i32 %384, i32* %382, align 4, !tbaa !33
  %385 = add nuw nsw i64 %381, 1
  %386 = icmp eq i64 %385, 846
  br i1 %386, label %387, label %380

; <label>:387:                                    ; preds = %380
  %388 = bitcast %"class.Eigen::Matrix.32"* %109 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %388) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %388, i8 0, i64 16, i32 8, i1 false) #11
  %389 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %109, i64 0, i32 0, i32 0, i32 1
  %390 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %109, i64 0, i32 0, i32 0, i32 0
  %391 = tail call i8* @malloc(i64 3416) #14
  %392 = icmp eq i8* %391, null
  br i1 %392, label %400, label %393

; <label>:393:                                    ; preds = %387
  %394 = ptrtoint i8* %391 to i64
  %395 = add i64 %394, 32
  %396 = and i64 %395, -32
  %397 = inttoptr i64 %396 to i8**
  %398 = getelementptr inbounds i8*, i8** %397, i64 -1
  store i8* %391, i8** %398, align 8, !tbaa !29
  %399 = inttoptr i64 %396 to i32*
  br label %400

; <label>:400:                                    ; preds = %393, %387
  %401 = phi i32* [ %399, %393 ], [ null, %387 ]
  store i32* %401, i32** %390, align 8, !tbaa !35
  store i64 18, i64* %389, align 8, !tbaa !37
  br label %402

; <label>:402:                                    ; preds = %402, %400
  %403 = phi i64 [ %407, %402 ], [ 0, %400 ]
  %404 = getelementptr inbounds i32, i32* %401, i64 %403
  %405 = tail call i32 @rand() #11
  %406 = add nsw i32 %405, -1073741824
  store i32 %406, i32* %404, align 4, !tbaa !33
  %407 = add nuw nsw i64 %403, 1
  %408 = icmp eq i64 %407, 846
  br i1 %408, label %409, label %402

; <label>:409:                                    ; preds = %402
  %410 = bitcast %"class.Eigen::Matrix.32"* %110 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %410) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %410, i8 0, i64 16, i32 8, i1 false) #11
  %411 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %110, i64 0, i32 0, i32 0, i32 1
  %412 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %110, i64 0, i32 0, i32 0, i32 0
  %413 = tail call i8* @malloc(i64 3416) #14
  %414 = icmp eq i8* %413, null
  br i1 %414, label %422, label %415

; <label>:415:                                    ; preds = %409
  %416 = ptrtoint i8* %413 to i64
  %417 = add i64 %416, 32
  %418 = and i64 %417, -32
  %419 = inttoptr i64 %418 to i8**
  %420 = getelementptr inbounds i8*, i8** %419, i64 -1
  store i8* %413, i8** %420, align 8, !tbaa !29
  %421 = inttoptr i64 %418 to i32*
  br label %422

; <label>:422:                                    ; preds = %415, %409
  %423 = phi i32* [ %421, %415 ], [ null, %409 ]
  store i32* %423, i32** %412, align 8, !tbaa !35
  store i64 18, i64* %411, align 8, !tbaa !37
  br label %424

; <label>:424:                                    ; preds = %424, %422
  %425 = phi i64 [ %429, %424 ], [ 0, %422 ]
  %426 = getelementptr inbounds i32, i32* %423, i64 %425
  %427 = tail call i32 @rand() #11
  %428 = add nsw i32 %427, -1073741824
  store i32 %428, i32* %426, align 4, !tbaa !33
  %429 = add nuw nsw i64 %425, 1
  %430 = icmp eq i64 %429, 846
  br i1 %430, label %431, label %424

; <label>:431:                                    ; preds = %424
  %432 = bitcast %"class.Eigen::Matrix.32"* %111 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %432) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %432, i8 0, i64 16, i32 8, i1 false) #11
  %433 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %111, i64 0, i32 0, i32 0, i32 1
  %434 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %111, i64 0, i32 0, i32 0, i32 0
  %435 = tail call i8* @malloc(i64 3416) #14
  %436 = icmp eq i8* %435, null
  br i1 %436, label %444, label %437

; <label>:437:                                    ; preds = %431
  %438 = ptrtoint i8* %435 to i64
  %439 = add i64 %438, 32
  %440 = and i64 %439, -32
  %441 = inttoptr i64 %440 to i8**
  %442 = getelementptr inbounds i8*, i8** %441, i64 -1
  store i8* %435, i8** %442, align 8, !tbaa !29
  %443 = inttoptr i64 %440 to i32*
  br label %444

; <label>:444:                                    ; preds = %437, %431
  %445 = phi i32* [ %443, %437 ], [ null, %431 ]
  store i32* %445, i32** %434, align 8, !tbaa !35
  store i64 18, i64* %433, align 8, !tbaa !37
  br label %446

; <label>:446:                                    ; preds = %446, %444
  %447 = phi i64 [ %451, %446 ], [ 0, %444 ]
  %448 = getelementptr inbounds i32, i32* %445, i64 %447
  %449 = tail call i32 @rand() #11
  %450 = add nsw i32 %449, -1073741824
  store i32 %450, i32* %448, align 4, !tbaa !33
  %451 = add nuw nsw i64 %447, 1
  %452 = icmp eq i64 %451, 846
  br i1 %452, label %453, label %446

; <label>:453:                                    ; preds = %446
  %454 = bitcast %"class.Eigen::Matrix.32"* %112 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %454) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %454, i8 0, i64 16, i32 8, i1 false) #11
  %455 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %112, i64 0, i32 0, i32 0, i32 1
  %456 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %112, i64 0, i32 0, i32 0, i32 0
  %457 = tail call i8* @malloc(i64 3416) #14
  %458 = icmp eq i8* %457, null
  br i1 %458, label %466, label %459

; <label>:459:                                    ; preds = %453
  %460 = ptrtoint i8* %457 to i64
  %461 = add i64 %460, 32
  %462 = and i64 %461, -32
  %463 = inttoptr i64 %462 to i8**
  %464 = getelementptr inbounds i8*, i8** %463, i64 -1
  store i8* %457, i8** %464, align 8, !tbaa !29
  %465 = inttoptr i64 %462 to i32*
  br label %466

; <label>:466:                                    ; preds = %459, %453
  %467 = phi i32* [ %465, %459 ], [ null, %453 ]
  store i32* %467, i32** %456, align 8, !tbaa !35
  store i64 18, i64* %455, align 8, !tbaa !37
  br label %468

; <label>:468:                                    ; preds = %468, %466
  %469 = phi i64 [ %473, %468 ], [ 0, %466 ]
  %470 = getelementptr inbounds i32, i32* %467, i64 %469
  %471 = tail call i32 @rand() #11
  %472 = add nsw i32 %471, -1073741824
  store i32 %472, i32* %470, align 4, !tbaa !33
  %473 = add nuw nsw i64 %469, 1
  %474 = icmp eq i64 %473, 846
  br i1 %474, label %475, label %468

; <label>:475:                                    ; preds = %468
  %476 = bitcast %"class.Eigen::Matrix.48"* %113 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %476) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %476, i8 0, i64 16, i32 8, i1 false) #11
  %477 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %113, i64 0, i32 0, i32 0, i32 1
  %478 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %113, i64 0, i32 0, i32 0, i32 0
  %479 = tail call i8* @malloc(i64 3416) #14
  %480 = icmp eq i8* %479, null
  br i1 %480, label %488, label %481

; <label>:481:                                    ; preds = %475
  %482 = ptrtoint i8* %479 to i64
  %483 = add i64 %482, 32
  %484 = and i64 %483, -32
  %485 = inttoptr i64 %484 to i8**
  %486 = getelementptr inbounds i8*, i8** %485, i64 -1
  store i8* %479, i8** %486, align 8, !tbaa !29
  %487 = inttoptr i64 %484 to i32*
  br label %488

; <label>:488:                                    ; preds = %481, %475
  %489 = phi i32* [ %487, %481 ], [ null, %475 ]
  store i32* %489, i32** %478, align 8, !tbaa !38
  store i64 18, i64* %477, align 8, !tbaa !40
  br label %490

; <label>:490:                                    ; preds = %490, %488
  %491 = phi i64 [ %495, %490 ], [ 0, %488 ]
  %492 = getelementptr inbounds i32, i32* %489, i64 %491
  %493 = tail call i32 @rand() #11
  %494 = add nsw i32 %493, -1073741824
  store i32 %494, i32* %492, align 4, !tbaa !33
  %495 = add nuw nsw i64 %491, 1
  %496 = icmp eq i64 %495, 846
  br i1 %496, label %497, label %490

; <label>:497:                                    ; preds = %490
  %498 = bitcast %"class.Eigen::Matrix.48"* %114 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %498) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %498, i8 0, i64 16, i32 8, i1 false) #11
  %499 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %114, i64 0, i32 0, i32 0, i32 1
  %500 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %114, i64 0, i32 0, i32 0, i32 0
  %501 = tail call i8* @malloc(i64 3416) #14
  %502 = icmp eq i8* %501, null
  br i1 %502, label %510, label %503

; <label>:503:                                    ; preds = %497
  %504 = ptrtoint i8* %501 to i64
  %505 = add i64 %504, 32
  %506 = and i64 %505, -32
  %507 = inttoptr i64 %506 to i8**
  %508 = getelementptr inbounds i8*, i8** %507, i64 -1
  store i8* %501, i8** %508, align 8, !tbaa !29
  %509 = inttoptr i64 %506 to i32*
  br label %510

; <label>:510:                                    ; preds = %503, %497
  %511 = phi i32* [ %509, %503 ], [ null, %497 ]
  store i32* %511, i32** %500, align 8, !tbaa !38
  store i64 18, i64* %499, align 8, !tbaa !40
  br label %512

; <label>:512:                                    ; preds = %512, %510
  %513 = phi i64 [ %517, %512 ], [ 0, %510 ]
  %514 = getelementptr inbounds i32, i32* %511, i64 %513
  %515 = tail call i32 @rand() #11
  %516 = add nsw i32 %515, -1073741824
  store i32 %516, i32* %514, align 4, !tbaa !33
  %517 = add nuw nsw i64 %513, 1
  %518 = icmp eq i64 %517, 846
  br i1 %518, label %519, label %512

; <label>:519:                                    ; preds = %512
  %520 = bitcast %"class.Eigen::Matrix.48"* %115 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %520) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %520, i8 0, i64 16, i32 8, i1 false) #11
  %521 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %115, i64 0, i32 0, i32 0, i32 1
  %522 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %115, i64 0, i32 0, i32 0, i32 0
  %523 = tail call i8* @malloc(i64 3416) #14
  %524 = icmp eq i8* %523, null
  br i1 %524, label %532, label %525

; <label>:525:                                    ; preds = %519
  %526 = ptrtoint i8* %523 to i64
  %527 = add i64 %526, 32
  %528 = and i64 %527, -32
  %529 = inttoptr i64 %528 to i8**
  %530 = getelementptr inbounds i8*, i8** %529, i64 -1
  store i8* %523, i8** %530, align 8, !tbaa !29
  %531 = inttoptr i64 %528 to i32*
  br label %532

; <label>:532:                                    ; preds = %525, %519
  %533 = phi i32* [ %531, %525 ], [ null, %519 ]
  store i32* %533, i32** %522, align 8, !tbaa !38
  store i64 18, i64* %521, align 8, !tbaa !40
  br label %534

; <label>:534:                                    ; preds = %534, %532
  %535 = phi i64 [ %539, %534 ], [ 0, %532 ]
  %536 = getelementptr inbounds i32, i32* %533, i64 %535
  %537 = tail call i32 @rand() #11
  %538 = add nsw i32 %537, -1073741824
  store i32 %538, i32* %536, align 4, !tbaa !33
  %539 = add nuw nsw i64 %535, 1
  %540 = icmp eq i64 %539, 846
  br i1 %540, label %541, label %534

; <label>:541:                                    ; preds = %534
  %542 = bitcast %"class.Eigen::Matrix.48"* %116 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %542) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %542, i8 0, i64 16, i32 8, i1 false) #11
  %543 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %116, i64 0, i32 0, i32 0, i32 1
  %544 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %116, i64 0, i32 0, i32 0, i32 0
  %545 = tail call i8* @malloc(i64 3416) #14
  %546 = icmp eq i8* %545, null
  br i1 %546, label %554, label %547

; <label>:547:                                    ; preds = %541
  %548 = ptrtoint i8* %545 to i64
  %549 = add i64 %548, 32
  %550 = and i64 %549, -32
  %551 = inttoptr i64 %550 to i8**
  %552 = getelementptr inbounds i8*, i8** %551, i64 -1
  store i8* %545, i8** %552, align 8, !tbaa !29
  %553 = inttoptr i64 %550 to i32*
  br label %554

; <label>:554:                                    ; preds = %547, %541
  %555 = phi i32* [ %553, %547 ], [ null, %541 ]
  store i32* %555, i32** %544, align 8, !tbaa !38
  store i64 18, i64* %543, align 8, !tbaa !40
  br label %556

; <label>:556:                                    ; preds = %556, %554
  %557 = phi i64 [ %561, %556 ], [ 0, %554 ]
  %558 = getelementptr inbounds i32, i32* %555, i64 %557
  %559 = tail call i32 @rand() #11
  %560 = add nsw i32 %559, -1073741824
  store i32 %560, i32* %558, align 4, !tbaa !33
  %561 = add nuw nsw i64 %557, 1
  %562 = icmp eq i64 %561, 846
  br i1 %562, label %563, label %556

; <label>:563:                                    ; preds = %556
  %564 = tail call i8* @malloc(i64 3416) #14
  %565 = icmp eq i8* %564, null
  br i1 %565, label %573, label %566

; <label>:566:                                    ; preds = %563
  %567 = ptrtoint i8* %564 to i64
  %568 = add i64 %567, 32
  %569 = and i64 %568, -32
  %570 = inttoptr i64 %569 to i8**
  %571 = getelementptr inbounds i8*, i8** %570, i64 -1
  store i8* %564, i8** %571, align 8, !tbaa !29
  %572 = inttoptr i64 %569 to i32*
  br label %573

; <label>:573:                                    ; preds = %566, %563
  %574 = phi i32* [ %572, %566 ], [ null, %563 ]
  br label %575

; <label>:575:                                    ; preds = %575, %573
  %576 = phi i64 [ %580, %575 ], [ 0, %573 ]
  %577 = getelementptr inbounds i32, i32* %574, i64 %576
  %578 = tail call i32 @rand() #11
  %579 = add nsw i32 %578, -1073741824
  store i32 %579, i32* %577, align 4, !tbaa !33
  %580 = add nuw nsw i64 %576, 1
  %581 = icmp eq i64 %580, 846
  br i1 %581, label %582, label %575

; <label>:582:                                    ; preds = %575
  %583 = bitcast %"class.Eigen::Matrix.48"* %117 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %583) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %583, i8 0, i64 16, i32 8, i1 false) #11
  %584 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %117, i64 0, i32 0, i32 0, i32 1
  %585 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %117, i64 0, i32 0, i32 0, i32 0
  %586 = tail call i8* @malloc(i64 3416) #14
  %587 = icmp eq i8* %586, null
  br i1 %587, label %595, label %588

; <label>:588:                                    ; preds = %582
  %589 = ptrtoint i8* %586 to i64
  %590 = add i64 %589, 32
  %591 = and i64 %590, -32
  %592 = inttoptr i64 %591 to i8**
  %593 = getelementptr inbounds i8*, i8** %592, i64 -1
  store i8* %586, i8** %593, align 8, !tbaa !29
  %594 = inttoptr i64 %591 to i32*
  br label %595

; <label>:595:                                    ; preds = %588, %582
  %596 = phi i32* [ %594, %588 ], [ null, %582 ]
  store i32* %596, i32** %585, align 8, !tbaa !38
  store i64 18, i64* %584, align 8, !tbaa !40
  br label %597

; <label>:597:                                    ; preds = %597, %595
  %598 = phi i64 [ %602, %597 ], [ 0, %595 ]
  %599 = getelementptr inbounds i32, i32* %596, i64 %598
  %600 = tail call i32 @rand() #11
  %601 = add nsw i32 %600, -1073741824
  store i32 %601, i32* %599, align 4, !tbaa !33
  %602 = add nuw nsw i64 %598, 1
  %603 = icmp eq i64 %602, 846
  br i1 %603, label %604, label %597

; <label>:604:                                    ; preds = %597
  br label %605

; <label>:605:                                    ; preds = %604, %605
  %606 = phi i64 [ %608, %605 ], [ 0, %604 ]
  %607 = tail call i32 @rand() #11
  %608 = add nuw nsw i64 %606, 1
  %609 = icmp eq i64 %608, 2209
  br i1 %609, label %610, label %605

; <label>:610:                                    ; preds = %605
  %611 = bitcast %"class.Eigen::Matrix.63"* %118 to i8*
  call void @llvm.lifetime.start(i64 8836, i8* nonnull %611) #11
  br label %612

; <label>:612:                                    ; preds = %612, %610
  %613 = phi i64 [ 0, %610 ], [ %617, %612 ]
  %614 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %118, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %613
  %615 = tail call i32 @rand() #11
  %616 = add nsw i32 %615, -1073741824
  store i32 %616, i32* %614, align 4, !tbaa !33
  %617 = add nuw nsw i64 %613, 1
  %618 = icmp eq i64 %617, 2209
  br i1 %618, label %619, label %612

; <label>:619:                                    ; preds = %612
  %620 = bitcast %"class.Eigen::Matrix.63"* %119 to i8*
  call void @llvm.lifetime.start(i64 8836, i8* nonnull %620) #11
  br label %621

; <label>:621:                                    ; preds = %621, %619
  %622 = phi i64 [ 0, %619 ], [ %626, %621 ]
  %623 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %119, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %622
  %624 = tail call i32 @rand() #11
  %625 = add nsw i32 %624, -1073741824
  store i32 %625, i32* %623, align 4, !tbaa !33
  %626 = add nuw nsw i64 %622, 1
  %627 = icmp eq i64 %626, 2209
  br i1 %627, label %628, label %621

; <label>:628:                                    ; preds = %621
  br label %629

; <label>:629:                                    ; preds = %628, %629
  %630 = phi i64 [ %632, %629 ], [ 0, %628 ]
  %631 = tail call i32 @rand() #11
  %632 = add nuw nsw i64 %630, 1
  %633 = icmp eq i64 %632, 2209
  br i1 %633, label %634, label %629

; <label>:634:                                    ; preds = %629
  %635 = bitcast %"class.Eigen::Matrix.63"* %120 to i8*
  call void @llvm.lifetime.start(i64 8836, i8* nonnull %635) #11
  br label %636

; <label>:636:                                    ; preds = %636, %634
  %637 = phi i64 [ 0, %634 ], [ %641, %636 ]
  %638 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %120, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %637
  %639 = tail call i32 @rand() #11
  %640 = add nsw i32 %639, -1073741824
  store i32 %640, i32* %638, align 4, !tbaa !33
  %641 = add nuw nsw i64 %637, 1
  %642 = icmp eq i64 %641, 2209
  br i1 %642, label %643, label %636

; <label>:643:                                    ; preds = %636
  br label %644

; <label>:644:                                    ; preds = %643, %644
  %645 = phi i64 [ %647, %644 ], [ 0, %643 ]
  %646 = tail call i32 @rand() #11
  %647 = add nuw nsw i64 %645, 1
  %648 = icmp eq i64 %647, 2209
  br i1 %648, label %649, label %644

; <label>:649:                                    ; preds = %644
  %650 = bitcast %"class.Eigen::Matrix.77"* %121 to i8*
  call void @llvm.lifetime.start(i64 1128, i8* nonnull %650) #11
  br label %651

; <label>:651:                                    ; preds = %651, %649
  %652 = phi i64 [ 0, %649 ], [ %656, %651 ]
  %653 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %652
  %654 = tail call i32 @rand() #11
  %655 = add nsw i32 %654, -1073741824
  store i32 %655, i32* %653, align 4, !tbaa !33
  %656 = add nuw nsw i64 %652, 1
  %657 = icmp eq i64 %656, 282
  br i1 %657, label %658, label %651

; <label>:658:                                    ; preds = %651
  %659 = bitcast %"class.Eigen::Matrix.77"* %122 to i8*
  call void @llvm.lifetime.start(i64 1128, i8* nonnull %659) #11
  br label %660

; <label>:660:                                    ; preds = %660, %658
  %661 = phi i64 [ 0, %658 ], [ %665, %660 ]
  %662 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %122, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %661
  %663 = tail call i32 @rand() #11
  %664 = add nsw i32 %663, -1073741824
  store i32 %664, i32* %662, align 4, !tbaa !33
  %665 = add nuw nsw i64 %661, 1
  %666 = icmp eq i64 %665, 282
  br i1 %666, label %667, label %660

; <label>:667:                                    ; preds = %660
  %668 = bitcast %"class.Eigen::Matrix.77"* %123 to i8*
  call void @llvm.lifetime.start(i64 1128, i8* nonnull %668) #11
  br label %669

; <label>:669:                                    ; preds = %669, %667
  %670 = phi i64 [ 0, %667 ], [ %674, %669 ]
  %671 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %123, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %670
  %672 = tail call i32 @rand() #11
  %673 = add nsw i32 %672, -1073741824
  store i32 %673, i32* %671, align 4, !tbaa !33
  %674 = add nuw nsw i64 %670, 1
  %675 = icmp eq i64 %674, 282
  br i1 %675, label %676, label %669

; <label>:676:                                    ; preds = %669
  %677 = bitcast %"class.Eigen::Matrix.77"* %124 to i8*
  call void @llvm.lifetime.start(i64 1128, i8* nonnull %677) #11
  br label %678

; <label>:678:                                    ; preds = %678, %676
  %679 = phi i64 [ 0, %676 ], [ %683, %678 ]
  %680 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %124, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %679
  %681 = tail call i32 @rand() #11
  %682 = add nsw i32 %681, -1073741824
  store i32 %682, i32* %680, align 4, !tbaa !33
  %683 = add nuw nsw i64 %679, 1
  %684 = icmp eq i64 %683, 282
  br i1 %684, label %685, label %678

; <label>:685:                                    ; preds = %678
  %686 = bitcast %"class.Eigen::Matrix.77"* %125 to i8*
  call void @llvm.lifetime.start(i64 1128, i8* nonnull %686) #11
  br label %687

; <label>:687:                                    ; preds = %687, %685
  %688 = phi i64 [ 0, %685 ], [ %692, %687 ]
  %689 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %125, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %688
  %690 = tail call i32 @rand() #11
  %691 = add nsw i32 %690, -1073741824
  store i32 %691, i32* %689, align 4, !tbaa !33
  %692 = add nuw nsw i64 %688, 1
  %693 = icmp eq i64 %692, 282
  br i1 %693, label %694, label %687

; <label>:694:                                    ; preds = %687
  %695 = bitcast %"class.Eigen::Matrix.77"* %126 to i8*
  call void @llvm.lifetime.start(i64 1128, i8* nonnull %695) #11
  br label %696

; <label>:696:                                    ; preds = %696, %694
  %697 = phi i64 [ 0, %694 ], [ %701, %696 ]
  %698 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %697
  %699 = tail call i32 @rand() #11
  %700 = add nsw i32 %699, -1073741824
  store i32 %700, i32* %698, align 4, !tbaa !33
  %701 = add nuw nsw i64 %697, 1
  %702 = icmp eq i64 %701, 282
  br i1 %702, label %703, label %696

; <label>:703:                                    ; preds = %696
  br label %704

; <label>:704:                                    ; preds = %703, %704
  %705 = phi i64 [ %707, %704 ], [ 0, %703 ]
  %706 = tail call i32 @rand() #11
  %707 = add nuw nsw i64 %705, 1
  %708 = icmp eq i64 %707, 282
  br i1 %708, label %709, label %704

; <label>:709:                                    ; preds = %704
  br label %710

; <label>:710:                                    ; preds = %709, %710
  %711 = phi i64 [ %713, %710 ], [ 0, %709 ]
  %712 = tail call i32 @rand() #11
  %713 = add nuw nsw i64 %711, 1
  %714 = icmp eq i64 %713, 282
  br i1 %714, label %715, label %710

; <label>:715:                                    ; preds = %710
  br label %716

; <label>:716:                                    ; preds = %715, %716
  %717 = phi i64 [ %719, %716 ], [ 0, %715 ]
  %718 = tail call i32 @rand() #11
  %719 = add nuw nsw i64 %717, 1
  %720 = icmp eq i64 %719, 282
  br i1 %720, label %721, label %716

; <label>:721:                                    ; preds = %716
  br label %722

; <label>:722:                                    ; preds = %721, %722
  %723 = phi i64 [ %725, %722 ], [ 0, %721 ]
  %724 = tail call i32 @rand() #11
  %725 = add nuw nsw i64 %723, 1
  %726 = icmp eq i64 %725, 282
  br i1 %726, label %727, label %722

; <label>:727:                                    ; preds = %722
  br label %728

; <label>:728:                                    ; preds = %727, %728
  %729 = phi i64 [ %731, %728 ], [ 0, %727 ]
  %730 = tail call i32 @rand() #11
  %731 = add nuw nsw i64 %729, 1
  %732 = icmp eq i64 %731, 282
  br i1 %732, label %733, label %728

; <label>:733:                                    ; preds = %728
  br label %734

; <label>:734:                                    ; preds = %733, %734
  %735 = phi i64 [ %737, %734 ], [ 0, %733 ]
  %736 = tail call i32 @rand() #11
  %737 = add nuw nsw i64 %735, 1
  %738 = icmp eq i64 %737, 282
  br i1 %738, label %739, label %734

; <label>:739:                                    ; preds = %734
  %740 = bitcast %"class.Eigen::Matrix.108"* %127 to i8*
  call void @llvm.lifetime.start(i64 144, i8* nonnull %740) #11
  %741 = getelementptr inbounds %"class.Eigen::CwiseNullaryOp.118", %"class.Eigen::CwiseNullaryOp.118"* %128, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start(i64 3, i8* nonnull %741) #11
  %742 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %101, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %742) #11
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLi6ELi6ELi0ELi6ELi6EEENS_14CwiseNullaryOpINS0_16scalar_random_opIiEES3_EENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.108"* nonnull dereferenceable(144) %127, %"class.Eigen::CwiseNullaryOp.118"* nonnull dereferenceable(3) %128, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %101) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %742) #11
  call void @llvm.lifetime.end(i64 3, i8* nonnull %741) #11
  %743 = bitcast %"class.Eigen::Matrix.108"* %129 to i8*
  call void @llvm.lifetime.start(i64 144, i8* nonnull %743) #11
  %744 = getelementptr inbounds %"class.Eigen::CwiseNullaryOp.118", %"class.Eigen::CwiseNullaryOp.118"* %130, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start(i64 3, i8* nonnull %744) #11
  %745 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %100, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %745) #11
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLi6ELi6ELi0ELi6ELi6EEENS_14CwiseNullaryOpINS0_16scalar_random_opIiEES3_EENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.108"* nonnull dereferenceable(144) %129, %"class.Eigen::CwiseNullaryOp.118"* nonnull dereferenceable(3) %130, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %100) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %745) #11
  call void @llvm.lifetime.end(i64 3, i8* nonnull %744) #11
  %746 = bitcast %"class.Eigen::Matrix.108"* %131 to i8*
  call void @llvm.lifetime.start(i64 144, i8* nonnull %746) #11
  %747 = getelementptr inbounds %"class.Eigen::CwiseNullaryOp.118", %"class.Eigen::CwiseNullaryOp.118"* %132, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start(i64 3, i8* nonnull %747) #11
  %748 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %99, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %748) #11
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLi6ELi6ELi0ELi6ELi6EEENS_14CwiseNullaryOpINS0_16scalar_random_opIiEES3_EENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.108"* nonnull dereferenceable(144) %131, %"class.Eigen::CwiseNullaryOp.118"* nonnull dereferenceable(3) %132, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %99) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %748) #11
  call void @llvm.lifetime.end(i64 3, i8* nonnull %747) #11
  %749 = bitcast %"class.Eigen::Matrix.108"* %133 to i8*
  call void @llvm.lifetime.start(i64 144, i8* nonnull %749) #11
  %750 = getelementptr inbounds %"class.Eigen::CwiseNullaryOp.118", %"class.Eigen::CwiseNullaryOp.118"* %134, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start(i64 3, i8* nonnull %750) #11
  %751 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %98, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %751) #11
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLi6ELi6ELi0ELi6ELi6EEENS_14CwiseNullaryOpINS0_16scalar_random_opIiEES3_EENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.108"* nonnull dereferenceable(144) %133, %"class.Eigen::CwiseNullaryOp.118"* nonnull dereferenceable(3) %134, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %98) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %751) #11
  call void @llvm.lifetime.end(i64 3, i8* nonnull %750) #11
  %752 = bitcast %"class.Eigen::Matrix.108"* %135 to i8*
  call void @llvm.lifetime.start(i64 144, i8* nonnull %752) #11
  %753 = getelementptr inbounds %"class.Eigen::CwiseNullaryOp.118", %"class.Eigen::CwiseNullaryOp.118"* %136, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start(i64 3, i8* nonnull %753) #11
  %754 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %97, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %754) #11
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLi6ELi6ELi0ELi6ELi6EEENS_14CwiseNullaryOpINS0_16scalar_random_opIiEES3_EENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.108"* nonnull dereferenceable(144) %135, %"class.Eigen::CwiseNullaryOp.118"* nonnull dereferenceable(3) %136, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %97) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %754) #11
  call void @llvm.lifetime.end(i64 3, i8* nonnull %753) #11
  %755 = bitcast %"class.Eigen::Matrix.108"* %137 to i8*
  call void @llvm.lifetime.start(i64 144, i8* nonnull %755) #11
  %756 = getelementptr inbounds %"class.Eigen::CwiseNullaryOp.118", %"class.Eigen::CwiseNullaryOp.118"* %138, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start(i64 3, i8* nonnull %756) #11
  %757 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %96, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %757) #11
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLi6ELi6ELi0ELi6ELi6EEENS_14CwiseNullaryOpINS0_16scalar_random_opIiEES3_EENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.108"* nonnull dereferenceable(144) %137, %"class.Eigen::CwiseNullaryOp.118"* nonnull dereferenceable(3) %138, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %96) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %757) #11
  call void @llvm.lifetime.end(i64 3, i8* nonnull %756) #11
  %758 = bitcast %"class.Eigen::Matrix.123"* %139 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %758) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %758, i8 0, i64 16, i32 8, i1 false) #11
  %759 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %139, i64 0, i32 0, i32 0, i32 1
  %760 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %139, i64 0, i32 0, i32 0, i32 0
  %761 = call i8* @malloc(i64 464) #14
  %762 = icmp eq i8* %761, null
  br i1 %762, label %770, label %763

; <label>:763:                                    ; preds = %739
  %764 = ptrtoint i8* %761 to i64
  %765 = add i64 %764, 32
  %766 = and i64 %765, -32
  %767 = inttoptr i64 %766 to i8**
  %768 = getelementptr inbounds i8*, i8** %767, i64 -1
  store i8* %761, i8** %768, align 8, !tbaa !29
  %769 = inttoptr i64 %766 to i32*
  br label %770

; <label>:770:                                    ; preds = %739, %763
  %771 = phi i32* [ %769, %763 ], [ null, %739 ]
  store i32* %771, i32** %760, align 8, !tbaa !41
  store i64 18, i64* %759, align 8, !tbaa !43
  br label %772

; <label>:772:                                    ; preds = %772, %770
  %773 = phi i64 [ %777, %772 ], [ 0, %770 ]
  %774 = getelementptr inbounds i32, i32* %771, i64 %773
  %775 = call i32 @rand() #11
  %776 = add nsw i32 %775, -1073741824
  store i32 %776, i32* %774, align 4, !tbaa !33
  %777 = add nuw nsw i64 %773, 1
  %778 = icmp eq i64 %777, 108
  br i1 %778, label %779, label %772

; <label>:779:                                    ; preds = %772
  %780 = bitcast %"class.Eigen::Matrix.123"* %140 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %780) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %780, i8 0, i64 16, i32 8, i1 false) #11
  %781 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %140, i64 0, i32 0, i32 0, i32 1
  %782 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %140, i64 0, i32 0, i32 0, i32 0
  %783 = call i8* @malloc(i64 464) #14
  %784 = icmp eq i8* %783, null
  br i1 %784, label %792, label %785

; <label>:785:                                    ; preds = %779
  %786 = ptrtoint i8* %783 to i64
  %787 = add i64 %786, 32
  %788 = and i64 %787, -32
  %789 = inttoptr i64 %788 to i8**
  %790 = getelementptr inbounds i8*, i8** %789, i64 -1
  store i8* %783, i8** %790, align 8, !tbaa !29
  %791 = inttoptr i64 %788 to i32*
  br label %792

; <label>:792:                                    ; preds = %779, %785
  %793 = phi i32* [ %791, %785 ], [ null, %779 ]
  store i32* %793, i32** %782, align 8, !tbaa !41
  store i64 18, i64* %781, align 8, !tbaa !43
  br label %794

; <label>:794:                                    ; preds = %794, %792
  %795 = phi i64 [ %799, %794 ], [ 0, %792 ]
  %796 = getelementptr inbounds i32, i32* %793, i64 %795
  %797 = call i32 @rand() #11
  %798 = add nsw i32 %797, -1073741824
  store i32 %798, i32* %796, align 4, !tbaa !33
  %799 = add nuw nsw i64 %795, 1
  %800 = icmp eq i64 %799, 108
  br i1 %800, label %801, label %794

; <label>:801:                                    ; preds = %794
  %802 = bitcast %"class.Eigen::Matrix.123"* %141 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %802) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %802, i8 0, i64 16, i32 8, i1 false) #11
  %803 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %141, i64 0, i32 0, i32 0, i32 1
  %804 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %141, i64 0, i32 0, i32 0, i32 0
  %805 = call i8* @malloc(i64 464) #14
  %806 = icmp eq i8* %805, null
  br i1 %806, label %814, label %807

; <label>:807:                                    ; preds = %801
  %808 = ptrtoint i8* %805 to i64
  %809 = add i64 %808, 32
  %810 = and i64 %809, -32
  %811 = inttoptr i64 %810 to i8**
  %812 = getelementptr inbounds i8*, i8** %811, i64 -1
  store i8* %805, i8** %812, align 8, !tbaa !29
  %813 = inttoptr i64 %810 to i32*
  br label %814

; <label>:814:                                    ; preds = %801, %807
  %815 = phi i32* [ %813, %807 ], [ null, %801 ]
  store i32* %815, i32** %804, align 8, !tbaa !41
  store i64 18, i64* %803, align 8, !tbaa !43
  br label %816

; <label>:816:                                    ; preds = %816, %814
  %817 = phi i64 [ %821, %816 ], [ 0, %814 ]
  %818 = getelementptr inbounds i32, i32* %815, i64 %817
  %819 = call i32 @rand() #11
  %820 = add nsw i32 %819, -1073741824
  store i32 %820, i32* %818, align 4, !tbaa !33
  %821 = add nuw nsw i64 %817, 1
  %822 = icmp eq i64 %821, 108
  br i1 %822, label %823, label %816

; <label>:823:                                    ; preds = %816
  %824 = bitcast %"class.Eigen::Matrix.123"* %142 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %824) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %824, i8 0, i64 16, i32 8, i1 false) #11
  %825 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %142, i64 0, i32 0, i32 0, i32 1
  %826 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %142, i64 0, i32 0, i32 0, i32 0
  %827 = call i8* @malloc(i64 464) #14
  %828 = icmp eq i8* %827, null
  br i1 %828, label %836, label %829

; <label>:829:                                    ; preds = %823
  %830 = ptrtoint i8* %827 to i64
  %831 = add i64 %830, 32
  %832 = and i64 %831, -32
  %833 = inttoptr i64 %832 to i8**
  %834 = getelementptr inbounds i8*, i8** %833, i64 -1
  store i8* %827, i8** %834, align 8, !tbaa !29
  %835 = inttoptr i64 %832 to i32*
  br label %836

; <label>:836:                                    ; preds = %823, %829
  %837 = phi i32* [ %835, %829 ], [ null, %823 ]
  store i32* %837, i32** %826, align 8, !tbaa !41
  store i64 18, i64* %825, align 8, !tbaa !43
  br label %838

; <label>:838:                                    ; preds = %838, %836
  %839 = phi i64 [ %843, %838 ], [ 0, %836 ]
  %840 = getelementptr inbounds i32, i32* %837, i64 %839
  %841 = call i32 @rand() #11
  %842 = add nsw i32 %841, -1073741824
  store i32 %842, i32* %840, align 4, !tbaa !33
  %843 = add nuw nsw i64 %839, 1
  %844 = icmp eq i64 %843, 108
  br i1 %844, label %845, label %838

; <label>:845:                                    ; preds = %838
  %846 = bitcast %"class.Eigen::Matrix.123"* %143 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %846) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %846, i8 0, i64 16, i32 8, i1 false) #11
  %847 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %143, i64 0, i32 0, i32 0, i32 1
  %848 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %143, i64 0, i32 0, i32 0, i32 0
  %849 = call i8* @malloc(i64 464) #14
  %850 = icmp eq i8* %849, null
  br i1 %850, label %858, label %851

; <label>:851:                                    ; preds = %845
  %852 = ptrtoint i8* %849 to i64
  %853 = add i64 %852, 32
  %854 = and i64 %853, -32
  %855 = inttoptr i64 %854 to i8**
  %856 = getelementptr inbounds i8*, i8** %855, i64 -1
  store i8* %849, i8** %856, align 8, !tbaa !29
  %857 = inttoptr i64 %854 to i32*
  br label %858

; <label>:858:                                    ; preds = %845, %851
  %859 = phi i32* [ %857, %851 ], [ null, %845 ]
  store i32* %859, i32** %848, align 8, !tbaa !41
  store i64 18, i64* %847, align 8, !tbaa !43
  br label %860

; <label>:860:                                    ; preds = %860, %858
  %861 = phi i64 [ %865, %860 ], [ 0, %858 ]
  %862 = getelementptr inbounds i32, i32* %859, i64 %861
  %863 = call i32 @rand() #11
  %864 = add nsw i32 %863, -1073741824
  store i32 %864, i32* %862, align 4, !tbaa !33
  %865 = add nuw nsw i64 %861, 1
  %866 = icmp eq i64 %865, 108
  br i1 %866, label %867, label %860

; <label>:867:                                    ; preds = %860
  %868 = bitcast %"class.Eigen::Matrix.123"* %144 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %868) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %868, i8 0, i64 16, i32 8, i1 false) #11
  %869 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %144, i64 0, i32 0, i32 0, i32 1
  %870 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %144, i64 0, i32 0, i32 0, i32 0
  %871 = call i8* @malloc(i64 464) #14
  %872 = icmp eq i8* %871, null
  br i1 %872, label %880, label %873

; <label>:873:                                    ; preds = %867
  %874 = ptrtoint i8* %871 to i64
  %875 = add i64 %874, 32
  %876 = and i64 %875, -32
  %877 = inttoptr i64 %876 to i8**
  %878 = getelementptr inbounds i8*, i8** %877, i64 -1
  store i8* %871, i8** %878, align 8, !tbaa !29
  %879 = inttoptr i64 %876 to i32*
  br label %880

; <label>:880:                                    ; preds = %867, %873
  %881 = phi i32* [ %879, %873 ], [ null, %867 ]
  store i32* %881, i32** %870, align 8, !tbaa !41
  store i64 18, i64* %869, align 8, !tbaa !43
  br label %882

; <label>:882:                                    ; preds = %882, %880
  %883 = phi i64 [ %887, %882 ], [ 0, %880 ]
  %884 = getelementptr inbounds i32, i32* %881, i64 %883
  %885 = call i32 @rand() #11
  %886 = add nsw i32 %885, -1073741824
  store i32 %886, i32* %884, align 4, !tbaa !33
  %887 = add nuw nsw i64 %883, 1
  %888 = icmp eq i64 %887, 108
  br i1 %888, label %889, label %882

; <label>:889:                                    ; preds = %882
  %890 = call i8* @malloc(i64 464) #14
  %891 = icmp eq i8* %890, null
  br i1 %891, label %899, label %892

; <label>:892:                                    ; preds = %889
  %893 = ptrtoint i8* %890 to i64
  %894 = add i64 %893, 32
  %895 = and i64 %894, -32
  %896 = inttoptr i64 %895 to i8**
  %897 = getelementptr inbounds i8*, i8** %896, i64 -1
  store i8* %890, i8** %897, align 8, !tbaa !29
  %898 = inttoptr i64 %895 to i32*
  br label %899

; <label>:899:                                    ; preds = %889, %892
  %900 = phi i32* [ %898, %892 ], [ null, %889 ]
  br label %901

; <label>:901:                                    ; preds = %901, %899
  %902 = phi i64 [ %906, %901 ], [ 0, %899 ]
  %903 = getelementptr inbounds i32, i32* %900, i64 %902
  %904 = call i32 @rand() #11
  %905 = add nsw i32 %904, -1073741824
  store i32 %905, i32* %903, align 4, !tbaa !33
  %906 = add nuw nsw i64 %902, 1
  %907 = icmp eq i64 %906, 108
  br i1 %907, label %908, label %901

; <label>:908:                                    ; preds = %901
  %909 = call i8* @malloc(i64 464) #14
  %910 = icmp eq i8* %909, null
  br i1 %910, label %918, label %911

; <label>:911:                                    ; preds = %908
  %912 = ptrtoint i8* %909 to i64
  %913 = add i64 %912, 32
  %914 = and i64 %913, -32
  %915 = inttoptr i64 %914 to i8**
  %916 = getelementptr inbounds i8*, i8** %915, i64 -1
  store i8* %909, i8** %916, align 8, !tbaa !29
  %917 = inttoptr i64 %914 to i32*
  br label %918

; <label>:918:                                    ; preds = %908, %911
  %919 = phi i32* [ %917, %911 ], [ null, %908 ]
  br label %920

; <label>:920:                                    ; preds = %920, %918
  %921 = phi i64 [ %925, %920 ], [ 0, %918 ]
  %922 = getelementptr inbounds i32, i32* %919, i64 %921
  %923 = call i32 @rand() #11
  %924 = add nsw i32 %923, -1073741824
  store i32 %924, i32* %922, align 4, !tbaa !33
  %925 = add nuw nsw i64 %921, 1
  %926 = icmp eq i64 %925, 108
  br i1 %926, label %927, label %920

; <label>:927:                                    ; preds = %920
  %928 = call i8* @malloc(i64 464) #14
  %929 = icmp eq i8* %928, null
  br i1 %929, label %937, label %930

; <label>:930:                                    ; preds = %927
  %931 = ptrtoint i8* %928 to i64
  %932 = add i64 %931, 32
  %933 = and i64 %932, -32
  %934 = inttoptr i64 %933 to i8**
  %935 = getelementptr inbounds i8*, i8** %934, i64 -1
  store i8* %928, i8** %935, align 8, !tbaa !29
  %936 = inttoptr i64 %933 to i32*
  br label %937

; <label>:937:                                    ; preds = %927, %930
  %938 = phi i32* [ %936, %930 ], [ null, %927 ]
  br label %939

; <label>:939:                                    ; preds = %939, %937
  %940 = phi i64 [ %944, %939 ], [ 0, %937 ]
  %941 = getelementptr inbounds i32, i32* %938, i64 %940
  %942 = call i32 @rand() #11
  %943 = add nsw i32 %942, -1073741824
  store i32 %943, i32* %941, align 4, !tbaa !33
  %944 = add nuw nsw i64 %940, 1
  %945 = icmp eq i64 %944, 108
  br i1 %945, label %946, label %939

; <label>:946:                                    ; preds = %939
  %947 = call i8* @malloc(i64 464) #14
  %948 = icmp eq i8* %947, null
  br i1 %948, label %956, label %949

; <label>:949:                                    ; preds = %946
  %950 = ptrtoint i8* %947 to i64
  %951 = add i64 %950, 32
  %952 = and i64 %951, -32
  %953 = inttoptr i64 %952 to i8**
  %954 = getelementptr inbounds i8*, i8** %953, i64 -1
  store i8* %947, i8** %954, align 8, !tbaa !29
  %955 = inttoptr i64 %952 to i32*
  br label %956

; <label>:956:                                    ; preds = %946, %949
  %957 = phi i32* [ %955, %949 ], [ null, %946 ]
  br label %958

; <label>:958:                                    ; preds = %958, %956
  %959 = phi i64 [ %963, %958 ], [ 0, %956 ]
  %960 = getelementptr inbounds i32, i32* %957, i64 %959
  %961 = call i32 @rand() #11
  %962 = add nsw i32 %961, -1073741824
  store i32 %962, i32* %960, align 4, !tbaa !33
  %963 = add nuw nsw i64 %959, 1
  %964 = icmp eq i64 %963, 108
  br i1 %964, label %965, label %958

; <label>:965:                                    ; preds = %958
  %966 = call i8* @malloc(i64 464) #14
  %967 = icmp eq i8* %966, null
  br i1 %967, label %975, label %968

; <label>:968:                                    ; preds = %965
  %969 = ptrtoint i8* %966 to i64
  %970 = add i64 %969, 32
  %971 = and i64 %970, -32
  %972 = inttoptr i64 %971 to i8**
  %973 = getelementptr inbounds i8*, i8** %972, i64 -1
  store i8* %966, i8** %973, align 8, !tbaa !29
  %974 = inttoptr i64 %971 to i32*
  br label %975

; <label>:975:                                    ; preds = %965, %968
  %976 = phi i32* [ %974, %968 ], [ null, %965 ]
  br label %977

; <label>:977:                                    ; preds = %977, %975
  %978 = phi i64 [ %982, %977 ], [ 0, %975 ]
  %979 = getelementptr inbounds i32, i32* %976, i64 %978
  %980 = call i32 @rand() #11
  %981 = add nsw i32 %980, -1073741824
  store i32 %981, i32* %979, align 4, !tbaa !33
  %982 = add nuw nsw i64 %978, 1
  %983 = icmp eq i64 %982, 108
  br i1 %983, label %984, label %977

; <label>:984:                                    ; preds = %977
  %985 = call i8* @malloc(i64 464) #14
  %986 = icmp eq i8* %985, null
  br i1 %986, label %994, label %987

; <label>:987:                                    ; preds = %984
  %988 = ptrtoint i8* %985 to i64
  %989 = add i64 %988, 32
  %990 = and i64 %989, -32
  %991 = inttoptr i64 %990 to i8**
  %992 = getelementptr inbounds i8*, i8** %991, i64 -1
  store i8* %985, i8** %992, align 8, !tbaa !29
  %993 = inttoptr i64 %990 to i32*
  br label %994

; <label>:994:                                    ; preds = %984, %987
  %995 = phi i32* [ %993, %987 ], [ null, %984 ]
  br label %996

; <label>:996:                                    ; preds = %996, %994
  %997 = phi i64 [ %1001, %996 ], [ 0, %994 ]
  %998 = getelementptr inbounds i32, i32* %995, i64 %997
  %999 = call i32 @rand() #11
  %1000 = add nsw i32 %999, -1073741824
  store i32 %1000, i32* %998, align 4, !tbaa !33
  %1001 = add nuw nsw i64 %997, 1
  %1002 = icmp eq i64 %1001, 108
  br i1 %1002, label %1003, label %996

; <label>:1003:                                   ; preds = %996
  %1004 = bitcast %"class.Eigen::Matrix.153"* %145 to i8*
  call void @llvm.lifetime.start(i64 188, i8* nonnull %1004) #11
  br label %1005

; <label>:1005:                                   ; preds = %1005, %1003
  %1006 = phi i64 [ 0, %1003 ], [ %1010, %1005 ]
  %1007 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %145, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %1006
  %1008 = call i32 @rand() #11
  %1009 = add nsw i32 %1008, -1073741824
  store i32 %1009, i32* %1007, align 4, !tbaa !33
  %1010 = add nuw nsw i64 %1006, 1
  %1011 = icmp eq i64 %1010, 47
  br i1 %1011, label %1012, label %1005

; <label>:1012:                                   ; preds = %1005
  %1013 = bitcast %"class.Eigen::Matrix.153"* %146 to i8*
  call void @llvm.lifetime.start(i64 188, i8* nonnull %1013) #11
  br label %1014

; <label>:1014:                                   ; preds = %1014, %1012
  %1015 = phi i64 [ 0, %1012 ], [ %1019, %1014 ]
  %1016 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %146, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %1015
  %1017 = call i32 @rand() #11
  %1018 = add nsw i32 %1017, -1073741824
  store i32 %1018, i32* %1016, align 4, !tbaa !33
  %1019 = add nuw nsw i64 %1015, 1
  %1020 = icmp eq i64 %1019, 47
  br i1 %1020, label %1021, label %1014

; <label>:1021:                                   ; preds = %1014
  %1022 = bitcast %"class.Eigen::Matrix.153"* %147 to i8*
  call void @llvm.lifetime.start(i64 188, i8* nonnull %1022) #11
  br label %1023

; <label>:1023:                                   ; preds = %1023, %1021
  %1024 = phi i64 [ 0, %1021 ], [ %1028, %1023 ]
  %1025 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %147, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %1024
  %1026 = call i32 @rand() #11
  %1027 = add nsw i32 %1026, -1073741824
  store i32 %1027, i32* %1025, align 4, !tbaa !33
  %1028 = add nuw nsw i64 %1024, 1
  %1029 = icmp eq i64 %1028, 47
  br i1 %1029, label %1030, label %1023

; <label>:1030:                                   ; preds = %1023
  %1031 = bitcast %"class.Eigen::Matrix.153"* %148 to i8*
  call void @llvm.lifetime.start(i64 188, i8* nonnull %1031) #11
  br label %1032

; <label>:1032:                                   ; preds = %1032, %1030
  %1033 = phi i64 [ 0, %1030 ], [ %1037, %1032 ]
  %1034 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %148, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %1033
  %1035 = call i32 @rand() #11
  %1036 = add nsw i32 %1035, -1073741824
  store i32 %1036, i32* %1034, align 4, !tbaa !33
  %1037 = add nuw nsw i64 %1033, 1
  %1038 = icmp eq i64 %1037, 47
  br i1 %1038, label %1039, label %1032

; <label>:1039:                                   ; preds = %1032
  %1040 = bitcast %"class.Eigen::Matrix.153"* %149 to i8*
  call void @llvm.lifetime.start(i64 188, i8* nonnull %1040) #11
  br label %1041

; <label>:1041:                                   ; preds = %1041, %1039
  %1042 = phi i64 [ 0, %1039 ], [ %1046, %1041 ]
  %1043 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %149, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %1042
  %1044 = call i32 @rand() #11
  %1045 = add nsw i32 %1044, -1073741824
  store i32 %1045, i32* %1043, align 4, !tbaa !33
  %1046 = add nuw nsw i64 %1042, 1
  %1047 = icmp eq i64 %1046, 47
  br i1 %1047, label %1048, label %1041

; <label>:1048:                                   ; preds = %1041
  %1049 = bitcast %"class.Eigen::Matrix.153"* %150 to i8*
  call void @llvm.lifetime.start(i64 188, i8* nonnull %1049) #11
  br label %1050

; <label>:1050:                                   ; preds = %1050, %1048
  %1051 = phi i64 [ 0, %1048 ], [ %1055, %1050 ]
  %1052 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %150, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %1051
  %1053 = call i32 @rand() #11
  %1054 = add nsw i32 %1053, -1073741824
  store i32 %1054, i32* %1052, align 4, !tbaa !33
  %1055 = add nuw nsw i64 %1051, 1
  %1056 = icmp eq i64 %1055, 47
  br i1 %1056, label %1057, label %1050

; <label>:1057:                                   ; preds = %1050
  %1058 = bitcast %"class.Eigen::Matrix.170"* %151 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %1058) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %1058, i8 0, i64 16, i32 8, i1 false) #11
  %1059 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %151, i64 0, i32 0, i32 0, i32 1
  %1060 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %151, i64 0, i32 0, i32 0, i32 0
  %1061 = call i8* @malloc(i64 104) #14
  %1062 = icmp eq i8* %1061, null
  br i1 %1062, label %1070, label %1063

; <label>:1063:                                   ; preds = %1057
  %1064 = ptrtoint i8* %1061 to i64
  %1065 = add i64 %1064, 32
  %1066 = and i64 %1065, -32
  %1067 = inttoptr i64 %1066 to i8**
  %1068 = getelementptr inbounds i8*, i8** %1067, i64 -1
  store i8* %1061, i8** %1068, align 8, !tbaa !29
  %1069 = inttoptr i64 %1066 to i32*
  br label %1070

; <label>:1070:                                   ; preds = %1063, %1057
  %1071 = phi i32* [ %1069, %1063 ], [ null, %1057 ]
  store i32* %1071, i32** %1060, align 8, !tbaa !44
  store i64 18, i64* %1059, align 8, !tbaa !46
  %1072 = call i32 @rand() #11
  %1073 = add nsw i32 %1072, -1073741824
  store i32 %1073, i32* %1071, align 4, !tbaa !33
  %1074 = getelementptr inbounds i32, i32* %1071, i64 1
  %1075 = call i32 @rand() #11
  %1076 = add nsw i32 %1075, -1073741824
  store i32 %1076, i32* %1074, align 4, !tbaa !33
  %1077 = getelementptr inbounds i32, i32* %1071, i64 2
  %1078 = call i32 @rand() #11
  %1079 = add nsw i32 %1078, -1073741824
  store i32 %1079, i32* %1077, align 4, !tbaa !33
  %1080 = getelementptr inbounds i32, i32* %1071, i64 3
  %1081 = call i32 @rand() #11
  %1082 = add nsw i32 %1081, -1073741824
  store i32 %1082, i32* %1080, align 4, !tbaa !33
  %1083 = getelementptr inbounds i32, i32* %1071, i64 4
  %1084 = call i32 @rand() #11
  %1085 = add nsw i32 %1084, -1073741824
  store i32 %1085, i32* %1083, align 4, !tbaa !33
  %1086 = getelementptr inbounds i32, i32* %1071, i64 5
  %1087 = call i32 @rand() #11
  %1088 = add nsw i32 %1087, -1073741824
  store i32 %1088, i32* %1086, align 4, !tbaa !33
  %1089 = getelementptr inbounds i32, i32* %1071, i64 6
  %1090 = call i32 @rand() #11
  %1091 = add nsw i32 %1090, -1073741824
  store i32 %1091, i32* %1089, align 4, !tbaa !33
  %1092 = getelementptr inbounds i32, i32* %1071, i64 7
  %1093 = call i32 @rand() #11
  %1094 = add nsw i32 %1093, -1073741824
  store i32 %1094, i32* %1092, align 4, !tbaa !33
  %1095 = getelementptr inbounds i32, i32* %1071, i64 8
  %1096 = call i32 @rand() #11
  %1097 = add nsw i32 %1096, -1073741824
  store i32 %1097, i32* %1095, align 4, !tbaa !33
  %1098 = getelementptr inbounds i32, i32* %1071, i64 9
  %1099 = call i32 @rand() #11
  %1100 = add nsw i32 %1099, -1073741824
  store i32 %1100, i32* %1098, align 4, !tbaa !33
  %1101 = getelementptr inbounds i32, i32* %1071, i64 10
  %1102 = call i32 @rand() #11
  %1103 = add nsw i32 %1102, -1073741824
  store i32 %1103, i32* %1101, align 4, !tbaa !33
  %1104 = getelementptr inbounds i32, i32* %1071, i64 11
  %1105 = call i32 @rand() #11
  %1106 = add nsw i32 %1105, -1073741824
  store i32 %1106, i32* %1104, align 4, !tbaa !33
  %1107 = getelementptr inbounds i32, i32* %1071, i64 12
  %1108 = call i32 @rand() #11
  %1109 = add nsw i32 %1108, -1073741824
  store i32 %1109, i32* %1107, align 4, !tbaa !33
  %1110 = getelementptr inbounds i32, i32* %1071, i64 13
  %1111 = call i32 @rand() #11
  %1112 = add nsw i32 %1111, -1073741824
  store i32 %1112, i32* %1110, align 4, !tbaa !33
  %1113 = getelementptr inbounds i32, i32* %1071, i64 14
  %1114 = call i32 @rand() #11
  %1115 = add nsw i32 %1114, -1073741824
  store i32 %1115, i32* %1113, align 4, !tbaa !33
  %1116 = getelementptr inbounds i32, i32* %1071, i64 15
  %1117 = call i32 @rand() #11
  %1118 = add nsw i32 %1117, -1073741824
  store i32 %1118, i32* %1116, align 4, !tbaa !33
  %1119 = getelementptr inbounds i32, i32* %1071, i64 16
  %1120 = call i32 @rand() #11
  %1121 = add nsw i32 %1120, -1073741824
  store i32 %1121, i32* %1119, align 4, !tbaa !33
  %1122 = getelementptr inbounds i32, i32* %1071, i64 17
  %1123 = call i32 @rand() #11
  %1124 = add nsw i32 %1123, -1073741824
  store i32 %1124, i32* %1122, align 4, !tbaa !33
  %1125 = call i8* @malloc(i64 104) #14
  %1126 = icmp eq i8* %1125, null
  br i1 %1126, label %1134, label %1127

; <label>:1127:                                   ; preds = %1070
  %1128 = ptrtoint i8* %1125 to i64
  %1129 = add i64 %1128, 32
  %1130 = and i64 %1129, -32
  %1131 = inttoptr i64 %1130 to i8**
  %1132 = getelementptr inbounds i8*, i8** %1131, i64 -1
  store i8* %1125, i8** %1132, align 8, !tbaa !29
  %1133 = inttoptr i64 %1130 to i32*
  br label %1134

; <label>:1134:                                   ; preds = %1127, %1070
  %1135 = phi i32* [ %1133, %1127 ], [ null, %1070 ]
  %1136 = call i32 @rand() #11
  %1137 = add nsw i32 %1136, -1073741824
  store i32 %1137, i32* %1135, align 4, !tbaa !33
  %1138 = getelementptr inbounds i32, i32* %1135, i64 1
  %1139 = call i32 @rand() #11
  %1140 = add nsw i32 %1139, -1073741824
  store i32 %1140, i32* %1138, align 4, !tbaa !33
  %1141 = getelementptr inbounds i32, i32* %1135, i64 2
  %1142 = call i32 @rand() #11
  %1143 = add nsw i32 %1142, -1073741824
  store i32 %1143, i32* %1141, align 4, !tbaa !33
  %1144 = getelementptr inbounds i32, i32* %1135, i64 3
  %1145 = call i32 @rand() #11
  %1146 = add nsw i32 %1145, -1073741824
  store i32 %1146, i32* %1144, align 4, !tbaa !33
  %1147 = getelementptr inbounds i32, i32* %1135, i64 4
  %1148 = call i32 @rand() #11
  %1149 = add nsw i32 %1148, -1073741824
  store i32 %1149, i32* %1147, align 4, !tbaa !33
  %1150 = getelementptr inbounds i32, i32* %1135, i64 5
  %1151 = call i32 @rand() #11
  %1152 = add nsw i32 %1151, -1073741824
  store i32 %1152, i32* %1150, align 4, !tbaa !33
  %1153 = getelementptr inbounds i32, i32* %1135, i64 6
  %1154 = call i32 @rand() #11
  %1155 = add nsw i32 %1154, -1073741824
  store i32 %1155, i32* %1153, align 4, !tbaa !33
  %1156 = getelementptr inbounds i32, i32* %1135, i64 7
  %1157 = call i32 @rand() #11
  %1158 = add nsw i32 %1157, -1073741824
  store i32 %1158, i32* %1156, align 4, !tbaa !33
  %1159 = getelementptr inbounds i32, i32* %1135, i64 8
  %1160 = call i32 @rand() #11
  %1161 = add nsw i32 %1160, -1073741824
  store i32 %1161, i32* %1159, align 4, !tbaa !33
  %1162 = getelementptr inbounds i32, i32* %1135, i64 9
  %1163 = call i32 @rand() #11
  %1164 = add nsw i32 %1163, -1073741824
  store i32 %1164, i32* %1162, align 4, !tbaa !33
  %1165 = getelementptr inbounds i32, i32* %1135, i64 10
  %1166 = call i32 @rand() #11
  %1167 = add nsw i32 %1166, -1073741824
  store i32 %1167, i32* %1165, align 4, !tbaa !33
  %1168 = getelementptr inbounds i32, i32* %1135, i64 11
  %1169 = call i32 @rand() #11
  %1170 = add nsw i32 %1169, -1073741824
  store i32 %1170, i32* %1168, align 4, !tbaa !33
  %1171 = getelementptr inbounds i32, i32* %1135, i64 12
  %1172 = call i32 @rand() #11
  %1173 = add nsw i32 %1172, -1073741824
  store i32 %1173, i32* %1171, align 4, !tbaa !33
  %1174 = getelementptr inbounds i32, i32* %1135, i64 13
  %1175 = call i32 @rand() #11
  %1176 = add nsw i32 %1175, -1073741824
  store i32 %1176, i32* %1174, align 4, !tbaa !33
  %1177 = getelementptr inbounds i32, i32* %1135, i64 14
  %1178 = call i32 @rand() #11
  %1179 = add nsw i32 %1178, -1073741824
  store i32 %1179, i32* %1177, align 4, !tbaa !33
  %1180 = getelementptr inbounds i32, i32* %1135, i64 15
  %1181 = call i32 @rand() #11
  %1182 = add nsw i32 %1181, -1073741824
  store i32 %1182, i32* %1180, align 4, !tbaa !33
  %1183 = getelementptr inbounds i32, i32* %1135, i64 16
  %1184 = call i32 @rand() #11
  %1185 = add nsw i32 %1184, -1073741824
  store i32 %1185, i32* %1183, align 4, !tbaa !33
  %1186 = getelementptr inbounds i32, i32* %1135, i64 17
  %1187 = call i32 @rand() #11
  %1188 = add nsw i32 %1187, -1073741824
  store i32 %1188, i32* %1186, align 4, !tbaa !33
  %1189 = bitcast %"class.Eigen::Matrix.170"* %152 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %1189) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %1189, i8 0, i64 16, i32 8, i1 false) #11
  %1190 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %152, i64 0, i32 0, i32 0, i32 1
  %1191 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %152, i64 0, i32 0, i32 0, i32 0
  %1192 = call i8* @malloc(i64 104) #14
  %1193 = icmp eq i8* %1192, null
  br i1 %1193, label %1201, label %1194

; <label>:1194:                                   ; preds = %1134
  %1195 = ptrtoint i8* %1192 to i64
  %1196 = add i64 %1195, 32
  %1197 = and i64 %1196, -32
  %1198 = inttoptr i64 %1197 to i8**
  %1199 = getelementptr inbounds i8*, i8** %1198, i64 -1
  store i8* %1192, i8** %1199, align 8, !tbaa !29
  %1200 = inttoptr i64 %1197 to i32*
  br label %1201

; <label>:1201:                                   ; preds = %1194, %1134
  %1202 = phi i32* [ %1200, %1194 ], [ null, %1134 ]
  store i32* %1202, i32** %1191, align 8, !tbaa !44
  store i64 18, i64* %1190, align 8, !tbaa !46
  %1203 = call i32 @rand() #11
  %1204 = add nsw i32 %1203, -1073741824
  store i32 %1204, i32* %1202, align 4, !tbaa !33
  %1205 = getelementptr inbounds i32, i32* %1202, i64 1
  %1206 = call i32 @rand() #11
  %1207 = add nsw i32 %1206, -1073741824
  store i32 %1207, i32* %1205, align 4, !tbaa !33
  %1208 = getelementptr inbounds i32, i32* %1202, i64 2
  %1209 = call i32 @rand() #11
  %1210 = add nsw i32 %1209, -1073741824
  store i32 %1210, i32* %1208, align 4, !tbaa !33
  %1211 = getelementptr inbounds i32, i32* %1202, i64 3
  %1212 = call i32 @rand() #11
  %1213 = add nsw i32 %1212, -1073741824
  store i32 %1213, i32* %1211, align 4, !tbaa !33
  %1214 = getelementptr inbounds i32, i32* %1202, i64 4
  %1215 = call i32 @rand() #11
  %1216 = add nsw i32 %1215, -1073741824
  store i32 %1216, i32* %1214, align 4, !tbaa !33
  %1217 = getelementptr inbounds i32, i32* %1202, i64 5
  %1218 = call i32 @rand() #11
  %1219 = add nsw i32 %1218, -1073741824
  store i32 %1219, i32* %1217, align 4, !tbaa !33
  %1220 = getelementptr inbounds i32, i32* %1202, i64 6
  %1221 = call i32 @rand() #11
  %1222 = add nsw i32 %1221, -1073741824
  store i32 %1222, i32* %1220, align 4, !tbaa !33
  %1223 = getelementptr inbounds i32, i32* %1202, i64 7
  %1224 = call i32 @rand() #11
  %1225 = add nsw i32 %1224, -1073741824
  store i32 %1225, i32* %1223, align 4, !tbaa !33
  %1226 = getelementptr inbounds i32, i32* %1202, i64 8
  %1227 = call i32 @rand() #11
  %1228 = add nsw i32 %1227, -1073741824
  store i32 %1228, i32* %1226, align 4, !tbaa !33
  %1229 = getelementptr inbounds i32, i32* %1202, i64 9
  %1230 = call i32 @rand() #11
  %1231 = add nsw i32 %1230, -1073741824
  store i32 %1231, i32* %1229, align 4, !tbaa !33
  %1232 = getelementptr inbounds i32, i32* %1202, i64 10
  %1233 = call i32 @rand() #11
  %1234 = add nsw i32 %1233, -1073741824
  store i32 %1234, i32* %1232, align 4, !tbaa !33
  %1235 = getelementptr inbounds i32, i32* %1202, i64 11
  %1236 = call i32 @rand() #11
  %1237 = add nsw i32 %1236, -1073741824
  store i32 %1237, i32* %1235, align 4, !tbaa !33
  %1238 = getelementptr inbounds i32, i32* %1202, i64 12
  %1239 = call i32 @rand() #11
  %1240 = add nsw i32 %1239, -1073741824
  store i32 %1240, i32* %1238, align 4, !tbaa !33
  %1241 = getelementptr inbounds i32, i32* %1202, i64 13
  %1242 = call i32 @rand() #11
  %1243 = add nsw i32 %1242, -1073741824
  store i32 %1243, i32* %1241, align 4, !tbaa !33
  %1244 = getelementptr inbounds i32, i32* %1202, i64 14
  %1245 = call i32 @rand() #11
  %1246 = add nsw i32 %1245, -1073741824
  store i32 %1246, i32* %1244, align 4, !tbaa !33
  %1247 = getelementptr inbounds i32, i32* %1202, i64 15
  %1248 = call i32 @rand() #11
  %1249 = add nsw i32 %1248, -1073741824
  store i32 %1249, i32* %1247, align 4, !tbaa !33
  %1250 = getelementptr inbounds i32, i32* %1202, i64 16
  %1251 = call i32 @rand() #11
  %1252 = add nsw i32 %1251, -1073741824
  store i32 %1252, i32* %1250, align 4, !tbaa !33
  %1253 = getelementptr inbounds i32, i32* %1202, i64 17
  %1254 = call i32 @rand() #11
  %1255 = add nsw i32 %1254, -1073741824
  store i32 %1255, i32* %1253, align 4, !tbaa !33
  %1256 = bitcast %"class.Eigen::Matrix.170"* %153 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %1256) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %1256, i8 0, i64 16, i32 8, i1 false) #11
  %1257 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %153, i64 0, i32 0, i32 0, i32 1
  %1258 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %153, i64 0, i32 0, i32 0, i32 0
  %1259 = call i8* @malloc(i64 104) #14
  %1260 = icmp eq i8* %1259, null
  br i1 %1260, label %1268, label %1261

; <label>:1261:                                   ; preds = %1201
  %1262 = ptrtoint i8* %1259 to i64
  %1263 = add i64 %1262, 32
  %1264 = and i64 %1263, -32
  %1265 = inttoptr i64 %1264 to i8**
  %1266 = getelementptr inbounds i8*, i8** %1265, i64 -1
  store i8* %1259, i8** %1266, align 8, !tbaa !29
  %1267 = inttoptr i64 %1264 to i32*
  br label %1268

; <label>:1268:                                   ; preds = %1261, %1201
  %1269 = phi i32* [ %1267, %1261 ], [ null, %1201 ]
  store i32* %1269, i32** %1258, align 8, !tbaa !44
  store i64 18, i64* %1257, align 8, !tbaa !46
  %1270 = call i32 @rand() #11
  %1271 = add nsw i32 %1270, -1073741824
  store i32 %1271, i32* %1269, align 4, !tbaa !33
  %1272 = getelementptr inbounds i32, i32* %1269, i64 1
  %1273 = call i32 @rand() #11
  %1274 = add nsw i32 %1273, -1073741824
  store i32 %1274, i32* %1272, align 4, !tbaa !33
  %1275 = getelementptr inbounds i32, i32* %1269, i64 2
  %1276 = call i32 @rand() #11
  %1277 = add nsw i32 %1276, -1073741824
  store i32 %1277, i32* %1275, align 4, !tbaa !33
  %1278 = getelementptr inbounds i32, i32* %1269, i64 3
  %1279 = call i32 @rand() #11
  %1280 = add nsw i32 %1279, -1073741824
  store i32 %1280, i32* %1278, align 4, !tbaa !33
  %1281 = getelementptr inbounds i32, i32* %1269, i64 4
  %1282 = call i32 @rand() #11
  %1283 = add nsw i32 %1282, -1073741824
  store i32 %1283, i32* %1281, align 4, !tbaa !33
  %1284 = getelementptr inbounds i32, i32* %1269, i64 5
  %1285 = call i32 @rand() #11
  %1286 = add nsw i32 %1285, -1073741824
  store i32 %1286, i32* %1284, align 4, !tbaa !33
  %1287 = getelementptr inbounds i32, i32* %1269, i64 6
  %1288 = call i32 @rand() #11
  %1289 = add nsw i32 %1288, -1073741824
  store i32 %1289, i32* %1287, align 4, !tbaa !33
  %1290 = getelementptr inbounds i32, i32* %1269, i64 7
  %1291 = call i32 @rand() #11
  %1292 = add nsw i32 %1291, -1073741824
  store i32 %1292, i32* %1290, align 4, !tbaa !33
  %1293 = getelementptr inbounds i32, i32* %1269, i64 8
  %1294 = call i32 @rand() #11
  %1295 = add nsw i32 %1294, -1073741824
  store i32 %1295, i32* %1293, align 4, !tbaa !33
  %1296 = getelementptr inbounds i32, i32* %1269, i64 9
  %1297 = call i32 @rand() #11
  %1298 = add nsw i32 %1297, -1073741824
  store i32 %1298, i32* %1296, align 4, !tbaa !33
  %1299 = getelementptr inbounds i32, i32* %1269, i64 10
  %1300 = call i32 @rand() #11
  %1301 = add nsw i32 %1300, -1073741824
  store i32 %1301, i32* %1299, align 4, !tbaa !33
  %1302 = getelementptr inbounds i32, i32* %1269, i64 11
  %1303 = call i32 @rand() #11
  %1304 = add nsw i32 %1303, -1073741824
  store i32 %1304, i32* %1302, align 4, !tbaa !33
  %1305 = getelementptr inbounds i32, i32* %1269, i64 12
  %1306 = call i32 @rand() #11
  %1307 = add nsw i32 %1306, -1073741824
  store i32 %1307, i32* %1305, align 4, !tbaa !33
  %1308 = getelementptr inbounds i32, i32* %1269, i64 13
  %1309 = call i32 @rand() #11
  %1310 = add nsw i32 %1309, -1073741824
  store i32 %1310, i32* %1308, align 4, !tbaa !33
  %1311 = getelementptr inbounds i32, i32* %1269, i64 14
  %1312 = call i32 @rand() #11
  %1313 = add nsw i32 %1312, -1073741824
  store i32 %1313, i32* %1311, align 4, !tbaa !33
  %1314 = getelementptr inbounds i32, i32* %1269, i64 15
  %1315 = call i32 @rand() #11
  %1316 = add nsw i32 %1315, -1073741824
  store i32 %1316, i32* %1314, align 4, !tbaa !33
  %1317 = getelementptr inbounds i32, i32* %1269, i64 16
  %1318 = call i32 @rand() #11
  %1319 = add nsw i32 %1318, -1073741824
  store i32 %1319, i32* %1317, align 4, !tbaa !33
  %1320 = getelementptr inbounds i32, i32* %1269, i64 17
  %1321 = call i32 @rand() #11
  %1322 = add nsw i32 %1321, -1073741824
  store i32 %1322, i32* %1320, align 4, !tbaa !33
  %1323 = bitcast %"class.Eigen::Matrix.170"* %154 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %1323) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %1323, i8 0, i64 16, i32 8, i1 false) #11
  %1324 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %154, i64 0, i32 0, i32 0, i32 1
  %1325 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %154, i64 0, i32 0, i32 0, i32 0
  %1326 = call i8* @malloc(i64 104) #14
  %1327 = icmp eq i8* %1326, null
  br i1 %1327, label %1335, label %1328

; <label>:1328:                                   ; preds = %1268
  %1329 = ptrtoint i8* %1326 to i64
  %1330 = add i64 %1329, 32
  %1331 = and i64 %1330, -32
  %1332 = inttoptr i64 %1331 to i8**
  %1333 = getelementptr inbounds i8*, i8** %1332, i64 -1
  store i8* %1326, i8** %1333, align 8, !tbaa !29
  %1334 = inttoptr i64 %1331 to i32*
  br label %1335

; <label>:1335:                                   ; preds = %1328, %1268
  %1336 = phi i32* [ %1334, %1328 ], [ null, %1268 ]
  store i32* %1336, i32** %1325, align 8, !tbaa !44
  store i64 18, i64* %1324, align 8, !tbaa !46
  %1337 = call i32 @rand() #11
  %1338 = add nsw i32 %1337, -1073741824
  store i32 %1338, i32* %1336, align 4, !tbaa !33
  %1339 = getelementptr inbounds i32, i32* %1336, i64 1
  %1340 = call i32 @rand() #11
  %1341 = add nsw i32 %1340, -1073741824
  store i32 %1341, i32* %1339, align 4, !tbaa !33
  %1342 = getelementptr inbounds i32, i32* %1336, i64 2
  %1343 = call i32 @rand() #11
  %1344 = add nsw i32 %1343, -1073741824
  store i32 %1344, i32* %1342, align 4, !tbaa !33
  %1345 = getelementptr inbounds i32, i32* %1336, i64 3
  %1346 = call i32 @rand() #11
  %1347 = add nsw i32 %1346, -1073741824
  store i32 %1347, i32* %1345, align 4, !tbaa !33
  %1348 = getelementptr inbounds i32, i32* %1336, i64 4
  %1349 = call i32 @rand() #11
  %1350 = add nsw i32 %1349, -1073741824
  store i32 %1350, i32* %1348, align 4, !tbaa !33
  %1351 = getelementptr inbounds i32, i32* %1336, i64 5
  %1352 = call i32 @rand() #11
  %1353 = add nsw i32 %1352, -1073741824
  store i32 %1353, i32* %1351, align 4, !tbaa !33
  %1354 = getelementptr inbounds i32, i32* %1336, i64 6
  %1355 = call i32 @rand() #11
  %1356 = add nsw i32 %1355, -1073741824
  store i32 %1356, i32* %1354, align 4, !tbaa !33
  %1357 = getelementptr inbounds i32, i32* %1336, i64 7
  %1358 = call i32 @rand() #11
  %1359 = add nsw i32 %1358, -1073741824
  store i32 %1359, i32* %1357, align 4, !tbaa !33
  %1360 = getelementptr inbounds i32, i32* %1336, i64 8
  %1361 = call i32 @rand() #11
  %1362 = add nsw i32 %1361, -1073741824
  store i32 %1362, i32* %1360, align 4, !tbaa !33
  %1363 = getelementptr inbounds i32, i32* %1336, i64 9
  %1364 = call i32 @rand() #11
  %1365 = add nsw i32 %1364, -1073741824
  store i32 %1365, i32* %1363, align 4, !tbaa !33
  %1366 = getelementptr inbounds i32, i32* %1336, i64 10
  %1367 = call i32 @rand() #11
  %1368 = add nsw i32 %1367, -1073741824
  store i32 %1368, i32* %1366, align 4, !tbaa !33
  %1369 = getelementptr inbounds i32, i32* %1336, i64 11
  %1370 = call i32 @rand() #11
  %1371 = add nsw i32 %1370, -1073741824
  store i32 %1371, i32* %1369, align 4, !tbaa !33
  %1372 = getelementptr inbounds i32, i32* %1336, i64 12
  %1373 = call i32 @rand() #11
  %1374 = add nsw i32 %1373, -1073741824
  store i32 %1374, i32* %1372, align 4, !tbaa !33
  %1375 = getelementptr inbounds i32, i32* %1336, i64 13
  %1376 = call i32 @rand() #11
  %1377 = add nsw i32 %1376, -1073741824
  store i32 %1377, i32* %1375, align 4, !tbaa !33
  %1378 = getelementptr inbounds i32, i32* %1336, i64 14
  %1379 = call i32 @rand() #11
  %1380 = add nsw i32 %1379, -1073741824
  store i32 %1380, i32* %1378, align 4, !tbaa !33
  %1381 = getelementptr inbounds i32, i32* %1336, i64 15
  %1382 = call i32 @rand() #11
  %1383 = add nsw i32 %1382, -1073741824
  store i32 %1383, i32* %1381, align 4, !tbaa !33
  %1384 = getelementptr inbounds i32, i32* %1336, i64 16
  %1385 = call i32 @rand() #11
  %1386 = add nsw i32 %1385, -1073741824
  store i32 %1386, i32* %1384, align 4, !tbaa !33
  %1387 = getelementptr inbounds i32, i32* %1336, i64 17
  %1388 = call i32 @rand() #11
  %1389 = add nsw i32 %1388, -1073741824
  store i32 %1389, i32* %1387, align 4, !tbaa !33
  %1390 = bitcast %"class.Eigen::Matrix.170"* %155 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %1390) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %1390, i8 0, i64 16, i32 8, i1 false) #11
  %1391 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %155, i64 0, i32 0, i32 0, i32 1
  %1392 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %155, i64 0, i32 0, i32 0, i32 0
  %1393 = call i8* @malloc(i64 104) #14
  %1394 = icmp eq i8* %1393, null
  br i1 %1394, label %1402, label %1395

; <label>:1395:                                   ; preds = %1335
  %1396 = ptrtoint i8* %1393 to i64
  %1397 = add i64 %1396, 32
  %1398 = and i64 %1397, -32
  %1399 = inttoptr i64 %1398 to i8**
  %1400 = getelementptr inbounds i8*, i8** %1399, i64 -1
  store i8* %1393, i8** %1400, align 8, !tbaa !29
  %1401 = inttoptr i64 %1398 to i32*
  br label %1402

; <label>:1402:                                   ; preds = %1395, %1335
  %1403 = phi i32* [ %1401, %1395 ], [ null, %1335 ]
  store i32* %1403, i32** %1392, align 8, !tbaa !44
  store i64 18, i64* %1391, align 8, !tbaa !46
  %1404 = call i32 @rand() #11
  %1405 = add nsw i32 %1404, -1073741824
  store i32 %1405, i32* %1403, align 4, !tbaa !33
  %1406 = getelementptr inbounds i32, i32* %1403, i64 1
  %1407 = call i32 @rand() #11
  %1408 = add nsw i32 %1407, -1073741824
  store i32 %1408, i32* %1406, align 4, !tbaa !33
  %1409 = getelementptr inbounds i32, i32* %1403, i64 2
  %1410 = call i32 @rand() #11
  %1411 = add nsw i32 %1410, -1073741824
  store i32 %1411, i32* %1409, align 4, !tbaa !33
  %1412 = getelementptr inbounds i32, i32* %1403, i64 3
  %1413 = call i32 @rand() #11
  %1414 = add nsw i32 %1413, -1073741824
  store i32 %1414, i32* %1412, align 4, !tbaa !33
  %1415 = getelementptr inbounds i32, i32* %1403, i64 4
  %1416 = call i32 @rand() #11
  %1417 = add nsw i32 %1416, -1073741824
  store i32 %1417, i32* %1415, align 4, !tbaa !33
  %1418 = getelementptr inbounds i32, i32* %1403, i64 5
  %1419 = call i32 @rand() #11
  %1420 = add nsw i32 %1419, -1073741824
  store i32 %1420, i32* %1418, align 4, !tbaa !33
  %1421 = getelementptr inbounds i32, i32* %1403, i64 6
  %1422 = call i32 @rand() #11
  %1423 = add nsw i32 %1422, -1073741824
  store i32 %1423, i32* %1421, align 4, !tbaa !33
  %1424 = getelementptr inbounds i32, i32* %1403, i64 7
  %1425 = call i32 @rand() #11
  %1426 = add nsw i32 %1425, -1073741824
  store i32 %1426, i32* %1424, align 4, !tbaa !33
  %1427 = getelementptr inbounds i32, i32* %1403, i64 8
  %1428 = call i32 @rand() #11
  %1429 = add nsw i32 %1428, -1073741824
  store i32 %1429, i32* %1427, align 4, !tbaa !33
  %1430 = getelementptr inbounds i32, i32* %1403, i64 9
  %1431 = call i32 @rand() #11
  %1432 = add nsw i32 %1431, -1073741824
  store i32 %1432, i32* %1430, align 4, !tbaa !33
  %1433 = getelementptr inbounds i32, i32* %1403, i64 10
  %1434 = call i32 @rand() #11
  %1435 = add nsw i32 %1434, -1073741824
  store i32 %1435, i32* %1433, align 4, !tbaa !33
  %1436 = getelementptr inbounds i32, i32* %1403, i64 11
  %1437 = call i32 @rand() #11
  %1438 = add nsw i32 %1437, -1073741824
  store i32 %1438, i32* %1436, align 4, !tbaa !33
  %1439 = getelementptr inbounds i32, i32* %1403, i64 12
  %1440 = call i32 @rand() #11
  %1441 = add nsw i32 %1440, -1073741824
  store i32 %1441, i32* %1439, align 4, !tbaa !33
  %1442 = getelementptr inbounds i32, i32* %1403, i64 13
  %1443 = call i32 @rand() #11
  %1444 = add nsw i32 %1443, -1073741824
  store i32 %1444, i32* %1442, align 4, !tbaa !33
  %1445 = getelementptr inbounds i32, i32* %1403, i64 14
  %1446 = call i32 @rand() #11
  %1447 = add nsw i32 %1446, -1073741824
  store i32 %1447, i32* %1445, align 4, !tbaa !33
  %1448 = getelementptr inbounds i32, i32* %1403, i64 15
  %1449 = call i32 @rand() #11
  %1450 = add nsw i32 %1449, -1073741824
  store i32 %1450, i32* %1448, align 4, !tbaa !33
  %1451 = getelementptr inbounds i32, i32* %1403, i64 16
  %1452 = call i32 @rand() #11
  %1453 = add nsw i32 %1452, -1073741824
  store i32 %1453, i32* %1451, align 4, !tbaa !33
  %1454 = getelementptr inbounds i32, i32* %1403, i64 17
  %1455 = call i32 @rand() #11
  %1456 = add nsw i32 %1455, -1073741824
  store i32 %1456, i32* %1454, align 4, !tbaa !33
  %1457 = call i32 @rand() #11
  %1458 = call i32 @rand() #11
  %1459 = call i32 @rand() #11
  %1460 = call i32 @rand() #11
  %1461 = call i32 @rand() #11
  %1462 = call i32 @rand() #11
  %1463 = bitcast %"class.Eigen::Matrix.185"* %156 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %1463) #11
  %1464 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %156, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %1465 = call i32 @rand() #11
  %1466 = add nsw i32 %1465, -1073741824
  store i32 %1466, i32* %1464, align 8, !tbaa !33
  %1467 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %156, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %1468 = call i32 @rand() #11
  %1469 = add nsw i32 %1468, -1073741824
  store i32 %1469, i32* %1467, align 4, !tbaa !33
  %1470 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %156, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %1471 = call i32 @rand() #11
  %1472 = add nsw i32 %1471, -1073741824
  store i32 %1472, i32* %1470, align 8, !tbaa !33
  %1473 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %156, i64 0, i32 0, i32 0, i32 0, i32 0, i64 3
  %1474 = call i32 @rand() #11
  %1475 = add nsw i32 %1474, -1073741824
  store i32 %1475, i32* %1473, align 4, !tbaa !33
  %1476 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %156, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %1477 = call i32 @rand() #11
  %1478 = add nsw i32 %1477, -1073741824
  store i32 %1478, i32* %1476, align 8, !tbaa !33
  %1479 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %156, i64 0, i32 0, i32 0, i32 0, i32 0, i64 5
  %1480 = call i32 @rand() #11
  %1481 = add nsw i32 %1480, -1073741824
  store i32 %1481, i32* %1479, align 4, !tbaa !33
  %1482 = call i32 @rand() #11
  %1483 = call i32 @rand() #11
  %1484 = call i32 @rand() #11
  %1485 = call i32 @rand() #11
  %1486 = call i32 @rand() #11
  %1487 = call i32 @rand() #11
  %1488 = bitcast %"class.Eigen::Matrix.185"* %157 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %1488) #11
  %1489 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %157, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %1490 = call i32 @rand() #11
  %1491 = add nsw i32 %1490, -1073741824
  store i32 %1491, i32* %1489, align 4, !tbaa !33
  %1492 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %157, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %1493 = call i32 @rand() #11
  %1494 = add nsw i32 %1493, -1073741824
  store i32 %1494, i32* %1492, align 4, !tbaa !33
  %1495 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %157, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %1496 = call i32 @rand() #11
  %1497 = add nsw i32 %1496, -1073741824
  store i32 %1497, i32* %1495, align 4, !tbaa !33
  %1498 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %157, i64 0, i32 0, i32 0, i32 0, i32 0, i64 3
  %1499 = call i32 @rand() #11
  %1500 = add nsw i32 %1499, -1073741824
  store i32 %1500, i32* %1498, align 4, !tbaa !33
  %1501 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %157, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %1502 = call i32 @rand() #11
  %1503 = add nsw i32 %1502, -1073741824
  store i32 %1503, i32* %1501, align 4, !tbaa !33
  %1504 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %157, i64 0, i32 0, i32 0, i32 0, i32 0, i64 5
  %1505 = call i32 @rand() #11
  %1506 = add nsw i32 %1505, -1073741824
  store i32 %1506, i32* %1504, align 4, !tbaa !33
  %1507 = bitcast %"class.Eigen::Matrix.185"* %158 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %1507) #11
  %1508 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %158, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %1509 = call i32 @rand() #11
  %1510 = add nsw i32 %1509, -1073741824
  store i32 %1510, i32* %1508, align 8, !tbaa !33
  %1511 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %158, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %1512 = call i32 @rand() #11
  %1513 = add nsw i32 %1512, -1073741824
  store i32 %1513, i32* %1511, align 4, !tbaa !33
  %1514 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %158, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %1515 = call i32 @rand() #11
  %1516 = add nsw i32 %1515, -1073741824
  store i32 %1516, i32* %1514, align 8, !tbaa !33
  %1517 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %158, i64 0, i32 0, i32 0, i32 0, i32 0, i64 3
  %1518 = call i32 @rand() #11
  %1519 = add nsw i32 %1518, -1073741824
  store i32 %1519, i32* %1517, align 4, !tbaa !33
  %1520 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %158, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %1521 = call i32 @rand() #11
  %1522 = add nsw i32 %1521, -1073741824
  store i32 %1522, i32* %1520, align 8, !tbaa !33
  %1523 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %158, i64 0, i32 0, i32 0, i32 0, i32 0, i64 5
  %1524 = call i32 @rand() #11
  %1525 = add nsw i32 %1524, -1073741824
  store i32 %1525, i32* %1523, align 4, !tbaa !33
  %1526 = bitcast %"class.Eigen::Matrix.185"* %159 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %1526) #11
  %1527 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %159, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %1528 = call i32 @rand() #11
  %1529 = add nsw i32 %1528, -1073741824
  store i32 %1529, i32* %1527, align 8, !tbaa !33
  %1530 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %159, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %1531 = call i32 @rand() #11
  %1532 = add nsw i32 %1531, -1073741824
  store i32 %1532, i32* %1530, align 4, !tbaa !33
  %1533 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %159, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %1534 = call i32 @rand() #11
  %1535 = add nsw i32 %1534, -1073741824
  store i32 %1535, i32* %1533, align 8, !tbaa !33
  %1536 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %159, i64 0, i32 0, i32 0, i32 0, i32 0, i64 3
  %1537 = call i32 @rand() #11
  %1538 = add nsw i32 %1537, -1073741824
  store i32 %1538, i32* %1536, align 4, !tbaa !33
  %1539 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %159, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %1540 = call i32 @rand() #11
  %1541 = add nsw i32 %1540, -1073741824
  store i32 %1541, i32* %1539, align 8, !tbaa !33
  %1542 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %159, i64 0, i32 0, i32 0, i32 0, i32 0, i64 5
  %1543 = call i32 @rand() #11
  %1544 = add nsw i32 %1543, -1073741824
  store i32 %1544, i32* %1542, align 4, !tbaa !33
  %1545 = bitcast %"class.Eigen::Matrix.153"* %160 to i8*
  call void @llvm.lifetime.start(i64 188, i8* nonnull %1545) #11
  br label %1546

; <label>:1546:                                   ; preds = %1546, %1402
  %1547 = phi i64 [ 0, %1402 ], [ %1551, %1546 ]
  %1548 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %160, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %1547
  %1549 = call i32 @rand() #11
  %1550 = add nsw i32 %1549, -1073741824
  store i32 %1550, i32* %1548, align 4, !tbaa !33
  %1551 = add nuw nsw i64 %1547, 1
  %1552 = icmp eq i64 %1551, 47
  br i1 %1552, label %1553, label %1546

; <label>:1553:                                   ; preds = %1546
  %1554 = bitcast %"class.Eigen::Matrix.153"* %161 to i8*
  call void @llvm.lifetime.start(i64 188, i8* nonnull %1554) #11
  br label %1555

; <label>:1555:                                   ; preds = %1555, %1553
  %1556 = phi i64 [ 0, %1553 ], [ %1560, %1555 ]
  %1557 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %161, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %1556
  %1558 = call i32 @rand() #11
  %1559 = add nsw i32 %1558, -1073741824
  store i32 %1559, i32* %1557, align 4, !tbaa !33
  %1560 = add nuw nsw i64 %1556, 1
  %1561 = icmp eq i64 %1560, 47
  br i1 %1561, label %1562, label %1555

; <label>:1562:                                   ; preds = %1555
  %1563 = bitcast %"class.Eigen::Matrix.153"* %162 to i8*
  call void @llvm.lifetime.start(i64 188, i8* nonnull %1563) #11
  br label %1564

; <label>:1564:                                   ; preds = %1564, %1562
  %1565 = phi i64 [ 0, %1562 ], [ %1569, %1564 ]
  %1566 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %162, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %1565
  %1567 = call i32 @rand() #11
  %1568 = add nsw i32 %1567, -1073741824
  store i32 %1568, i32* %1566, align 4, !tbaa !33
  %1569 = add nuw nsw i64 %1565, 1
  %1570 = icmp eq i64 %1569, 47
  br i1 %1570, label %1571, label %1564

; <label>:1571:                                   ; preds = %1564
  %1572 = call i32 @rand() #11
  %1573 = call i32 @rand() #11
  %1574 = call i32 @rand() #11
  %1575 = call i32 @rand() #11
  %1576 = call i32 @rand() #11
  %1577 = call i32 @rand() #11
  %1578 = call i32 @rand() #11
  %1579 = call i32 @rand() #11
  %1580 = call i32 @rand() #11
  %1581 = call i32 @rand() #11
  %1582 = call i32 @rand() #11
  %1583 = call i32 @rand() #11
  %1584 = call i32 @rand() #11
  %1585 = call i32 @rand() #11
  %1586 = call i32 @rand() #11
  %1587 = call i32 @rand() #11
  %1588 = call i32 @rand() #11
  %1589 = call i32 @rand() #11
  %1590 = call i32 @rand() #11
  %1591 = call i32 @rand() #11
  %1592 = call i32 @rand() #11
  %1593 = call i32 @rand() #11
  %1594 = call i32 @rand() #11
  %1595 = call i32 @rand() #11
  %1596 = call i32 @rand() #11
  %1597 = call i32 @rand() #11
  %1598 = call i32 @rand() #11
  %1599 = call i32 @rand() #11
  %1600 = call i32 @rand() #11
  %1601 = call i32 @rand() #11
  %1602 = call i32 @rand() #11
  %1603 = call i32 @rand() #11
  %1604 = call i32 @rand() #11
  %1605 = call i32 @rand() #11
  %1606 = call i32 @rand() #11
  %1607 = call i32 @rand() #11
  %1608 = call i32 @rand() #11
  %1609 = call i32 @rand() #11
  %1610 = call i32 @rand() #11
  %1611 = call i32 @rand() #11
  %1612 = call i32 @rand() #11
  %1613 = call i32 @rand() #11
  %1614 = call i32 @rand() #11
  %1615 = call i32 @rand() #11
  %1616 = call i32 @rand() #11
  %1617 = call i32 @rand() #11
  %1618 = call i32 @rand() #11
  %1619 = bitcast %"class.Eigen::Matrix.153"* %163 to i8*
  call void @llvm.lifetime.start(i64 188, i8* nonnull %1619) #11
  br label %1620

; <label>:1620:                                   ; preds = %1620, %1571
  %1621 = phi i64 [ 0, %1571 ], [ %1625, %1620 ]
  %1622 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %163, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %1621
  %1623 = call i32 @rand() #11
  %1624 = add nsw i32 %1623, -1073741824
  store i32 %1624, i32* %1622, align 4, !tbaa !33
  %1625 = add nuw nsw i64 %1621, 1
  %1626 = icmp eq i64 %1625, 47
  br i1 %1626, label %1627, label %1620

; <label>:1627:                                   ; preds = %1620
  %1628 = bitcast %"class.Eigen::Matrix.153"* %164 to i8*
  call void @llvm.lifetime.start(i64 188, i8* nonnull %1628) #11
  br label %1629

; <label>:1629:                                   ; preds = %1629, %1627
  %1630 = phi i64 [ 0, %1627 ], [ %1634, %1629 ]
  %1631 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %164, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %1630
  %1632 = call i32 @rand() #11
  %1633 = add nsw i32 %1632, -1073741824
  store i32 %1633, i32* %1631, align 4, !tbaa !33
  %1634 = add nuw nsw i64 %1630, 1
  %1635 = icmp eq i64 %1634, 47
  br i1 %1635, label %1636, label %1629

; <label>:1636:                                   ; preds = %1629
  %1637 = bitcast %"class.Eigen::Matrix.185"* %165 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %1637) #11
  %1638 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %165, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %1639 = call i32 @rand() #11
  %1640 = add nsw i32 %1639, -1073741824
  store i32 %1640, i32* %1638, align 16, !tbaa !33
  %1641 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %165, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %1642 = call i32 @rand() #11
  %1643 = add nsw i32 %1642, -1073741824
  store i32 %1643, i32* %1641, align 4, !tbaa !33
  %1644 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %165, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %1645 = call i32 @rand() #11
  %1646 = add nsw i32 %1645, -1073741824
  store i32 %1646, i32* %1644, align 8, !tbaa !33
  %1647 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %165, i64 0, i32 0, i32 0, i32 0, i32 0, i64 3
  %1648 = call i32 @rand() #11
  %1649 = add nsw i32 %1648, -1073741824
  store i32 %1649, i32* %1647, align 4, !tbaa !33
  %1650 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %165, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %1651 = call i32 @rand() #11
  %1652 = add nsw i32 %1651, -1073741824
  store i32 %1652, i32* %1650, align 16, !tbaa !33
  %1653 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %165, i64 0, i32 0, i32 0, i32 0, i32 0, i64 5
  %1654 = call i32 @rand() #11
  %1655 = add nsw i32 %1654, -1073741824
  store i32 %1655, i32* %1653, align 4, !tbaa !33
  %1656 = call i32 @rand() #11
  %1657 = call i32 @rand() #11
  %1658 = call i32 @rand() #11
  %1659 = call i32 @rand() #11
  %1660 = call i32 @rand() #11
  %1661 = call i32 @rand() #11
  %1662 = bitcast %"class.Eigen::Matrix.185"* %166 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %1662) #11
  %1663 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %166, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %1664 = call i32 @rand() #11
  %1665 = add nsw i32 %1664, -1073741824
  store i32 %1665, i32* %1663, align 16, !tbaa !33
  %1666 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %166, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %1667 = call i32 @rand() #11
  %1668 = add nsw i32 %1667, -1073741824
  store i32 %1668, i32* %1666, align 4, !tbaa !33
  %1669 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %166, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %1670 = call i32 @rand() #11
  %1671 = add nsw i32 %1670, -1073741824
  store i32 %1671, i32* %1669, align 8, !tbaa !33
  %1672 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %166, i64 0, i32 0, i32 0, i32 0, i32 0, i64 3
  %1673 = call i32 @rand() #11
  %1674 = add nsw i32 %1673, -1073741824
  store i32 %1674, i32* %1672, align 4, !tbaa !33
  %1675 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %166, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %1676 = call i32 @rand() #11
  %1677 = add nsw i32 %1676, -1073741824
  store i32 %1677, i32* %1675, align 16, !tbaa !33
  %1678 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %166, i64 0, i32 0, i32 0, i32 0, i32 0, i64 5
  %1679 = call i32 @rand() #11
  %1680 = add nsw i32 %1679, -1073741824
  store i32 %1680, i32* %1678, align 4, !tbaa !33
  %1681 = bitcast %"class.Eigen::Matrix.185"* %167 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %1681) #11
  %1682 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %167, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %1683 = call i32 @rand() #11
  %1684 = add nsw i32 %1683, -1073741824
  store i32 %1684, i32* %1682, align 4, !tbaa !33
  %1685 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %167, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %1686 = call i32 @rand() #11
  %1687 = add nsw i32 %1686, -1073741824
  store i32 %1687, i32* %1685, align 4, !tbaa !33
  %1688 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %167, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %1689 = call i32 @rand() #11
  %1690 = add nsw i32 %1689, -1073741824
  store i32 %1690, i32* %1688, align 4, !tbaa !33
  %1691 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %167, i64 0, i32 0, i32 0, i32 0, i32 0, i64 3
  %1692 = call i32 @rand() #11
  %1693 = add nsw i32 %1692, -1073741824
  store i32 %1693, i32* %1691, align 4, !tbaa !33
  %1694 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %167, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %1695 = call i32 @rand() #11
  %1696 = add nsw i32 %1695, -1073741824
  store i32 %1696, i32* %1694, align 4, !tbaa !33
  %1697 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %167, i64 0, i32 0, i32 0, i32 0, i32 0, i64 5
  %1698 = call i32 @rand() #11
  %1699 = add nsw i32 %1698, -1073741824
  store i32 %1699, i32* %1697, align 4, !tbaa !33
  %1700 = call i32 @rand() #11
  %1701 = add nsw i32 %1700, -1073741824
  %1702 = insertelement <4 x i32> undef, i32 %1701, i32 0
  %1703 = call i32 @rand() #11
  %1704 = add nsw i32 %1703, -1073741824
  %1705 = insertelement <4 x i32> %1702, i32 %1704, i32 1
  %1706 = call i32 @rand() #11
  %1707 = add nsw i32 %1706, -1073741824
  %1708 = insertelement <4 x i32> %1705, i32 %1707, i32 2
  %1709 = call i32 @rand() #11
  %1710 = add nsw i32 %1709, -1073741824
  %1711 = insertelement <4 x i32> %1708, i32 %1710, i32 3
  %1712 = call i32 @rand() #11
  %1713 = add nsw i32 %1712, -1073741824
  %1714 = call i32 @rand() #11
  %1715 = add nsw i32 %1714, -1073741824
  %1716 = call i32 @rand() #11
  %1717 = call i32 @rand() #11
  %1718 = call i32 @rand() #11
  %1719 = call i32 @rand() #11
  %1720 = call i32 @rand() #11
  %1721 = call i32 @rand() #11
  %1722 = bitcast %"class.Eigen::Matrix.170"* %168 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %1722) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %1722, i8 0, i64 16, i32 8, i1 false) #11
  %1723 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %168, i64 0, i32 0, i32 0, i32 1
  %1724 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %168, i64 0, i32 0, i32 0, i32 0
  %1725 = call i8* @malloc(i64 104) #14
  %1726 = icmp eq i8* %1725, null
  br i1 %1726, label %1734, label %1727

; <label>:1727:                                   ; preds = %1636
  %1728 = ptrtoint i8* %1725 to i64
  %1729 = add i64 %1728, 32
  %1730 = and i64 %1729, -32
  %1731 = inttoptr i64 %1730 to i8**
  %1732 = getelementptr inbounds i8*, i8** %1731, i64 -1
  store i8* %1725, i8** %1732, align 8, !tbaa !29
  %1733 = inttoptr i64 %1730 to i32*
  br label %1734

; <label>:1734:                                   ; preds = %1727, %1636
  %1735 = phi i32* [ %1733, %1727 ], [ null, %1636 ]
  store i32* %1735, i32** %1724, align 8, !tbaa !44
  store i64 18, i64* %1723, align 8, !tbaa !46
  %1736 = call i32 @rand() #11
  %1737 = add nsw i32 %1736, -1073741824
  store i32 %1737, i32* %1735, align 4, !tbaa !33
  %1738 = getelementptr inbounds i32, i32* %1735, i64 1
  %1739 = call i32 @rand() #11
  %1740 = add nsw i32 %1739, -1073741824
  store i32 %1740, i32* %1738, align 4, !tbaa !33
  %1741 = getelementptr inbounds i32, i32* %1735, i64 2
  %1742 = call i32 @rand() #11
  %1743 = add nsw i32 %1742, -1073741824
  store i32 %1743, i32* %1741, align 4, !tbaa !33
  %1744 = getelementptr inbounds i32, i32* %1735, i64 3
  %1745 = call i32 @rand() #11
  %1746 = add nsw i32 %1745, -1073741824
  store i32 %1746, i32* %1744, align 4, !tbaa !33
  %1747 = getelementptr inbounds i32, i32* %1735, i64 4
  %1748 = call i32 @rand() #11
  %1749 = add nsw i32 %1748, -1073741824
  store i32 %1749, i32* %1747, align 4, !tbaa !33
  %1750 = getelementptr inbounds i32, i32* %1735, i64 5
  %1751 = call i32 @rand() #11
  %1752 = add nsw i32 %1751, -1073741824
  store i32 %1752, i32* %1750, align 4, !tbaa !33
  %1753 = getelementptr inbounds i32, i32* %1735, i64 6
  %1754 = call i32 @rand() #11
  %1755 = add nsw i32 %1754, -1073741824
  store i32 %1755, i32* %1753, align 4, !tbaa !33
  %1756 = getelementptr inbounds i32, i32* %1735, i64 7
  %1757 = call i32 @rand() #11
  %1758 = add nsw i32 %1757, -1073741824
  store i32 %1758, i32* %1756, align 4, !tbaa !33
  %1759 = getelementptr inbounds i32, i32* %1735, i64 8
  %1760 = call i32 @rand() #11
  %1761 = add nsw i32 %1760, -1073741824
  store i32 %1761, i32* %1759, align 4, !tbaa !33
  %1762 = getelementptr inbounds i32, i32* %1735, i64 9
  %1763 = call i32 @rand() #11
  %1764 = add nsw i32 %1763, -1073741824
  store i32 %1764, i32* %1762, align 4, !tbaa !33
  %1765 = getelementptr inbounds i32, i32* %1735, i64 10
  %1766 = call i32 @rand() #11
  %1767 = add nsw i32 %1766, -1073741824
  store i32 %1767, i32* %1765, align 4, !tbaa !33
  %1768 = getelementptr inbounds i32, i32* %1735, i64 11
  %1769 = call i32 @rand() #11
  %1770 = add nsw i32 %1769, -1073741824
  store i32 %1770, i32* %1768, align 4, !tbaa !33
  %1771 = getelementptr inbounds i32, i32* %1735, i64 12
  %1772 = call i32 @rand() #11
  %1773 = add nsw i32 %1772, -1073741824
  store i32 %1773, i32* %1771, align 4, !tbaa !33
  %1774 = getelementptr inbounds i32, i32* %1735, i64 13
  %1775 = call i32 @rand() #11
  %1776 = add nsw i32 %1775, -1073741824
  store i32 %1776, i32* %1774, align 4, !tbaa !33
  %1777 = getelementptr inbounds i32, i32* %1735, i64 14
  %1778 = call i32 @rand() #11
  %1779 = add nsw i32 %1778, -1073741824
  store i32 %1779, i32* %1777, align 4, !tbaa !33
  %1780 = getelementptr inbounds i32, i32* %1735, i64 15
  %1781 = call i32 @rand() #11
  %1782 = add nsw i32 %1781, -1073741824
  store i32 %1782, i32* %1780, align 4, !tbaa !33
  %1783 = getelementptr inbounds i32, i32* %1735, i64 16
  %1784 = call i32 @rand() #11
  %1785 = add nsw i32 %1784, -1073741824
  store i32 %1785, i32* %1783, align 4, !tbaa !33
  %1786 = getelementptr inbounds i32, i32* %1735, i64 17
  %1787 = call i32 @rand() #11
  %1788 = add nsw i32 %1787, -1073741824
  store i32 %1788, i32* %1786, align 4, !tbaa !33
  %1789 = call i8* @malloc(i64 104) #14
  %1790 = icmp eq i8* %1789, null
  br i1 %1790, label %1798, label %1791

; <label>:1791:                                   ; preds = %1734
  %1792 = ptrtoint i8* %1789 to i64
  %1793 = add i64 %1792, 32
  %1794 = and i64 %1793, -32
  %1795 = inttoptr i64 %1794 to i8**
  %1796 = getelementptr inbounds i8*, i8** %1795, i64 -1
  store i8* %1789, i8** %1796, align 8, !tbaa !29
  %1797 = inttoptr i64 %1794 to i32*
  br label %1798

; <label>:1798:                                   ; preds = %1791, %1734
  %1799 = phi i32* [ %1797, %1791 ], [ null, %1734 ]
  %1800 = call i32 @rand() #11
  %1801 = add nsw i32 %1800, -1073741824
  store i32 %1801, i32* %1799, align 4, !tbaa !33
  %1802 = getelementptr inbounds i32, i32* %1799, i64 1
  %1803 = call i32 @rand() #11
  %1804 = add nsw i32 %1803, -1073741824
  store i32 %1804, i32* %1802, align 4, !tbaa !33
  %1805 = getelementptr inbounds i32, i32* %1799, i64 2
  %1806 = call i32 @rand() #11
  %1807 = add nsw i32 %1806, -1073741824
  store i32 %1807, i32* %1805, align 4, !tbaa !33
  %1808 = getelementptr inbounds i32, i32* %1799, i64 3
  %1809 = call i32 @rand() #11
  %1810 = add nsw i32 %1809, -1073741824
  store i32 %1810, i32* %1808, align 4, !tbaa !33
  %1811 = getelementptr inbounds i32, i32* %1799, i64 4
  %1812 = call i32 @rand() #11
  %1813 = add nsw i32 %1812, -1073741824
  store i32 %1813, i32* %1811, align 4, !tbaa !33
  %1814 = getelementptr inbounds i32, i32* %1799, i64 5
  %1815 = call i32 @rand() #11
  %1816 = add nsw i32 %1815, -1073741824
  store i32 %1816, i32* %1814, align 4, !tbaa !33
  %1817 = getelementptr inbounds i32, i32* %1799, i64 6
  %1818 = call i32 @rand() #11
  %1819 = add nsw i32 %1818, -1073741824
  store i32 %1819, i32* %1817, align 4, !tbaa !33
  %1820 = getelementptr inbounds i32, i32* %1799, i64 7
  %1821 = call i32 @rand() #11
  %1822 = add nsw i32 %1821, -1073741824
  store i32 %1822, i32* %1820, align 4, !tbaa !33
  %1823 = getelementptr inbounds i32, i32* %1799, i64 8
  %1824 = call i32 @rand() #11
  %1825 = add nsw i32 %1824, -1073741824
  store i32 %1825, i32* %1823, align 4, !tbaa !33
  %1826 = getelementptr inbounds i32, i32* %1799, i64 9
  %1827 = call i32 @rand() #11
  %1828 = add nsw i32 %1827, -1073741824
  store i32 %1828, i32* %1826, align 4, !tbaa !33
  %1829 = getelementptr inbounds i32, i32* %1799, i64 10
  %1830 = call i32 @rand() #11
  %1831 = add nsw i32 %1830, -1073741824
  store i32 %1831, i32* %1829, align 4, !tbaa !33
  %1832 = getelementptr inbounds i32, i32* %1799, i64 11
  %1833 = call i32 @rand() #11
  %1834 = add nsw i32 %1833, -1073741824
  store i32 %1834, i32* %1832, align 4, !tbaa !33
  %1835 = getelementptr inbounds i32, i32* %1799, i64 12
  %1836 = call i32 @rand() #11
  %1837 = add nsw i32 %1836, -1073741824
  store i32 %1837, i32* %1835, align 4, !tbaa !33
  %1838 = getelementptr inbounds i32, i32* %1799, i64 13
  %1839 = call i32 @rand() #11
  %1840 = add nsw i32 %1839, -1073741824
  store i32 %1840, i32* %1838, align 4, !tbaa !33
  %1841 = getelementptr inbounds i32, i32* %1799, i64 14
  %1842 = call i32 @rand() #11
  %1843 = add nsw i32 %1842, -1073741824
  store i32 %1843, i32* %1841, align 4, !tbaa !33
  %1844 = getelementptr inbounds i32, i32* %1799, i64 15
  %1845 = call i32 @rand() #11
  %1846 = add nsw i32 %1845, -1073741824
  store i32 %1846, i32* %1844, align 4, !tbaa !33
  %1847 = getelementptr inbounds i32, i32* %1799, i64 16
  %1848 = call i32 @rand() #11
  %1849 = add nsw i32 %1848, -1073741824
  store i32 %1849, i32* %1847, align 4, !tbaa !33
  %1850 = getelementptr inbounds i32, i32* %1799, i64 17
  %1851 = call i32 @rand() #11
  %1852 = add nsw i32 %1851, -1073741824
  store i32 %1852, i32* %1850, align 4, !tbaa !33
  %1853 = bitcast %"class.Eigen::Matrix.170"* %169 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %1853) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %1853, i8 0, i64 16, i32 8, i1 false) #11
  %1854 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %169, i64 0, i32 0, i32 0, i32 1
  %1855 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %169, i64 0, i32 0, i32 0, i32 0
  %1856 = call i8* @malloc(i64 104) #14
  %1857 = icmp eq i8* %1856, null
  br i1 %1857, label %1865, label %1858

; <label>:1858:                                   ; preds = %1798
  %1859 = ptrtoint i8* %1856 to i64
  %1860 = add i64 %1859, 32
  %1861 = and i64 %1860, -32
  %1862 = inttoptr i64 %1861 to i8**
  %1863 = getelementptr inbounds i8*, i8** %1862, i64 -1
  store i8* %1856, i8** %1863, align 8, !tbaa !29
  %1864 = inttoptr i64 %1861 to i32*
  br label %1865

; <label>:1865:                                   ; preds = %1858, %1798
  %1866 = phi i32* [ %1864, %1858 ], [ null, %1798 ]
  store i32* %1866, i32** %1855, align 8, !tbaa !44
  store i64 18, i64* %1854, align 8, !tbaa !46
  %1867 = call i32 @rand() #11
  %1868 = add nsw i32 %1867, -1073741824
  store i32 %1868, i32* %1866, align 4, !tbaa !33
  %1869 = getelementptr inbounds i32, i32* %1866, i64 1
  %1870 = call i32 @rand() #11
  %1871 = add nsw i32 %1870, -1073741824
  store i32 %1871, i32* %1869, align 4, !tbaa !33
  %1872 = getelementptr inbounds i32, i32* %1866, i64 2
  %1873 = call i32 @rand() #11
  %1874 = add nsw i32 %1873, -1073741824
  store i32 %1874, i32* %1872, align 4, !tbaa !33
  %1875 = getelementptr inbounds i32, i32* %1866, i64 3
  %1876 = call i32 @rand() #11
  %1877 = add nsw i32 %1876, -1073741824
  store i32 %1877, i32* %1875, align 4, !tbaa !33
  %1878 = getelementptr inbounds i32, i32* %1866, i64 4
  %1879 = call i32 @rand() #11
  %1880 = add nsw i32 %1879, -1073741824
  store i32 %1880, i32* %1878, align 4, !tbaa !33
  %1881 = getelementptr inbounds i32, i32* %1866, i64 5
  %1882 = call i32 @rand() #11
  %1883 = add nsw i32 %1882, -1073741824
  store i32 %1883, i32* %1881, align 4, !tbaa !33
  %1884 = getelementptr inbounds i32, i32* %1866, i64 6
  %1885 = call i32 @rand() #11
  %1886 = add nsw i32 %1885, -1073741824
  store i32 %1886, i32* %1884, align 4, !tbaa !33
  %1887 = getelementptr inbounds i32, i32* %1866, i64 7
  %1888 = call i32 @rand() #11
  %1889 = add nsw i32 %1888, -1073741824
  store i32 %1889, i32* %1887, align 4, !tbaa !33
  %1890 = getelementptr inbounds i32, i32* %1866, i64 8
  %1891 = call i32 @rand() #11
  %1892 = add nsw i32 %1891, -1073741824
  store i32 %1892, i32* %1890, align 4, !tbaa !33
  %1893 = getelementptr inbounds i32, i32* %1866, i64 9
  %1894 = call i32 @rand() #11
  %1895 = add nsw i32 %1894, -1073741824
  store i32 %1895, i32* %1893, align 4, !tbaa !33
  %1896 = getelementptr inbounds i32, i32* %1866, i64 10
  %1897 = call i32 @rand() #11
  %1898 = add nsw i32 %1897, -1073741824
  store i32 %1898, i32* %1896, align 4, !tbaa !33
  %1899 = getelementptr inbounds i32, i32* %1866, i64 11
  %1900 = call i32 @rand() #11
  %1901 = add nsw i32 %1900, -1073741824
  store i32 %1901, i32* %1899, align 4, !tbaa !33
  %1902 = getelementptr inbounds i32, i32* %1866, i64 12
  %1903 = call i32 @rand() #11
  %1904 = add nsw i32 %1903, -1073741824
  store i32 %1904, i32* %1902, align 4, !tbaa !33
  %1905 = getelementptr inbounds i32, i32* %1866, i64 13
  %1906 = call i32 @rand() #11
  %1907 = add nsw i32 %1906, -1073741824
  store i32 %1907, i32* %1905, align 4, !tbaa !33
  %1908 = getelementptr inbounds i32, i32* %1866, i64 14
  %1909 = call i32 @rand() #11
  %1910 = add nsw i32 %1909, -1073741824
  store i32 %1910, i32* %1908, align 4, !tbaa !33
  %1911 = getelementptr inbounds i32, i32* %1866, i64 15
  %1912 = call i32 @rand() #11
  %1913 = add nsw i32 %1912, -1073741824
  store i32 %1913, i32* %1911, align 4, !tbaa !33
  %1914 = getelementptr inbounds i32, i32* %1866, i64 16
  %1915 = call i32 @rand() #11
  %1916 = add nsw i32 %1915, -1073741824
  store i32 %1916, i32* %1914, align 4, !tbaa !33
  %1917 = getelementptr inbounds i32, i32* %1866, i64 17
  %1918 = call i32 @rand() #11
  %1919 = add nsw i32 %1918, -1073741824
  store i32 %1919, i32* %1917, align 4, !tbaa !33
  %1920 = bitcast %"class.Eigen::Matrix.170"* %170 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %1920) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %1920, i8 0, i64 16, i32 8, i1 false) #11
  %1921 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %170, i64 0, i32 0, i32 0, i32 1
  %1922 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %170, i64 0, i32 0, i32 0, i32 0
  %1923 = call i8* @malloc(i64 104) #14
  %1924 = icmp eq i8* %1923, null
  br i1 %1924, label %1932, label %1925

; <label>:1925:                                   ; preds = %1865
  %1926 = ptrtoint i8* %1923 to i64
  %1927 = add i64 %1926, 32
  %1928 = and i64 %1927, -32
  %1929 = inttoptr i64 %1928 to i8**
  %1930 = getelementptr inbounds i8*, i8** %1929, i64 -1
  store i8* %1923, i8** %1930, align 8, !tbaa !29
  %1931 = inttoptr i64 %1928 to i32*
  br label %1932

; <label>:1932:                                   ; preds = %1925, %1865
  %1933 = phi i32* [ %1931, %1925 ], [ null, %1865 ]
  store i32* %1933, i32** %1922, align 8, !tbaa !44
  store i64 18, i64* %1921, align 8, !tbaa !46
  %1934 = call i32 @rand() #11
  %1935 = add nsw i32 %1934, -1073741824
  store i32 %1935, i32* %1933, align 4, !tbaa !33
  %1936 = getelementptr inbounds i32, i32* %1933, i64 1
  %1937 = call i32 @rand() #11
  %1938 = add nsw i32 %1937, -1073741824
  store i32 %1938, i32* %1936, align 4, !tbaa !33
  %1939 = getelementptr inbounds i32, i32* %1933, i64 2
  %1940 = call i32 @rand() #11
  %1941 = add nsw i32 %1940, -1073741824
  store i32 %1941, i32* %1939, align 4, !tbaa !33
  %1942 = getelementptr inbounds i32, i32* %1933, i64 3
  %1943 = call i32 @rand() #11
  %1944 = add nsw i32 %1943, -1073741824
  store i32 %1944, i32* %1942, align 4, !tbaa !33
  %1945 = getelementptr inbounds i32, i32* %1933, i64 4
  %1946 = call i32 @rand() #11
  %1947 = add nsw i32 %1946, -1073741824
  store i32 %1947, i32* %1945, align 4, !tbaa !33
  %1948 = getelementptr inbounds i32, i32* %1933, i64 5
  %1949 = call i32 @rand() #11
  %1950 = add nsw i32 %1949, -1073741824
  store i32 %1950, i32* %1948, align 4, !tbaa !33
  %1951 = getelementptr inbounds i32, i32* %1933, i64 6
  %1952 = call i32 @rand() #11
  %1953 = add nsw i32 %1952, -1073741824
  store i32 %1953, i32* %1951, align 4, !tbaa !33
  %1954 = getelementptr inbounds i32, i32* %1933, i64 7
  %1955 = call i32 @rand() #11
  %1956 = add nsw i32 %1955, -1073741824
  store i32 %1956, i32* %1954, align 4, !tbaa !33
  %1957 = getelementptr inbounds i32, i32* %1933, i64 8
  %1958 = call i32 @rand() #11
  %1959 = add nsw i32 %1958, -1073741824
  store i32 %1959, i32* %1957, align 4, !tbaa !33
  %1960 = getelementptr inbounds i32, i32* %1933, i64 9
  %1961 = call i32 @rand() #11
  %1962 = add nsw i32 %1961, -1073741824
  store i32 %1962, i32* %1960, align 4, !tbaa !33
  %1963 = getelementptr inbounds i32, i32* %1933, i64 10
  %1964 = call i32 @rand() #11
  %1965 = add nsw i32 %1964, -1073741824
  store i32 %1965, i32* %1963, align 4, !tbaa !33
  %1966 = getelementptr inbounds i32, i32* %1933, i64 11
  %1967 = call i32 @rand() #11
  %1968 = add nsw i32 %1967, -1073741824
  store i32 %1968, i32* %1966, align 4, !tbaa !33
  %1969 = getelementptr inbounds i32, i32* %1933, i64 12
  %1970 = call i32 @rand() #11
  %1971 = add nsw i32 %1970, -1073741824
  store i32 %1971, i32* %1969, align 4, !tbaa !33
  %1972 = getelementptr inbounds i32, i32* %1933, i64 13
  %1973 = call i32 @rand() #11
  %1974 = add nsw i32 %1973, -1073741824
  store i32 %1974, i32* %1972, align 4, !tbaa !33
  %1975 = getelementptr inbounds i32, i32* %1933, i64 14
  %1976 = call i32 @rand() #11
  %1977 = add nsw i32 %1976, -1073741824
  store i32 %1977, i32* %1975, align 4, !tbaa !33
  %1978 = getelementptr inbounds i32, i32* %1933, i64 15
  %1979 = call i32 @rand() #11
  %1980 = add nsw i32 %1979, -1073741824
  store i32 %1980, i32* %1978, align 4, !tbaa !33
  %1981 = getelementptr inbounds i32, i32* %1933, i64 16
  %1982 = call i32 @rand() #11
  %1983 = add nsw i32 %1982, -1073741824
  store i32 %1983, i32* %1981, align 4, !tbaa !33
  %1984 = getelementptr inbounds i32, i32* %1933, i64 17
  %1985 = call i32 @rand() #11
  %1986 = add nsw i32 %1985, -1073741824
  store i32 %1986, i32* %1984, align 4, !tbaa !33
  %1987 = bitcast %"class.Eigen::Matrix.170"* %171 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %1987) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %1987, i8 0, i64 16, i32 8, i1 false) #11
  %1988 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %171, i64 0, i32 0, i32 0, i32 1
  %1989 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %171, i64 0, i32 0, i32 0, i32 0
  %1990 = call i8* @malloc(i64 104) #14
  %1991 = icmp eq i8* %1990, null
  br i1 %1991, label %1999, label %1992

; <label>:1992:                                   ; preds = %1932
  %1993 = ptrtoint i8* %1990 to i64
  %1994 = add i64 %1993, 32
  %1995 = and i64 %1994, -32
  %1996 = inttoptr i64 %1995 to i8**
  %1997 = getelementptr inbounds i8*, i8** %1996, i64 -1
  store i8* %1990, i8** %1997, align 8, !tbaa !29
  %1998 = inttoptr i64 %1995 to i32*
  br label %1999

; <label>:1999:                                   ; preds = %1992, %1932
  %2000 = phi i32* [ %1998, %1992 ], [ null, %1932 ]
  store i32* %2000, i32** %1989, align 8, !tbaa !44
  store i64 18, i64* %1988, align 8, !tbaa !46
  %2001 = call i32 @rand() #11
  %2002 = add nsw i32 %2001, -1073741824
  store i32 %2002, i32* %2000, align 4, !tbaa !33
  %2003 = getelementptr inbounds i32, i32* %2000, i64 1
  %2004 = call i32 @rand() #11
  %2005 = add nsw i32 %2004, -1073741824
  store i32 %2005, i32* %2003, align 4, !tbaa !33
  %2006 = getelementptr inbounds i32, i32* %2000, i64 2
  %2007 = call i32 @rand() #11
  %2008 = add nsw i32 %2007, -1073741824
  store i32 %2008, i32* %2006, align 4, !tbaa !33
  %2009 = getelementptr inbounds i32, i32* %2000, i64 3
  %2010 = call i32 @rand() #11
  %2011 = add nsw i32 %2010, -1073741824
  store i32 %2011, i32* %2009, align 4, !tbaa !33
  %2012 = getelementptr inbounds i32, i32* %2000, i64 4
  %2013 = call i32 @rand() #11
  %2014 = add nsw i32 %2013, -1073741824
  store i32 %2014, i32* %2012, align 4, !tbaa !33
  %2015 = getelementptr inbounds i32, i32* %2000, i64 5
  %2016 = call i32 @rand() #11
  %2017 = add nsw i32 %2016, -1073741824
  store i32 %2017, i32* %2015, align 4, !tbaa !33
  %2018 = getelementptr inbounds i32, i32* %2000, i64 6
  %2019 = call i32 @rand() #11
  %2020 = add nsw i32 %2019, -1073741824
  store i32 %2020, i32* %2018, align 4, !tbaa !33
  %2021 = getelementptr inbounds i32, i32* %2000, i64 7
  %2022 = call i32 @rand() #11
  %2023 = add nsw i32 %2022, -1073741824
  store i32 %2023, i32* %2021, align 4, !tbaa !33
  %2024 = getelementptr inbounds i32, i32* %2000, i64 8
  %2025 = call i32 @rand() #11
  %2026 = add nsw i32 %2025, -1073741824
  store i32 %2026, i32* %2024, align 4, !tbaa !33
  %2027 = getelementptr inbounds i32, i32* %2000, i64 9
  %2028 = call i32 @rand() #11
  %2029 = add nsw i32 %2028, -1073741824
  store i32 %2029, i32* %2027, align 4, !tbaa !33
  %2030 = getelementptr inbounds i32, i32* %2000, i64 10
  %2031 = call i32 @rand() #11
  %2032 = add nsw i32 %2031, -1073741824
  store i32 %2032, i32* %2030, align 4, !tbaa !33
  %2033 = getelementptr inbounds i32, i32* %2000, i64 11
  %2034 = call i32 @rand() #11
  %2035 = add nsw i32 %2034, -1073741824
  store i32 %2035, i32* %2033, align 4, !tbaa !33
  %2036 = getelementptr inbounds i32, i32* %2000, i64 12
  %2037 = call i32 @rand() #11
  %2038 = add nsw i32 %2037, -1073741824
  store i32 %2038, i32* %2036, align 4, !tbaa !33
  %2039 = getelementptr inbounds i32, i32* %2000, i64 13
  %2040 = call i32 @rand() #11
  %2041 = add nsw i32 %2040, -1073741824
  store i32 %2041, i32* %2039, align 4, !tbaa !33
  %2042 = getelementptr inbounds i32, i32* %2000, i64 14
  %2043 = call i32 @rand() #11
  %2044 = add nsw i32 %2043, -1073741824
  store i32 %2044, i32* %2042, align 4, !tbaa !33
  %2045 = getelementptr inbounds i32, i32* %2000, i64 15
  %2046 = call i32 @rand() #11
  %2047 = add nsw i32 %2046, -1073741824
  store i32 %2047, i32* %2045, align 4, !tbaa !33
  %2048 = getelementptr inbounds i32, i32* %2000, i64 16
  %2049 = call i32 @rand() #11
  %2050 = add nsw i32 %2049, -1073741824
  store i32 %2050, i32* %2048, align 4, !tbaa !33
  %2051 = getelementptr inbounds i32, i32* %2000, i64 17
  %2052 = call i32 @rand() #11
  %2053 = add nsw i32 %2052, -1073741824
  store i32 %2053, i32* %2051, align 4, !tbaa !33
  %2054 = bitcast %"class.Eigen::Matrix.170"* %172 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %2054) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %2054, i8 0, i64 16, i32 8, i1 false) #11
  %2055 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %172, i64 0, i32 0, i32 0, i32 1
  %2056 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %172, i64 0, i32 0, i32 0, i32 0
  %2057 = call i8* @malloc(i64 104) #14
  %2058 = icmp eq i8* %2057, null
  br i1 %2058, label %2066, label %2059

; <label>:2059:                                   ; preds = %1999
  %2060 = ptrtoint i8* %2057 to i64
  %2061 = add i64 %2060, 32
  %2062 = and i64 %2061, -32
  %2063 = inttoptr i64 %2062 to i8**
  %2064 = getelementptr inbounds i8*, i8** %2063, i64 -1
  store i8* %2057, i8** %2064, align 8, !tbaa !29
  %2065 = inttoptr i64 %2062 to i32*
  br label %2066

; <label>:2066:                                   ; preds = %2059, %1999
  %2067 = phi i32* [ %2065, %2059 ], [ null, %1999 ]
  store i32* %2067, i32** %2056, align 8, !tbaa !44
  store i64 18, i64* %2055, align 8, !tbaa !46
  %2068 = call i32 @rand() #11
  %2069 = add nsw i32 %2068, -1073741824
  store i32 %2069, i32* %2067, align 4, !tbaa !33
  %2070 = getelementptr inbounds i32, i32* %2067, i64 1
  %2071 = call i32 @rand() #11
  %2072 = add nsw i32 %2071, -1073741824
  store i32 %2072, i32* %2070, align 4, !tbaa !33
  %2073 = getelementptr inbounds i32, i32* %2067, i64 2
  %2074 = call i32 @rand() #11
  %2075 = add nsw i32 %2074, -1073741824
  store i32 %2075, i32* %2073, align 4, !tbaa !33
  %2076 = getelementptr inbounds i32, i32* %2067, i64 3
  %2077 = call i32 @rand() #11
  %2078 = add nsw i32 %2077, -1073741824
  store i32 %2078, i32* %2076, align 4, !tbaa !33
  %2079 = getelementptr inbounds i32, i32* %2067, i64 4
  %2080 = call i32 @rand() #11
  %2081 = add nsw i32 %2080, -1073741824
  store i32 %2081, i32* %2079, align 4, !tbaa !33
  %2082 = getelementptr inbounds i32, i32* %2067, i64 5
  %2083 = call i32 @rand() #11
  %2084 = add nsw i32 %2083, -1073741824
  store i32 %2084, i32* %2082, align 4, !tbaa !33
  %2085 = getelementptr inbounds i32, i32* %2067, i64 6
  %2086 = call i32 @rand() #11
  %2087 = add nsw i32 %2086, -1073741824
  store i32 %2087, i32* %2085, align 4, !tbaa !33
  %2088 = getelementptr inbounds i32, i32* %2067, i64 7
  %2089 = call i32 @rand() #11
  %2090 = add nsw i32 %2089, -1073741824
  store i32 %2090, i32* %2088, align 4, !tbaa !33
  %2091 = getelementptr inbounds i32, i32* %2067, i64 8
  %2092 = call i32 @rand() #11
  %2093 = add nsw i32 %2092, -1073741824
  store i32 %2093, i32* %2091, align 4, !tbaa !33
  %2094 = getelementptr inbounds i32, i32* %2067, i64 9
  %2095 = call i32 @rand() #11
  %2096 = add nsw i32 %2095, -1073741824
  store i32 %2096, i32* %2094, align 4, !tbaa !33
  %2097 = getelementptr inbounds i32, i32* %2067, i64 10
  %2098 = call i32 @rand() #11
  %2099 = add nsw i32 %2098, -1073741824
  store i32 %2099, i32* %2097, align 4, !tbaa !33
  %2100 = getelementptr inbounds i32, i32* %2067, i64 11
  %2101 = call i32 @rand() #11
  %2102 = add nsw i32 %2101, -1073741824
  store i32 %2102, i32* %2100, align 4, !tbaa !33
  %2103 = getelementptr inbounds i32, i32* %2067, i64 12
  %2104 = call i32 @rand() #11
  %2105 = add nsw i32 %2104, -1073741824
  store i32 %2105, i32* %2103, align 4, !tbaa !33
  %2106 = getelementptr inbounds i32, i32* %2067, i64 13
  %2107 = call i32 @rand() #11
  %2108 = add nsw i32 %2107, -1073741824
  store i32 %2108, i32* %2106, align 4, !tbaa !33
  %2109 = getelementptr inbounds i32, i32* %2067, i64 14
  %2110 = call i32 @rand() #11
  %2111 = add nsw i32 %2110, -1073741824
  store i32 %2111, i32* %2109, align 4, !tbaa !33
  %2112 = getelementptr inbounds i32, i32* %2067, i64 15
  %2113 = call i32 @rand() #11
  %2114 = add nsw i32 %2113, -1073741824
  store i32 %2114, i32* %2112, align 4, !tbaa !33
  %2115 = getelementptr inbounds i32, i32* %2067, i64 16
  %2116 = call i32 @rand() #11
  %2117 = add nsw i32 %2116, -1073741824
  store i32 %2117, i32* %2115, align 4, !tbaa !33
  %2118 = getelementptr inbounds i32, i32* %2067, i64 17
  %2119 = call i32 @rand() #11
  %2120 = add nsw i32 %2119, -1073741824
  store i32 %2120, i32* %2118, align 4, !tbaa !33
  %2121 = bitcast %"class.Eigen::CwiseBinaryOp.200"* %173 to i8*
  call void @llvm.lifetime.start(i64 40, i8* nonnull %2121) #11
  %2122 = bitcast %"class.Eigen::Matrix.185"* %158 to i128*
  %2123 = load i128, i128* %2122, align 8, !tbaa !11
  %2124 = load i64, i64* %869, align 8, !tbaa !43, !noalias !47
  %2125 = icmp slt i64 %2124, 0
  br i1 %2125, label %2126, label %2127, !prof !50

; <label>:2126:                                   ; preds = %2066
  call void @__assert_rtn(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__._ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEENS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEC2EllRKS3_, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.13, i64 0, i64 0), i32 74, i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.14, i64 0, i64 0)) #13, !noalias !47
  unreachable

; <label>:2127:                                   ; preds = %2066
  %2128 = load i32, i32* %1520, align 8, !tbaa !33
  %2129 = trunc i128 %2123 to i32
  %2130 = lshr i128 %2123, 32
  %2131 = trunc i128 %2130 to i32
  %2132 = lshr i128 %2123, 64
  %2133 = trunc i128 %2132 to i32
  %2134 = lshr i128 %2123, 96
  %2135 = trunc i128 %2134 to i32
  %2136 = load i32, i32* %1523, align 4, !tbaa !33
  %2137 = mul i32 %2131, %2129
  %2138 = mul i32 %2137, %2133
  %2139 = mul i32 %2138, %2135
  %2140 = mul i32 %2139, %2128
  %2141 = mul i32 %2140, %2136
  %2142 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %173, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.123"* %144, %"class.Eigen::Matrix.123"** %2142, align 8
  %2143 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %173, i64 0, i32 0, i32 1
  store %"class.Eigen::Matrix.185"* %165, %"class.Eigen::Matrix.185"** %2143, align 8
  %2144 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %173, i64 0, i32 1, i32 0, i32 0
  store i64 %2124, i64* %2144, align 8, !alias.scope !47
  %2145 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %173, i64 0, i32 1, i32 2, i32 0
  store i32 %2141, i32* %2145, align 4, !tbaa !51, !alias.scope !47
  %2146 = getelementptr inbounds %"struct.Eigen::internal::add_assign_op", %"struct.Eigen::internal::add_assign_op"* %95, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %2146) #11
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEENS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_7ProductINS2_IiLin1ELi6ELi0ELin1ELi6EEENS2_IiLi6ELi1ELi0ELi6ELi1EEELi0EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKS3_EEEENS0_13add_assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.170"* nonnull dereferenceable(16) %169, %"class.Eigen::CwiseBinaryOp.200"* nonnull dereferenceable(40) %173, %"struct.Eigen::internal::add_assign_op"* nonnull dereferenceable(1) %95) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %2146) #11
  call void @llvm.lifetime.end(i64 40, i8* nonnull %2121) #11
  %2147 = bitcast %"class.Eigen::CwiseBinaryOp.200"* %174 to i8*
  call void @llvm.lifetime.start(i64 40, i8* nonnull %2147) #11
  %2148 = bitcast %"class.Eigen::Matrix.185"* %156 to i128*
  %2149 = load i128, i128* %2148, align 8, !tbaa !11
  %2150 = load i64, i64* %803, align 8, !tbaa !43, !noalias !53
  %2151 = icmp slt i64 %2150, 0
  br i1 %2151, label %2152, label %2153, !prof !50

; <label>:2152:                                   ; preds = %2127
  call void @__assert_rtn(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__._ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEENS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEC2EllRKS3_, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.13, i64 0, i64 0), i32 74, i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.14, i64 0, i64 0)) #13, !noalias !53
  unreachable

; <label>:2153:                                   ; preds = %2127
  %2154 = load i32, i32* %1476, align 8, !tbaa !33
  %2155 = trunc i128 %2149 to i32
  %2156 = lshr i128 %2149, 32
  %2157 = trunc i128 %2156 to i32
  %2158 = lshr i128 %2149, 64
  %2159 = trunc i128 %2158 to i32
  %2160 = lshr i128 %2149, 96
  %2161 = trunc i128 %2160 to i32
  %2162 = load i32, i32* %1479, align 4, !tbaa !33
  %2163 = mul i32 %2157, %2155
  %2164 = mul i32 %2163, %2159
  %2165 = mul i32 %2164, %2161
  %2166 = mul i32 %2165, %2154
  %2167 = mul i32 %2166, %2162
  %2168 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %174, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.123"* %141, %"class.Eigen::Matrix.123"** %2168, align 8
  %2169 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %174, i64 0, i32 0, i32 1
  store %"class.Eigen::Matrix.185"* %166, %"class.Eigen::Matrix.185"** %2169, align 8
  %2170 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %174, i64 0, i32 1, i32 0, i32 0
  store i64 %2150, i64* %2170, align 8, !alias.scope !53
  %2171 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %174, i64 0, i32 1, i32 2, i32 0
  store i32 %2167, i32* %2171, align 4, !tbaa !51, !alias.scope !53
  %2172 = getelementptr inbounds %"struct.Eigen::internal::add_assign_op", %"struct.Eigen::internal::add_assign_op"* %94, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %2172) #11
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEENS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_7ProductINS2_IiLin1ELi6ELi0ELin1ELi6EEENS2_IiLi6ELi1ELi0ELi6ELi1EEELi0EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKS3_EEEENS0_13add_assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.170"* nonnull dereferenceable(16) %170, %"class.Eigen::CwiseBinaryOp.200"* nonnull dereferenceable(40) %174, %"struct.Eigen::internal::add_assign_op"* nonnull dereferenceable(1) %94) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %2172) #11
  call void @llvm.lifetime.end(i64 40, i8* nonnull %2147) #11
  %2173 = bitcast %"class.Eigen::CwiseBinaryOp.220"* %175 to i8*
  call void @llvm.lifetime.start(i64 40, i8* nonnull %2173) #11
  %2174 = bitcast %"class.Eigen::Matrix.153"* %147 to <4 x i32>*
  %2175 = load <4 x i32>, <4 x i32>* %2174, align 16, !tbaa !11
  %2176 = mul <4 x i32> %2175, %2175
  %2177 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %147, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %2178 = bitcast i32* %2177 to <4 x i32>*
  %2179 = load <4 x i32>, <4 x i32>* %2178, align 16, !tbaa !11
  %2180 = mul <4 x i32> %2179, %2179
  %2181 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %147, i64 0, i32 0, i32 0, i32 0, i32 0, i64 8
  %2182 = bitcast i32* %2181 to <4 x i32>*
  %2183 = load <4 x i32>, <4 x i32>* %2182, align 16, !tbaa !11
  %2184 = mul <4 x i32> %2183, %2183
  %2185 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %147, i64 0, i32 0, i32 0, i32 0, i32 0, i64 12
  %2186 = bitcast i32* %2185 to <4 x i32>*
  %2187 = load <4 x i32>, <4 x i32>* %2186, align 16, !tbaa !11
  %2188 = mul <4 x i32> %2187, %2187
  %2189 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %147, i64 0, i32 0, i32 0, i32 0, i32 0, i64 16
  %2190 = bitcast i32* %2189 to <4 x i32>*
  %2191 = load <4 x i32>, <4 x i32>* %2190, align 16, !tbaa !11
  %2192 = mul <4 x i32> %2191, %2191
  %2193 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %147, i64 0, i32 0, i32 0, i32 0, i32 0, i64 20
  %2194 = bitcast i32* %2193 to <4 x i32>*
  %2195 = load <4 x i32>, <4 x i32>* %2194, align 16, !tbaa !11
  %2196 = mul <4 x i32> %2195, %2195
  %2197 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %147, i64 0, i32 0, i32 0, i32 0, i32 0, i64 24
  %2198 = bitcast i32* %2197 to <4 x i32>*
  %2199 = load <4 x i32>, <4 x i32>* %2198, align 16, !tbaa !11
  %2200 = mul <4 x i32> %2199, %2199
  %2201 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %147, i64 0, i32 0, i32 0, i32 0, i32 0, i64 28
  %2202 = bitcast i32* %2201 to <4 x i32>*
  %2203 = load <4 x i32>, <4 x i32>* %2202, align 16, !tbaa !11
  %2204 = mul <4 x i32> %2203, %2203
  %2205 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %147, i64 0, i32 0, i32 0, i32 0, i32 0, i64 32
  %2206 = bitcast i32* %2205 to <4 x i32>*
  %2207 = load <4 x i32>, <4 x i32>* %2206, align 16, !tbaa !11
  %2208 = mul <4 x i32> %2207, %2207
  %2209 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %147, i64 0, i32 0, i32 0, i32 0, i32 0, i64 36
  %2210 = bitcast i32* %2209 to <4 x i32>*
  %2211 = load <4 x i32>, <4 x i32>* %2210, align 16, !tbaa !11
  %2212 = mul <4 x i32> %2211, %2211
  %2213 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %147, i64 0, i32 0, i32 0, i32 0, i32 0, i64 40
  %2214 = bitcast i32* %2213 to <4 x i32>*
  %2215 = load <4 x i32>, <4 x i32>* %2214, align 16, !tbaa !11
  %2216 = mul <4 x i32> %2215, %2215
  %2217 = add <4 x i32> %2180, %2176
  %2218 = add <4 x i32> %2217, %2184
  %2219 = add <4 x i32> %2218, %2188
  %2220 = add <4 x i32> %2219, %2192
  %2221 = add <4 x i32> %2220, %2196
  %2222 = add <4 x i32> %2221, %2200
  %2223 = add <4 x i32> %2222, %2204
  %2224 = add <4 x i32> %2223, %2208
  %2225 = add <4 x i32> %2224, %2212
  %2226 = add <4 x i32> %2225, %2216
  %2227 = call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %2226, <4 x i32> %2226) #11
  %2228 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %147, i64 0, i32 0, i32 0, i32 0, i32 0, i64 44
  %2229 = load i32, i32* %2228, align 16, !tbaa !33
  %2230 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %147, i64 0, i32 0, i32 0, i32 0, i32 0, i64 45
  %2231 = load i32, i32* %2230, align 4, !tbaa !33
  %2232 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %147, i64 0, i32 0, i32 0, i32 0, i32 0, i64 46
  %2233 = load i32, i32* %2232, align 8, !tbaa !33
  %2234 = load i64, i64* %433, align 8, !tbaa !37, !noalias !56
  %2235 = icmp slt i64 %2234, 0
  br i1 %2235, label %2236, label %2237, !prof !50

; <label>:2236:                                   ; preds = %2153
  call void @__assert_rtn(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__._ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEENS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEC2EllRKS3_, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.13, i64 0, i64 0), i32 74, i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.14, i64 0, i64 0)) #13, !noalias !56
  unreachable

; <label>:2237:                                   ; preds = %2153
  %2238 = mul nsw i32 %2229, %2229
  %2239 = call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %2227, <4 x i32> %2227) #11
  %2240 = extractelement <4 x i32> %2239, i32 0
  %2241 = mul nsw i32 %2231, %2231
  %2242 = mul nsw i32 %2233, %2233
  %2243 = add nuw i32 %2241, %2238
  %2244 = add i32 %2243, %2242
  %2245 = add i32 %2244, %2240
  %2246 = sitofp i32 %2245 to double
  %2247 = call double @sqrt(double %2246) #5
  %2248 = fptosi double %2247 to i32
  %2249 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %175, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.32"* %111, %"class.Eigen::Matrix.32"** %2249, align 8
  %2250 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %175, i64 0, i32 0, i32 1
  store %"class.Eigen::Matrix.153"* %145, %"class.Eigen::Matrix.153"** %2250, align 8
  %2251 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %175, i64 0, i32 1, i32 0, i32 0
  store i64 %2234, i64* %2251, align 8, !alias.scope !56
  %2252 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %175, i64 0, i32 1, i32 2, i32 0
  store i32 %2248, i32* %2252, align 4, !tbaa !51, !alias.scope !56
  %2253 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %93, i64 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start(i64 48, i8* nonnull %2253) #11
  %2254 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %175, i64 0, i32 0
  %2255 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %93, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS3_IiLi47ELi1ELi0ELi47ELi1EEELi0EEELi7ENS_10DenseShapeES7_iiEC2ERKS6_(%"struct.Eigen::internal::product_evaluator.706"* %2255, %"class.Eigen::Product.226"* nonnull dereferenceable(16) %2254) #11
  %2256 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %93, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %2257 = load i32, i32* %2252, align 4, !tbaa !51
  store i32 %2257, i32* %2256, align 8, !tbaa !51
  %2258 = load i64, i64* %1257, align 8, !tbaa !46
  %2259 = load i64, i64* %2251, align 8, !tbaa !59
  %2260 = icmp eq i64 %2258, %2259
  br i1 %2260, label %2262, label %2261

; <label>:2261:                                   ; preds = %2237
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__._ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEENS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES3_EEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.15, i64 0, i64 0), i32 710, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.29, i64 0, i64 0)) #13
  unreachable

; <label>:2262:                                   ; preds = %2237
  %2263 = bitcast %"class.Eigen::Matrix.170"* %153 to i64*
  %2264 = load i64, i64* %2263, align 8, !tbaa !44
  %2265 = sdiv i64 %2258, 4
  %2266 = shl nsw i64 %2265, 2
  %2267 = icmp sgt i64 %2258, 3
  br i1 %2267, label %2268, label %2313

; <label>:2268:                                   ; preds = %2262
  %2269 = inttoptr i64 %2264 to i32*
  %2270 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %93, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %2271 = bitcast i32** %2270 to <4 x i32>**
  %2272 = load <4 x i32>*, <4 x i32>** %2271, align 8, !tbaa !61
  %2273 = load <4 x i32>, <4 x i32>* %2272, align 16, !tbaa !11
  %2274 = insertelement <4 x i32> undef, i32 %2257, i32 0
  %2275 = shufflevector <4 x i32> %2274, <4 x i32> undef, <4 x i32> zeroinitializer
  %2276 = mul <4 x i32> %2273, %2275
  %2277 = inttoptr i64 %2264 to <4 x i32>*
  %2278 = load <4 x i32>, <4 x i32>* %2277, align 16, !tbaa !11
  %2279 = add <4 x i32> %2276, %2278
  store <4 x i32> %2279, <4 x i32>* %2277, align 16, !tbaa !11
  %2280 = icmp sgt i64 %2266, 4
  br i1 %2280, label %2281, label %2313

; <label>:2281:                                   ; preds = %2268
  %2282 = add i64 %2266, -5
  %2283 = lshr i64 %2282, 2
  %2284 = add nuw nsw i64 %2283, 1
  %2285 = and i64 %2284, 3
  %2286 = icmp eq i64 %2285, 0
  br i1 %2286, label %2307, label %2287

; <label>:2287:                                   ; preds = %2281
  br label %2288

; <label>:2288:                                   ; preds = %2288, %2287
  %2289 = phi i64 [ %2303, %2288 ], [ 4, %2287 ]
  %2290 = phi i64 [ %2304, %2288 ], [ %2285, %2287 ]
  %2291 = load i32, i32* %2256, align 8, !tbaa !33
  %2292 = getelementptr inbounds i32, i32* %2269, i64 %2289
  %2293 = load i32*, i32** %2270, align 8, !tbaa !61
  %2294 = getelementptr inbounds i32, i32* %2293, i64 %2289
  %2295 = bitcast i32* %2294 to <4 x i32>*
  %2296 = load <4 x i32>, <4 x i32>* %2295, align 16, !tbaa !11
  %2297 = insertelement <4 x i32> undef, i32 %2291, i32 0
  %2298 = shufflevector <4 x i32> %2297, <4 x i32> undef, <4 x i32> zeroinitializer
  %2299 = mul <4 x i32> %2296, %2298
  %2300 = bitcast i32* %2292 to <4 x i32>*
  %2301 = load <4 x i32>, <4 x i32>* %2300, align 16, !tbaa !11
  %2302 = add <4 x i32> %2299, %2301
  store <4 x i32> %2302, <4 x i32>* %2300, align 16, !tbaa !11
  %2303 = add nuw nsw i64 %2289, 4
  %2304 = add i64 %2290, -1
  %2305 = icmp eq i64 %2304, 0
  br i1 %2305, label %2306, label %2288, !llvm.loop !63

; <label>:2306:                                   ; preds = %2288
  br label %2307

; <label>:2307:                                   ; preds = %2281, %2306
  %2308 = phi i64 [ 4, %2281 ], [ %2303, %2306 ]
  %2309 = icmp ult i64 %2282, 12
  br i1 %2309, label %2312, label %2310

; <label>:2310:                                   ; preds = %2307
  br label %2451

; <label>:2311:                                   ; preds = %2451
  br label %2312

; <label>:2312:                                   ; preds = %2307, %2311
  br label %2313

; <label>:2313:                                   ; preds = %2312, %2268, %2262
  %2314 = icmp sgt i64 %2258, %2266
  br i1 %2314, label %2315, label %2508

; <label>:2315:                                   ; preds = %2313
  %2316 = inttoptr i64 %2264 to i32*
  %2317 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %93, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %2318 = load i32*, i32** %2317, align 8, !tbaa !61
  %2319 = sub i64 %2258, %2266
  %2320 = icmp ult i64 %2319, 32
  br i1 %2320, label %2390, label %2321

; <label>:2321:                                   ; preds = %2315
  %2322 = and i64 %2319, -32
  %2323 = icmp eq i64 %2322, 0
  br i1 %2323, label %2390, label %2324

; <label>:2324:                                   ; preds = %2321
  %2325 = getelementptr i32, i32* %2316, i64 %2266
  %2326 = getelementptr i32, i32* %2316, i64 %2258
  %2327 = getelementptr i32, i32* %2318, i64 %2266
  %2328 = getelementptr i32, i32* %2318, i64 %2258
  %2329 = icmp ult i32* %2325, %2256
  %2330 = icmp ult i32* %2256, %2326
  %2331 = and i1 %2329, %2330
  %2332 = icmp ult i32* %2325, %2328
  %2333 = icmp ult i32* %2327, %2326
  %2334 = and i1 %2332, %2333
  %2335 = or i1 %2331, %2334
  %2336 = add i64 %2266, %2322
  br i1 %2335, label %2390, label %2337

; <label>:2337:                                   ; preds = %2324
  %2338 = load i32, i32* %2256, align 8, !tbaa !51, !alias.scope !64
  %2339 = insertelement <8 x i32> undef, i32 %2338, i32 0
  %2340 = shufflevector <8 x i32> %2339, <8 x i32> undef, <8 x i32> zeroinitializer
  %2341 = insertelement <8 x i32> undef, i32 %2338, i32 0
  %2342 = shufflevector <8 x i32> %2341, <8 x i32> undef, <8 x i32> zeroinitializer
  %2343 = insertelement <8 x i32> undef, i32 %2338, i32 0
  %2344 = shufflevector <8 x i32> %2343, <8 x i32> undef, <8 x i32> zeroinitializer
  %2345 = insertelement <8 x i32> undef, i32 %2338, i32 0
  %2346 = shufflevector <8 x i32> %2345, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %2347

; <label>:2347:                                   ; preds = %2337, %2347
  %2348 = phi i64 [ %2386, %2347 ], [ 0, %2337 ]
  %2349 = add i64 %2266, %2348
  %2350 = getelementptr inbounds i32, i32* %2316, i64 %2349
  %2351 = getelementptr inbounds i32, i32* %2318, i64 %2349
  %2352 = bitcast i32* %2351 to <8 x i32>*
  %2353 = load <8 x i32>, <8 x i32>* %2352, align 4, !tbaa !33, !alias.scope !67
  %2354 = getelementptr i32, i32* %2351, i64 8
  %2355 = bitcast i32* %2354 to <8 x i32>*
  %2356 = load <8 x i32>, <8 x i32>* %2355, align 4, !tbaa !33, !alias.scope !67
  %2357 = getelementptr i32, i32* %2351, i64 16
  %2358 = bitcast i32* %2357 to <8 x i32>*
  %2359 = load <8 x i32>, <8 x i32>* %2358, align 4, !tbaa !33, !alias.scope !67
  %2360 = getelementptr i32, i32* %2351, i64 24
  %2361 = bitcast i32* %2360 to <8 x i32>*
  %2362 = load <8 x i32>, <8 x i32>* %2361, align 4, !tbaa !33, !alias.scope !67
  %2363 = mul nsw <8 x i32> %2353, %2340
  %2364 = mul nsw <8 x i32> %2356, %2342
  %2365 = mul nsw <8 x i32> %2359, %2344
  %2366 = mul nsw <8 x i32> %2362, %2346
  %2367 = bitcast i32* %2350 to <8 x i32>*
  %2368 = load <8 x i32>, <8 x i32>* %2367, align 4, !tbaa !33, !alias.scope !69, !noalias !71
  %2369 = getelementptr i32, i32* %2350, i64 8
  %2370 = bitcast i32* %2369 to <8 x i32>*
  %2371 = load <8 x i32>, <8 x i32>* %2370, align 4, !tbaa !33, !alias.scope !69, !noalias !71
  %2372 = getelementptr i32, i32* %2350, i64 16
  %2373 = bitcast i32* %2372 to <8 x i32>*
  %2374 = load <8 x i32>, <8 x i32>* %2373, align 4, !tbaa !33, !alias.scope !69, !noalias !71
  %2375 = getelementptr i32, i32* %2350, i64 24
  %2376 = bitcast i32* %2375 to <8 x i32>*
  %2377 = load <8 x i32>, <8 x i32>* %2376, align 4, !tbaa !33, !alias.scope !69, !noalias !71
  %2378 = add nsw <8 x i32> %2368, %2363
  %2379 = add nsw <8 x i32> %2371, %2364
  %2380 = add nsw <8 x i32> %2374, %2365
  %2381 = add nsw <8 x i32> %2377, %2366
  %2382 = bitcast i32* %2350 to <8 x i32>*
  store <8 x i32> %2378, <8 x i32>* %2382, align 4, !tbaa !33, !alias.scope !69, !noalias !71
  %2383 = bitcast i32* %2369 to <8 x i32>*
  store <8 x i32> %2379, <8 x i32>* %2383, align 4, !tbaa !33, !alias.scope !69, !noalias !71
  %2384 = bitcast i32* %2372 to <8 x i32>*
  store <8 x i32> %2380, <8 x i32>* %2384, align 4, !tbaa !33, !alias.scope !69, !noalias !71
  %2385 = bitcast i32* %2375 to <8 x i32>*
  store <8 x i32> %2381, <8 x i32>* %2385, align 4, !tbaa !33, !alias.scope !69, !noalias !71
  %2386 = add i64 %2348, 32
  %2387 = icmp eq i64 %2386, %2322
  br i1 %2387, label %2388, label %2347, !llvm.loop !72

; <label>:2388:                                   ; preds = %2347
  %2389 = icmp eq i64 %2319, %2322
  br i1 %2389, label %2508, label %2390

; <label>:2390:                                   ; preds = %2388, %2324, %2321, %2315
  %2391 = phi i64 [ %2266, %2324 ], [ %2266, %2321 ], [ %2266, %2315 ], [ %2336, %2388 ]
  %2392 = sub i64 %2258, %2391
  %2393 = add i64 %2258, -1
  %2394 = sub i64 %2393, %2391
  %2395 = and i64 %2392, 3
  %2396 = icmp eq i64 %2395, 0
  br i1 %2396, label %2412, label %2397

; <label>:2397:                                   ; preds = %2390
  br label %2398

; <label>:2398:                                   ; preds = %2398, %2397
  %2399 = phi i64 [ %2408, %2398 ], [ %2391, %2397 ]
  %2400 = phi i64 [ %2409, %2398 ], [ %2395, %2397 ]
  %2401 = getelementptr inbounds i32, i32* %2316, i64 %2399
  %2402 = getelementptr inbounds i32, i32* %2318, i64 %2399
  %2403 = load i32, i32* %2256, align 8, !tbaa !51
  %2404 = load i32, i32* %2402, align 4, !tbaa !33
  %2405 = mul nsw i32 %2404, %2403
  %2406 = load i32, i32* %2401, align 4, !tbaa !33
  %2407 = add nsw i32 %2406, %2405
  store i32 %2407, i32* %2401, align 4, !tbaa !33
  %2408 = add nsw i64 %2399, 1
  %2409 = add i64 %2400, -1
  %2410 = icmp eq i64 %2409, 0
  br i1 %2410, label %2411, label %2398, !llvm.loop !75

; <label>:2411:                                   ; preds = %2398
  br label %2412

; <label>:2412:                                   ; preds = %2390, %2411
  %2413 = phi i64 [ %2391, %2390 ], [ %2408, %2411 ]
  %2414 = icmp ult i64 %2394, 3
  br i1 %2414, label %2507, label %2415

; <label>:2415:                                   ; preds = %2412
  br label %2416

; <label>:2416:                                   ; preds = %2416, %2415
  %2417 = phi i64 [ %2413, %2415 ], [ %2449, %2416 ]
  %2418 = getelementptr inbounds i32, i32* %2316, i64 %2417
  %2419 = getelementptr inbounds i32, i32* %2318, i64 %2417
  %2420 = load i32, i32* %2256, align 8, !tbaa !51
  %2421 = load i32, i32* %2419, align 4, !tbaa !33
  %2422 = mul nsw i32 %2421, %2420
  %2423 = load i32, i32* %2418, align 4, !tbaa !33
  %2424 = add nsw i32 %2423, %2422
  store i32 %2424, i32* %2418, align 4, !tbaa !33
  %2425 = add nsw i64 %2417, 1
  %2426 = getelementptr inbounds i32, i32* %2316, i64 %2425
  %2427 = getelementptr inbounds i32, i32* %2318, i64 %2425
  %2428 = load i32, i32* %2256, align 8, !tbaa !51
  %2429 = load i32, i32* %2427, align 4, !tbaa !33
  %2430 = mul nsw i32 %2429, %2428
  %2431 = load i32, i32* %2426, align 4, !tbaa !33
  %2432 = add nsw i32 %2431, %2430
  store i32 %2432, i32* %2426, align 4, !tbaa !33
  %2433 = add nsw i64 %2417, 2
  %2434 = getelementptr inbounds i32, i32* %2316, i64 %2433
  %2435 = getelementptr inbounds i32, i32* %2318, i64 %2433
  %2436 = load i32, i32* %2256, align 8, !tbaa !51
  %2437 = load i32, i32* %2435, align 4, !tbaa !33
  %2438 = mul nsw i32 %2437, %2436
  %2439 = load i32, i32* %2434, align 4, !tbaa !33
  %2440 = add nsw i32 %2439, %2438
  store i32 %2440, i32* %2434, align 4, !tbaa !33
  %2441 = add nsw i64 %2417, 3
  %2442 = getelementptr inbounds i32, i32* %2316, i64 %2441
  %2443 = getelementptr inbounds i32, i32* %2318, i64 %2441
  %2444 = load i32, i32* %2256, align 8, !tbaa !51
  %2445 = load i32, i32* %2443, align 4, !tbaa !33
  %2446 = mul nsw i32 %2445, %2444
  %2447 = load i32, i32* %2442, align 4, !tbaa !33
  %2448 = add nsw i32 %2447, %2446
  store i32 %2448, i32* %2442, align 4, !tbaa !33
  %2449 = add nsw i64 %2417, 4
  %2450 = icmp eq i64 %2449, %2258
  br i1 %2450, label %2506, label %2416, !llvm.loop !76

; <label>:2451:                                   ; preds = %2451, %2310
  %2452 = phi i64 [ %2308, %2310 ], [ %2504, %2451 ]
  %2453 = load i32, i32* %2256, align 8, !tbaa !33
  %2454 = getelementptr inbounds i32, i32* %2269, i64 %2452
  %2455 = load i32*, i32** %2270, align 8, !tbaa !61
  %2456 = getelementptr inbounds i32, i32* %2455, i64 %2452
  %2457 = bitcast i32* %2456 to <4 x i32>*
  %2458 = load <4 x i32>, <4 x i32>* %2457, align 16, !tbaa !11
  %2459 = insertelement <4 x i32> undef, i32 %2453, i32 0
  %2460 = shufflevector <4 x i32> %2459, <4 x i32> undef, <4 x i32> zeroinitializer
  %2461 = mul <4 x i32> %2458, %2460
  %2462 = bitcast i32* %2454 to <4 x i32>*
  %2463 = load <4 x i32>, <4 x i32>* %2462, align 16, !tbaa !11
  %2464 = add <4 x i32> %2461, %2463
  store <4 x i32> %2464, <4 x i32>* %2462, align 16, !tbaa !11
  %2465 = add nuw nsw i64 %2452, 4
  %2466 = load i32, i32* %2256, align 8, !tbaa !33
  %2467 = getelementptr inbounds i32, i32* %2269, i64 %2465
  %2468 = load i32*, i32** %2270, align 8, !tbaa !61
  %2469 = getelementptr inbounds i32, i32* %2468, i64 %2465
  %2470 = bitcast i32* %2469 to <4 x i32>*
  %2471 = load <4 x i32>, <4 x i32>* %2470, align 16, !tbaa !11
  %2472 = insertelement <4 x i32> undef, i32 %2466, i32 0
  %2473 = shufflevector <4 x i32> %2472, <4 x i32> undef, <4 x i32> zeroinitializer
  %2474 = mul <4 x i32> %2471, %2473
  %2475 = bitcast i32* %2467 to <4 x i32>*
  %2476 = load <4 x i32>, <4 x i32>* %2475, align 16, !tbaa !11
  %2477 = add <4 x i32> %2474, %2476
  store <4 x i32> %2477, <4 x i32>* %2475, align 16, !tbaa !11
  %2478 = add nsw i64 %2452, 8
  %2479 = load i32, i32* %2256, align 8, !tbaa !33
  %2480 = getelementptr inbounds i32, i32* %2269, i64 %2478
  %2481 = load i32*, i32** %2270, align 8, !tbaa !61
  %2482 = getelementptr inbounds i32, i32* %2481, i64 %2478
  %2483 = bitcast i32* %2482 to <4 x i32>*
  %2484 = load <4 x i32>, <4 x i32>* %2483, align 16, !tbaa !11
  %2485 = insertelement <4 x i32> undef, i32 %2479, i32 0
  %2486 = shufflevector <4 x i32> %2485, <4 x i32> undef, <4 x i32> zeroinitializer
  %2487 = mul <4 x i32> %2484, %2486
  %2488 = bitcast i32* %2480 to <4 x i32>*
  %2489 = load <4 x i32>, <4 x i32>* %2488, align 16, !tbaa !11
  %2490 = add <4 x i32> %2487, %2489
  store <4 x i32> %2490, <4 x i32>* %2488, align 16, !tbaa !11
  %2491 = add nsw i64 %2452, 12
  %2492 = load i32, i32* %2256, align 8, !tbaa !33
  %2493 = getelementptr inbounds i32, i32* %2269, i64 %2491
  %2494 = load i32*, i32** %2270, align 8, !tbaa !61
  %2495 = getelementptr inbounds i32, i32* %2494, i64 %2491
  %2496 = bitcast i32* %2495 to <4 x i32>*
  %2497 = load <4 x i32>, <4 x i32>* %2496, align 16, !tbaa !11
  %2498 = insertelement <4 x i32> undef, i32 %2492, i32 0
  %2499 = shufflevector <4 x i32> %2498, <4 x i32> undef, <4 x i32> zeroinitializer
  %2500 = mul <4 x i32> %2497, %2499
  %2501 = bitcast i32* %2493 to <4 x i32>*
  %2502 = load <4 x i32>, <4 x i32>* %2501, align 16, !tbaa !11
  %2503 = add <4 x i32> %2500, %2502
  store <4 x i32> %2503, <4 x i32>* %2501, align 16, !tbaa !11
  %2504 = add nsw i64 %2452, 16
  %2505 = icmp slt i64 %2504, %2266
  br i1 %2505, label %2451, label %2311

; <label>:2506:                                   ; preds = %2416
  br label %2507

; <label>:2507:                                   ; preds = %2412, %2506
  br label %2508

; <label>:2508:                                   ; preds = %2507, %2388, %2313
  %2509 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %93, i64 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %2510 = load i32*, i32** %2509, align 8, !tbaa !44
  %2511 = icmp eq i32* %2510, null
  br i1 %2511, label %2516, label %2512

; <label>:2512:                                   ; preds = %2508
  %2513 = getelementptr inbounds i32, i32* %2510, i64 -2
  %2514 = bitcast i32* %2513 to i8**
  %2515 = load i8*, i8** %2514, align 8, !tbaa !29
  call void @free(i8* %2515) #11
  br label %2516

; <label>:2516:                                   ; preds = %2508, %2512
  call void @llvm.lifetime.end(i64 48, i8* nonnull %2253) #11
  call void @llvm.lifetime.end(i64 40, i8* nonnull %2173) #11
  %2517 = bitcast %"class.Eigen::CwiseBinaryOp.220"* %176 to i8*
  call void @llvm.lifetime.start(i64 40, i8* nonnull %2517) #11
  %2518 = bitcast %"class.Eigen::Matrix.153"* %148 to <4 x i32>*
  %2519 = load <4 x i32>, <4 x i32>* %2518, align 16, !tbaa !11
  %2520 = mul <4 x i32> %2519, %2519
  %2521 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %148, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %2522 = bitcast i32* %2521 to <4 x i32>*
  %2523 = load <4 x i32>, <4 x i32>* %2522, align 16, !tbaa !11
  %2524 = mul <4 x i32> %2523, %2523
  %2525 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %148, i64 0, i32 0, i32 0, i32 0, i32 0, i64 8
  %2526 = bitcast i32* %2525 to <4 x i32>*
  %2527 = load <4 x i32>, <4 x i32>* %2526, align 16, !tbaa !11
  %2528 = mul <4 x i32> %2527, %2527
  %2529 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %148, i64 0, i32 0, i32 0, i32 0, i32 0, i64 12
  %2530 = bitcast i32* %2529 to <4 x i32>*
  %2531 = load <4 x i32>, <4 x i32>* %2530, align 16, !tbaa !11
  %2532 = mul <4 x i32> %2531, %2531
  %2533 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %148, i64 0, i32 0, i32 0, i32 0, i32 0, i64 16
  %2534 = bitcast i32* %2533 to <4 x i32>*
  %2535 = load <4 x i32>, <4 x i32>* %2534, align 16, !tbaa !11
  %2536 = mul <4 x i32> %2535, %2535
  %2537 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %148, i64 0, i32 0, i32 0, i32 0, i32 0, i64 20
  %2538 = bitcast i32* %2537 to <4 x i32>*
  %2539 = load <4 x i32>, <4 x i32>* %2538, align 16, !tbaa !11
  %2540 = mul <4 x i32> %2539, %2539
  %2541 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %148, i64 0, i32 0, i32 0, i32 0, i32 0, i64 24
  %2542 = bitcast i32* %2541 to <4 x i32>*
  %2543 = load <4 x i32>, <4 x i32>* %2542, align 16, !tbaa !11
  %2544 = mul <4 x i32> %2543, %2543
  %2545 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %148, i64 0, i32 0, i32 0, i32 0, i32 0, i64 28
  %2546 = bitcast i32* %2545 to <4 x i32>*
  %2547 = load <4 x i32>, <4 x i32>* %2546, align 16, !tbaa !11
  %2548 = mul <4 x i32> %2547, %2547
  %2549 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %148, i64 0, i32 0, i32 0, i32 0, i32 0, i64 32
  %2550 = bitcast i32* %2549 to <4 x i32>*
  %2551 = load <4 x i32>, <4 x i32>* %2550, align 16, !tbaa !11
  %2552 = mul <4 x i32> %2551, %2551
  %2553 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %148, i64 0, i32 0, i32 0, i32 0, i32 0, i64 36
  %2554 = bitcast i32* %2553 to <4 x i32>*
  %2555 = load <4 x i32>, <4 x i32>* %2554, align 16, !tbaa !11
  %2556 = mul <4 x i32> %2555, %2555
  %2557 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %148, i64 0, i32 0, i32 0, i32 0, i32 0, i64 40
  %2558 = bitcast i32* %2557 to <4 x i32>*
  %2559 = load <4 x i32>, <4 x i32>* %2558, align 16, !tbaa !11
  %2560 = mul <4 x i32> %2559, %2559
  %2561 = add <4 x i32> %2524, %2520
  %2562 = add <4 x i32> %2561, %2528
  %2563 = add <4 x i32> %2562, %2532
  %2564 = add <4 x i32> %2563, %2536
  %2565 = add <4 x i32> %2564, %2540
  %2566 = add <4 x i32> %2565, %2544
  %2567 = add <4 x i32> %2566, %2548
  %2568 = add <4 x i32> %2567, %2552
  %2569 = add <4 x i32> %2568, %2556
  %2570 = add <4 x i32> %2569, %2560
  %2571 = call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %2570, <4 x i32> %2570) #11
  %2572 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %148, i64 0, i32 0, i32 0, i32 0, i32 0, i64 44
  %2573 = load i32, i32* %2572, align 16, !tbaa !33
  %2574 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %148, i64 0, i32 0, i32 0, i32 0, i32 0, i64 45
  %2575 = load i32, i32* %2574, align 4, !tbaa !33
  %2576 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %148, i64 0, i32 0, i32 0, i32 0, i32 0, i64 46
  %2577 = load i32, i32* %2576, align 8, !tbaa !33
  %2578 = load i64, i64* %389, align 8, !tbaa !37, !noalias !77
  %2579 = icmp slt i64 %2578, 0
  br i1 %2579, label %2580, label %2581, !prof !50

; <label>:2580:                                   ; preds = %2516
  call void @__assert_rtn(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__._ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEENS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEC2EllRKS3_, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.13, i64 0, i64 0), i32 74, i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.14, i64 0, i64 0)) #13, !noalias !77
  unreachable

; <label>:2581:                                   ; preds = %2516
  %2582 = mul nsw i32 %2573, %2573
  %2583 = call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %2571, <4 x i32> %2571) #11
  %2584 = extractelement <4 x i32> %2583, i32 0
  %2585 = mul nsw i32 %2575, %2575
  %2586 = mul nsw i32 %2577, %2577
  %2587 = add nuw i32 %2585, %2582
  %2588 = add i32 %2587, %2586
  %2589 = add i32 %2588, %2584
  %2590 = sitofp i32 %2589 to double
  %2591 = call double @sqrt(double %2590) #5
  %2592 = fptosi double %2591 to i32
  %2593 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %176, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.32"* %109, %"class.Eigen::Matrix.32"** %2593, align 8
  %2594 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %176, i64 0, i32 0, i32 1
  store %"class.Eigen::Matrix.153"* %148, %"class.Eigen::Matrix.153"** %2594, align 8
  %2595 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %176, i64 0, i32 1, i32 0, i32 0
  store i64 %2578, i64* %2595, align 8, !alias.scope !77
  %2596 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %176, i64 0, i32 1, i32 2, i32 0
  store i32 %2592, i32* %2596, align 4, !tbaa !51, !alias.scope !77
  %2597 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %92, i64 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start(i64 48, i8* nonnull %2597) #11
  %2598 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %176, i64 0, i32 0
  %2599 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %92, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS3_IiLi47ELi1ELi0ELi47ELi1EEELi0EEELi7ENS_10DenseShapeES7_iiEC2ERKS6_(%"struct.Eigen::internal::product_evaluator.706"* %2599, %"class.Eigen::Product.226"* nonnull dereferenceable(16) %2598) #11
  %2600 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %92, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %2601 = load i32, i32* %2596, align 4, !tbaa !51
  store i32 %2601, i32* %2600, align 8, !tbaa !51
  %2602 = load i64, i64* %1257, align 8, !tbaa !46
  %2603 = load i64, i64* %2595, align 8, !tbaa !59
  %2604 = icmp eq i64 %2602, %2603
  br i1 %2604, label %2606, label %2605

; <label>:2605:                                   ; preds = %2581
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__._ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEENS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES3_EEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.15, i64 0, i64 0), i32 710, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.29, i64 0, i64 0)) #13
  unreachable

; <label>:2606:                                   ; preds = %2581
  %2607 = load i64, i64* %2263, align 8, !tbaa !44
  %2608 = sdiv i64 %2602, 4
  %2609 = shl nsw i64 %2608, 2
  %2610 = icmp sgt i64 %2602, 3
  br i1 %2610, label %2611, label %2656

; <label>:2611:                                   ; preds = %2606
  %2612 = inttoptr i64 %2607 to i32*
  %2613 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %92, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %2614 = bitcast i32** %2613 to <4 x i32>**
  %2615 = load <4 x i32>*, <4 x i32>** %2614, align 8, !tbaa !61
  %2616 = load <4 x i32>, <4 x i32>* %2615, align 16, !tbaa !11
  %2617 = insertelement <4 x i32> undef, i32 %2601, i32 0
  %2618 = shufflevector <4 x i32> %2617, <4 x i32> undef, <4 x i32> zeroinitializer
  %2619 = mul <4 x i32> %2616, %2618
  %2620 = inttoptr i64 %2607 to <4 x i32>*
  %2621 = load <4 x i32>, <4 x i32>* %2620, align 16, !tbaa !11
  %2622 = add <4 x i32> %2619, %2621
  store <4 x i32> %2622, <4 x i32>* %2620, align 16, !tbaa !11
  %2623 = icmp sgt i64 %2609, 4
  br i1 %2623, label %2624, label %2656

; <label>:2624:                                   ; preds = %2611
  %2625 = add i64 %2609, -5
  %2626 = lshr i64 %2625, 2
  %2627 = add nuw nsw i64 %2626, 1
  %2628 = and i64 %2627, 3
  %2629 = icmp eq i64 %2628, 0
  br i1 %2629, label %2650, label %2630

; <label>:2630:                                   ; preds = %2624
  br label %2631

; <label>:2631:                                   ; preds = %2631, %2630
  %2632 = phi i64 [ %2646, %2631 ], [ 4, %2630 ]
  %2633 = phi i64 [ %2647, %2631 ], [ %2628, %2630 ]
  %2634 = load i32, i32* %2600, align 8, !tbaa !33
  %2635 = getelementptr inbounds i32, i32* %2612, i64 %2632
  %2636 = load i32*, i32** %2613, align 8, !tbaa !61
  %2637 = getelementptr inbounds i32, i32* %2636, i64 %2632
  %2638 = bitcast i32* %2637 to <4 x i32>*
  %2639 = load <4 x i32>, <4 x i32>* %2638, align 16, !tbaa !11
  %2640 = insertelement <4 x i32> undef, i32 %2634, i32 0
  %2641 = shufflevector <4 x i32> %2640, <4 x i32> undef, <4 x i32> zeroinitializer
  %2642 = mul <4 x i32> %2639, %2641
  %2643 = bitcast i32* %2635 to <4 x i32>*
  %2644 = load <4 x i32>, <4 x i32>* %2643, align 16, !tbaa !11
  %2645 = add <4 x i32> %2642, %2644
  store <4 x i32> %2645, <4 x i32>* %2643, align 16, !tbaa !11
  %2646 = add nuw nsw i64 %2632, 4
  %2647 = add i64 %2633, -1
  %2648 = icmp eq i64 %2647, 0
  br i1 %2648, label %2649, label %2631, !llvm.loop !80

; <label>:2649:                                   ; preds = %2631
  br label %2650

; <label>:2650:                                   ; preds = %2624, %2649
  %2651 = phi i64 [ 4, %2624 ], [ %2646, %2649 ]
  %2652 = icmp ult i64 %2625, 12
  br i1 %2652, label %2655, label %2653

; <label>:2653:                                   ; preds = %2650
  br label %2794

; <label>:2654:                                   ; preds = %2794
  br label %2655

; <label>:2655:                                   ; preds = %2650, %2654
  br label %2656

; <label>:2656:                                   ; preds = %2655, %2611, %2606
  %2657 = icmp sgt i64 %2602, %2609
  br i1 %2657, label %2658, label %2851

; <label>:2658:                                   ; preds = %2656
  %2659 = inttoptr i64 %2607 to i32*
  %2660 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %92, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %2661 = load i32*, i32** %2660, align 8, !tbaa !61
  %2662 = sub i64 %2602, %2609
  %2663 = icmp ult i64 %2662, 32
  br i1 %2663, label %2733, label %2664

; <label>:2664:                                   ; preds = %2658
  %2665 = and i64 %2662, -32
  %2666 = icmp eq i64 %2665, 0
  br i1 %2666, label %2733, label %2667

; <label>:2667:                                   ; preds = %2664
  %2668 = getelementptr i32, i32* %2659, i64 %2609
  %2669 = getelementptr i32, i32* %2659, i64 %2602
  %2670 = getelementptr i32, i32* %2661, i64 %2609
  %2671 = getelementptr i32, i32* %2661, i64 %2602
  %2672 = icmp ult i32* %2668, %2600
  %2673 = icmp ult i32* %2600, %2669
  %2674 = and i1 %2672, %2673
  %2675 = icmp ult i32* %2668, %2671
  %2676 = icmp ult i32* %2670, %2669
  %2677 = and i1 %2675, %2676
  %2678 = or i1 %2674, %2677
  %2679 = add i64 %2609, %2665
  br i1 %2678, label %2733, label %2680

; <label>:2680:                                   ; preds = %2667
  %2681 = load i32, i32* %2600, align 8, !tbaa !51, !alias.scope !81
  %2682 = insertelement <8 x i32> undef, i32 %2681, i32 0
  %2683 = shufflevector <8 x i32> %2682, <8 x i32> undef, <8 x i32> zeroinitializer
  %2684 = insertelement <8 x i32> undef, i32 %2681, i32 0
  %2685 = shufflevector <8 x i32> %2684, <8 x i32> undef, <8 x i32> zeroinitializer
  %2686 = insertelement <8 x i32> undef, i32 %2681, i32 0
  %2687 = shufflevector <8 x i32> %2686, <8 x i32> undef, <8 x i32> zeroinitializer
  %2688 = insertelement <8 x i32> undef, i32 %2681, i32 0
  %2689 = shufflevector <8 x i32> %2688, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %2690

; <label>:2690:                                   ; preds = %2680, %2690
  %2691 = phi i64 [ %2729, %2690 ], [ 0, %2680 ]
  %2692 = add i64 %2609, %2691
  %2693 = getelementptr inbounds i32, i32* %2659, i64 %2692
  %2694 = getelementptr inbounds i32, i32* %2661, i64 %2692
  %2695 = bitcast i32* %2694 to <8 x i32>*
  %2696 = load <8 x i32>, <8 x i32>* %2695, align 4, !tbaa !33, !alias.scope !84
  %2697 = getelementptr i32, i32* %2694, i64 8
  %2698 = bitcast i32* %2697 to <8 x i32>*
  %2699 = load <8 x i32>, <8 x i32>* %2698, align 4, !tbaa !33, !alias.scope !84
  %2700 = getelementptr i32, i32* %2694, i64 16
  %2701 = bitcast i32* %2700 to <8 x i32>*
  %2702 = load <8 x i32>, <8 x i32>* %2701, align 4, !tbaa !33, !alias.scope !84
  %2703 = getelementptr i32, i32* %2694, i64 24
  %2704 = bitcast i32* %2703 to <8 x i32>*
  %2705 = load <8 x i32>, <8 x i32>* %2704, align 4, !tbaa !33, !alias.scope !84
  %2706 = mul nsw <8 x i32> %2696, %2683
  %2707 = mul nsw <8 x i32> %2699, %2685
  %2708 = mul nsw <8 x i32> %2702, %2687
  %2709 = mul nsw <8 x i32> %2705, %2689
  %2710 = bitcast i32* %2693 to <8 x i32>*
  %2711 = load <8 x i32>, <8 x i32>* %2710, align 4, !tbaa !33, !alias.scope !86, !noalias !88
  %2712 = getelementptr i32, i32* %2693, i64 8
  %2713 = bitcast i32* %2712 to <8 x i32>*
  %2714 = load <8 x i32>, <8 x i32>* %2713, align 4, !tbaa !33, !alias.scope !86, !noalias !88
  %2715 = getelementptr i32, i32* %2693, i64 16
  %2716 = bitcast i32* %2715 to <8 x i32>*
  %2717 = load <8 x i32>, <8 x i32>* %2716, align 4, !tbaa !33, !alias.scope !86, !noalias !88
  %2718 = getelementptr i32, i32* %2693, i64 24
  %2719 = bitcast i32* %2718 to <8 x i32>*
  %2720 = load <8 x i32>, <8 x i32>* %2719, align 4, !tbaa !33, !alias.scope !86, !noalias !88
  %2721 = add nsw <8 x i32> %2711, %2706
  %2722 = add nsw <8 x i32> %2714, %2707
  %2723 = add nsw <8 x i32> %2717, %2708
  %2724 = add nsw <8 x i32> %2720, %2709
  %2725 = bitcast i32* %2693 to <8 x i32>*
  store <8 x i32> %2721, <8 x i32>* %2725, align 4, !tbaa !33, !alias.scope !86, !noalias !88
  %2726 = bitcast i32* %2712 to <8 x i32>*
  store <8 x i32> %2722, <8 x i32>* %2726, align 4, !tbaa !33, !alias.scope !86, !noalias !88
  %2727 = bitcast i32* %2715 to <8 x i32>*
  store <8 x i32> %2723, <8 x i32>* %2727, align 4, !tbaa !33, !alias.scope !86, !noalias !88
  %2728 = bitcast i32* %2718 to <8 x i32>*
  store <8 x i32> %2724, <8 x i32>* %2728, align 4, !tbaa !33, !alias.scope !86, !noalias !88
  %2729 = add i64 %2691, 32
  %2730 = icmp eq i64 %2729, %2665
  br i1 %2730, label %2731, label %2690, !llvm.loop !89

; <label>:2731:                                   ; preds = %2690
  %2732 = icmp eq i64 %2662, %2665
  br i1 %2732, label %2851, label %2733

; <label>:2733:                                   ; preds = %2731, %2667, %2664, %2658
  %2734 = phi i64 [ %2609, %2667 ], [ %2609, %2664 ], [ %2609, %2658 ], [ %2679, %2731 ]
  %2735 = sub i64 %2602, %2734
  %2736 = add i64 %2602, -1
  %2737 = sub i64 %2736, %2734
  %2738 = and i64 %2735, 3
  %2739 = icmp eq i64 %2738, 0
  br i1 %2739, label %2755, label %2740

; <label>:2740:                                   ; preds = %2733
  br label %2741

; <label>:2741:                                   ; preds = %2741, %2740
  %2742 = phi i64 [ %2751, %2741 ], [ %2734, %2740 ]
  %2743 = phi i64 [ %2752, %2741 ], [ %2738, %2740 ]
  %2744 = getelementptr inbounds i32, i32* %2659, i64 %2742
  %2745 = getelementptr inbounds i32, i32* %2661, i64 %2742
  %2746 = load i32, i32* %2600, align 8, !tbaa !51
  %2747 = load i32, i32* %2745, align 4, !tbaa !33
  %2748 = mul nsw i32 %2747, %2746
  %2749 = load i32, i32* %2744, align 4, !tbaa !33
  %2750 = add nsw i32 %2749, %2748
  store i32 %2750, i32* %2744, align 4, !tbaa !33
  %2751 = add nsw i64 %2742, 1
  %2752 = add i64 %2743, -1
  %2753 = icmp eq i64 %2752, 0
  br i1 %2753, label %2754, label %2741, !llvm.loop !90

; <label>:2754:                                   ; preds = %2741
  br label %2755

; <label>:2755:                                   ; preds = %2733, %2754
  %2756 = phi i64 [ %2734, %2733 ], [ %2751, %2754 ]
  %2757 = icmp ult i64 %2737, 3
  br i1 %2757, label %2850, label %2758

; <label>:2758:                                   ; preds = %2755
  br label %2759

; <label>:2759:                                   ; preds = %2759, %2758
  %2760 = phi i64 [ %2756, %2758 ], [ %2792, %2759 ]
  %2761 = getelementptr inbounds i32, i32* %2659, i64 %2760
  %2762 = getelementptr inbounds i32, i32* %2661, i64 %2760
  %2763 = load i32, i32* %2600, align 8, !tbaa !51
  %2764 = load i32, i32* %2762, align 4, !tbaa !33
  %2765 = mul nsw i32 %2764, %2763
  %2766 = load i32, i32* %2761, align 4, !tbaa !33
  %2767 = add nsw i32 %2766, %2765
  store i32 %2767, i32* %2761, align 4, !tbaa !33
  %2768 = add nsw i64 %2760, 1
  %2769 = getelementptr inbounds i32, i32* %2659, i64 %2768
  %2770 = getelementptr inbounds i32, i32* %2661, i64 %2768
  %2771 = load i32, i32* %2600, align 8, !tbaa !51
  %2772 = load i32, i32* %2770, align 4, !tbaa !33
  %2773 = mul nsw i32 %2772, %2771
  %2774 = load i32, i32* %2769, align 4, !tbaa !33
  %2775 = add nsw i32 %2774, %2773
  store i32 %2775, i32* %2769, align 4, !tbaa !33
  %2776 = add nsw i64 %2760, 2
  %2777 = getelementptr inbounds i32, i32* %2659, i64 %2776
  %2778 = getelementptr inbounds i32, i32* %2661, i64 %2776
  %2779 = load i32, i32* %2600, align 8, !tbaa !51
  %2780 = load i32, i32* %2778, align 4, !tbaa !33
  %2781 = mul nsw i32 %2780, %2779
  %2782 = load i32, i32* %2777, align 4, !tbaa !33
  %2783 = add nsw i32 %2782, %2781
  store i32 %2783, i32* %2777, align 4, !tbaa !33
  %2784 = add nsw i64 %2760, 3
  %2785 = getelementptr inbounds i32, i32* %2659, i64 %2784
  %2786 = getelementptr inbounds i32, i32* %2661, i64 %2784
  %2787 = load i32, i32* %2600, align 8, !tbaa !51
  %2788 = load i32, i32* %2786, align 4, !tbaa !33
  %2789 = mul nsw i32 %2788, %2787
  %2790 = load i32, i32* %2785, align 4, !tbaa !33
  %2791 = add nsw i32 %2790, %2789
  store i32 %2791, i32* %2785, align 4, !tbaa !33
  %2792 = add nsw i64 %2760, 4
  %2793 = icmp eq i64 %2792, %2602
  br i1 %2793, label %2849, label %2759, !llvm.loop !91

; <label>:2794:                                   ; preds = %2794, %2653
  %2795 = phi i64 [ %2651, %2653 ], [ %2847, %2794 ]
  %2796 = load i32, i32* %2600, align 8, !tbaa !33
  %2797 = getelementptr inbounds i32, i32* %2612, i64 %2795
  %2798 = load i32*, i32** %2613, align 8, !tbaa !61
  %2799 = getelementptr inbounds i32, i32* %2798, i64 %2795
  %2800 = bitcast i32* %2799 to <4 x i32>*
  %2801 = load <4 x i32>, <4 x i32>* %2800, align 16, !tbaa !11
  %2802 = insertelement <4 x i32> undef, i32 %2796, i32 0
  %2803 = shufflevector <4 x i32> %2802, <4 x i32> undef, <4 x i32> zeroinitializer
  %2804 = mul <4 x i32> %2801, %2803
  %2805 = bitcast i32* %2797 to <4 x i32>*
  %2806 = load <4 x i32>, <4 x i32>* %2805, align 16, !tbaa !11
  %2807 = add <4 x i32> %2804, %2806
  store <4 x i32> %2807, <4 x i32>* %2805, align 16, !tbaa !11
  %2808 = add nuw nsw i64 %2795, 4
  %2809 = load i32, i32* %2600, align 8, !tbaa !33
  %2810 = getelementptr inbounds i32, i32* %2612, i64 %2808
  %2811 = load i32*, i32** %2613, align 8, !tbaa !61
  %2812 = getelementptr inbounds i32, i32* %2811, i64 %2808
  %2813 = bitcast i32* %2812 to <4 x i32>*
  %2814 = load <4 x i32>, <4 x i32>* %2813, align 16, !tbaa !11
  %2815 = insertelement <4 x i32> undef, i32 %2809, i32 0
  %2816 = shufflevector <4 x i32> %2815, <4 x i32> undef, <4 x i32> zeroinitializer
  %2817 = mul <4 x i32> %2814, %2816
  %2818 = bitcast i32* %2810 to <4 x i32>*
  %2819 = load <4 x i32>, <4 x i32>* %2818, align 16, !tbaa !11
  %2820 = add <4 x i32> %2817, %2819
  store <4 x i32> %2820, <4 x i32>* %2818, align 16, !tbaa !11
  %2821 = add nsw i64 %2795, 8
  %2822 = load i32, i32* %2600, align 8, !tbaa !33
  %2823 = getelementptr inbounds i32, i32* %2612, i64 %2821
  %2824 = load i32*, i32** %2613, align 8, !tbaa !61
  %2825 = getelementptr inbounds i32, i32* %2824, i64 %2821
  %2826 = bitcast i32* %2825 to <4 x i32>*
  %2827 = load <4 x i32>, <4 x i32>* %2826, align 16, !tbaa !11
  %2828 = insertelement <4 x i32> undef, i32 %2822, i32 0
  %2829 = shufflevector <4 x i32> %2828, <4 x i32> undef, <4 x i32> zeroinitializer
  %2830 = mul <4 x i32> %2827, %2829
  %2831 = bitcast i32* %2823 to <4 x i32>*
  %2832 = load <4 x i32>, <4 x i32>* %2831, align 16, !tbaa !11
  %2833 = add <4 x i32> %2830, %2832
  store <4 x i32> %2833, <4 x i32>* %2831, align 16, !tbaa !11
  %2834 = add nsw i64 %2795, 12
  %2835 = load i32, i32* %2600, align 8, !tbaa !33
  %2836 = getelementptr inbounds i32, i32* %2612, i64 %2834
  %2837 = load i32*, i32** %2613, align 8, !tbaa !61
  %2838 = getelementptr inbounds i32, i32* %2837, i64 %2834
  %2839 = bitcast i32* %2838 to <4 x i32>*
  %2840 = load <4 x i32>, <4 x i32>* %2839, align 16, !tbaa !11
  %2841 = insertelement <4 x i32> undef, i32 %2835, i32 0
  %2842 = shufflevector <4 x i32> %2841, <4 x i32> undef, <4 x i32> zeroinitializer
  %2843 = mul <4 x i32> %2840, %2842
  %2844 = bitcast i32* %2836 to <4 x i32>*
  %2845 = load <4 x i32>, <4 x i32>* %2844, align 16, !tbaa !11
  %2846 = add <4 x i32> %2843, %2845
  store <4 x i32> %2846, <4 x i32>* %2844, align 16, !tbaa !11
  %2847 = add nsw i64 %2795, 16
  %2848 = icmp slt i64 %2847, %2609
  br i1 %2848, label %2794, label %2654

; <label>:2849:                                   ; preds = %2759
  br label %2850

; <label>:2850:                                   ; preds = %2755, %2849
  br label %2851

; <label>:2851:                                   ; preds = %2850, %2731, %2656
  %2852 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %92, i64 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %2853 = load i32*, i32** %2852, align 8, !tbaa !44
  %2854 = icmp eq i32* %2853, null
  br i1 %2854, label %2859, label %2855

; <label>:2855:                                   ; preds = %2851
  %2856 = getelementptr inbounds i32, i32* %2853, i64 -2
  %2857 = bitcast i32* %2856 to i8**
  %2858 = load i8*, i8** %2857, align 8, !tbaa !29
  call void @free(i8* %2858) #11
  br label %2859

; <label>:2859:                                   ; preds = %2855, %2851
  call void @llvm.lifetime.end(i64 48, i8* nonnull %2597) #11
  call void @llvm.lifetime.end(i64 40, i8* nonnull %2517) #11
  %2860 = bitcast %"class.Eigen::Product.234"* %177 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %2860) #11
  %2861 = getelementptr inbounds %"class.Eigen::Product.234", %"class.Eigen::Product.234"* %177, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.153"* %148, %"class.Eigen::Matrix.153"** %2861, align 8
  %2862 = getelementptr inbounds %"class.Eigen::Product.234", %"class.Eigen::Product.234"* %177, i64 0, i32 1, i32 0
  store %"class.Eigen::Matrix.32"* %111, %"class.Eigen::Matrix.32"** %2862, align 8
  %2863 = getelementptr inbounds %"struct.Eigen::internal::add_assign_op", %"struct.Eigen::internal::add_assign_op"* %91, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %2863) #11
  call void @_ZN5Eigen8internal15call_assignmentINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEENS_7ProductINS_9TransposeINS2_IiLi47ELi1ELi0ELi47ELi1EEEEENS5_INS2_IiLin1ELi47ELi0ELin1ELi47EEEEELi0EEENS0_13add_assign_opIiiEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsr25evaluator_assume_aliasingISF_EE5valueEPvE4typeE(%"class.Eigen::Matrix.170"* nonnull dereferenceable(16) %151, %"class.Eigen::Product.234"* nonnull dereferenceable(16) %177, %"struct.Eigen::internal::add_assign_op"* nonnull dereferenceable(1) %91, i8* null) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %2863) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %2860) #11
  %2864 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 47
  %2865 = ptrtoint i32* %2864 to i64
  %2866 = getelementptr inbounds %"struct.Eigen::internal::evaluator.817", %"struct.Eigen::internal::evaluator.817"* %90, i64 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start(i64 224, i8* nonnull %2866) #11
  %2867 = getelementptr inbounds %"struct.Eigen::internal::evaluator.817", %"struct.Eigen::internal::evaluator.817"* %90, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %2868 = getelementptr inbounds %"struct.Eigen::internal::evaluator.817", %"struct.Eigen::internal::evaluator.817"* %90, i64 0, i32 0, i32 2, i32 0, i32 0, i32 1
  %2869 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %2868, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  store i32* %2869, i32** %2867, align 8, !tbaa !92
  %2870 = ptrtoint %"class.Eigen::Matrix.77"* %121 to i64
  %2871 = ptrtoint %"class.Eigen::Matrix.185"* %157 to i64
  %2872 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %89, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %2872) #11
  %2873 = bitcast %"struct.Eigen::internal::evaluator.840"* %86 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %2873) #11
  %2874 = bitcast %"struct.Eigen::internal::evaluator.840"* %86 to i64*
  store i64 %2870, i64* %2874, align 8, !tbaa !11
  %2875 = getelementptr inbounds %"struct.Eigen::internal::evaluator.840", %"struct.Eigen::internal::evaluator.840"* %86, i64 0, i32 0, i32 1
  %2876 = bitcast %"class.Eigen::Matrix.185"** %2875 to i64*
  store i64 %2871, i64* %2876, align 8, !tbaa !11
  %2877 = getelementptr inbounds %"struct.Eigen::internal::evaluator.840", %"struct.Eigen::internal::evaluator.840"* %86, i64 0, i32 0, i32 2, i32 0, i32 0
  %2878 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  store i32* %2878, i32** %2877, align 8, !tbaa !94
  %2879 = getelementptr inbounds %"struct.Eigen::internal::evaluator.840", %"struct.Eigen::internal::evaluator.840"* %86, i64 0, i32 0, i32 3, i32 0, i32 0
  store i32* %1489, i32** %2879, align 8, !tbaa !97
  %2880 = getelementptr inbounds %"struct.Eigen::internal::evaluator.840", %"struct.Eigen::internal::evaluator.840"* %86, i64 0, i32 0, i32 4
  store i64 6, i64* %2880, align 8, !tbaa !99
  %2881 = bitcast %"struct.Eigen::internal::evaluator.583"* %87 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %2881) #11
  %2882 = getelementptr inbounds %"struct.Eigen::internal::evaluator.583", %"struct.Eigen::internal::evaluator.583"* %87, i64 0, i32 0, i32 0
  store i32* %2869, i32** %2882, align 8, !tbaa !92
  %2883 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %88 to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %2883) #11
  %2884 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %88, i64 0, i32 0
  store %"struct.Eigen::internal::evaluator.583"* %87, %"struct.Eigen::internal::evaluator.583"** %2884, align 8, !tbaa !11
  %2885 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %88, i64 0, i32 1
  store %"struct.Eigen::internal::evaluator.840"* %86, %"struct.Eigen::internal::evaluator.840"** %2885, align 8, !tbaa !11
  %2886 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %88, i64 0, i32 2
  store %"struct.Eigen::internal::assign_op.512"* %89, %"struct.Eigen::internal::assign_op.512"** %2886, align 8, !tbaa !11
  %2887 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %88, i64 0, i32 3
  store %"class.Eigen::Matrix.153"* %2868, %"class.Eigen::Matrix.153"** %2887, align 8, !tbaa !11
  call void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi47ELi1ELi0ELi47ELi1EEEEENS3_INS_7ProductINS4_IiLi47ELi6ELi0ELi47ELi6EEENS4_IiLi6ELi1ELi0ELi6ELi1EEELi1EEEEENS0_9assign_opIiiEELi0EEELi3ELi0EE3runERSE_(%"class.Eigen::internal::generic_dense_assignment_kernel.843"* nonnull dereferenceable(32) %88) #11
  call void @llvm.lifetime.end(i64 32, i8* nonnull %2883) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %2881) #11
  call void @llvm.lifetime.end(i64 56, i8* nonnull %2873) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %2872) #11
  %2888 = getelementptr inbounds %"struct.Eigen::internal::evaluator.817", %"struct.Eigen::internal::evaluator.817"* %90, i64 0, i32 0, i32 3
  %2889 = bitcast %"struct.Eigen::internal::evaluator.823"* %2888 to i64*
  store i64 %2865, i64* %2889, align 8, !tbaa !103
  %2890 = bitcast i32* %2864 to <4 x i32>*
  %2891 = bitcast %"class.Eigen::Matrix.153"* %160 to <4 x i32>*
  %2892 = bitcast i32** %2867 to <4 x i32>**
  %2893 = load <4 x i32>*, <4 x i32>** %2892, align 8, !tbaa !92
  %2894 = load <4 x i32>, <4 x i32>* %2893, align 1, !tbaa !11
  %2895 = load <4 x i32>, <4 x i32>* %2890, align 4, !tbaa !11
  %2896 = add <4 x i32> %2895, %2894
  %2897 = load <4 x i32>, <4 x i32>* %2891, align 16, !tbaa !11
  %2898 = add <4 x i32> %2896, %2897
  store <4 x i32> %2898, <4 x i32>* %2891, align 16, !tbaa !11
  %2899 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %160, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %2900 = getelementptr inbounds <4 x i32>, <4 x i32>* %2893, i64 0, i64 4
  %2901 = bitcast i32* %2900 to <4 x i32>*
  %2902 = load <4 x i32>, <4 x i32>* %2901, align 1, !tbaa !11
  %2903 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 51
  %2904 = bitcast i32* %2903 to <4 x i32>*
  %2905 = load <4 x i32>, <4 x i32>* %2904, align 4, !tbaa !11
  %2906 = add <4 x i32> %2905, %2902
  %2907 = bitcast i32* %2899 to <4 x i32>*
  %2908 = load <4 x i32>, <4 x i32>* %2907, align 16, !tbaa !11
  %2909 = add <4 x i32> %2906, %2908
  store <4 x i32> %2909, <4 x i32>* %2907, align 16, !tbaa !11
  %2910 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %160, i64 0, i32 0, i32 0, i32 0, i32 0, i64 8
  %2911 = getelementptr inbounds <4 x i32>, <4 x i32>* %2893, i64 0, i64 8
  %2912 = bitcast i32* %2911 to <4 x i32>*
  %2913 = load <4 x i32>, <4 x i32>* %2912, align 1, !tbaa !11
  %2914 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 55
  %2915 = bitcast i32* %2914 to <4 x i32>*
  %2916 = load <4 x i32>, <4 x i32>* %2915, align 4, !tbaa !11
  %2917 = add <4 x i32> %2916, %2913
  %2918 = bitcast i32* %2910 to <4 x i32>*
  %2919 = load <4 x i32>, <4 x i32>* %2918, align 16, !tbaa !11
  %2920 = add <4 x i32> %2917, %2919
  store <4 x i32> %2920, <4 x i32>* %2918, align 16, !tbaa !11
  %2921 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %160, i64 0, i32 0, i32 0, i32 0, i32 0, i64 12
  %2922 = getelementptr inbounds <4 x i32>, <4 x i32>* %2893, i64 0, i64 12
  %2923 = bitcast i32* %2922 to <4 x i32>*
  %2924 = load <4 x i32>, <4 x i32>* %2923, align 1, !tbaa !11
  %2925 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 59
  %2926 = bitcast i32* %2925 to <4 x i32>*
  %2927 = load <4 x i32>, <4 x i32>* %2926, align 4, !tbaa !11
  %2928 = add <4 x i32> %2927, %2924
  %2929 = bitcast i32* %2921 to <4 x i32>*
  %2930 = load <4 x i32>, <4 x i32>* %2929, align 16, !tbaa !11
  %2931 = add <4 x i32> %2928, %2930
  store <4 x i32> %2931, <4 x i32>* %2929, align 16, !tbaa !11
  %2932 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %160, i64 0, i32 0, i32 0, i32 0, i32 0, i64 16
  %2933 = getelementptr inbounds <4 x i32>, <4 x i32>* %2893, i64 0, i64 16
  %2934 = bitcast i32* %2933 to <4 x i32>*
  %2935 = load <4 x i32>, <4 x i32>* %2934, align 1, !tbaa !11
  %2936 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 63
  %2937 = bitcast i32* %2936 to <4 x i32>*
  %2938 = load <4 x i32>, <4 x i32>* %2937, align 4, !tbaa !11
  %2939 = add <4 x i32> %2938, %2935
  %2940 = bitcast i32* %2932 to <4 x i32>*
  %2941 = load <4 x i32>, <4 x i32>* %2940, align 16, !tbaa !11
  %2942 = add <4 x i32> %2939, %2941
  store <4 x i32> %2942, <4 x i32>* %2940, align 16, !tbaa !11
  %2943 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %160, i64 0, i32 0, i32 0, i32 0, i32 0, i64 20
  %2944 = getelementptr inbounds <4 x i32>, <4 x i32>* %2893, i64 0, i64 20
  %2945 = bitcast i32* %2944 to <4 x i32>*
  %2946 = load <4 x i32>, <4 x i32>* %2945, align 1, !tbaa !11
  %2947 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 67
  %2948 = bitcast i32* %2947 to <4 x i32>*
  %2949 = load <4 x i32>, <4 x i32>* %2948, align 4, !tbaa !11
  %2950 = add <4 x i32> %2949, %2946
  %2951 = bitcast i32* %2943 to <4 x i32>*
  %2952 = load <4 x i32>, <4 x i32>* %2951, align 16, !tbaa !11
  %2953 = add <4 x i32> %2950, %2952
  store <4 x i32> %2953, <4 x i32>* %2951, align 16, !tbaa !11
  %2954 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %160, i64 0, i32 0, i32 0, i32 0, i32 0, i64 24
  %2955 = getelementptr inbounds <4 x i32>, <4 x i32>* %2893, i64 0, i64 24
  %2956 = bitcast i32* %2955 to <4 x i32>*
  %2957 = load <4 x i32>, <4 x i32>* %2956, align 1, !tbaa !11
  %2958 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 71
  %2959 = bitcast i32* %2958 to <4 x i32>*
  %2960 = load <4 x i32>, <4 x i32>* %2959, align 4, !tbaa !11
  %2961 = add <4 x i32> %2960, %2957
  %2962 = bitcast i32* %2954 to <4 x i32>*
  %2963 = load <4 x i32>, <4 x i32>* %2962, align 16, !tbaa !11
  %2964 = add <4 x i32> %2961, %2963
  store <4 x i32> %2964, <4 x i32>* %2962, align 16, !tbaa !11
  %2965 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %160, i64 0, i32 0, i32 0, i32 0, i32 0, i64 28
  %2966 = getelementptr inbounds <4 x i32>, <4 x i32>* %2893, i64 0, i64 28
  %2967 = bitcast i32* %2966 to <4 x i32>*
  %2968 = load <4 x i32>, <4 x i32>* %2967, align 1, !tbaa !11
  %2969 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 75
  %2970 = bitcast i32* %2969 to <4 x i32>*
  %2971 = load <4 x i32>, <4 x i32>* %2970, align 4, !tbaa !11
  %2972 = add <4 x i32> %2971, %2968
  %2973 = bitcast i32* %2965 to <4 x i32>*
  %2974 = load <4 x i32>, <4 x i32>* %2973, align 16, !tbaa !11
  %2975 = add <4 x i32> %2972, %2974
  store <4 x i32> %2975, <4 x i32>* %2973, align 16, !tbaa !11
  %2976 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %160, i64 0, i32 0, i32 0, i32 0, i32 0, i64 32
  %2977 = getelementptr inbounds <4 x i32>, <4 x i32>* %2893, i64 0, i64 32
  %2978 = bitcast i32* %2977 to <4 x i32>*
  %2979 = load <4 x i32>, <4 x i32>* %2978, align 1, !tbaa !11
  %2980 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 79
  %2981 = bitcast i32* %2980 to <4 x i32>*
  %2982 = load <4 x i32>, <4 x i32>* %2981, align 4, !tbaa !11
  %2983 = add <4 x i32> %2982, %2979
  %2984 = bitcast i32* %2976 to <4 x i32>*
  %2985 = load <4 x i32>, <4 x i32>* %2984, align 16, !tbaa !11
  %2986 = add <4 x i32> %2983, %2985
  store <4 x i32> %2986, <4 x i32>* %2984, align 16, !tbaa !11
  %2987 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %160, i64 0, i32 0, i32 0, i32 0, i32 0, i64 36
  %2988 = getelementptr inbounds <4 x i32>, <4 x i32>* %2893, i64 0, i64 36
  %2989 = bitcast i32* %2988 to <4 x i32>*
  %2990 = load <4 x i32>, <4 x i32>* %2989, align 1, !tbaa !11
  %2991 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 83
  %2992 = bitcast i32* %2991 to <4 x i32>*
  %2993 = load <4 x i32>, <4 x i32>* %2992, align 4, !tbaa !11
  %2994 = add <4 x i32> %2993, %2990
  %2995 = bitcast i32* %2987 to <4 x i32>*
  %2996 = load <4 x i32>, <4 x i32>* %2995, align 16, !tbaa !11
  %2997 = add <4 x i32> %2994, %2996
  store <4 x i32> %2997, <4 x i32>* %2995, align 16, !tbaa !11
  %2998 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %160, i64 0, i32 0, i32 0, i32 0, i32 0, i64 40
  %2999 = getelementptr inbounds <4 x i32>, <4 x i32>* %2893, i64 0, i64 40
  %3000 = bitcast i32* %2999 to <4 x i32>*
  %3001 = load <4 x i32>, <4 x i32>* %3000, align 1, !tbaa !11
  %3002 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 87
  %3003 = bitcast i32* %3002 to <4 x i32>*
  %3004 = load <4 x i32>, <4 x i32>* %3003, align 4, !tbaa !11
  %3005 = add <4 x i32> %3004, %3001
  %3006 = bitcast i32* %2998 to <4 x i32>*
  %3007 = load <4 x i32>, <4 x i32>* %3006, align 16, !tbaa !11
  %3008 = add <4 x i32> %3005, %3007
  store <4 x i32> %3008, <4 x i32>* %3006, align 16, !tbaa !11
  %3009 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %160, i64 0, i32 0, i32 0, i32 0, i32 0, i64 44
  %3010 = getelementptr inbounds <4 x i32>, <4 x i32>* %2893, i64 0, i64 44
  %3011 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 91
  %3012 = load i32, i32* %3010, align 4, !tbaa !33
  %3013 = load i32, i32* %3011, align 4, !tbaa !33
  %3014 = add nsw i32 %3013, %3012
  %3015 = load i32, i32* %3009, align 16, !tbaa !33
  %3016 = add nsw i32 %3014, %3015
  store i32 %3016, i32* %3009, align 16, !tbaa !33
  %3017 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %160, i64 0, i32 0, i32 0, i32 0, i32 0, i64 45
  %3018 = getelementptr inbounds <4 x i32>, <4 x i32>* %2893, i64 0, i64 45
  %3019 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 92
  %3020 = load i32, i32* %3018, align 4, !tbaa !33
  %3021 = load i32, i32* %3019, align 4, !tbaa !33
  %3022 = add nsw i32 %3021, %3020
  %3023 = load i32, i32* %3017, align 4, !tbaa !33
  %3024 = add nsw i32 %3022, %3023
  store i32 %3024, i32* %3017, align 4, !tbaa !33
  %3025 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %160, i64 0, i32 0, i32 0, i32 0, i32 0, i64 46
  %3026 = getelementptr inbounds <4 x i32>, <4 x i32>* %2893, i64 0, i64 46
  %3027 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 93
  %3028 = load i32, i32* %3026, align 4, !tbaa !33
  %3029 = load i32, i32* %3027, align 4, !tbaa !33
  %3030 = add nsw i32 %3029, %3028
  %3031 = load i32, i32* %3025, align 8, !tbaa !33
  %3032 = add nsw i32 %3030, %3031
  store i32 %3032, i32* %3025, align 8, !tbaa !33
  call void @llvm.lifetime.end(i64 224, i8* nonnull %2866) #11
  %3033 = bitcast %"class.Eigen::CwiseBinaryOp.200"* %178 to i8*
  call void @llvm.lifetime.start(i64 40, i8* nonnull %3033) #11
  %3034 = load i128, i128* %2122, align 8, !tbaa !11
  %3035 = load i64, i64* %825, align 8, !tbaa !43, !noalias !106
  %3036 = icmp slt i64 %3035, 0
  br i1 %3036, label %3037, label %3038, !prof !50

; <label>:3037:                                   ; preds = %2859
  call void @__assert_rtn(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__._ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEENS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEC2EllRKS3_, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.13, i64 0, i64 0), i32 74, i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.14, i64 0, i64 0)) #13, !noalias !106
  unreachable

; <label>:3038:                                   ; preds = %2859
  %3039 = load i32, i32* %1520, align 8, !tbaa !33
  %3040 = trunc i128 %3034 to i32
  %3041 = lshr i128 %3034, 32
  %3042 = trunc i128 %3041 to i32
  %3043 = lshr i128 %3034, 64
  %3044 = trunc i128 %3043 to i32
  %3045 = lshr i128 %3034, 96
  %3046 = trunc i128 %3045 to i32
  %3047 = load i32, i32* %1523, align 4, !tbaa !33
  %3048 = mul i32 %3042, %3040
  %3049 = mul i32 %3048, %3044
  %3050 = mul i32 %3049, %3046
  %3051 = mul i32 %3050, %3039
  %3052 = mul i32 %3051, %3047
  %3053 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %178, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.123"* %142, %"class.Eigen::Matrix.123"** %3053, align 8
  %3054 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %178, i64 0, i32 0, i32 1
  store %"class.Eigen::Matrix.185"* %167, %"class.Eigen::Matrix.185"** %3054, align 8
  %3055 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %178, i64 0, i32 1, i32 0, i32 0
  store i64 %3035, i64* %3055, align 8, !alias.scope !106
  %3056 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %178, i64 0, i32 1, i32 2, i32 0
  store i32 %3052, i32* %3056, align 4, !tbaa !51, !alias.scope !106
  %3057 = getelementptr inbounds %"struct.Eigen::internal::add_assign_op", %"struct.Eigen::internal::add_assign_op"* %85, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %3057) #11
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEENS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_7ProductINS2_IiLin1ELi6ELi0ELin1ELi6EEENS2_IiLi6ELi1ELi0ELi6ELi1EEELi0EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKS3_EEEENS0_13add_assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.170"* nonnull dereferenceable(16) %168, %"class.Eigen::CwiseBinaryOp.200"* nonnull dereferenceable(40) %178, %"struct.Eigen::internal::add_assign_op"* nonnull dereferenceable(1) %85) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %3057) #11
  call void @llvm.lifetime.end(i64 40, i8* nonnull %3033) #11
  %3058 = getelementptr inbounds %"class.Eigen::Product.277", %"class.Eigen::Product.277"* %179, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start(i64 40, i8* nonnull %3058) #11
  %3059 = ptrtoint %"class.Eigen::Matrix.77"* %124 to i64
  %3060 = ptrtoint %"class.Eigen::Matrix.123"* %142 to i64
  %3061 = getelementptr inbounds %"class.Eigen::Product.277", %"class.Eigen::Product.277"* %179, i64 0, i32 0, i32 1, i32 2, i32 0
  store i32 6, i32* %3061, align 4, !tbaa !51, !alias.scope !109
  %3062 = getelementptr inbounds %"class.Eigen::Product.277", %"class.Eigen::Product.277"* %179, i64 0, i32 0, i32 3
  %3063 = bitcast %"class.Eigen::Matrix.77"** %3062 to i64*
  store i64 %3059, i64* %3063, align 8, !tbaa !11, !alias.scope !109
  %3064 = getelementptr inbounds %"class.Eigen::Product.277", %"class.Eigen::Product.277"* %179, i64 0, i32 1
  %3065 = bitcast %"class.Eigen::Transpose.296"* %3064 to i64*
  store i64 %3060, i64* %3065, align 8, !alias.scope !109
  %3066 = getelementptr inbounds %"struct.Eigen::internal::sub_assign_op", %"struct.Eigen::internal::sub_assign_op"* %84, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %3066) #11
  call void @_ZN5Eigen8internal15call_assignmentINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS2_IiLi47ELi6ELi0ELi47ELi6EEEEESC_EENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS0_13sub_assign_opIiiEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsr25evaluator_assume_aliasingISP_EE5valueEPvE4typeE(%"class.Eigen::Matrix.48"* nonnull dereferenceable(16) %115, %"class.Eigen::Product.277"* nonnull dereferenceable(40) %179, %"struct.Eigen::internal::sub_assign_op"* nonnull dereferenceable(1) %84, i8* null) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %3066) #11
  call void @llvm.lifetime.end(i64 40, i8* nonnull %3058) #11
  %3067 = load i64, i64* %521, align 8, !tbaa !40
  %3068 = load i64, i64* %847, align 8, !tbaa !43
  %3069 = icmp eq i64 %3067, %3068
  br i1 %3069, label %3071, label %3070, !prof !10

; <label>:3070:                                   ; preds = %3038
  call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS1_IdLin1ELi1ELi0ELin1ELi1EEELi0EEC2ERKS2_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 97, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2, i64 0, i64 0)) #13
  unreachable

; <label>:3071:                                   ; preds = %3038
  %3072 = bitcast %"class.Eigen::Matrix.77"* %83 to i8*
  call void @llvm.lifetime.start(i64 1128, i8* nonnull %3072) #11
  call void @_ZN5Eigen8internal20generic_product_implINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS2_IiLin1ELi6ELi0ELin1ELi6EEENS_10DenseShapeES5_Li8EE6evalToINS2_IiLi47ELi6ELi0ELi47ELi6EEEEEvRT_RKS3_RKS4_(%"class.Eigen::Matrix.77"* nonnull dereferenceable(1128) %83, %"class.Eigen::Matrix.48"* nonnull dereferenceable(16) %115, %"class.Eigen::Matrix.123"* nonnull dereferenceable(16) %143) #11
  %3073 = lshr exact i64 %2870, 2
  %3074 = sub nsw i64 0, %3073
  %3075 = and i64 %3074, 3
  %3076 = sub nsw i64 282, %3075
  %3077 = and i64 %3076, 284
  %3078 = or i64 %3077, %3075
  %3079 = icmp eq i64 %3075, 0
  br i1 %3079, label %3082, label %3080

; <label>:3080:                                   ; preds = %3071
  br label %3109

; <label>:3081:                                   ; preds = %8674, %8667, %3109
  br label %3082

; <label>:3082:                                   ; preds = %3081, %3071
  %3083 = phi i64 [ 0, %3071 ], [ %3075, %3081 ]
  %3084 = add nsw i64 %3078, -1
  %3085 = sub nsw i64 %3084, %3083
  %3086 = lshr i64 %3085, 2
  %3087 = add nuw nsw i64 %3086, 1
  %3088 = and i64 %3087, 7
  %3089 = icmp eq i64 %3088, 0
  br i1 %3089, label %3105, label %3090

; <label>:3090:                                   ; preds = %3082
  br label %3091

; <label>:3091:                                   ; preds = %3091, %3090
  %3092 = phi i64 [ %3101, %3091 ], [ %3083, %3090 ]
  %3093 = phi i64 [ %3102, %3091 ], [ %3088, %3090 ]
  %3094 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3092
  %3095 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %83, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3092
  %3096 = bitcast i32* %3095 to <4 x i32>*
  %3097 = load <4 x i32>, <4 x i32>* %3096, align 4, !tbaa !11
  %3098 = bitcast i32* %3094 to <4 x i32>*
  %3099 = load <4 x i32>, <4 x i32>* %3098, align 16, !tbaa !11
  %3100 = sub <4 x i32> %3099, %3097
  store <4 x i32> %3100, <4 x i32>* %3098, align 16, !tbaa !11
  %3101 = add nuw nsw i64 %3092, 4
  %3102 = add i64 %3093, -1
  %3103 = icmp eq i64 %3102, 0
  br i1 %3103, label %3104, label %3091, !llvm.loop !112

; <label>:3104:                                   ; preds = %3091
  br label %3105

; <label>:3105:                                   ; preds = %3082, %3104
  %3106 = phi i64 [ %3083, %3082 ], [ %3101, %3104 ]
  %3107 = icmp ult i64 %3085, 28
  br i1 %3107, label %3117, label %3108

; <label>:3108:                                   ; preds = %3105
  br label %3254

; <label>:3109:                                   ; preds = %3080
  %3110 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %3111 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %83, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %3112 = load i32, i32* %3111, align 4, !tbaa !33
  %3113 = load i32, i32* %3110, align 4, !tbaa !33
  %3114 = sub nsw i32 %3113, %3112
  store i32 %3114, i32* %3110, align 4, !tbaa !33
  %3115 = icmp eq i64 %3075, 1
  br i1 %3115, label %3081, label %8667

; <label>:3116:                                   ; preds = %3254
  br label %3117

; <label>:3117:                                   ; preds = %3105, %3116
  %3118 = icmp ult i64 %3078, 282
  br i1 %3118, label %3119, label %3322

; <label>:3119:                                   ; preds = %3117
  %3120 = sub nsw i64 282, %3078
  %3121 = icmp ult i64 %3120, 32
  br i1 %3121, label %3243, label %3122

; <label>:3122:                                   ; preds = %3119
  %3123 = and i64 %3120, -32
  %3124 = icmp eq i64 %3123, 0
  %3125 = add nsw i64 %3078, %3123
  br i1 %3124, label %3243, label %3126

; <label>:3126:                                   ; preds = %3122
  %3127 = add nsw i64 %3123, -32
  %3128 = lshr exact i64 %3127, 5
  %3129 = and i64 %3128, 1
  %3130 = icmp eq i64 %3129, 0
  br i1 %3130, label %3131, label %3165

; <label>:3131:                                   ; preds = %3126
  br label %3132

; <label>:3132:                                   ; preds = %3131
  %3133 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3078
  %3134 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %83, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3078
  %3135 = bitcast i32* %3134 to <8 x i32>*
  %3136 = load <8 x i32>, <8 x i32>* %3135, align 4, !tbaa !33
  %3137 = getelementptr i32, i32* %3134, i64 8
  %3138 = bitcast i32* %3137 to <8 x i32>*
  %3139 = load <8 x i32>, <8 x i32>* %3138, align 4, !tbaa !33
  %3140 = getelementptr i32, i32* %3134, i64 16
  %3141 = bitcast i32* %3140 to <8 x i32>*
  %3142 = load <8 x i32>, <8 x i32>* %3141, align 4, !tbaa !33
  %3143 = getelementptr i32, i32* %3134, i64 24
  %3144 = bitcast i32* %3143 to <8 x i32>*
  %3145 = load <8 x i32>, <8 x i32>* %3144, align 4, !tbaa !33
  %3146 = bitcast i32* %3133 to <8 x i32>*
  %3147 = load <8 x i32>, <8 x i32>* %3146, align 4, !tbaa !33
  %3148 = getelementptr i32, i32* %3133, i64 8
  %3149 = bitcast i32* %3148 to <8 x i32>*
  %3150 = load <8 x i32>, <8 x i32>* %3149, align 4, !tbaa !33
  %3151 = getelementptr i32, i32* %3133, i64 16
  %3152 = bitcast i32* %3151 to <8 x i32>*
  %3153 = load <8 x i32>, <8 x i32>* %3152, align 4, !tbaa !33
  %3154 = getelementptr i32, i32* %3133, i64 24
  %3155 = bitcast i32* %3154 to <8 x i32>*
  %3156 = load <8 x i32>, <8 x i32>* %3155, align 4, !tbaa !33
  %3157 = sub nsw <8 x i32> %3147, %3136
  %3158 = sub nsw <8 x i32> %3150, %3139
  %3159 = sub nsw <8 x i32> %3153, %3142
  %3160 = sub nsw <8 x i32> %3156, %3145
  %3161 = bitcast i32* %3133 to <8 x i32>*
  store <8 x i32> %3157, <8 x i32>* %3161, align 4, !tbaa !33
  %3162 = bitcast i32* %3148 to <8 x i32>*
  store <8 x i32> %3158, <8 x i32>* %3162, align 4, !tbaa !33
  %3163 = bitcast i32* %3151 to <8 x i32>*
  store <8 x i32> %3159, <8 x i32>* %3163, align 4, !tbaa !33
  %3164 = bitcast i32* %3154 to <8 x i32>*
  store <8 x i32> %3160, <8 x i32>* %3164, align 4, !tbaa !33
  br label %3165

; <label>:3165:                                   ; preds = %3132, %3126
  %3166 = phi i64 [ 0, %3126 ], [ 32, %3132 ]
  %3167 = icmp eq i64 %3128, 0
  br i1 %3167, label %3241, label %3168

; <label>:3168:                                   ; preds = %3165
  br label %3169

; <label>:3169:                                   ; preds = %3169, %3168
  %3170 = phi i64 [ %3166, %3168 ], [ %3238, %3169 ]
  %3171 = add i64 %3078, %3170
  %3172 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3171
  %3173 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %83, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3171
  %3174 = bitcast i32* %3173 to <8 x i32>*
  %3175 = load <8 x i32>, <8 x i32>* %3174, align 4, !tbaa !33
  %3176 = getelementptr i32, i32* %3173, i64 8
  %3177 = bitcast i32* %3176 to <8 x i32>*
  %3178 = load <8 x i32>, <8 x i32>* %3177, align 4, !tbaa !33
  %3179 = getelementptr i32, i32* %3173, i64 16
  %3180 = bitcast i32* %3179 to <8 x i32>*
  %3181 = load <8 x i32>, <8 x i32>* %3180, align 4, !tbaa !33
  %3182 = getelementptr i32, i32* %3173, i64 24
  %3183 = bitcast i32* %3182 to <8 x i32>*
  %3184 = load <8 x i32>, <8 x i32>* %3183, align 4, !tbaa !33
  %3185 = bitcast i32* %3172 to <8 x i32>*
  %3186 = load <8 x i32>, <8 x i32>* %3185, align 4, !tbaa !33
  %3187 = getelementptr i32, i32* %3172, i64 8
  %3188 = bitcast i32* %3187 to <8 x i32>*
  %3189 = load <8 x i32>, <8 x i32>* %3188, align 4, !tbaa !33
  %3190 = getelementptr i32, i32* %3172, i64 16
  %3191 = bitcast i32* %3190 to <8 x i32>*
  %3192 = load <8 x i32>, <8 x i32>* %3191, align 4, !tbaa !33
  %3193 = getelementptr i32, i32* %3172, i64 24
  %3194 = bitcast i32* %3193 to <8 x i32>*
  %3195 = load <8 x i32>, <8 x i32>* %3194, align 4, !tbaa !33
  %3196 = sub nsw <8 x i32> %3186, %3175
  %3197 = sub nsw <8 x i32> %3189, %3178
  %3198 = sub nsw <8 x i32> %3192, %3181
  %3199 = sub nsw <8 x i32> %3195, %3184
  %3200 = bitcast i32* %3172 to <8 x i32>*
  store <8 x i32> %3196, <8 x i32>* %3200, align 4, !tbaa !33
  %3201 = bitcast i32* %3187 to <8 x i32>*
  store <8 x i32> %3197, <8 x i32>* %3201, align 4, !tbaa !33
  %3202 = bitcast i32* %3190 to <8 x i32>*
  store <8 x i32> %3198, <8 x i32>* %3202, align 4, !tbaa !33
  %3203 = bitcast i32* %3193 to <8 x i32>*
  store <8 x i32> %3199, <8 x i32>* %3203, align 4, !tbaa !33
  %3204 = add i64 %3170, 32
  %3205 = add i64 %3078, %3204
  %3206 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3205
  %3207 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %83, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3205
  %3208 = bitcast i32* %3207 to <8 x i32>*
  %3209 = load <8 x i32>, <8 x i32>* %3208, align 4, !tbaa !33
  %3210 = getelementptr i32, i32* %3207, i64 8
  %3211 = bitcast i32* %3210 to <8 x i32>*
  %3212 = load <8 x i32>, <8 x i32>* %3211, align 4, !tbaa !33
  %3213 = getelementptr i32, i32* %3207, i64 16
  %3214 = bitcast i32* %3213 to <8 x i32>*
  %3215 = load <8 x i32>, <8 x i32>* %3214, align 4, !tbaa !33
  %3216 = getelementptr i32, i32* %3207, i64 24
  %3217 = bitcast i32* %3216 to <8 x i32>*
  %3218 = load <8 x i32>, <8 x i32>* %3217, align 4, !tbaa !33
  %3219 = bitcast i32* %3206 to <8 x i32>*
  %3220 = load <8 x i32>, <8 x i32>* %3219, align 4, !tbaa !33
  %3221 = getelementptr i32, i32* %3206, i64 8
  %3222 = bitcast i32* %3221 to <8 x i32>*
  %3223 = load <8 x i32>, <8 x i32>* %3222, align 4, !tbaa !33
  %3224 = getelementptr i32, i32* %3206, i64 16
  %3225 = bitcast i32* %3224 to <8 x i32>*
  %3226 = load <8 x i32>, <8 x i32>* %3225, align 4, !tbaa !33
  %3227 = getelementptr i32, i32* %3206, i64 24
  %3228 = bitcast i32* %3227 to <8 x i32>*
  %3229 = load <8 x i32>, <8 x i32>* %3228, align 4, !tbaa !33
  %3230 = sub nsw <8 x i32> %3220, %3209
  %3231 = sub nsw <8 x i32> %3223, %3212
  %3232 = sub nsw <8 x i32> %3226, %3215
  %3233 = sub nsw <8 x i32> %3229, %3218
  %3234 = bitcast i32* %3206 to <8 x i32>*
  store <8 x i32> %3230, <8 x i32>* %3234, align 4, !tbaa !33
  %3235 = bitcast i32* %3221 to <8 x i32>*
  store <8 x i32> %3231, <8 x i32>* %3235, align 4, !tbaa !33
  %3236 = bitcast i32* %3224 to <8 x i32>*
  store <8 x i32> %3232, <8 x i32>* %3236, align 4, !tbaa !33
  %3237 = bitcast i32* %3227 to <8 x i32>*
  store <8 x i32> %3233, <8 x i32>* %3237, align 4, !tbaa !33
  %3238 = add i64 %3170, 64
  %3239 = icmp eq i64 %3238, %3123
  br i1 %3239, label %3240, label %3169, !llvm.loop !113

; <label>:3240:                                   ; preds = %3169
  br label %3241

; <label>:3241:                                   ; preds = %3165, %3240
  %3242 = icmp eq i64 %3120, %3123
  br i1 %3242, label %3322, label %3243

; <label>:3243:                                   ; preds = %3241, %3122, %3119
  %3244 = phi i64 [ %3078, %3122 ], [ %3078, %3119 ], [ %3125, %3241 ]
  br label %3245

; <label>:3245:                                   ; preds = %3243, %3245
  %3246 = phi i64 [ %3252, %3245 ], [ %3244, %3243 ]
  %3247 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3246
  %3248 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %83, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3246
  %3249 = load i32, i32* %3248, align 4, !tbaa !33
  %3250 = load i32, i32* %3247, align 4, !tbaa !33
  %3251 = sub nsw i32 %3250, %3249
  store i32 %3251, i32* %3247, align 4, !tbaa !33
  %3252 = add nsw i64 %3246, 1
  %3253 = icmp eq i64 %3252, 282
  br i1 %3253, label %3321, label %3245, !llvm.loop !114

; <label>:3254:                                   ; preds = %3254, %3108
  %3255 = phi i64 [ %3106, %3108 ], [ %3319, %3254 ]
  %3256 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3255
  %3257 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %83, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3255
  %3258 = bitcast i32* %3257 to <4 x i32>*
  %3259 = load <4 x i32>, <4 x i32>* %3258, align 4, !tbaa !11
  %3260 = bitcast i32* %3256 to <4 x i32>*
  %3261 = load <4 x i32>, <4 x i32>* %3260, align 16, !tbaa !11
  %3262 = sub <4 x i32> %3261, %3259
  store <4 x i32> %3262, <4 x i32>* %3260, align 16, !tbaa !11
  %3263 = add nuw nsw i64 %3255, 4
  %3264 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3263
  %3265 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %83, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3263
  %3266 = bitcast i32* %3265 to <4 x i32>*
  %3267 = load <4 x i32>, <4 x i32>* %3266, align 4, !tbaa !11
  %3268 = bitcast i32* %3264 to <4 x i32>*
  %3269 = load <4 x i32>, <4 x i32>* %3268, align 16, !tbaa !11
  %3270 = sub <4 x i32> %3269, %3267
  store <4 x i32> %3270, <4 x i32>* %3268, align 16, !tbaa !11
  %3271 = add nsw i64 %3255, 8
  %3272 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3271
  %3273 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %83, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3271
  %3274 = bitcast i32* %3273 to <4 x i32>*
  %3275 = load <4 x i32>, <4 x i32>* %3274, align 4, !tbaa !11
  %3276 = bitcast i32* %3272 to <4 x i32>*
  %3277 = load <4 x i32>, <4 x i32>* %3276, align 16, !tbaa !11
  %3278 = sub <4 x i32> %3277, %3275
  store <4 x i32> %3278, <4 x i32>* %3276, align 16, !tbaa !11
  %3279 = add nsw i64 %3255, 12
  %3280 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3279
  %3281 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %83, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3279
  %3282 = bitcast i32* %3281 to <4 x i32>*
  %3283 = load <4 x i32>, <4 x i32>* %3282, align 4, !tbaa !11
  %3284 = bitcast i32* %3280 to <4 x i32>*
  %3285 = load <4 x i32>, <4 x i32>* %3284, align 16, !tbaa !11
  %3286 = sub <4 x i32> %3285, %3283
  store <4 x i32> %3286, <4 x i32>* %3284, align 16, !tbaa !11
  %3287 = add nsw i64 %3255, 16
  %3288 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3287
  %3289 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %83, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3287
  %3290 = bitcast i32* %3289 to <4 x i32>*
  %3291 = load <4 x i32>, <4 x i32>* %3290, align 4, !tbaa !11
  %3292 = bitcast i32* %3288 to <4 x i32>*
  %3293 = load <4 x i32>, <4 x i32>* %3292, align 16, !tbaa !11
  %3294 = sub <4 x i32> %3293, %3291
  store <4 x i32> %3294, <4 x i32>* %3292, align 16, !tbaa !11
  %3295 = add nsw i64 %3255, 20
  %3296 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3295
  %3297 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %83, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3295
  %3298 = bitcast i32* %3297 to <4 x i32>*
  %3299 = load <4 x i32>, <4 x i32>* %3298, align 4, !tbaa !11
  %3300 = bitcast i32* %3296 to <4 x i32>*
  %3301 = load <4 x i32>, <4 x i32>* %3300, align 16, !tbaa !11
  %3302 = sub <4 x i32> %3301, %3299
  store <4 x i32> %3302, <4 x i32>* %3300, align 16, !tbaa !11
  %3303 = add nsw i64 %3255, 24
  %3304 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3303
  %3305 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %83, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3303
  %3306 = bitcast i32* %3305 to <4 x i32>*
  %3307 = load <4 x i32>, <4 x i32>* %3306, align 4, !tbaa !11
  %3308 = bitcast i32* %3304 to <4 x i32>*
  %3309 = load <4 x i32>, <4 x i32>* %3308, align 16, !tbaa !11
  %3310 = sub <4 x i32> %3309, %3307
  store <4 x i32> %3310, <4 x i32>* %3308, align 16, !tbaa !11
  %3311 = add nsw i64 %3255, 28
  %3312 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3311
  %3313 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %83, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3311
  %3314 = bitcast i32* %3313 to <4 x i32>*
  %3315 = load <4 x i32>, <4 x i32>* %3314, align 4, !tbaa !11
  %3316 = bitcast i32* %3312 to <4 x i32>*
  %3317 = load <4 x i32>, <4 x i32>* %3316, align 16, !tbaa !11
  %3318 = sub <4 x i32> %3317, %3315
  store <4 x i32> %3318, <4 x i32>* %3316, align 16, !tbaa !11
  %3319 = add nsw i64 %3255, 32
  %3320 = icmp slt i64 %3319, %3078
  br i1 %3320, label %3254, label %3116

; <label>:3321:                                   ; preds = %3245
  br label %3322

; <label>:3322:                                   ; preds = %3321, %3241, %3117
  call void @llvm.lifetime.end(i64 1128, i8* nonnull %3072) #11
  %3323 = bitcast %"class.Eigen::Product.310"* %180 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %3323) #11
  %3324 = ptrtoint %"class.Eigen::Matrix.123"* %144 to i64
  %3325 = getelementptr inbounds %"class.Eigen::Product.310", %"class.Eigen::Product.310"* %180, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.32"* %107, %"class.Eigen::Matrix.32"** %3325, align 8
  %3326 = getelementptr inbounds %"class.Eigen::Product.310", %"class.Eigen::Product.310"* %180, i64 0, i32 0, i32 1
  store %"class.Eigen::Matrix.77"* %125, %"class.Eigen::Matrix.77"** %3326, align 8
  %3327 = getelementptr inbounds %"class.Eigen::Product.310", %"class.Eigen::Product.310"* %180, i64 0, i32 1
  %3328 = bitcast %"class.Eigen::Transpose.296"* %3327 to i64*
  store i64 %3324, i64* %3328, align 8, !alias.scope !116
  %3329 = getelementptr inbounds %"struct.Eigen::internal::sub_assign_op", %"struct.Eigen::internal::sub_assign_op"* %82, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %3329) #11
  call void @_ZN5Eigen8internal15call_assignmentINS_6MatrixIiLin1ELin1ELi0ELin1ELin1EEENS_7ProductINS4_INS2_IiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS0_13sub_assign_opIiiEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsr25evaluator_assume_aliasingISH_EE5valueEPvE4typeE(%"class.Eigen::Matrix.19"* nonnull dereferenceable(24) %104, %"class.Eigen::Product.310"* nonnull dereferenceable(24) %180, %"struct.Eigen::internal::sub_assign_op"* nonnull dereferenceable(1) %82, i8* null) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %3329) #11
  call void @llvm.lifetime.end(i64 24, i8* nonnull %3323) #11
  %3330 = bitcast %"class.Eigen::Product.234"* %181 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %3330) #11
  %3331 = getelementptr inbounds %"class.Eigen::Product.234", %"class.Eigen::Product.234"* %181, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.153"* %147, %"class.Eigen::Matrix.153"** %3331, align 8
  %3332 = getelementptr inbounds %"class.Eigen::Product.234", %"class.Eigen::Product.234"* %181, i64 0, i32 1, i32 0
  store %"class.Eigen::Matrix.32"* %112, %"class.Eigen::Matrix.32"** %3332, align 8
  %3333 = getelementptr inbounds %"struct.Eigen::internal::add_assign_op", %"struct.Eigen::internal::add_assign_op"* %81, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %3333) #11
  call void @_ZN5Eigen8internal15call_assignmentINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEENS_7ProductINS_9TransposeINS2_IiLi47ELi1ELi0ELi47ELi1EEEEENS5_INS2_IiLin1ELi47ELi0ELin1ELi47EEEEELi0EEENS0_13add_assign_opIiiEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsr25evaluator_assume_aliasingISF_EE5valueEPvE4typeE(%"class.Eigen::Matrix.170"* nonnull dereferenceable(16) %154, %"class.Eigen::Product.234"* nonnull dereferenceable(16) %181, %"struct.Eigen::internal::add_assign_op"* nonnull dereferenceable(1) %81, i8* null) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %3333) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %3330) #11
  %3334 = load i64, i64* %543, align 8, !tbaa !40
  %3335 = load i64, i64* %803, align 8, !tbaa !43
  %3336 = icmp eq i64 %3334, %3335
  br i1 %3336, label %3338, label %3337, !prof !10

; <label>:3337:                                   ; preds = %3322
  call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS1_IdLin1ELi1ELi0ELin1ELi1EEELi0EEC2ERKS2_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 97, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2, i64 0, i64 0)) #13
  unreachable

; <label>:3338:                                   ; preds = %3322
  %3339 = bitcast %"class.Eigen::Matrix.77"* %80 to i8*
  call void @llvm.lifetime.start(i64 1128, i8* nonnull %3339) #11
  call void @_ZN5Eigen8internal20generic_product_implINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS2_IiLin1ELi6ELi0ELin1ELi6EEENS_10DenseShapeES5_Li8EE6evalToINS2_IiLi47ELi6ELi0ELi47ELi6EEEEEvRT_RKS3_RKS4_(%"class.Eigen::Matrix.77"* nonnull dereferenceable(1128) %80, %"class.Eigen::Matrix.48"* nonnull dereferenceable(16) %116, %"class.Eigen::Matrix.123"* nonnull dereferenceable(16) %141) #11
  %3340 = ptrtoint %"class.Eigen::Matrix.77"* %126 to i64
  %3341 = lshr exact i64 %3340, 2
  %3342 = sub nsw i64 0, %3341
  %3343 = and i64 %3342, 3
  %3344 = sub nsw i64 282, %3343
  %3345 = and i64 %3344, 284
  %3346 = or i64 %3345, %3343
  %3347 = icmp eq i64 %3343, 0
  br i1 %3347, label %3350, label %3348

; <label>:3348:                                   ; preds = %3338
  br label %3377

; <label>:3349:                                   ; preds = %8661, %8654, %3377
  br label %3350

; <label>:3350:                                   ; preds = %3349, %3338
  %3351 = phi i64 [ 0, %3338 ], [ %3343, %3349 ]
  %3352 = add nsw i64 %3346, -1
  %3353 = sub nsw i64 %3352, %3351
  %3354 = lshr i64 %3353, 2
  %3355 = add nuw nsw i64 %3354, 1
  %3356 = and i64 %3355, 7
  %3357 = icmp eq i64 %3356, 0
  br i1 %3357, label %3373, label %3358

; <label>:3358:                                   ; preds = %3350
  br label %3359

; <label>:3359:                                   ; preds = %3359, %3358
  %3360 = phi i64 [ %3369, %3359 ], [ %3351, %3358 ]
  %3361 = phi i64 [ %3370, %3359 ], [ %3356, %3358 ]
  %3362 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3360
  %3363 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %80, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3360
  %3364 = bitcast i32* %3363 to <4 x i32>*
  %3365 = load <4 x i32>, <4 x i32>* %3364, align 4, !tbaa !11
  %3366 = bitcast i32* %3362 to <4 x i32>*
  %3367 = load <4 x i32>, <4 x i32>* %3366, align 16, !tbaa !11
  %3368 = add <4 x i32> %3367, %3365
  store <4 x i32> %3368, <4 x i32>* %3366, align 16, !tbaa !11
  %3369 = add nuw nsw i64 %3360, 4
  %3370 = add i64 %3361, -1
  %3371 = icmp eq i64 %3370, 0
  br i1 %3371, label %3372, label %3359, !llvm.loop !119

; <label>:3372:                                   ; preds = %3359
  br label %3373

; <label>:3373:                                   ; preds = %3350, %3372
  %3374 = phi i64 [ %3351, %3350 ], [ %3369, %3372 ]
  %3375 = icmp ult i64 %3353, 28
  br i1 %3375, label %3385, label %3376

; <label>:3376:                                   ; preds = %3373
  br label %3522

; <label>:3377:                                   ; preds = %3348
  %3378 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %3379 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %80, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %3380 = load i32, i32* %3379, align 4, !tbaa !33
  %3381 = load i32, i32* %3378, align 4, !tbaa !33
  %3382 = add nsw i32 %3381, %3380
  store i32 %3382, i32* %3378, align 4, !tbaa !33
  %3383 = icmp eq i64 %3343, 1
  br i1 %3383, label %3349, label %8654

; <label>:3384:                                   ; preds = %3522
  br label %3385

; <label>:3385:                                   ; preds = %3373, %3384
  %3386 = icmp ult i64 %3346, 282
  br i1 %3386, label %3387, label %3590

; <label>:3387:                                   ; preds = %3385
  %3388 = sub nsw i64 282, %3346
  %3389 = icmp ult i64 %3388, 32
  br i1 %3389, label %3511, label %3390

; <label>:3390:                                   ; preds = %3387
  %3391 = and i64 %3388, -32
  %3392 = icmp eq i64 %3391, 0
  %3393 = add nsw i64 %3346, %3391
  br i1 %3392, label %3511, label %3394

; <label>:3394:                                   ; preds = %3390
  %3395 = add nsw i64 %3391, -32
  %3396 = lshr exact i64 %3395, 5
  %3397 = and i64 %3396, 1
  %3398 = icmp eq i64 %3397, 0
  br i1 %3398, label %3399, label %3433

; <label>:3399:                                   ; preds = %3394
  br label %3400

; <label>:3400:                                   ; preds = %3399
  %3401 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3346
  %3402 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %80, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3346
  %3403 = bitcast i32* %3402 to <8 x i32>*
  %3404 = load <8 x i32>, <8 x i32>* %3403, align 4, !tbaa !33
  %3405 = getelementptr i32, i32* %3402, i64 8
  %3406 = bitcast i32* %3405 to <8 x i32>*
  %3407 = load <8 x i32>, <8 x i32>* %3406, align 4, !tbaa !33
  %3408 = getelementptr i32, i32* %3402, i64 16
  %3409 = bitcast i32* %3408 to <8 x i32>*
  %3410 = load <8 x i32>, <8 x i32>* %3409, align 4, !tbaa !33
  %3411 = getelementptr i32, i32* %3402, i64 24
  %3412 = bitcast i32* %3411 to <8 x i32>*
  %3413 = load <8 x i32>, <8 x i32>* %3412, align 4, !tbaa !33
  %3414 = bitcast i32* %3401 to <8 x i32>*
  %3415 = load <8 x i32>, <8 x i32>* %3414, align 4, !tbaa !33
  %3416 = getelementptr i32, i32* %3401, i64 8
  %3417 = bitcast i32* %3416 to <8 x i32>*
  %3418 = load <8 x i32>, <8 x i32>* %3417, align 4, !tbaa !33
  %3419 = getelementptr i32, i32* %3401, i64 16
  %3420 = bitcast i32* %3419 to <8 x i32>*
  %3421 = load <8 x i32>, <8 x i32>* %3420, align 4, !tbaa !33
  %3422 = getelementptr i32, i32* %3401, i64 24
  %3423 = bitcast i32* %3422 to <8 x i32>*
  %3424 = load <8 x i32>, <8 x i32>* %3423, align 4, !tbaa !33
  %3425 = add nsw <8 x i32> %3415, %3404
  %3426 = add nsw <8 x i32> %3418, %3407
  %3427 = add nsw <8 x i32> %3421, %3410
  %3428 = add nsw <8 x i32> %3424, %3413
  %3429 = bitcast i32* %3401 to <8 x i32>*
  store <8 x i32> %3425, <8 x i32>* %3429, align 4, !tbaa !33
  %3430 = bitcast i32* %3416 to <8 x i32>*
  store <8 x i32> %3426, <8 x i32>* %3430, align 4, !tbaa !33
  %3431 = bitcast i32* %3419 to <8 x i32>*
  store <8 x i32> %3427, <8 x i32>* %3431, align 4, !tbaa !33
  %3432 = bitcast i32* %3422 to <8 x i32>*
  store <8 x i32> %3428, <8 x i32>* %3432, align 4, !tbaa !33
  br label %3433

; <label>:3433:                                   ; preds = %3400, %3394
  %3434 = phi i64 [ 0, %3394 ], [ 32, %3400 ]
  %3435 = icmp eq i64 %3396, 0
  br i1 %3435, label %3509, label %3436

; <label>:3436:                                   ; preds = %3433
  br label %3437

; <label>:3437:                                   ; preds = %3437, %3436
  %3438 = phi i64 [ %3434, %3436 ], [ %3506, %3437 ]
  %3439 = add i64 %3346, %3438
  %3440 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3439
  %3441 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %80, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3439
  %3442 = bitcast i32* %3441 to <8 x i32>*
  %3443 = load <8 x i32>, <8 x i32>* %3442, align 4, !tbaa !33
  %3444 = getelementptr i32, i32* %3441, i64 8
  %3445 = bitcast i32* %3444 to <8 x i32>*
  %3446 = load <8 x i32>, <8 x i32>* %3445, align 4, !tbaa !33
  %3447 = getelementptr i32, i32* %3441, i64 16
  %3448 = bitcast i32* %3447 to <8 x i32>*
  %3449 = load <8 x i32>, <8 x i32>* %3448, align 4, !tbaa !33
  %3450 = getelementptr i32, i32* %3441, i64 24
  %3451 = bitcast i32* %3450 to <8 x i32>*
  %3452 = load <8 x i32>, <8 x i32>* %3451, align 4, !tbaa !33
  %3453 = bitcast i32* %3440 to <8 x i32>*
  %3454 = load <8 x i32>, <8 x i32>* %3453, align 4, !tbaa !33
  %3455 = getelementptr i32, i32* %3440, i64 8
  %3456 = bitcast i32* %3455 to <8 x i32>*
  %3457 = load <8 x i32>, <8 x i32>* %3456, align 4, !tbaa !33
  %3458 = getelementptr i32, i32* %3440, i64 16
  %3459 = bitcast i32* %3458 to <8 x i32>*
  %3460 = load <8 x i32>, <8 x i32>* %3459, align 4, !tbaa !33
  %3461 = getelementptr i32, i32* %3440, i64 24
  %3462 = bitcast i32* %3461 to <8 x i32>*
  %3463 = load <8 x i32>, <8 x i32>* %3462, align 4, !tbaa !33
  %3464 = add nsw <8 x i32> %3454, %3443
  %3465 = add nsw <8 x i32> %3457, %3446
  %3466 = add nsw <8 x i32> %3460, %3449
  %3467 = add nsw <8 x i32> %3463, %3452
  %3468 = bitcast i32* %3440 to <8 x i32>*
  store <8 x i32> %3464, <8 x i32>* %3468, align 4, !tbaa !33
  %3469 = bitcast i32* %3455 to <8 x i32>*
  store <8 x i32> %3465, <8 x i32>* %3469, align 4, !tbaa !33
  %3470 = bitcast i32* %3458 to <8 x i32>*
  store <8 x i32> %3466, <8 x i32>* %3470, align 4, !tbaa !33
  %3471 = bitcast i32* %3461 to <8 x i32>*
  store <8 x i32> %3467, <8 x i32>* %3471, align 4, !tbaa !33
  %3472 = add i64 %3438, 32
  %3473 = add i64 %3346, %3472
  %3474 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3473
  %3475 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %80, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3473
  %3476 = bitcast i32* %3475 to <8 x i32>*
  %3477 = load <8 x i32>, <8 x i32>* %3476, align 4, !tbaa !33
  %3478 = getelementptr i32, i32* %3475, i64 8
  %3479 = bitcast i32* %3478 to <8 x i32>*
  %3480 = load <8 x i32>, <8 x i32>* %3479, align 4, !tbaa !33
  %3481 = getelementptr i32, i32* %3475, i64 16
  %3482 = bitcast i32* %3481 to <8 x i32>*
  %3483 = load <8 x i32>, <8 x i32>* %3482, align 4, !tbaa !33
  %3484 = getelementptr i32, i32* %3475, i64 24
  %3485 = bitcast i32* %3484 to <8 x i32>*
  %3486 = load <8 x i32>, <8 x i32>* %3485, align 4, !tbaa !33
  %3487 = bitcast i32* %3474 to <8 x i32>*
  %3488 = load <8 x i32>, <8 x i32>* %3487, align 4, !tbaa !33
  %3489 = getelementptr i32, i32* %3474, i64 8
  %3490 = bitcast i32* %3489 to <8 x i32>*
  %3491 = load <8 x i32>, <8 x i32>* %3490, align 4, !tbaa !33
  %3492 = getelementptr i32, i32* %3474, i64 16
  %3493 = bitcast i32* %3492 to <8 x i32>*
  %3494 = load <8 x i32>, <8 x i32>* %3493, align 4, !tbaa !33
  %3495 = getelementptr i32, i32* %3474, i64 24
  %3496 = bitcast i32* %3495 to <8 x i32>*
  %3497 = load <8 x i32>, <8 x i32>* %3496, align 4, !tbaa !33
  %3498 = add nsw <8 x i32> %3488, %3477
  %3499 = add nsw <8 x i32> %3491, %3480
  %3500 = add nsw <8 x i32> %3494, %3483
  %3501 = add nsw <8 x i32> %3497, %3486
  %3502 = bitcast i32* %3474 to <8 x i32>*
  store <8 x i32> %3498, <8 x i32>* %3502, align 4, !tbaa !33
  %3503 = bitcast i32* %3489 to <8 x i32>*
  store <8 x i32> %3499, <8 x i32>* %3503, align 4, !tbaa !33
  %3504 = bitcast i32* %3492 to <8 x i32>*
  store <8 x i32> %3500, <8 x i32>* %3504, align 4, !tbaa !33
  %3505 = bitcast i32* %3495 to <8 x i32>*
  store <8 x i32> %3501, <8 x i32>* %3505, align 4, !tbaa !33
  %3506 = add i64 %3438, 64
  %3507 = icmp eq i64 %3506, %3391
  br i1 %3507, label %3508, label %3437, !llvm.loop !120

; <label>:3508:                                   ; preds = %3437
  br label %3509

; <label>:3509:                                   ; preds = %3433, %3508
  %3510 = icmp eq i64 %3388, %3391
  br i1 %3510, label %3590, label %3511

; <label>:3511:                                   ; preds = %3509, %3390, %3387
  %3512 = phi i64 [ %3346, %3390 ], [ %3346, %3387 ], [ %3393, %3509 ]
  br label %3513

; <label>:3513:                                   ; preds = %3511, %3513
  %3514 = phi i64 [ %3520, %3513 ], [ %3512, %3511 ]
  %3515 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3514
  %3516 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %80, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3514
  %3517 = load i32, i32* %3516, align 4, !tbaa !33
  %3518 = load i32, i32* %3515, align 4, !tbaa !33
  %3519 = add nsw i32 %3518, %3517
  store i32 %3519, i32* %3515, align 4, !tbaa !33
  %3520 = add nsw i64 %3514, 1
  %3521 = icmp eq i64 %3520, 282
  br i1 %3521, label %3589, label %3513, !llvm.loop !121

; <label>:3522:                                   ; preds = %3522, %3376
  %3523 = phi i64 [ %3374, %3376 ], [ %3587, %3522 ]
  %3524 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3523
  %3525 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %80, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3523
  %3526 = bitcast i32* %3525 to <4 x i32>*
  %3527 = load <4 x i32>, <4 x i32>* %3526, align 4, !tbaa !11
  %3528 = bitcast i32* %3524 to <4 x i32>*
  %3529 = load <4 x i32>, <4 x i32>* %3528, align 16, !tbaa !11
  %3530 = add <4 x i32> %3529, %3527
  store <4 x i32> %3530, <4 x i32>* %3528, align 16, !tbaa !11
  %3531 = add nuw nsw i64 %3523, 4
  %3532 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3531
  %3533 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %80, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3531
  %3534 = bitcast i32* %3533 to <4 x i32>*
  %3535 = load <4 x i32>, <4 x i32>* %3534, align 4, !tbaa !11
  %3536 = bitcast i32* %3532 to <4 x i32>*
  %3537 = load <4 x i32>, <4 x i32>* %3536, align 16, !tbaa !11
  %3538 = add <4 x i32> %3537, %3535
  store <4 x i32> %3538, <4 x i32>* %3536, align 16, !tbaa !11
  %3539 = add nsw i64 %3523, 8
  %3540 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3539
  %3541 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %80, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3539
  %3542 = bitcast i32* %3541 to <4 x i32>*
  %3543 = load <4 x i32>, <4 x i32>* %3542, align 4, !tbaa !11
  %3544 = bitcast i32* %3540 to <4 x i32>*
  %3545 = load <4 x i32>, <4 x i32>* %3544, align 16, !tbaa !11
  %3546 = add <4 x i32> %3545, %3543
  store <4 x i32> %3546, <4 x i32>* %3544, align 16, !tbaa !11
  %3547 = add nsw i64 %3523, 12
  %3548 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3547
  %3549 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %80, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3547
  %3550 = bitcast i32* %3549 to <4 x i32>*
  %3551 = load <4 x i32>, <4 x i32>* %3550, align 4, !tbaa !11
  %3552 = bitcast i32* %3548 to <4 x i32>*
  %3553 = load <4 x i32>, <4 x i32>* %3552, align 16, !tbaa !11
  %3554 = add <4 x i32> %3553, %3551
  store <4 x i32> %3554, <4 x i32>* %3552, align 16, !tbaa !11
  %3555 = add nsw i64 %3523, 16
  %3556 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3555
  %3557 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %80, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3555
  %3558 = bitcast i32* %3557 to <4 x i32>*
  %3559 = load <4 x i32>, <4 x i32>* %3558, align 4, !tbaa !11
  %3560 = bitcast i32* %3556 to <4 x i32>*
  %3561 = load <4 x i32>, <4 x i32>* %3560, align 16, !tbaa !11
  %3562 = add <4 x i32> %3561, %3559
  store <4 x i32> %3562, <4 x i32>* %3560, align 16, !tbaa !11
  %3563 = add nsw i64 %3523, 20
  %3564 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3563
  %3565 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %80, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3563
  %3566 = bitcast i32* %3565 to <4 x i32>*
  %3567 = load <4 x i32>, <4 x i32>* %3566, align 4, !tbaa !11
  %3568 = bitcast i32* %3564 to <4 x i32>*
  %3569 = load <4 x i32>, <4 x i32>* %3568, align 16, !tbaa !11
  %3570 = add <4 x i32> %3569, %3567
  store <4 x i32> %3570, <4 x i32>* %3568, align 16, !tbaa !11
  %3571 = add nsw i64 %3523, 24
  %3572 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3571
  %3573 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %80, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3571
  %3574 = bitcast i32* %3573 to <4 x i32>*
  %3575 = load <4 x i32>, <4 x i32>* %3574, align 4, !tbaa !11
  %3576 = bitcast i32* %3572 to <4 x i32>*
  %3577 = load <4 x i32>, <4 x i32>* %3576, align 16, !tbaa !11
  %3578 = add <4 x i32> %3577, %3575
  store <4 x i32> %3578, <4 x i32>* %3576, align 16, !tbaa !11
  %3579 = add nsw i64 %3523, 28
  %3580 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3579
  %3581 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %80, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3579
  %3582 = bitcast i32* %3581 to <4 x i32>*
  %3583 = load <4 x i32>, <4 x i32>* %3582, align 4, !tbaa !11
  %3584 = bitcast i32* %3580 to <4 x i32>*
  %3585 = load <4 x i32>, <4 x i32>* %3584, align 16, !tbaa !11
  %3586 = add <4 x i32> %3585, %3583
  store <4 x i32> %3586, <4 x i32>* %3584, align 16, !tbaa !11
  %3587 = add nsw i64 %3523, 32
  %3588 = icmp slt i64 %3587, %3346
  br i1 %3588, label %3522, label %3384

; <label>:3589:                                   ; preds = %3513
  br label %3590

; <label>:3590:                                   ; preds = %3589, %3509, %3385
  call void @llvm.lifetime.end(i64 1128, i8* nonnull %3339) #11
  %3591 = bitcast %"class.Eigen::Product.324"* %182 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %3591) #11
  %3592 = ptrtoint %"class.Eigen::Matrix.123"* %139 to i64
  %3593 = getelementptr inbounds %"class.Eigen::Product.324", %"class.Eigen::Product.324"* %182, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.32"* %110, %"class.Eigen::Matrix.32"** %3593, align 8
  %3594 = getelementptr inbounds %"class.Eigen::Product.324", %"class.Eigen::Product.324"* %182, i64 0, i32 0, i32 1
  store %"class.Eigen::Matrix.77"* %126, %"class.Eigen::Matrix.77"** %3594, align 8
  %3595 = getelementptr inbounds %"class.Eigen::Product.324", %"class.Eigen::Product.324"* %182, i64 0, i32 1
  %3596 = bitcast %"class.Eigen::Transpose.331"* %3595 to i64*
  store i64 %3592, i64* %3596, align 8, !alias.scope !122
  %3597 = getelementptr inbounds %"struct.Eigen::internal::add_assign_op", %"struct.Eigen::internal::add_assign_op"* %79, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %3597) #11
  call void @_ZN5Eigen8internal15call_assignmentINS_6MatrixIiLin1ELin1ELi0ELin1ELin1EEENS_7ProductINS4_INS2_IiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS0_13add_assign_opIiiEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsr25evaluator_assume_aliasingISG_EE5valueEPvE4typeE(%"class.Eigen::Matrix.19"* nonnull dereferenceable(24) %106, %"class.Eigen::Product.324"* nonnull dereferenceable(24) %182, %"struct.Eigen::internal::add_assign_op"* nonnull dereferenceable(1) %79, i8* null) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %3597) #11
  call void @llvm.lifetime.end(i64 24, i8* nonnull %3591) #11
  %3598 = bitcast %"class.Eigen::Matrix.153"* %78 to i8*
  call void @llvm.lifetime.start(i64 188, i8* nonnull %3598) #11
  %3599 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %78, i64 0, i32 0
  %3600 = ptrtoint %"class.Eigen::Matrix.77"* %122 to i64
  %3601 = ptrtoint %"class.Eigen::Matrix.185"* %159 to i64
  %3602 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %77, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %3602) #11
  %3603 = bitcast %"struct.Eigen::internal::evaluator.840"* %74 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %3603) #11
  %3604 = bitcast %"struct.Eigen::internal::evaluator.840"* %74 to i64*
  store i64 %3600, i64* %3604, align 8, !tbaa !11
  %3605 = getelementptr inbounds %"struct.Eigen::internal::evaluator.840", %"struct.Eigen::internal::evaluator.840"* %74, i64 0, i32 0, i32 1
  %3606 = bitcast %"class.Eigen::Matrix.185"** %3605 to i64*
  store i64 %3601, i64* %3606, align 8, !tbaa !11
  %3607 = getelementptr inbounds %"struct.Eigen::internal::evaluator.840", %"struct.Eigen::internal::evaluator.840"* %74, i64 0, i32 0, i32 2, i32 0, i32 0
  %3608 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %122, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  store i32* %3608, i32** %3607, align 8, !tbaa !94
  %3609 = getelementptr inbounds %"struct.Eigen::internal::evaluator.840", %"struct.Eigen::internal::evaluator.840"* %74, i64 0, i32 0, i32 3, i32 0, i32 0
  store i32* %1527, i32** %3609, align 8, !tbaa !97
  %3610 = getelementptr inbounds %"struct.Eigen::internal::evaluator.840", %"struct.Eigen::internal::evaluator.840"* %74, i64 0, i32 0, i32 4
  store i64 6, i64* %3610, align 8, !tbaa !99
  %3611 = bitcast %"struct.Eigen::internal::evaluator.583"* %75 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %3611) #11
  %3612 = getelementptr inbounds %"struct.Eigen::internal::evaluator.583", %"struct.Eigen::internal::evaluator.583"* %75, i64 0, i32 0, i32 0
  %3613 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %78, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  store i32* %3613, i32** %3612, align 8, !tbaa !92
  %3614 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %76 to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %3614) #11
  %3615 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %76, i64 0, i32 0
  store %"struct.Eigen::internal::evaluator.583"* %75, %"struct.Eigen::internal::evaluator.583"** %3615, align 8, !tbaa !11
  %3616 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %76, i64 0, i32 1
  store %"struct.Eigen::internal::evaluator.840"* %74, %"struct.Eigen::internal::evaluator.840"** %3616, align 8, !tbaa !11
  %3617 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %76, i64 0, i32 2
  store %"struct.Eigen::internal::assign_op.512"* %77, %"struct.Eigen::internal::assign_op.512"** %3617, align 8, !tbaa !11
  %3618 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %76, i64 0, i32 3
  %3619 = bitcast %"class.Eigen::Matrix.153"** %3618 to %"class.Eigen::PlainObjectBase.154"**
  store %"class.Eigen::PlainObjectBase.154"* %3599, %"class.Eigen::PlainObjectBase.154"** %3619, align 8, !tbaa !11
  call void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi47ELi1ELi0ELi47ELi1EEEEENS3_INS_7ProductINS4_IiLi47ELi6ELi0ELi47ELi6EEENS4_IiLi6ELi1ELi0ELi6ELi1EEELi1EEEEENS0_9assign_opIiiEELi0EEELi3ELi0EE3runERSE_(%"class.Eigen::internal::generic_dense_assignment_kernel.843"* nonnull dereferenceable(32) %76) #11
  call void @llvm.lifetime.end(i64 32, i8* nonnull %3614) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %3611) #11
  call void @llvm.lifetime.end(i64 56, i8* nonnull %3603) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %3602) #11
  %3620 = bitcast %"class.Eigen::Matrix.153"* %163 to <4 x i32>*
  %3621 = bitcast %"class.Eigen::Matrix.153"* %78 to <4 x i32>*
  %3622 = load <4 x i32>, <4 x i32>* %3621, align 16, !tbaa !11
  %3623 = load <4 x i32>, <4 x i32>* %3620, align 16, !tbaa !11
  %3624 = add <4 x i32> %3623, %3622
  store <4 x i32> %3624, <4 x i32>* %3620, align 16, !tbaa !11
  %3625 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %163, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %3626 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %78, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %3627 = bitcast i32* %3626 to <4 x i32>*
  %3628 = load <4 x i32>, <4 x i32>* %3627, align 16, !tbaa !11
  %3629 = bitcast i32* %3625 to <4 x i32>*
  %3630 = load <4 x i32>, <4 x i32>* %3629, align 16, !tbaa !11
  %3631 = add <4 x i32> %3630, %3628
  store <4 x i32> %3631, <4 x i32>* %3629, align 16, !tbaa !11
  %3632 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %163, i64 0, i32 0, i32 0, i32 0, i32 0, i64 8
  %3633 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %78, i64 0, i32 0, i32 0, i32 0, i32 0, i64 8
  %3634 = bitcast i32* %3633 to <4 x i32>*
  %3635 = load <4 x i32>, <4 x i32>* %3634, align 16, !tbaa !11
  %3636 = bitcast i32* %3632 to <4 x i32>*
  %3637 = load <4 x i32>, <4 x i32>* %3636, align 16, !tbaa !11
  %3638 = add <4 x i32> %3637, %3635
  store <4 x i32> %3638, <4 x i32>* %3636, align 16, !tbaa !11
  %3639 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %163, i64 0, i32 0, i32 0, i32 0, i32 0, i64 12
  %3640 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %78, i64 0, i32 0, i32 0, i32 0, i32 0, i64 12
  %3641 = bitcast i32* %3640 to <4 x i32>*
  %3642 = load <4 x i32>, <4 x i32>* %3641, align 16, !tbaa !11
  %3643 = bitcast i32* %3639 to <4 x i32>*
  %3644 = load <4 x i32>, <4 x i32>* %3643, align 16, !tbaa !11
  %3645 = add <4 x i32> %3644, %3642
  store <4 x i32> %3645, <4 x i32>* %3643, align 16, !tbaa !11
  %3646 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %163, i64 0, i32 0, i32 0, i32 0, i32 0, i64 16
  %3647 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %78, i64 0, i32 0, i32 0, i32 0, i32 0, i64 16
  %3648 = bitcast i32* %3647 to <4 x i32>*
  %3649 = load <4 x i32>, <4 x i32>* %3648, align 16, !tbaa !11
  %3650 = bitcast i32* %3646 to <4 x i32>*
  %3651 = load <4 x i32>, <4 x i32>* %3650, align 16, !tbaa !11
  %3652 = add <4 x i32> %3651, %3649
  store <4 x i32> %3652, <4 x i32>* %3650, align 16, !tbaa !11
  %3653 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %163, i64 0, i32 0, i32 0, i32 0, i32 0, i64 20
  %3654 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %78, i64 0, i32 0, i32 0, i32 0, i32 0, i64 20
  %3655 = bitcast i32* %3654 to <4 x i32>*
  %3656 = load <4 x i32>, <4 x i32>* %3655, align 16, !tbaa !11
  %3657 = bitcast i32* %3653 to <4 x i32>*
  %3658 = load <4 x i32>, <4 x i32>* %3657, align 16, !tbaa !11
  %3659 = add <4 x i32> %3658, %3656
  store <4 x i32> %3659, <4 x i32>* %3657, align 16, !tbaa !11
  %3660 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %163, i64 0, i32 0, i32 0, i32 0, i32 0, i64 24
  %3661 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %78, i64 0, i32 0, i32 0, i32 0, i32 0, i64 24
  %3662 = bitcast i32* %3661 to <4 x i32>*
  %3663 = load <4 x i32>, <4 x i32>* %3662, align 16, !tbaa !11
  %3664 = bitcast i32* %3660 to <4 x i32>*
  %3665 = load <4 x i32>, <4 x i32>* %3664, align 16, !tbaa !11
  %3666 = add <4 x i32> %3665, %3663
  store <4 x i32> %3666, <4 x i32>* %3664, align 16, !tbaa !11
  %3667 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %163, i64 0, i32 0, i32 0, i32 0, i32 0, i64 28
  %3668 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %78, i64 0, i32 0, i32 0, i32 0, i32 0, i64 28
  %3669 = bitcast i32* %3668 to <4 x i32>*
  %3670 = load <4 x i32>, <4 x i32>* %3669, align 16, !tbaa !11
  %3671 = bitcast i32* %3667 to <4 x i32>*
  %3672 = load <4 x i32>, <4 x i32>* %3671, align 16, !tbaa !11
  %3673 = add <4 x i32> %3672, %3670
  store <4 x i32> %3673, <4 x i32>* %3671, align 16, !tbaa !11
  %3674 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %163, i64 0, i32 0, i32 0, i32 0, i32 0, i64 32
  %3675 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %78, i64 0, i32 0, i32 0, i32 0, i32 0, i64 32
  %3676 = bitcast i32* %3675 to <4 x i32>*
  %3677 = load <4 x i32>, <4 x i32>* %3676, align 16, !tbaa !11
  %3678 = bitcast i32* %3674 to <4 x i32>*
  %3679 = load <4 x i32>, <4 x i32>* %3678, align 16, !tbaa !11
  %3680 = add <4 x i32> %3679, %3677
  store <4 x i32> %3680, <4 x i32>* %3678, align 16, !tbaa !11
  %3681 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %163, i64 0, i32 0, i32 0, i32 0, i32 0, i64 36
  %3682 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %78, i64 0, i32 0, i32 0, i32 0, i32 0, i64 36
  %3683 = bitcast i32* %3682 to <4 x i32>*
  %3684 = load <4 x i32>, <4 x i32>* %3683, align 16, !tbaa !11
  %3685 = bitcast i32* %3681 to <4 x i32>*
  %3686 = load <4 x i32>, <4 x i32>* %3685, align 16, !tbaa !11
  %3687 = add <4 x i32> %3686, %3684
  store <4 x i32> %3687, <4 x i32>* %3685, align 16, !tbaa !11
  %3688 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %163, i64 0, i32 0, i32 0, i32 0, i32 0, i64 40
  %3689 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %78, i64 0, i32 0, i32 0, i32 0, i32 0, i64 40
  %3690 = bitcast i32* %3689 to <4 x i32>*
  %3691 = load <4 x i32>, <4 x i32>* %3690, align 16, !tbaa !11
  %3692 = bitcast i32* %3688 to <4 x i32>*
  %3693 = load <4 x i32>, <4 x i32>* %3692, align 16, !tbaa !11
  %3694 = add <4 x i32> %3693, %3691
  store <4 x i32> %3694, <4 x i32>* %3692, align 16, !tbaa !11
  %3695 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %163, i64 0, i32 0, i32 0, i32 0, i32 0, i64 44
  %3696 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %78, i64 0, i32 0, i32 0, i32 0, i32 0, i64 44
  %3697 = load i32, i32* %3696, align 16, !tbaa !33
  %3698 = load i32, i32* %3695, align 16, !tbaa !33
  %3699 = add nsw i32 %3698, %3697
  store i32 %3699, i32* %3695, align 16, !tbaa !33
  %3700 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %163, i64 0, i32 0, i32 0, i32 0, i32 0, i64 45
  %3701 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %78, i64 0, i32 0, i32 0, i32 0, i32 0, i64 45
  %3702 = load i32, i32* %3701, align 4, !tbaa !33
  %3703 = load i32, i32* %3700, align 4, !tbaa !33
  %3704 = add nsw i32 %3703, %3702
  store i32 %3704, i32* %3700, align 4, !tbaa !33
  %3705 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %163, i64 0, i32 0, i32 0, i32 0, i32 0, i64 46
  %3706 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %78, i64 0, i32 0, i32 0, i32 0, i32 0, i64 46
  %3707 = load i32, i32* %3706, align 8, !tbaa !33
  %3708 = load i32, i32* %3705, align 8, !tbaa !33
  %3709 = add nsw i32 %3708, %3707
  store i32 %3709, i32* %3705, align 8, !tbaa !33
  call void @llvm.lifetime.end(i64 188, i8* nonnull %3598) #11
  %3710 = bitcast %"class.Eigen::Matrix.1210"* %73 to i8*
  call void @llvm.lifetime.start(i64 188, i8* nonnull %3710) #11
  %3711 = getelementptr inbounds %"class.Eigen::Matrix.1210", %"class.Eigen::Matrix.1210"* %73, i64 0, i32 0
  %3712 = ptrtoint %"class.Eigen::Matrix.185"* %158 to i64
  %3713 = ptrtoint %"class.Eigen::Matrix.77"* %125 to i64
  %3714 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %72, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %3714) #11
  %3715 = bitcast %"struct.Eigen::internal::evaluator.1227"* %69 to i8*
  call void @llvm.lifetime.start(i64 72, i8* nonnull %3715) #11
  %3716 = bitcast %"struct.Eigen::internal::evaluator.1227"* %69 to i64*
  store i64 %3712, i64* %3716, align 8
  %3717 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1227", %"struct.Eigen::internal::evaluator.1227"* %69, i64 0, i32 0, i32 1
  %3718 = bitcast %"class.Eigen::Transpose.354"* %3717 to i64*
  store i64 %3713, i64* %3718, align 8
  %3719 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1227", %"struct.Eigen::internal::evaluator.1227"* %69, i64 0, i32 0, i32 2, i32 0, i32 1, i32 0, i32 0
  store i32* %1508, i32** %3719, align 8, !tbaa !97
  %3720 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1227", %"struct.Eigen::internal::evaluator.1227"* %69, i64 0, i32 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %3721 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %125, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  store i32* %3721, i32** %3720, align 8, !tbaa !94
  %3722 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1227", %"struct.Eigen::internal::evaluator.1227"* %69, i64 0, i32 0, i32 4
  store i64 6, i64* %3722, align 8, !tbaa !125
  %3723 = bitcast %"struct.Eigen::internal::evaluator.1236"* %70 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %3723) #11
  %3724 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1236", %"struct.Eigen::internal::evaluator.1236"* %70, i64 0, i32 0, i32 0
  %3725 = getelementptr inbounds %"class.Eigen::Matrix.1210", %"class.Eigen::Matrix.1210"* %73, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  store i32* %3725, i32** %3724, align 8, !tbaa !131
  %3726 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1241"* %71 to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %3726) #11
  %3727 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1241", %"class.Eigen::internal::generic_dense_assignment_kernel.1241"* %71, i64 0, i32 0
  store %"struct.Eigen::internal::evaluator.1236"* %70, %"struct.Eigen::internal::evaluator.1236"** %3727, align 8, !tbaa !11
  %3728 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1241", %"class.Eigen::internal::generic_dense_assignment_kernel.1241"* %71, i64 0, i32 1
  store %"struct.Eigen::internal::evaluator.1227"* %69, %"struct.Eigen::internal::evaluator.1227"** %3728, align 8, !tbaa !11
  %3729 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1241", %"class.Eigen::internal::generic_dense_assignment_kernel.1241"* %71, i64 0, i32 2
  store %"struct.Eigen::internal::assign_op.512"* %72, %"struct.Eigen::internal::assign_op.512"** %3729, align 8, !tbaa !11
  %3730 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1241", %"class.Eigen::internal::generic_dense_assignment_kernel.1241"* %71, i64 0, i32 3
  %3731 = bitcast %"class.Eigen::Matrix.1210"** %3730 to %"class.Eigen::PlainObjectBase.1211"**
  store %"class.Eigen::PlainObjectBase.1211"* %3711, %"class.Eigen::PlainObjectBase.1211"** %3731, align 8, !tbaa !11
  call void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi1ELi47ELi1ELi1ELi47EEEEENS3_INS_7ProductINS_9TransposeINS4_IiLi6ELi1ELi0ELi6ELi1EEEEENS8_INS4_IiLi47ELi6ELi0ELi47ELi6EEEEELi1EEEEENS0_9assign_opIiiEELi0EEELi3ELi0EE3runERSH_(%"class.Eigen::internal::generic_dense_assignment_kernel.1241"* nonnull dereferenceable(32) %71) #11
  call void @llvm.lifetime.end(i64 32, i8* nonnull %3726) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %3723) #11
  call void @llvm.lifetime.end(i64 72, i8* nonnull %3715) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %3714) #11
  call void @llvm.lifetime.end(i64 188, i8* nonnull %3710) #11
  %3732 = bitcast %"class.Eigen::Product.362"* %183 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %3732) #11
  %3733 = getelementptr inbounds %"class.Eigen::Product.362", %"class.Eigen::Product.362"* %183, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.185"* %166, %"class.Eigen::Matrix.185"** %3733, align 8
  %3734 = getelementptr inbounds %"class.Eigen::Product.362", %"class.Eigen::Product.362"* %183, i64 0, i32 1, i32 0
  store %"class.Eigen::Matrix.123"* %143, %"class.Eigen::Matrix.123"** %3734, align 8
  %3735 = getelementptr inbounds %"struct.Eigen::internal::sub_assign_op", %"struct.Eigen::internal::sub_assign_op"* %68, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %3735) #11
  call void @_ZN5Eigen8internal15call_assignmentINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEENS_7ProductINS_9TransposeINS2_IiLi6ELi1ELi0ELi6ELi1EEEEENS5_INS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS0_13sub_assign_opIiiEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsr25evaluator_assume_aliasingISF_EE5valueEPvE4typeE(%"class.Eigen::Matrix.170"* nonnull dereferenceable(16) %172, %"class.Eigen::Product.362"* nonnull dereferenceable(16) %183, %"struct.Eigen::internal::sub_assign_op"* nonnull dereferenceable(1) %68, i8* null) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %3735) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %3732) #11
  %3736 = bitcast %"class.Eigen::CwiseBinaryOp.200"* %184 to i8*
  call void @llvm.lifetime.start(i64 40, i8* nonnull %3736) #11
  %3737 = load i128, i128* %2122, align 8, !tbaa !11
  %3738 = load i64, i64* %869, align 8, !tbaa !43, !noalias !133
  %3739 = icmp slt i64 %3738, 0
  br i1 %3739, label %3740, label %3741, !prof !50

; <label>:3740:                                   ; preds = %3590
  call void @__assert_rtn(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__._ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEENS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEC2EllRKS3_, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.13, i64 0, i64 0), i32 74, i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.14, i64 0, i64 0)) #13, !noalias !133
  unreachable

; <label>:3741:                                   ; preds = %3590
  %3742 = load i32, i32* %1520, align 8, !tbaa !33
  %3743 = trunc i128 %3737 to i32
  %3744 = lshr i128 %3737, 32
  %3745 = trunc i128 %3744 to i32
  %3746 = lshr i128 %3737, 64
  %3747 = trunc i128 %3746 to i32
  %3748 = lshr i128 %3737, 96
  %3749 = trunc i128 %3748 to i32
  %3750 = load i32, i32* %1523, align 4, !tbaa !33
  %3751 = mul i32 %3745, %3743
  %3752 = mul i32 %3751, %3747
  %3753 = mul i32 %3752, %3749
  %3754 = mul i32 %3753, %3742
  %3755 = mul i32 %3754, %3750
  %3756 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %184, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.123"* %144, %"class.Eigen::Matrix.123"** %3756, align 8
  %3757 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %184, i64 0, i32 0, i32 1
  store %"class.Eigen::Matrix.185"* %166, %"class.Eigen::Matrix.185"** %3757, align 8
  %3758 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %184, i64 0, i32 1, i32 0, i32 0
  store i64 %3738, i64* %3758, align 8, !alias.scope !133
  %3759 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %184, i64 0, i32 1, i32 2, i32 0
  store i32 %3755, i32* %3759, align 4, !tbaa !51, !alias.scope !133
  %3760 = getelementptr inbounds %"struct.Eigen::internal::add_assign_op", %"struct.Eigen::internal::add_assign_op"* %67, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %3760) #11
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEENS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_7ProductINS2_IiLin1ELi6ELi0ELin1ELi6EEENS2_IiLi6ELi1ELi0ELi6ELi1EEELi0EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKS3_EEEENS0_13add_assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.170"* nonnull dereferenceable(16) %171, %"class.Eigen::CwiseBinaryOp.200"* nonnull dereferenceable(40) %184, %"struct.Eigen::internal::add_assign_op"* nonnull dereferenceable(1) %67) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %3760) #11
  call void @llvm.lifetime.end(i64 40, i8* nonnull %3736) #11
  %3761 = bitcast %"class.Eigen::CwiseBinaryOp.220"* %185 to i8*
  call void @llvm.lifetime.start(i64 40, i8* nonnull %3761) #11
  %3762 = bitcast %"class.Eigen::Matrix.153"* %146 to <4 x i32>*
  %3763 = load <4 x i32>, <4 x i32>* %3762, align 16, !tbaa !11
  %3764 = mul <4 x i32> %3763, %3763
  %3765 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %146, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %3766 = bitcast i32* %3765 to <4 x i32>*
  %3767 = load <4 x i32>, <4 x i32>* %3766, align 16, !tbaa !11
  %3768 = mul <4 x i32> %3767, %3767
  %3769 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %146, i64 0, i32 0, i32 0, i32 0, i32 0, i64 8
  %3770 = bitcast i32* %3769 to <4 x i32>*
  %3771 = load <4 x i32>, <4 x i32>* %3770, align 16, !tbaa !11
  %3772 = mul <4 x i32> %3771, %3771
  %3773 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %146, i64 0, i32 0, i32 0, i32 0, i32 0, i64 12
  %3774 = bitcast i32* %3773 to <4 x i32>*
  %3775 = load <4 x i32>, <4 x i32>* %3774, align 16, !tbaa !11
  %3776 = mul <4 x i32> %3775, %3775
  %3777 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %146, i64 0, i32 0, i32 0, i32 0, i32 0, i64 16
  %3778 = bitcast i32* %3777 to <4 x i32>*
  %3779 = load <4 x i32>, <4 x i32>* %3778, align 16, !tbaa !11
  %3780 = mul <4 x i32> %3779, %3779
  %3781 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %146, i64 0, i32 0, i32 0, i32 0, i32 0, i64 20
  %3782 = bitcast i32* %3781 to <4 x i32>*
  %3783 = load <4 x i32>, <4 x i32>* %3782, align 16, !tbaa !11
  %3784 = mul <4 x i32> %3783, %3783
  %3785 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %146, i64 0, i32 0, i32 0, i32 0, i32 0, i64 24
  %3786 = bitcast i32* %3785 to <4 x i32>*
  %3787 = load <4 x i32>, <4 x i32>* %3786, align 16, !tbaa !11
  %3788 = mul <4 x i32> %3787, %3787
  %3789 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %146, i64 0, i32 0, i32 0, i32 0, i32 0, i64 28
  %3790 = bitcast i32* %3789 to <4 x i32>*
  %3791 = load <4 x i32>, <4 x i32>* %3790, align 16, !tbaa !11
  %3792 = mul <4 x i32> %3791, %3791
  %3793 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %146, i64 0, i32 0, i32 0, i32 0, i32 0, i64 32
  %3794 = bitcast i32* %3793 to <4 x i32>*
  %3795 = load <4 x i32>, <4 x i32>* %3794, align 16, !tbaa !11
  %3796 = mul <4 x i32> %3795, %3795
  %3797 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %146, i64 0, i32 0, i32 0, i32 0, i32 0, i64 36
  %3798 = bitcast i32* %3797 to <4 x i32>*
  %3799 = load <4 x i32>, <4 x i32>* %3798, align 16, !tbaa !11
  %3800 = mul <4 x i32> %3799, %3799
  %3801 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %146, i64 0, i32 0, i32 0, i32 0, i32 0, i64 40
  %3802 = bitcast i32* %3801 to <4 x i32>*
  %3803 = load <4 x i32>, <4 x i32>* %3802, align 16, !tbaa !11
  %3804 = mul <4 x i32> %3803, %3803
  %3805 = add <4 x i32> %3768, %3764
  %3806 = add <4 x i32> %3805, %3772
  %3807 = add <4 x i32> %3806, %3776
  %3808 = add <4 x i32> %3807, %3780
  %3809 = add <4 x i32> %3808, %3784
  %3810 = add <4 x i32> %3809, %3788
  %3811 = add <4 x i32> %3810, %3792
  %3812 = add <4 x i32> %3811, %3796
  %3813 = add <4 x i32> %3812, %3800
  %3814 = add <4 x i32> %3813, %3804
  %3815 = call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %3814, <4 x i32> %3814) #11
  %3816 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %146, i64 0, i32 0, i32 0, i32 0, i32 0, i64 44
  %3817 = load i32, i32* %3816, align 16, !tbaa !33
  %3818 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %146, i64 0, i32 0, i32 0, i32 0, i32 0, i64 45
  %3819 = load i32, i32* %3818, align 4, !tbaa !33
  %3820 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %146, i64 0, i32 0, i32 0, i32 0, i32 0, i64 46
  %3821 = load i32, i32* %3820, align 8, !tbaa !33
  %3822 = load i64, i64* %367, align 8, !tbaa !37, !noalias !136
  %3823 = icmp slt i64 %3822, 0
  br i1 %3823, label %3824, label %3825, !prof !50

; <label>:3824:                                   ; preds = %3741
  call void @__assert_rtn(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__._ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEENS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEC2EllRKS3_, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.13, i64 0, i64 0), i32 74, i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.14, i64 0, i64 0)) #13, !noalias !136
  unreachable

; <label>:3825:                                   ; preds = %3741
  %3826 = mul nsw i32 %3817, %3817
  %3827 = call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %3815, <4 x i32> %3815) #11
  %3828 = extractelement <4 x i32> %3827, i32 0
  %3829 = mul nsw i32 %3819, %3819
  %3830 = mul nsw i32 %3821, %3821
  %3831 = add nuw i32 %3829, %3826
  %3832 = add i32 %3831, %3830
  %3833 = add i32 %3832, %3828
  %3834 = sitofp i32 %3833 to double
  %3835 = call double @sqrt(double %3834) #5
  %3836 = fptosi double %3835 to i32
  %3837 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %185, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.32"* %108, %"class.Eigen::Matrix.32"** %3837, align 8
  %3838 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %185, i64 0, i32 0, i32 1
  store %"class.Eigen::Matrix.153"* %147, %"class.Eigen::Matrix.153"** %3838, align 8
  %3839 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %185, i64 0, i32 1, i32 0, i32 0
  store i64 %3822, i64* %3839, align 8, !alias.scope !136
  %3840 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %185, i64 0, i32 1, i32 2, i32 0
  store i32 %3836, i32* %3840, align 4, !tbaa !51, !alias.scope !136
  %3841 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %66, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %3841) #11
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEENS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_7ProductINS2_IiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi1ELi0ELi47ELi1EEELi0EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKS3_EEEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.170"* nonnull dereferenceable(16) %151, %"class.Eigen::CwiseBinaryOp.220"* nonnull dereferenceable(40) %185, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %66) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %3841) #11
  call void @llvm.lifetime.end(i64 40, i8* nonnull %3761) #11
  %3842 = load i64, i64* %584, align 8, !tbaa !40
  %3843 = load i64, i64* %869, align 8, !tbaa !43
  %3844 = icmp eq i64 %3842, %3843
  br i1 %3844, label %3846, label %3845, !prof !10

; <label>:3845:                                   ; preds = %3825
  call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS1_IdLin1ELi1ELi0ELin1ELi1EEELi0EEC2ERKS2_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 97, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2, i64 0, i64 0)) #13
  unreachable

; <label>:3846:                                   ; preds = %3825
  %3847 = bitcast %"class.Eigen::Matrix.77"* %65 to i8*
  call void @llvm.lifetime.start(i64 1128, i8* nonnull %3847) #11
  call void @_ZN5Eigen8internal20generic_product_implINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS2_IiLin1ELi6ELi0ELin1ELi6EEENS_10DenseShapeES5_Li8EE6evalToINS2_IiLi47ELi6ELi0ELi47ELi6EEEEEvRT_RKS3_RKS4_(%"class.Eigen::Matrix.77"* nonnull dereferenceable(1128) %65, %"class.Eigen::Matrix.48"* nonnull dereferenceable(16) %117, %"class.Eigen::Matrix.123"* nonnull dereferenceable(16) %144) #11
  br i1 %3347, label %3850, label %3848

; <label>:3848:                                   ; preds = %3846
  br label %3877

; <label>:3849:                                   ; preds = %8648, %8641, %3877
  br label %3850

; <label>:3850:                                   ; preds = %3849, %3846
  %3851 = phi i64 [ 0, %3846 ], [ %3343, %3849 ]
  %3852 = add nsw i64 %3346, -1
  %3853 = sub nsw i64 %3852, %3851
  %3854 = lshr i64 %3853, 2
  %3855 = add nuw nsw i64 %3854, 1
  %3856 = and i64 %3855, 7
  %3857 = icmp eq i64 %3856, 0
  br i1 %3857, label %3873, label %3858

; <label>:3858:                                   ; preds = %3850
  br label %3859

; <label>:3859:                                   ; preds = %3859, %3858
  %3860 = phi i64 [ %3869, %3859 ], [ %3851, %3858 ]
  %3861 = phi i64 [ %3870, %3859 ], [ %3856, %3858 ]
  %3862 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3860
  %3863 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %65, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3860
  %3864 = bitcast i32* %3863 to <4 x i32>*
  %3865 = load <4 x i32>, <4 x i32>* %3864, align 4, !tbaa !11
  %3866 = bitcast i32* %3862 to <4 x i32>*
  %3867 = load <4 x i32>, <4 x i32>* %3866, align 16, !tbaa !11
  %3868 = sub <4 x i32> %3867, %3865
  store <4 x i32> %3868, <4 x i32>* %3866, align 16, !tbaa !11
  %3869 = add nuw nsw i64 %3860, 4
  %3870 = add i64 %3861, -1
  %3871 = icmp eq i64 %3870, 0
  br i1 %3871, label %3872, label %3859, !llvm.loop !139

; <label>:3872:                                   ; preds = %3859
  br label %3873

; <label>:3873:                                   ; preds = %3850, %3872
  %3874 = phi i64 [ %3851, %3850 ], [ %3869, %3872 ]
  %3875 = icmp ult i64 %3853, 28
  br i1 %3875, label %3885, label %3876

; <label>:3876:                                   ; preds = %3873
  br label %4021

; <label>:3877:                                   ; preds = %3848
  %3878 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %3879 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %65, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %3880 = load i32, i32* %3879, align 4, !tbaa !33
  %3881 = load i32, i32* %3878, align 4, !tbaa !33
  %3882 = sub nsw i32 %3881, %3880
  store i32 %3882, i32* %3878, align 4, !tbaa !33
  %3883 = icmp eq i64 %3343, 1
  br i1 %3883, label %3849, label %8641

; <label>:3884:                                   ; preds = %4021
  br label %3885

; <label>:3885:                                   ; preds = %3873, %3884
  br i1 %3386, label %3886, label %4089

; <label>:3886:                                   ; preds = %3885
  %3887 = sub nsw i64 282, %3346
  %3888 = icmp ult i64 %3887, 32
  br i1 %3888, label %4010, label %3889

; <label>:3889:                                   ; preds = %3886
  %3890 = and i64 %3887, -32
  %3891 = icmp eq i64 %3890, 0
  %3892 = add nsw i64 %3346, %3890
  br i1 %3891, label %4010, label %3893

; <label>:3893:                                   ; preds = %3889
  %3894 = add nsw i64 %3890, -32
  %3895 = lshr exact i64 %3894, 5
  %3896 = and i64 %3895, 1
  %3897 = icmp eq i64 %3896, 0
  br i1 %3897, label %3898, label %3932

; <label>:3898:                                   ; preds = %3893
  br label %3899

; <label>:3899:                                   ; preds = %3898
  %3900 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3346
  %3901 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %65, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3346
  %3902 = bitcast i32* %3901 to <8 x i32>*
  %3903 = load <8 x i32>, <8 x i32>* %3902, align 4, !tbaa !33
  %3904 = getelementptr i32, i32* %3901, i64 8
  %3905 = bitcast i32* %3904 to <8 x i32>*
  %3906 = load <8 x i32>, <8 x i32>* %3905, align 4, !tbaa !33
  %3907 = getelementptr i32, i32* %3901, i64 16
  %3908 = bitcast i32* %3907 to <8 x i32>*
  %3909 = load <8 x i32>, <8 x i32>* %3908, align 4, !tbaa !33
  %3910 = getelementptr i32, i32* %3901, i64 24
  %3911 = bitcast i32* %3910 to <8 x i32>*
  %3912 = load <8 x i32>, <8 x i32>* %3911, align 4, !tbaa !33
  %3913 = bitcast i32* %3900 to <8 x i32>*
  %3914 = load <8 x i32>, <8 x i32>* %3913, align 4, !tbaa !33
  %3915 = getelementptr i32, i32* %3900, i64 8
  %3916 = bitcast i32* %3915 to <8 x i32>*
  %3917 = load <8 x i32>, <8 x i32>* %3916, align 4, !tbaa !33
  %3918 = getelementptr i32, i32* %3900, i64 16
  %3919 = bitcast i32* %3918 to <8 x i32>*
  %3920 = load <8 x i32>, <8 x i32>* %3919, align 4, !tbaa !33
  %3921 = getelementptr i32, i32* %3900, i64 24
  %3922 = bitcast i32* %3921 to <8 x i32>*
  %3923 = load <8 x i32>, <8 x i32>* %3922, align 4, !tbaa !33
  %3924 = sub nsw <8 x i32> %3914, %3903
  %3925 = sub nsw <8 x i32> %3917, %3906
  %3926 = sub nsw <8 x i32> %3920, %3909
  %3927 = sub nsw <8 x i32> %3923, %3912
  %3928 = bitcast i32* %3900 to <8 x i32>*
  store <8 x i32> %3924, <8 x i32>* %3928, align 4, !tbaa !33
  %3929 = bitcast i32* %3915 to <8 x i32>*
  store <8 x i32> %3925, <8 x i32>* %3929, align 4, !tbaa !33
  %3930 = bitcast i32* %3918 to <8 x i32>*
  store <8 x i32> %3926, <8 x i32>* %3930, align 4, !tbaa !33
  %3931 = bitcast i32* %3921 to <8 x i32>*
  store <8 x i32> %3927, <8 x i32>* %3931, align 4, !tbaa !33
  br label %3932

; <label>:3932:                                   ; preds = %3899, %3893
  %3933 = phi i64 [ 0, %3893 ], [ 32, %3899 ]
  %3934 = icmp eq i64 %3895, 0
  br i1 %3934, label %4008, label %3935

; <label>:3935:                                   ; preds = %3932
  br label %3936

; <label>:3936:                                   ; preds = %3936, %3935
  %3937 = phi i64 [ %3933, %3935 ], [ %4005, %3936 ]
  %3938 = add i64 %3346, %3937
  %3939 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3938
  %3940 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %65, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3938
  %3941 = bitcast i32* %3940 to <8 x i32>*
  %3942 = load <8 x i32>, <8 x i32>* %3941, align 4, !tbaa !33
  %3943 = getelementptr i32, i32* %3940, i64 8
  %3944 = bitcast i32* %3943 to <8 x i32>*
  %3945 = load <8 x i32>, <8 x i32>* %3944, align 4, !tbaa !33
  %3946 = getelementptr i32, i32* %3940, i64 16
  %3947 = bitcast i32* %3946 to <8 x i32>*
  %3948 = load <8 x i32>, <8 x i32>* %3947, align 4, !tbaa !33
  %3949 = getelementptr i32, i32* %3940, i64 24
  %3950 = bitcast i32* %3949 to <8 x i32>*
  %3951 = load <8 x i32>, <8 x i32>* %3950, align 4, !tbaa !33
  %3952 = bitcast i32* %3939 to <8 x i32>*
  %3953 = load <8 x i32>, <8 x i32>* %3952, align 4, !tbaa !33
  %3954 = getelementptr i32, i32* %3939, i64 8
  %3955 = bitcast i32* %3954 to <8 x i32>*
  %3956 = load <8 x i32>, <8 x i32>* %3955, align 4, !tbaa !33
  %3957 = getelementptr i32, i32* %3939, i64 16
  %3958 = bitcast i32* %3957 to <8 x i32>*
  %3959 = load <8 x i32>, <8 x i32>* %3958, align 4, !tbaa !33
  %3960 = getelementptr i32, i32* %3939, i64 24
  %3961 = bitcast i32* %3960 to <8 x i32>*
  %3962 = load <8 x i32>, <8 x i32>* %3961, align 4, !tbaa !33
  %3963 = sub nsw <8 x i32> %3953, %3942
  %3964 = sub nsw <8 x i32> %3956, %3945
  %3965 = sub nsw <8 x i32> %3959, %3948
  %3966 = sub nsw <8 x i32> %3962, %3951
  %3967 = bitcast i32* %3939 to <8 x i32>*
  store <8 x i32> %3963, <8 x i32>* %3967, align 4, !tbaa !33
  %3968 = bitcast i32* %3954 to <8 x i32>*
  store <8 x i32> %3964, <8 x i32>* %3968, align 4, !tbaa !33
  %3969 = bitcast i32* %3957 to <8 x i32>*
  store <8 x i32> %3965, <8 x i32>* %3969, align 4, !tbaa !33
  %3970 = bitcast i32* %3960 to <8 x i32>*
  store <8 x i32> %3966, <8 x i32>* %3970, align 4, !tbaa !33
  %3971 = add i64 %3937, 32
  %3972 = add i64 %3346, %3971
  %3973 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3972
  %3974 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %65, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3972
  %3975 = bitcast i32* %3974 to <8 x i32>*
  %3976 = load <8 x i32>, <8 x i32>* %3975, align 4, !tbaa !33
  %3977 = getelementptr i32, i32* %3974, i64 8
  %3978 = bitcast i32* %3977 to <8 x i32>*
  %3979 = load <8 x i32>, <8 x i32>* %3978, align 4, !tbaa !33
  %3980 = getelementptr i32, i32* %3974, i64 16
  %3981 = bitcast i32* %3980 to <8 x i32>*
  %3982 = load <8 x i32>, <8 x i32>* %3981, align 4, !tbaa !33
  %3983 = getelementptr i32, i32* %3974, i64 24
  %3984 = bitcast i32* %3983 to <8 x i32>*
  %3985 = load <8 x i32>, <8 x i32>* %3984, align 4, !tbaa !33
  %3986 = bitcast i32* %3973 to <8 x i32>*
  %3987 = load <8 x i32>, <8 x i32>* %3986, align 4, !tbaa !33
  %3988 = getelementptr i32, i32* %3973, i64 8
  %3989 = bitcast i32* %3988 to <8 x i32>*
  %3990 = load <8 x i32>, <8 x i32>* %3989, align 4, !tbaa !33
  %3991 = getelementptr i32, i32* %3973, i64 16
  %3992 = bitcast i32* %3991 to <8 x i32>*
  %3993 = load <8 x i32>, <8 x i32>* %3992, align 4, !tbaa !33
  %3994 = getelementptr i32, i32* %3973, i64 24
  %3995 = bitcast i32* %3994 to <8 x i32>*
  %3996 = load <8 x i32>, <8 x i32>* %3995, align 4, !tbaa !33
  %3997 = sub nsw <8 x i32> %3987, %3976
  %3998 = sub nsw <8 x i32> %3990, %3979
  %3999 = sub nsw <8 x i32> %3993, %3982
  %4000 = sub nsw <8 x i32> %3996, %3985
  %4001 = bitcast i32* %3973 to <8 x i32>*
  store <8 x i32> %3997, <8 x i32>* %4001, align 4, !tbaa !33
  %4002 = bitcast i32* %3988 to <8 x i32>*
  store <8 x i32> %3998, <8 x i32>* %4002, align 4, !tbaa !33
  %4003 = bitcast i32* %3991 to <8 x i32>*
  store <8 x i32> %3999, <8 x i32>* %4003, align 4, !tbaa !33
  %4004 = bitcast i32* %3994 to <8 x i32>*
  store <8 x i32> %4000, <8 x i32>* %4004, align 4, !tbaa !33
  %4005 = add i64 %3937, 64
  %4006 = icmp eq i64 %4005, %3890
  br i1 %4006, label %4007, label %3936, !llvm.loop !140

; <label>:4007:                                   ; preds = %3936
  br label %4008

; <label>:4008:                                   ; preds = %3932, %4007
  %4009 = icmp eq i64 %3887, %3890
  br i1 %4009, label %4089, label %4010

; <label>:4010:                                   ; preds = %4008, %3889, %3886
  %4011 = phi i64 [ %3346, %3889 ], [ %3346, %3886 ], [ %3892, %4008 ]
  br label %4012

; <label>:4012:                                   ; preds = %4010, %4012
  %4013 = phi i64 [ %4019, %4012 ], [ %4011, %4010 ]
  %4014 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %4013
  %4015 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %65, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %4013
  %4016 = load i32, i32* %4015, align 4, !tbaa !33
  %4017 = load i32, i32* %4014, align 4, !tbaa !33
  %4018 = sub nsw i32 %4017, %4016
  store i32 %4018, i32* %4014, align 4, !tbaa !33
  %4019 = add nsw i64 %4013, 1
  %4020 = icmp eq i64 %4019, 282
  br i1 %4020, label %4088, label %4012, !llvm.loop !141

; <label>:4021:                                   ; preds = %4021, %3876
  %4022 = phi i64 [ %3874, %3876 ], [ %4086, %4021 ]
  %4023 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %4022
  %4024 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %65, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %4022
  %4025 = bitcast i32* %4024 to <4 x i32>*
  %4026 = load <4 x i32>, <4 x i32>* %4025, align 4, !tbaa !11
  %4027 = bitcast i32* %4023 to <4 x i32>*
  %4028 = load <4 x i32>, <4 x i32>* %4027, align 16, !tbaa !11
  %4029 = sub <4 x i32> %4028, %4026
  store <4 x i32> %4029, <4 x i32>* %4027, align 16, !tbaa !11
  %4030 = add nuw nsw i64 %4022, 4
  %4031 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %4030
  %4032 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %65, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %4030
  %4033 = bitcast i32* %4032 to <4 x i32>*
  %4034 = load <4 x i32>, <4 x i32>* %4033, align 4, !tbaa !11
  %4035 = bitcast i32* %4031 to <4 x i32>*
  %4036 = load <4 x i32>, <4 x i32>* %4035, align 16, !tbaa !11
  %4037 = sub <4 x i32> %4036, %4034
  store <4 x i32> %4037, <4 x i32>* %4035, align 16, !tbaa !11
  %4038 = add nsw i64 %4022, 8
  %4039 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %4038
  %4040 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %65, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %4038
  %4041 = bitcast i32* %4040 to <4 x i32>*
  %4042 = load <4 x i32>, <4 x i32>* %4041, align 4, !tbaa !11
  %4043 = bitcast i32* %4039 to <4 x i32>*
  %4044 = load <4 x i32>, <4 x i32>* %4043, align 16, !tbaa !11
  %4045 = sub <4 x i32> %4044, %4042
  store <4 x i32> %4045, <4 x i32>* %4043, align 16, !tbaa !11
  %4046 = add nsw i64 %4022, 12
  %4047 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %4046
  %4048 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %65, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %4046
  %4049 = bitcast i32* %4048 to <4 x i32>*
  %4050 = load <4 x i32>, <4 x i32>* %4049, align 4, !tbaa !11
  %4051 = bitcast i32* %4047 to <4 x i32>*
  %4052 = load <4 x i32>, <4 x i32>* %4051, align 16, !tbaa !11
  %4053 = sub <4 x i32> %4052, %4050
  store <4 x i32> %4053, <4 x i32>* %4051, align 16, !tbaa !11
  %4054 = add nsw i64 %4022, 16
  %4055 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %4054
  %4056 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %65, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %4054
  %4057 = bitcast i32* %4056 to <4 x i32>*
  %4058 = load <4 x i32>, <4 x i32>* %4057, align 4, !tbaa !11
  %4059 = bitcast i32* %4055 to <4 x i32>*
  %4060 = load <4 x i32>, <4 x i32>* %4059, align 16, !tbaa !11
  %4061 = sub <4 x i32> %4060, %4058
  store <4 x i32> %4061, <4 x i32>* %4059, align 16, !tbaa !11
  %4062 = add nsw i64 %4022, 20
  %4063 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %4062
  %4064 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %65, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %4062
  %4065 = bitcast i32* %4064 to <4 x i32>*
  %4066 = load <4 x i32>, <4 x i32>* %4065, align 4, !tbaa !11
  %4067 = bitcast i32* %4063 to <4 x i32>*
  %4068 = load <4 x i32>, <4 x i32>* %4067, align 16, !tbaa !11
  %4069 = sub <4 x i32> %4068, %4066
  store <4 x i32> %4069, <4 x i32>* %4067, align 16, !tbaa !11
  %4070 = add nsw i64 %4022, 24
  %4071 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %4070
  %4072 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %65, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %4070
  %4073 = bitcast i32* %4072 to <4 x i32>*
  %4074 = load <4 x i32>, <4 x i32>* %4073, align 4, !tbaa !11
  %4075 = bitcast i32* %4071 to <4 x i32>*
  %4076 = load <4 x i32>, <4 x i32>* %4075, align 16, !tbaa !11
  %4077 = sub <4 x i32> %4076, %4074
  store <4 x i32> %4077, <4 x i32>* %4075, align 16, !tbaa !11
  %4078 = add nsw i64 %4022, 28
  %4079 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %4078
  %4080 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %65, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %4078
  %4081 = bitcast i32* %4080 to <4 x i32>*
  %4082 = load <4 x i32>, <4 x i32>* %4081, align 4, !tbaa !11
  %4083 = bitcast i32* %4079 to <4 x i32>*
  %4084 = load <4 x i32>, <4 x i32>* %4083, align 16, !tbaa !11
  %4085 = sub <4 x i32> %4084, %4082
  store <4 x i32> %4085, <4 x i32>* %4083, align 16, !tbaa !11
  %4086 = add nsw i64 %4022, 32
  %4087 = icmp slt i64 %4086, %3346
  br i1 %4087, label %4021, label %3884

; <label>:4088:                                   ; preds = %4012
  br label %4089

; <label>:4089:                                   ; preds = %4088, %4008, %3885
  call void @llvm.lifetime.end(i64 1128, i8* nonnull %3847) #11
  %4090 = bitcast %"class.Eigen::Product.324"* %186 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %4090) #11
  %4091 = ptrtoint %"class.Eigen::Matrix.123"* %143 to i64
  %4092 = getelementptr inbounds %"class.Eigen::Product.324", %"class.Eigen::Product.324"* %186, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.32"* %107, %"class.Eigen::Matrix.32"** %4092, align 8
  %4093 = getelementptr inbounds %"class.Eigen::Product.324", %"class.Eigen::Product.324"* %186, i64 0, i32 0, i32 1
  store %"class.Eigen::Matrix.77"* %121, %"class.Eigen::Matrix.77"** %4093, align 8
  %4094 = getelementptr inbounds %"class.Eigen::Product.324", %"class.Eigen::Product.324"* %186, i64 0, i32 1
  %4095 = bitcast %"class.Eigen::Transpose.331"* %4094 to i64*
  store i64 %4091, i64* %4095, align 8, !alias.scope !142
  %4096 = getelementptr inbounds %"struct.Eigen::internal::add_assign_op", %"struct.Eigen::internal::add_assign_op"* %64, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %4096) #11
  call void @_ZN5Eigen8internal15call_assignmentINS_6MatrixIiLin1ELin1ELi0ELin1ELin1EEENS_7ProductINS4_INS2_IiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS0_13add_assign_opIiiEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsr25evaluator_assume_aliasingISG_EE5valueEPvE4typeE(%"class.Eigen::Matrix.19"* nonnull dereferenceable(24) %106, %"class.Eigen::Product.324"* nonnull dereferenceable(24) %186, %"struct.Eigen::internal::add_assign_op"* nonnull dereferenceable(1) %64, i8* null) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %4096) #11
  call void @llvm.lifetime.end(i64 24, i8* nonnull %4090) #11
  %4097 = bitcast %"class.Eigen::Matrix.1210"* %63 to i8*
  call void @llvm.lifetime.start(i64 188, i8* nonnull %4097) #11
  %4098 = getelementptr inbounds %"class.Eigen::Matrix.1210", %"class.Eigen::Matrix.1210"* %63, i64 0, i32 0
  %4099 = ptrtoint %"class.Eigen::Matrix.185"* %156 to i64
  %4100 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %62, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %4100) #11
  %4101 = bitcast %"struct.Eigen::internal::evaluator.1227"* %59 to i8*
  call void @llvm.lifetime.start(i64 72, i8* nonnull %4101) #11
  %4102 = bitcast %"struct.Eigen::internal::evaluator.1227"* %59 to i64*
  store i64 %4099, i64* %4102, align 8
  %4103 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1227", %"struct.Eigen::internal::evaluator.1227"* %59, i64 0, i32 0, i32 1
  %4104 = bitcast %"class.Eigen::Transpose.354"* %4103 to i64*
  store i64 %3059, i64* %4104, align 8
  %4105 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1227", %"struct.Eigen::internal::evaluator.1227"* %59, i64 0, i32 0, i32 2, i32 0, i32 1, i32 0, i32 0
  store i32* %1464, i32** %4105, align 8, !tbaa !97
  %4106 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1227", %"struct.Eigen::internal::evaluator.1227"* %59, i64 0, i32 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %4107 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %124, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  store i32* %4107, i32** %4106, align 8, !tbaa !94
  %4108 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1227", %"struct.Eigen::internal::evaluator.1227"* %59, i64 0, i32 0, i32 4
  store i64 6, i64* %4108, align 8, !tbaa !125
  %4109 = bitcast %"struct.Eigen::internal::evaluator.1236"* %60 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %4109) #11
  %4110 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1236", %"struct.Eigen::internal::evaluator.1236"* %60, i64 0, i32 0, i32 0
  %4111 = getelementptr inbounds %"class.Eigen::Matrix.1210", %"class.Eigen::Matrix.1210"* %63, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  store i32* %4111, i32** %4110, align 8, !tbaa !131
  %4112 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1241"* %61 to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %4112) #11
  %4113 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1241", %"class.Eigen::internal::generic_dense_assignment_kernel.1241"* %61, i64 0, i32 0
  store %"struct.Eigen::internal::evaluator.1236"* %60, %"struct.Eigen::internal::evaluator.1236"** %4113, align 8, !tbaa !11
  %4114 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1241", %"class.Eigen::internal::generic_dense_assignment_kernel.1241"* %61, i64 0, i32 1
  store %"struct.Eigen::internal::evaluator.1227"* %59, %"struct.Eigen::internal::evaluator.1227"** %4114, align 8, !tbaa !11
  %4115 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1241", %"class.Eigen::internal::generic_dense_assignment_kernel.1241"* %61, i64 0, i32 2
  store %"struct.Eigen::internal::assign_op.512"* %62, %"struct.Eigen::internal::assign_op.512"** %4115, align 8, !tbaa !11
  %4116 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1241", %"class.Eigen::internal::generic_dense_assignment_kernel.1241"* %61, i64 0, i32 3
  %4117 = bitcast %"class.Eigen::Matrix.1210"** %4116 to %"class.Eigen::PlainObjectBase.1211"**
  store %"class.Eigen::PlainObjectBase.1211"* %4098, %"class.Eigen::PlainObjectBase.1211"** %4117, align 8, !tbaa !11
  call void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi1ELi47ELi1ELi1ELi47EEEEENS3_INS_7ProductINS_9TransposeINS4_IiLi6ELi1ELi0ELi6ELi1EEEEENS8_INS4_IiLi47ELi6ELi0ELi47ELi6EEEEELi1EEEEENS0_9assign_opIiiEELi0EEELi3ELi0EE3runERSH_(%"class.Eigen::internal::generic_dense_assignment_kernel.1241"* nonnull dereferenceable(32) %61) #11
  call void @llvm.lifetime.end(i64 32, i8* nonnull %4112) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %4109) #11
  call void @llvm.lifetime.end(i64 72, i8* nonnull %4101) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %4100) #11
  %4118 = bitcast %"class.Eigen::Matrix.153"* %164 to <4 x i32>*
  %4119 = bitcast %"class.Eigen::Matrix.1210"* %63 to <4 x i32>*
  %4120 = load <4 x i32>, <4 x i32>* %4119, align 16, !tbaa !11
  %4121 = load <4 x i32>, <4 x i32>* %4118, align 16, !tbaa !11
  %4122 = add <4 x i32> %4121, %4120
  store <4 x i32> %4122, <4 x i32>* %4118, align 16, !tbaa !11
  %4123 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %164, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %4124 = getelementptr inbounds %"class.Eigen::Matrix.1210", %"class.Eigen::Matrix.1210"* %63, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %4125 = bitcast i32* %4124 to <4 x i32>*
  %4126 = load <4 x i32>, <4 x i32>* %4125, align 16, !tbaa !11
  %4127 = bitcast i32* %4123 to <4 x i32>*
  %4128 = load <4 x i32>, <4 x i32>* %4127, align 16, !tbaa !11
  %4129 = add <4 x i32> %4128, %4126
  store <4 x i32> %4129, <4 x i32>* %4127, align 16, !tbaa !11
  %4130 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %164, i64 0, i32 0, i32 0, i32 0, i32 0, i64 8
  %4131 = getelementptr inbounds %"class.Eigen::Matrix.1210", %"class.Eigen::Matrix.1210"* %63, i64 0, i32 0, i32 0, i32 0, i32 0, i64 8
  %4132 = bitcast i32* %4131 to <4 x i32>*
  %4133 = load <4 x i32>, <4 x i32>* %4132, align 16, !tbaa !11
  %4134 = bitcast i32* %4130 to <4 x i32>*
  %4135 = load <4 x i32>, <4 x i32>* %4134, align 16, !tbaa !11
  %4136 = add <4 x i32> %4135, %4133
  store <4 x i32> %4136, <4 x i32>* %4134, align 16, !tbaa !11
  %4137 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %164, i64 0, i32 0, i32 0, i32 0, i32 0, i64 12
  %4138 = getelementptr inbounds %"class.Eigen::Matrix.1210", %"class.Eigen::Matrix.1210"* %63, i64 0, i32 0, i32 0, i32 0, i32 0, i64 12
  %4139 = bitcast i32* %4138 to <4 x i32>*
  %4140 = load <4 x i32>, <4 x i32>* %4139, align 16, !tbaa !11
  %4141 = bitcast i32* %4137 to <4 x i32>*
  %4142 = load <4 x i32>, <4 x i32>* %4141, align 16, !tbaa !11
  %4143 = add <4 x i32> %4142, %4140
  store <4 x i32> %4143, <4 x i32>* %4141, align 16, !tbaa !11
  %4144 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %164, i64 0, i32 0, i32 0, i32 0, i32 0, i64 16
  %4145 = getelementptr inbounds %"class.Eigen::Matrix.1210", %"class.Eigen::Matrix.1210"* %63, i64 0, i32 0, i32 0, i32 0, i32 0, i64 16
  %4146 = bitcast i32* %4145 to <4 x i32>*
  %4147 = load <4 x i32>, <4 x i32>* %4146, align 16, !tbaa !11
  %4148 = bitcast i32* %4144 to <4 x i32>*
  %4149 = load <4 x i32>, <4 x i32>* %4148, align 16, !tbaa !11
  %4150 = add <4 x i32> %4149, %4147
  store <4 x i32> %4150, <4 x i32>* %4148, align 16, !tbaa !11
  %4151 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %164, i64 0, i32 0, i32 0, i32 0, i32 0, i64 20
  %4152 = getelementptr inbounds %"class.Eigen::Matrix.1210", %"class.Eigen::Matrix.1210"* %63, i64 0, i32 0, i32 0, i32 0, i32 0, i64 20
  %4153 = bitcast i32* %4152 to <4 x i32>*
  %4154 = load <4 x i32>, <4 x i32>* %4153, align 16, !tbaa !11
  %4155 = bitcast i32* %4151 to <4 x i32>*
  %4156 = load <4 x i32>, <4 x i32>* %4155, align 16, !tbaa !11
  %4157 = add <4 x i32> %4156, %4154
  store <4 x i32> %4157, <4 x i32>* %4155, align 16, !tbaa !11
  %4158 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %164, i64 0, i32 0, i32 0, i32 0, i32 0, i64 24
  %4159 = getelementptr inbounds %"class.Eigen::Matrix.1210", %"class.Eigen::Matrix.1210"* %63, i64 0, i32 0, i32 0, i32 0, i32 0, i64 24
  %4160 = bitcast i32* %4159 to <4 x i32>*
  %4161 = load <4 x i32>, <4 x i32>* %4160, align 16, !tbaa !11
  %4162 = bitcast i32* %4158 to <4 x i32>*
  %4163 = load <4 x i32>, <4 x i32>* %4162, align 16, !tbaa !11
  %4164 = add <4 x i32> %4163, %4161
  store <4 x i32> %4164, <4 x i32>* %4162, align 16, !tbaa !11
  %4165 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %164, i64 0, i32 0, i32 0, i32 0, i32 0, i64 28
  %4166 = getelementptr inbounds %"class.Eigen::Matrix.1210", %"class.Eigen::Matrix.1210"* %63, i64 0, i32 0, i32 0, i32 0, i32 0, i64 28
  %4167 = bitcast i32* %4166 to <4 x i32>*
  %4168 = load <4 x i32>, <4 x i32>* %4167, align 16, !tbaa !11
  %4169 = bitcast i32* %4165 to <4 x i32>*
  %4170 = load <4 x i32>, <4 x i32>* %4169, align 16, !tbaa !11
  %4171 = add <4 x i32> %4170, %4168
  store <4 x i32> %4171, <4 x i32>* %4169, align 16, !tbaa !11
  %4172 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %164, i64 0, i32 0, i32 0, i32 0, i32 0, i64 32
  %4173 = getelementptr inbounds %"class.Eigen::Matrix.1210", %"class.Eigen::Matrix.1210"* %63, i64 0, i32 0, i32 0, i32 0, i32 0, i64 32
  %4174 = bitcast i32* %4173 to <4 x i32>*
  %4175 = load <4 x i32>, <4 x i32>* %4174, align 16, !tbaa !11
  %4176 = bitcast i32* %4172 to <4 x i32>*
  %4177 = load <4 x i32>, <4 x i32>* %4176, align 16, !tbaa !11
  %4178 = add <4 x i32> %4177, %4175
  store <4 x i32> %4178, <4 x i32>* %4176, align 16, !tbaa !11
  %4179 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %164, i64 0, i32 0, i32 0, i32 0, i32 0, i64 36
  %4180 = getelementptr inbounds %"class.Eigen::Matrix.1210", %"class.Eigen::Matrix.1210"* %63, i64 0, i32 0, i32 0, i32 0, i32 0, i64 36
  %4181 = bitcast i32* %4180 to <4 x i32>*
  %4182 = load <4 x i32>, <4 x i32>* %4181, align 16, !tbaa !11
  %4183 = bitcast i32* %4179 to <4 x i32>*
  %4184 = load <4 x i32>, <4 x i32>* %4183, align 16, !tbaa !11
  %4185 = add <4 x i32> %4184, %4182
  store <4 x i32> %4185, <4 x i32>* %4183, align 16, !tbaa !11
  %4186 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %164, i64 0, i32 0, i32 0, i32 0, i32 0, i64 40
  %4187 = getelementptr inbounds %"class.Eigen::Matrix.1210", %"class.Eigen::Matrix.1210"* %63, i64 0, i32 0, i32 0, i32 0, i32 0, i64 40
  %4188 = bitcast i32* %4187 to <4 x i32>*
  %4189 = load <4 x i32>, <4 x i32>* %4188, align 16, !tbaa !11
  %4190 = bitcast i32* %4186 to <4 x i32>*
  %4191 = load <4 x i32>, <4 x i32>* %4190, align 16, !tbaa !11
  %4192 = add <4 x i32> %4191, %4189
  store <4 x i32> %4192, <4 x i32>* %4190, align 16, !tbaa !11
  %4193 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %164, i64 0, i32 0, i32 0, i32 0, i32 0, i64 44
  %4194 = getelementptr inbounds %"class.Eigen::Matrix.1210", %"class.Eigen::Matrix.1210"* %63, i64 0, i32 0, i32 0, i32 0, i32 0, i64 44
  %4195 = load i32, i32* %4194, align 16, !tbaa !33
  %4196 = load i32, i32* %4193, align 16, !tbaa !33
  %4197 = add nsw i32 %4196, %4195
  store i32 %4197, i32* %4193, align 16, !tbaa !33
  %4198 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %164, i64 0, i32 0, i32 0, i32 0, i32 0, i64 45
  %4199 = getelementptr inbounds %"class.Eigen::Matrix.1210", %"class.Eigen::Matrix.1210"* %63, i64 0, i32 0, i32 0, i32 0, i32 0, i64 45
  %4200 = load i32, i32* %4199, align 4, !tbaa !33
  %4201 = load i32, i32* %4198, align 4, !tbaa !33
  %4202 = add nsw i32 %4201, %4200
  store i32 %4202, i32* %4198, align 4, !tbaa !33
  %4203 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %164, i64 0, i32 0, i32 0, i32 0, i32 0, i64 46
  %4204 = getelementptr inbounds %"class.Eigen::Matrix.1210", %"class.Eigen::Matrix.1210"* %63, i64 0, i32 0, i32 0, i32 0, i32 0, i64 46
  %4205 = load i32, i32* %4204, align 8, !tbaa !33
  %4206 = load i32, i32* %4203, align 8, !tbaa !33
  %4207 = add nsw i32 %4206, %4205
  store i32 %4207, i32* %4203, align 8, !tbaa !33
  call void @llvm.lifetime.end(i64 188, i8* nonnull %4097) #11
  %4208 = bitcast %"class.Eigen::CwiseBinaryOp.220"* %187 to i8*
  call void @llvm.lifetime.start(i64 40, i8* nonnull %4208) #11
  %4209 = load <4 x i32>, <4 x i32>* %2518, align 16, !tbaa !11
  %4210 = mul <4 x i32> %4209, %4209
  %4211 = load <4 x i32>, <4 x i32>* %2522, align 16, !tbaa !11
  %4212 = mul <4 x i32> %4211, %4211
  %4213 = load <4 x i32>, <4 x i32>* %2526, align 16, !tbaa !11
  %4214 = mul <4 x i32> %4213, %4213
  %4215 = load <4 x i32>, <4 x i32>* %2530, align 16, !tbaa !11
  %4216 = mul <4 x i32> %4215, %4215
  %4217 = load <4 x i32>, <4 x i32>* %2534, align 16, !tbaa !11
  %4218 = mul <4 x i32> %4217, %4217
  %4219 = load <4 x i32>, <4 x i32>* %2538, align 16, !tbaa !11
  %4220 = mul <4 x i32> %4219, %4219
  %4221 = load <4 x i32>, <4 x i32>* %2542, align 16, !tbaa !11
  %4222 = mul <4 x i32> %4221, %4221
  %4223 = load <4 x i32>, <4 x i32>* %2546, align 16, !tbaa !11
  %4224 = mul <4 x i32> %4223, %4223
  %4225 = load <4 x i32>, <4 x i32>* %2550, align 16, !tbaa !11
  %4226 = mul <4 x i32> %4225, %4225
  %4227 = load <4 x i32>, <4 x i32>* %2554, align 16, !tbaa !11
  %4228 = mul <4 x i32> %4227, %4227
  %4229 = load <4 x i32>, <4 x i32>* %2558, align 16, !tbaa !11
  %4230 = mul <4 x i32> %4229, %4229
  %4231 = add <4 x i32> %4212, %4210
  %4232 = add <4 x i32> %4231, %4214
  %4233 = add <4 x i32> %4232, %4216
  %4234 = add <4 x i32> %4233, %4218
  %4235 = add <4 x i32> %4234, %4220
  %4236 = add <4 x i32> %4235, %4222
  %4237 = add <4 x i32> %4236, %4224
  %4238 = add <4 x i32> %4237, %4226
  %4239 = add <4 x i32> %4238, %4228
  %4240 = add <4 x i32> %4239, %4230
  %4241 = call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %4240, <4 x i32> %4240) #11
  %4242 = load i32, i32* %2572, align 16, !tbaa !33
  %4243 = load i32, i32* %2574, align 4, !tbaa !33
  %4244 = load i32, i32* %2576, align 8, !tbaa !33
  %4245 = load i64, i64* %367, align 8, !tbaa !37, !noalias !145
  %4246 = icmp slt i64 %4245, 0
  br i1 %4246, label %4247, label %4248, !prof !50

; <label>:4247:                                   ; preds = %4089
  call void @__assert_rtn(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__._ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEENS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEC2EllRKS3_, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.13, i64 0, i64 0), i32 74, i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.14, i64 0, i64 0)) #13, !noalias !145
  unreachable

; <label>:4248:                                   ; preds = %4089
  %4249 = mul nsw i32 %4242, %4242
  %4250 = call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %4241, <4 x i32> %4241) #11
  %4251 = extractelement <4 x i32> %4250, i32 0
  %4252 = mul nsw i32 %4243, %4243
  %4253 = mul nsw i32 %4244, %4244
  %4254 = add nuw i32 %4252, %4249
  %4255 = add i32 %4254, %4253
  %4256 = add i32 %4255, %4251
  %4257 = sitofp i32 %4256 to double
  %4258 = call double @sqrt(double %4257) #5
  %4259 = fptosi double %4258 to i32
  %4260 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %187, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.32"* %108, %"class.Eigen::Matrix.32"** %4260, align 8
  %4261 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %187, i64 0, i32 0, i32 1
  store %"class.Eigen::Matrix.153"* %146, %"class.Eigen::Matrix.153"** %4261, align 8
  %4262 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %187, i64 0, i32 1, i32 0, i32 0
  store i64 %4245, i64* %4262, align 8, !alias.scope !145
  %4263 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %187, i64 0, i32 1, i32 2, i32 0
  store i32 %4259, i32* %4263, align 4, !tbaa !51, !alias.scope !145
  %4264 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %58, i64 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start(i64 48, i8* nonnull %4264) #11
  %4265 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %187, i64 0, i32 0
  %4266 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %58, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS3_IiLi47ELi1ELi0ELi47ELi1EEELi0EEELi7ENS_10DenseShapeES7_iiEC2ERKS6_(%"struct.Eigen::internal::product_evaluator.706"* %4266, %"class.Eigen::Product.226"* nonnull dereferenceable(16) %4265) #11
  %4267 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %58, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %4268 = load i32, i32* %4263, align 4, !tbaa !51
  store i32 %4268, i32* %4267, align 8, !tbaa !51
  %4269 = load i64, i64* %4262, align 8, !tbaa !59
  %4270 = icmp eq i64 %4269, 18
  br i1 %4270, label %4272, label %4271

; <label>:4271:                                   ; preds = %4248
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__._ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEENS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES3_EEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.15, i64 0, i64 0), i32 710, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.29, i64 0, i64 0)) #13
  unreachable

; <label>:4272:                                   ; preds = %4248
  %4273 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %58, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %4274 = bitcast i32** %4273 to <4 x i32>**
  %4275 = load <4 x i32>*, <4 x i32>** %4274, align 8, !tbaa !61
  %4276 = load <4 x i32>, <4 x i32>* %4275, align 16, !tbaa !11
  %4277 = insertelement <4 x i32> undef, i32 %4268, i32 0
  %4278 = shufflevector <4 x i32> %4277, <4 x i32> undef, <4 x i32> zeroinitializer
  %4279 = mul <4 x i32> %4276, %4278
  %4280 = bitcast i32* %1135 to <4 x i32>*
  %4281 = load <4 x i32>, <4 x i32>* %4280, align 16, !tbaa !11
  %4282 = add <4 x i32> %4279, %4281
  store <4 x i32> %4282, <4 x i32>* %4280, align 16, !tbaa !11
  %4283 = load i32, i32* %4267, align 8, !tbaa !33
  %4284 = load i32*, i32** %4273, align 8, !tbaa !61
  %4285 = getelementptr inbounds i32, i32* %4284, i64 4
  %4286 = bitcast i32* %4285 to <4 x i32>*
  %4287 = load <4 x i32>, <4 x i32>* %4286, align 16, !tbaa !11
  %4288 = insertelement <4 x i32> undef, i32 %4283, i32 0
  %4289 = shufflevector <4 x i32> %4288, <4 x i32> undef, <4 x i32> zeroinitializer
  %4290 = mul <4 x i32> %4287, %4289
  %4291 = bitcast i32* %1147 to <4 x i32>*
  %4292 = load <4 x i32>, <4 x i32>* %4291, align 16, !tbaa !11
  %4293 = add <4 x i32> %4290, %4292
  store <4 x i32> %4293, <4 x i32>* %4291, align 16, !tbaa !11
  %4294 = load i32, i32* %4267, align 8, !tbaa !33
  %4295 = getelementptr inbounds i32, i32* %4284, i64 8
  %4296 = bitcast i32* %4295 to <4 x i32>*
  %4297 = load <4 x i32>, <4 x i32>* %4296, align 16, !tbaa !11
  %4298 = insertelement <4 x i32> undef, i32 %4294, i32 0
  %4299 = shufflevector <4 x i32> %4298, <4 x i32> undef, <4 x i32> zeroinitializer
  %4300 = mul <4 x i32> %4297, %4299
  %4301 = bitcast i32* %1159 to <4 x i32>*
  %4302 = load <4 x i32>, <4 x i32>* %4301, align 16, !tbaa !11
  %4303 = add <4 x i32> %4300, %4302
  store <4 x i32> %4303, <4 x i32>* %4301, align 16, !tbaa !11
  %4304 = load i32, i32* %4267, align 8, !tbaa !33
  %4305 = getelementptr inbounds i32, i32* %4284, i64 12
  %4306 = bitcast i32* %4305 to <4 x i32>*
  %4307 = load <4 x i32>, <4 x i32>* %4306, align 16, !tbaa !11
  %4308 = insertelement <4 x i32> undef, i32 %4304, i32 0
  %4309 = shufflevector <4 x i32> %4308, <4 x i32> undef, <4 x i32> zeroinitializer
  %4310 = mul <4 x i32> %4307, %4309
  %4311 = bitcast i32* %1171 to <4 x i32>*
  %4312 = load <4 x i32>, <4 x i32>* %4311, align 16, !tbaa !11
  %4313 = add <4 x i32> %4310, %4312
  store <4 x i32> %4313, <4 x i32>* %4311, align 16, !tbaa !11
  %4314 = getelementptr inbounds i32, i32* %4284, i64 16
  %4315 = load i32, i32* %4314, align 4, !tbaa !33
  %4316 = mul nsw i32 %4315, %4304
  %4317 = load i32, i32* %1183, align 4, !tbaa !33
  %4318 = add nsw i32 %4317, %4316
  store i32 %4318, i32* %1183, align 4, !tbaa !33
  %4319 = getelementptr inbounds i32, i32* %4284, i64 17
  %4320 = load i32, i32* %4319, align 4, !tbaa !33
  %4321 = mul nsw i32 %4320, %4304
  %4322 = load i32, i32* %1186, align 4, !tbaa !33
  %4323 = add nsw i32 %4322, %4321
  store i32 %4323, i32* %1186, align 4, !tbaa !33
  %4324 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %58, i64 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %4325 = load i32*, i32** %4324, align 8, !tbaa !44
  %4326 = icmp eq i32* %4325, null
  br i1 %4326, label %4331, label %4327

; <label>:4327:                                   ; preds = %4272
  %4328 = getelementptr inbounds i32, i32* %4325, i64 -2
  %4329 = bitcast i32* %4328 to i8**
  %4330 = load i8*, i8** %4329, align 8, !tbaa !29
  call void @free(i8* %4330) #11
  br label %4331

; <label>:4331:                                   ; preds = %4272, %4327
  call void @llvm.lifetime.end(i64 48, i8* nonnull %4264) #11
  call void @llvm.lifetime.end(i64 40, i8* nonnull %4208) #11
  %4332 = bitcast %"class.Eigen::CwiseBinaryOp.220"* %188 to i8*
  call void @llvm.lifetime.start(i64 40, i8* nonnull %4332) #11
  %4333 = load <4 x i32>, <4 x i32>* %2518, align 16, !tbaa !11
  %4334 = mul <4 x i32> %4333, %4333
  %4335 = load <4 x i32>, <4 x i32>* %2522, align 16, !tbaa !11
  %4336 = mul <4 x i32> %4335, %4335
  %4337 = load <4 x i32>, <4 x i32>* %2526, align 16, !tbaa !11
  %4338 = mul <4 x i32> %4337, %4337
  %4339 = load <4 x i32>, <4 x i32>* %2530, align 16, !tbaa !11
  %4340 = mul <4 x i32> %4339, %4339
  %4341 = load <4 x i32>, <4 x i32>* %2534, align 16, !tbaa !11
  %4342 = mul <4 x i32> %4341, %4341
  %4343 = load <4 x i32>, <4 x i32>* %2538, align 16, !tbaa !11
  %4344 = mul <4 x i32> %4343, %4343
  %4345 = load <4 x i32>, <4 x i32>* %2542, align 16, !tbaa !11
  %4346 = mul <4 x i32> %4345, %4345
  %4347 = load <4 x i32>, <4 x i32>* %2546, align 16, !tbaa !11
  %4348 = mul <4 x i32> %4347, %4347
  %4349 = load <4 x i32>, <4 x i32>* %2550, align 16, !tbaa !11
  %4350 = mul <4 x i32> %4349, %4349
  %4351 = load <4 x i32>, <4 x i32>* %2554, align 16, !tbaa !11
  %4352 = mul <4 x i32> %4351, %4351
  %4353 = load <4 x i32>, <4 x i32>* %2558, align 16, !tbaa !11
  %4354 = mul <4 x i32> %4353, %4353
  %4355 = add <4 x i32> %4336, %4334
  %4356 = add <4 x i32> %4355, %4338
  %4357 = add <4 x i32> %4356, %4340
  %4358 = add <4 x i32> %4357, %4342
  %4359 = add <4 x i32> %4358, %4344
  %4360 = add <4 x i32> %4359, %4346
  %4361 = add <4 x i32> %4360, %4348
  %4362 = add <4 x i32> %4361, %4350
  %4363 = add <4 x i32> %4362, %4352
  %4364 = add <4 x i32> %4363, %4354
  %4365 = call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %4364, <4 x i32> %4364) #11
  %4366 = load i32, i32* %2572, align 16, !tbaa !33
  %4367 = load i32, i32* %2574, align 4, !tbaa !33
  %4368 = load i32, i32* %2576, align 8, !tbaa !33
  %4369 = load i64, i64* %345, align 8, !tbaa !37, !noalias !148
  %4370 = icmp slt i64 %4369, 0
  br i1 %4370, label %4371, label %4372, !prof !50

; <label>:4371:                                   ; preds = %4331
  call void @__assert_rtn(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__._ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEENS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEC2EllRKS3_, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.13, i64 0, i64 0), i32 74, i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.14, i64 0, i64 0)) #13, !noalias !148
  unreachable

; <label>:4372:                                   ; preds = %4331
  %4373 = mul nsw i32 %4366, %4366
  %4374 = call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %4365, <4 x i32> %4365) #11
  %4375 = extractelement <4 x i32> %4374, i32 0
  %4376 = mul nsw i32 %4367, %4367
  %4377 = mul nsw i32 %4368, %4368
  %4378 = add nuw i32 %4376, %4373
  %4379 = add i32 %4378, %4377
  %4380 = add i32 %4379, %4375
  %4381 = sitofp i32 %4380 to double
  %4382 = call double @sqrt(double %4381) #5
  %4383 = fptosi double %4382 to i32
  %4384 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %188, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.32"* %107, %"class.Eigen::Matrix.32"** %4384, align 8
  %4385 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %188, i64 0, i32 0, i32 1
  store %"class.Eigen::Matrix.153"* %148, %"class.Eigen::Matrix.153"** %4385, align 8
  %4386 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %188, i64 0, i32 1, i32 0, i32 0
  store i64 %4369, i64* %4386, align 8, !alias.scope !148
  %4387 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %188, i64 0, i32 1, i32 2, i32 0
  store i32 %4383, i32* %4387, align 4, !tbaa !51, !alias.scope !148
  %4388 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %57, i64 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start(i64 48, i8* nonnull %4388) #11
  %4389 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %188, i64 0, i32 0
  %4390 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %57, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS3_IiLi47ELi1ELi0ELi47ELi1EEELi0EEELi7ENS_10DenseShapeES7_iiEC2ERKS6_(%"struct.Eigen::internal::product_evaluator.706"* %4390, %"class.Eigen::Product.226"* nonnull dereferenceable(16) %4389) #11
  %4391 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %57, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %4392 = load i32, i32* %4387, align 4, !tbaa !51
  store i32 %4392, i32* %4391, align 8, !tbaa !51
  %4393 = load i64, i64* %1257, align 8, !tbaa !46
  %4394 = load i64, i64* %4386, align 8, !tbaa !59
  %4395 = icmp eq i64 %4393, %4394
  br i1 %4395, label %4397, label %4396

; <label>:4396:                                   ; preds = %4372
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__._ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEENS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES3_EEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.15, i64 0, i64 0), i32 710, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.29, i64 0, i64 0)) #13
  unreachable

; <label>:4397:                                   ; preds = %4372
  %4398 = load i64, i64* %2263, align 8, !tbaa !44
  %4399 = sdiv i64 %4393, 4
  %4400 = shl nsw i64 %4399, 2
  %4401 = icmp sgt i64 %4393, 3
  br i1 %4401, label %4402, label %4447

; <label>:4402:                                   ; preds = %4397
  %4403 = inttoptr i64 %4398 to i32*
  %4404 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %57, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %4405 = bitcast i32** %4404 to <4 x i32>**
  %4406 = load <4 x i32>*, <4 x i32>** %4405, align 8, !tbaa !61
  %4407 = load <4 x i32>, <4 x i32>* %4406, align 16, !tbaa !11
  %4408 = insertelement <4 x i32> undef, i32 %4392, i32 0
  %4409 = shufflevector <4 x i32> %4408, <4 x i32> undef, <4 x i32> zeroinitializer
  %4410 = mul <4 x i32> %4407, %4409
  %4411 = inttoptr i64 %4398 to <4 x i32>*
  %4412 = load <4 x i32>, <4 x i32>* %4411, align 16, !tbaa !11
  %4413 = add <4 x i32> %4410, %4412
  store <4 x i32> %4413, <4 x i32>* %4411, align 16, !tbaa !11
  %4414 = icmp sgt i64 %4400, 4
  br i1 %4414, label %4415, label %4447

; <label>:4415:                                   ; preds = %4402
  %4416 = add i64 %4400, -5
  %4417 = lshr i64 %4416, 2
  %4418 = add nuw nsw i64 %4417, 1
  %4419 = and i64 %4418, 3
  %4420 = icmp eq i64 %4419, 0
  br i1 %4420, label %4441, label %4421

; <label>:4421:                                   ; preds = %4415
  br label %4422

; <label>:4422:                                   ; preds = %4422, %4421
  %4423 = phi i64 [ %4437, %4422 ], [ 4, %4421 ]
  %4424 = phi i64 [ %4438, %4422 ], [ %4419, %4421 ]
  %4425 = load i32, i32* %4391, align 8, !tbaa !33
  %4426 = getelementptr inbounds i32, i32* %4403, i64 %4423
  %4427 = load i32*, i32** %4404, align 8, !tbaa !61
  %4428 = getelementptr inbounds i32, i32* %4427, i64 %4423
  %4429 = bitcast i32* %4428 to <4 x i32>*
  %4430 = load <4 x i32>, <4 x i32>* %4429, align 16, !tbaa !11
  %4431 = insertelement <4 x i32> undef, i32 %4425, i32 0
  %4432 = shufflevector <4 x i32> %4431, <4 x i32> undef, <4 x i32> zeroinitializer
  %4433 = mul <4 x i32> %4430, %4432
  %4434 = bitcast i32* %4426 to <4 x i32>*
  %4435 = load <4 x i32>, <4 x i32>* %4434, align 16, !tbaa !11
  %4436 = add <4 x i32> %4433, %4435
  store <4 x i32> %4436, <4 x i32>* %4434, align 16, !tbaa !11
  %4437 = add nuw nsw i64 %4423, 4
  %4438 = add i64 %4424, -1
  %4439 = icmp eq i64 %4438, 0
  br i1 %4439, label %4440, label %4422, !llvm.loop !151

; <label>:4440:                                   ; preds = %4422
  br label %4441

; <label>:4441:                                   ; preds = %4415, %4440
  %4442 = phi i64 [ 4, %4415 ], [ %4437, %4440 ]
  %4443 = icmp ult i64 %4416, 12
  br i1 %4443, label %4446, label %4444

; <label>:4444:                                   ; preds = %4441
  br label %4585

; <label>:4445:                                   ; preds = %4585
  br label %4446

; <label>:4446:                                   ; preds = %4441, %4445
  br label %4447

; <label>:4447:                                   ; preds = %4446, %4402, %4397
  %4448 = icmp sgt i64 %4393, %4400
  br i1 %4448, label %4449, label %4642

; <label>:4449:                                   ; preds = %4447
  %4450 = inttoptr i64 %4398 to i32*
  %4451 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %57, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %4452 = load i32*, i32** %4451, align 8, !tbaa !61
  %4453 = sub i64 %4393, %4400
  %4454 = icmp ult i64 %4453, 32
  br i1 %4454, label %4524, label %4455

; <label>:4455:                                   ; preds = %4449
  %4456 = and i64 %4453, -32
  %4457 = icmp eq i64 %4456, 0
  br i1 %4457, label %4524, label %4458

; <label>:4458:                                   ; preds = %4455
  %4459 = getelementptr i32, i32* %4450, i64 %4400
  %4460 = getelementptr i32, i32* %4450, i64 %4393
  %4461 = getelementptr i32, i32* %4452, i64 %4400
  %4462 = getelementptr i32, i32* %4452, i64 %4393
  %4463 = icmp ult i32* %4459, %4391
  %4464 = icmp ult i32* %4391, %4460
  %4465 = and i1 %4463, %4464
  %4466 = icmp ult i32* %4459, %4462
  %4467 = icmp ult i32* %4461, %4460
  %4468 = and i1 %4466, %4467
  %4469 = or i1 %4465, %4468
  %4470 = add i64 %4400, %4456
  br i1 %4469, label %4524, label %4471

; <label>:4471:                                   ; preds = %4458
  %4472 = load i32, i32* %4391, align 8, !tbaa !51, !alias.scope !152
  %4473 = insertelement <8 x i32> undef, i32 %4472, i32 0
  %4474 = shufflevector <8 x i32> %4473, <8 x i32> undef, <8 x i32> zeroinitializer
  %4475 = insertelement <8 x i32> undef, i32 %4472, i32 0
  %4476 = shufflevector <8 x i32> %4475, <8 x i32> undef, <8 x i32> zeroinitializer
  %4477 = insertelement <8 x i32> undef, i32 %4472, i32 0
  %4478 = shufflevector <8 x i32> %4477, <8 x i32> undef, <8 x i32> zeroinitializer
  %4479 = insertelement <8 x i32> undef, i32 %4472, i32 0
  %4480 = shufflevector <8 x i32> %4479, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %4481

; <label>:4481:                                   ; preds = %4471, %4481
  %4482 = phi i64 [ %4520, %4481 ], [ 0, %4471 ]
  %4483 = add i64 %4400, %4482
  %4484 = getelementptr inbounds i32, i32* %4450, i64 %4483
  %4485 = getelementptr inbounds i32, i32* %4452, i64 %4483
  %4486 = bitcast i32* %4485 to <8 x i32>*
  %4487 = load <8 x i32>, <8 x i32>* %4486, align 4, !tbaa !33, !alias.scope !155
  %4488 = getelementptr i32, i32* %4485, i64 8
  %4489 = bitcast i32* %4488 to <8 x i32>*
  %4490 = load <8 x i32>, <8 x i32>* %4489, align 4, !tbaa !33, !alias.scope !155
  %4491 = getelementptr i32, i32* %4485, i64 16
  %4492 = bitcast i32* %4491 to <8 x i32>*
  %4493 = load <8 x i32>, <8 x i32>* %4492, align 4, !tbaa !33, !alias.scope !155
  %4494 = getelementptr i32, i32* %4485, i64 24
  %4495 = bitcast i32* %4494 to <8 x i32>*
  %4496 = load <8 x i32>, <8 x i32>* %4495, align 4, !tbaa !33, !alias.scope !155
  %4497 = mul nsw <8 x i32> %4487, %4474
  %4498 = mul nsw <8 x i32> %4490, %4476
  %4499 = mul nsw <8 x i32> %4493, %4478
  %4500 = mul nsw <8 x i32> %4496, %4480
  %4501 = bitcast i32* %4484 to <8 x i32>*
  %4502 = load <8 x i32>, <8 x i32>* %4501, align 4, !tbaa !33, !alias.scope !157, !noalias !159
  %4503 = getelementptr i32, i32* %4484, i64 8
  %4504 = bitcast i32* %4503 to <8 x i32>*
  %4505 = load <8 x i32>, <8 x i32>* %4504, align 4, !tbaa !33, !alias.scope !157, !noalias !159
  %4506 = getelementptr i32, i32* %4484, i64 16
  %4507 = bitcast i32* %4506 to <8 x i32>*
  %4508 = load <8 x i32>, <8 x i32>* %4507, align 4, !tbaa !33, !alias.scope !157, !noalias !159
  %4509 = getelementptr i32, i32* %4484, i64 24
  %4510 = bitcast i32* %4509 to <8 x i32>*
  %4511 = load <8 x i32>, <8 x i32>* %4510, align 4, !tbaa !33, !alias.scope !157, !noalias !159
  %4512 = add nsw <8 x i32> %4502, %4497
  %4513 = add nsw <8 x i32> %4505, %4498
  %4514 = add nsw <8 x i32> %4508, %4499
  %4515 = add nsw <8 x i32> %4511, %4500
  %4516 = bitcast i32* %4484 to <8 x i32>*
  store <8 x i32> %4512, <8 x i32>* %4516, align 4, !tbaa !33, !alias.scope !157, !noalias !159
  %4517 = bitcast i32* %4503 to <8 x i32>*
  store <8 x i32> %4513, <8 x i32>* %4517, align 4, !tbaa !33, !alias.scope !157, !noalias !159
  %4518 = bitcast i32* %4506 to <8 x i32>*
  store <8 x i32> %4514, <8 x i32>* %4518, align 4, !tbaa !33, !alias.scope !157, !noalias !159
  %4519 = bitcast i32* %4509 to <8 x i32>*
  store <8 x i32> %4515, <8 x i32>* %4519, align 4, !tbaa !33, !alias.scope !157, !noalias !159
  %4520 = add i64 %4482, 32
  %4521 = icmp eq i64 %4520, %4456
  br i1 %4521, label %4522, label %4481, !llvm.loop !160

; <label>:4522:                                   ; preds = %4481
  %4523 = icmp eq i64 %4453, %4456
  br i1 %4523, label %4642, label %4524

; <label>:4524:                                   ; preds = %4522, %4458, %4455, %4449
  %4525 = phi i64 [ %4400, %4458 ], [ %4400, %4455 ], [ %4400, %4449 ], [ %4470, %4522 ]
  %4526 = sub i64 %4393, %4525
  %4527 = add i64 %4393, -1
  %4528 = sub i64 %4527, %4525
  %4529 = and i64 %4526, 3
  %4530 = icmp eq i64 %4529, 0
  br i1 %4530, label %4546, label %4531

; <label>:4531:                                   ; preds = %4524
  br label %4532

; <label>:4532:                                   ; preds = %4532, %4531
  %4533 = phi i64 [ %4542, %4532 ], [ %4525, %4531 ]
  %4534 = phi i64 [ %4543, %4532 ], [ %4529, %4531 ]
  %4535 = getelementptr inbounds i32, i32* %4450, i64 %4533
  %4536 = getelementptr inbounds i32, i32* %4452, i64 %4533
  %4537 = load i32, i32* %4391, align 8, !tbaa !51
  %4538 = load i32, i32* %4536, align 4, !tbaa !33
  %4539 = mul nsw i32 %4538, %4537
  %4540 = load i32, i32* %4535, align 4, !tbaa !33
  %4541 = add nsw i32 %4540, %4539
  store i32 %4541, i32* %4535, align 4, !tbaa !33
  %4542 = add nsw i64 %4533, 1
  %4543 = add i64 %4534, -1
  %4544 = icmp eq i64 %4543, 0
  br i1 %4544, label %4545, label %4532, !llvm.loop !161

; <label>:4545:                                   ; preds = %4532
  br label %4546

; <label>:4546:                                   ; preds = %4524, %4545
  %4547 = phi i64 [ %4525, %4524 ], [ %4542, %4545 ]
  %4548 = icmp ult i64 %4528, 3
  br i1 %4548, label %4641, label %4549

; <label>:4549:                                   ; preds = %4546
  br label %4550

; <label>:4550:                                   ; preds = %4550, %4549
  %4551 = phi i64 [ %4547, %4549 ], [ %4583, %4550 ]
  %4552 = getelementptr inbounds i32, i32* %4450, i64 %4551
  %4553 = getelementptr inbounds i32, i32* %4452, i64 %4551
  %4554 = load i32, i32* %4391, align 8, !tbaa !51
  %4555 = load i32, i32* %4553, align 4, !tbaa !33
  %4556 = mul nsw i32 %4555, %4554
  %4557 = load i32, i32* %4552, align 4, !tbaa !33
  %4558 = add nsw i32 %4557, %4556
  store i32 %4558, i32* %4552, align 4, !tbaa !33
  %4559 = add nsw i64 %4551, 1
  %4560 = getelementptr inbounds i32, i32* %4450, i64 %4559
  %4561 = getelementptr inbounds i32, i32* %4452, i64 %4559
  %4562 = load i32, i32* %4391, align 8, !tbaa !51
  %4563 = load i32, i32* %4561, align 4, !tbaa !33
  %4564 = mul nsw i32 %4563, %4562
  %4565 = load i32, i32* %4560, align 4, !tbaa !33
  %4566 = add nsw i32 %4565, %4564
  store i32 %4566, i32* %4560, align 4, !tbaa !33
  %4567 = add nsw i64 %4551, 2
  %4568 = getelementptr inbounds i32, i32* %4450, i64 %4567
  %4569 = getelementptr inbounds i32, i32* %4452, i64 %4567
  %4570 = load i32, i32* %4391, align 8, !tbaa !51
  %4571 = load i32, i32* %4569, align 4, !tbaa !33
  %4572 = mul nsw i32 %4571, %4570
  %4573 = load i32, i32* %4568, align 4, !tbaa !33
  %4574 = add nsw i32 %4573, %4572
  store i32 %4574, i32* %4568, align 4, !tbaa !33
  %4575 = add nsw i64 %4551, 3
  %4576 = getelementptr inbounds i32, i32* %4450, i64 %4575
  %4577 = getelementptr inbounds i32, i32* %4452, i64 %4575
  %4578 = load i32, i32* %4391, align 8, !tbaa !51
  %4579 = load i32, i32* %4577, align 4, !tbaa !33
  %4580 = mul nsw i32 %4579, %4578
  %4581 = load i32, i32* %4576, align 4, !tbaa !33
  %4582 = add nsw i32 %4581, %4580
  store i32 %4582, i32* %4576, align 4, !tbaa !33
  %4583 = add nsw i64 %4551, 4
  %4584 = icmp eq i64 %4583, %4393
  br i1 %4584, label %4640, label %4550, !llvm.loop !162

; <label>:4585:                                   ; preds = %4585, %4444
  %4586 = phi i64 [ %4442, %4444 ], [ %4638, %4585 ]
  %4587 = load i32, i32* %4391, align 8, !tbaa !33
  %4588 = getelementptr inbounds i32, i32* %4403, i64 %4586
  %4589 = load i32*, i32** %4404, align 8, !tbaa !61
  %4590 = getelementptr inbounds i32, i32* %4589, i64 %4586
  %4591 = bitcast i32* %4590 to <4 x i32>*
  %4592 = load <4 x i32>, <4 x i32>* %4591, align 16, !tbaa !11
  %4593 = insertelement <4 x i32> undef, i32 %4587, i32 0
  %4594 = shufflevector <4 x i32> %4593, <4 x i32> undef, <4 x i32> zeroinitializer
  %4595 = mul <4 x i32> %4592, %4594
  %4596 = bitcast i32* %4588 to <4 x i32>*
  %4597 = load <4 x i32>, <4 x i32>* %4596, align 16, !tbaa !11
  %4598 = add <4 x i32> %4595, %4597
  store <4 x i32> %4598, <4 x i32>* %4596, align 16, !tbaa !11
  %4599 = add nuw nsw i64 %4586, 4
  %4600 = load i32, i32* %4391, align 8, !tbaa !33
  %4601 = getelementptr inbounds i32, i32* %4403, i64 %4599
  %4602 = load i32*, i32** %4404, align 8, !tbaa !61
  %4603 = getelementptr inbounds i32, i32* %4602, i64 %4599
  %4604 = bitcast i32* %4603 to <4 x i32>*
  %4605 = load <4 x i32>, <4 x i32>* %4604, align 16, !tbaa !11
  %4606 = insertelement <4 x i32> undef, i32 %4600, i32 0
  %4607 = shufflevector <4 x i32> %4606, <4 x i32> undef, <4 x i32> zeroinitializer
  %4608 = mul <4 x i32> %4605, %4607
  %4609 = bitcast i32* %4601 to <4 x i32>*
  %4610 = load <4 x i32>, <4 x i32>* %4609, align 16, !tbaa !11
  %4611 = add <4 x i32> %4608, %4610
  store <4 x i32> %4611, <4 x i32>* %4609, align 16, !tbaa !11
  %4612 = add nsw i64 %4586, 8
  %4613 = load i32, i32* %4391, align 8, !tbaa !33
  %4614 = getelementptr inbounds i32, i32* %4403, i64 %4612
  %4615 = load i32*, i32** %4404, align 8, !tbaa !61
  %4616 = getelementptr inbounds i32, i32* %4615, i64 %4612
  %4617 = bitcast i32* %4616 to <4 x i32>*
  %4618 = load <4 x i32>, <4 x i32>* %4617, align 16, !tbaa !11
  %4619 = insertelement <4 x i32> undef, i32 %4613, i32 0
  %4620 = shufflevector <4 x i32> %4619, <4 x i32> undef, <4 x i32> zeroinitializer
  %4621 = mul <4 x i32> %4618, %4620
  %4622 = bitcast i32* %4614 to <4 x i32>*
  %4623 = load <4 x i32>, <4 x i32>* %4622, align 16, !tbaa !11
  %4624 = add <4 x i32> %4621, %4623
  store <4 x i32> %4624, <4 x i32>* %4622, align 16, !tbaa !11
  %4625 = add nsw i64 %4586, 12
  %4626 = load i32, i32* %4391, align 8, !tbaa !33
  %4627 = getelementptr inbounds i32, i32* %4403, i64 %4625
  %4628 = load i32*, i32** %4404, align 8, !tbaa !61
  %4629 = getelementptr inbounds i32, i32* %4628, i64 %4625
  %4630 = bitcast i32* %4629 to <4 x i32>*
  %4631 = load <4 x i32>, <4 x i32>* %4630, align 16, !tbaa !11
  %4632 = insertelement <4 x i32> undef, i32 %4626, i32 0
  %4633 = shufflevector <4 x i32> %4632, <4 x i32> undef, <4 x i32> zeroinitializer
  %4634 = mul <4 x i32> %4631, %4633
  %4635 = bitcast i32* %4627 to <4 x i32>*
  %4636 = load <4 x i32>, <4 x i32>* %4635, align 16, !tbaa !11
  %4637 = add <4 x i32> %4634, %4636
  store <4 x i32> %4637, <4 x i32>* %4635, align 16, !tbaa !11
  %4638 = add nsw i64 %4586, 16
  %4639 = icmp slt i64 %4638, %4400
  br i1 %4639, label %4585, label %4445

; <label>:4640:                                   ; preds = %4550
  br label %4641

; <label>:4641:                                   ; preds = %4546, %4640
  br label %4642

; <label>:4642:                                   ; preds = %4641, %4522, %4447
  %4643 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %57, i64 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %4644 = load i32*, i32** %4643, align 8, !tbaa !44
  %4645 = icmp eq i32* %4644, null
  br i1 %4645, label %4650, label %4646

; <label>:4646:                                   ; preds = %4642
  %4647 = getelementptr inbounds i32, i32* %4644, i64 -2
  %4648 = bitcast i32* %4647 to i8**
  %4649 = load i8*, i8** %4648, align 8, !tbaa !29
  call void @free(i8* %4649) #11
  br label %4650

; <label>:4650:                                   ; preds = %4642, %4646
  call void @llvm.lifetime.end(i64 48, i8* nonnull %4388) #11
  call void @llvm.lifetime.end(i64 40, i8* nonnull %4332) #11
  %4651 = getelementptr inbounds %"class.Eigen::Product.369", %"class.Eigen::Product.369"* %189, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start(i64 40, i8* nonnull %4651) #11
  %4652 = load <4 x i32>, <4 x i32>* %3762, align 16, !tbaa !11
  %4653 = mul <4 x i32> %4652, %4652
  %4654 = load <4 x i32>, <4 x i32>* %3766, align 16, !tbaa !11
  %4655 = mul <4 x i32> %4654, %4654
  %4656 = load <4 x i32>, <4 x i32>* %3770, align 16, !tbaa !11
  %4657 = mul <4 x i32> %4656, %4656
  %4658 = load <4 x i32>, <4 x i32>* %3774, align 16, !tbaa !11
  %4659 = mul <4 x i32> %4658, %4658
  %4660 = load <4 x i32>, <4 x i32>* %3778, align 16, !tbaa !11
  %4661 = mul <4 x i32> %4660, %4660
  %4662 = load <4 x i32>, <4 x i32>* %3782, align 16, !tbaa !11
  %4663 = mul <4 x i32> %4662, %4662
  %4664 = load <4 x i32>, <4 x i32>* %3786, align 16, !tbaa !11
  %4665 = mul <4 x i32> %4664, %4664
  %4666 = load <4 x i32>, <4 x i32>* %3790, align 16, !tbaa !11
  %4667 = mul <4 x i32> %4666, %4666
  %4668 = load <4 x i32>, <4 x i32>* %3794, align 16, !tbaa !11
  %4669 = mul <4 x i32> %4668, %4668
  %4670 = load <4 x i32>, <4 x i32>* %3798, align 16, !tbaa !11
  %4671 = mul <4 x i32> %4670, %4670
  %4672 = load <4 x i32>, <4 x i32>* %3802, align 16, !tbaa !11
  %4673 = mul <4 x i32> %4672, %4672
  %4674 = add <4 x i32> %4655, %4653
  %4675 = add <4 x i32> %4674, %4657
  %4676 = add <4 x i32> %4675, %4659
  %4677 = add <4 x i32> %4676, %4661
  %4678 = add <4 x i32> %4677, %4663
  %4679 = add <4 x i32> %4678, %4665
  %4680 = add <4 x i32> %4679, %4667
  %4681 = add <4 x i32> %4680, %4669
  %4682 = add <4 x i32> %4681, %4671
  %4683 = add <4 x i32> %4682, %4673
  %4684 = call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %4683, <4 x i32> %4683) #11
  %4685 = call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %4684, <4 x i32> %4684) #11
  %4686 = extractelement <4 x i32> %4685, i32 0
  %4687 = load i32, i32* %3816, align 16, !tbaa !33
  %4688 = mul nsw i32 %4687, %4687
  %4689 = load i32, i32* %3818, align 4, !tbaa !33
  %4690 = mul nsw i32 %4689, %4689
  %4691 = load i32, i32* %3820, align 8, !tbaa !33
  %4692 = mul nsw i32 %4691, %4691
  %4693 = add i32 %4688, %4686
  %4694 = add i32 %4693, %4690
  %4695 = add i32 %4694, %4692
  %4696 = getelementptr inbounds %"class.Eigen::Product.369", %"class.Eigen::Product.369"* %189, i64 0, i32 0, i32 1, i32 2, i32 0
  store i32 %4695, i32* %4696, align 4, !tbaa !51, !alias.scope !163
  %4697 = getelementptr inbounds %"class.Eigen::Product.369", %"class.Eigen::Product.369"* %189, i64 0, i32 0, i32 3
  %4698 = bitcast %"class.Eigen::Matrix.77"** %4697 to i64*
  store i64 %2870, i64* %4698, align 8, !tbaa !11, !alias.scope !163
  %4699 = getelementptr inbounds %"class.Eigen::Product.369", %"class.Eigen::Product.369"* %189, i64 0, i32 1
  %4700 = bitcast %"class.Eigen::Transpose.331"* %4699 to i64*
  store i64 %3592, i64* %4700, align 8, !alias.scope !163
  %4701 = getelementptr inbounds %"struct.Eigen::internal::add_assign_op", %"struct.Eigen::internal::add_assign_op"* %56, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %4701) #11
  call void @_ZN5Eigen8internal15call_assignmentINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS2_IiLi47ELi6ELi0ELi47ELi6EEEEESC_EENS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS0_13add_assign_opIiiEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsr25evaluator_assume_aliasingISO_EE5valueEPvE4typeE(%"class.Eigen::Matrix.48"* nonnull dereferenceable(16) %117, %"class.Eigen::Product.369"* nonnull dereferenceable(40) %189, %"struct.Eigen::internal::add_assign_op"* nonnull dereferenceable(1) %56, i8* null) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %4701) #11
  call void @llvm.lifetime.end(i64 40, i8* nonnull %4651) #11
  %4702 = bitcast %"class.Eigen::CwiseBinaryOp.220"* %190 to i8*
  call void @llvm.lifetime.start(i64 40, i8* nonnull %4702) #11
  %4703 = load <4 x i32>, <4 x i32>* %2174, align 16, !tbaa !11
  %4704 = mul <4 x i32> %4703, %4703
  %4705 = load <4 x i32>, <4 x i32>* %2178, align 16, !tbaa !11
  %4706 = mul <4 x i32> %4705, %4705
  %4707 = load <4 x i32>, <4 x i32>* %2182, align 16, !tbaa !11
  %4708 = mul <4 x i32> %4707, %4707
  %4709 = load <4 x i32>, <4 x i32>* %2186, align 16, !tbaa !11
  %4710 = mul <4 x i32> %4709, %4709
  %4711 = load <4 x i32>, <4 x i32>* %2190, align 16, !tbaa !11
  %4712 = mul <4 x i32> %4711, %4711
  %4713 = load <4 x i32>, <4 x i32>* %2194, align 16, !tbaa !11
  %4714 = mul <4 x i32> %4713, %4713
  %4715 = load <4 x i32>, <4 x i32>* %2198, align 16, !tbaa !11
  %4716 = mul <4 x i32> %4715, %4715
  %4717 = load <4 x i32>, <4 x i32>* %2202, align 16, !tbaa !11
  %4718 = mul <4 x i32> %4717, %4717
  %4719 = load <4 x i32>, <4 x i32>* %2206, align 16, !tbaa !11
  %4720 = mul <4 x i32> %4719, %4719
  %4721 = load <4 x i32>, <4 x i32>* %2210, align 16, !tbaa !11
  %4722 = mul <4 x i32> %4721, %4721
  %4723 = load <4 x i32>, <4 x i32>* %2214, align 16, !tbaa !11
  %4724 = mul <4 x i32> %4723, %4723
  %4725 = add <4 x i32> %4706, %4704
  %4726 = add <4 x i32> %4725, %4708
  %4727 = add <4 x i32> %4726, %4710
  %4728 = add <4 x i32> %4727, %4712
  %4729 = add <4 x i32> %4728, %4714
  %4730 = add <4 x i32> %4729, %4716
  %4731 = add <4 x i32> %4730, %4718
  %4732 = add <4 x i32> %4731, %4720
  %4733 = add <4 x i32> %4732, %4722
  %4734 = add <4 x i32> %4733, %4724
  %4735 = call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %4734, <4 x i32> %4734) #11
  %4736 = load i32, i32* %2228, align 16, !tbaa !33
  %4737 = load i32, i32* %2230, align 4, !tbaa !33
  %4738 = load i32, i32* %2232, align 8, !tbaa !33
  %4739 = load i64, i64* %367, align 8, !tbaa !37, !noalias !166
  %4740 = icmp slt i64 %4739, 0
  br i1 %4740, label %4741, label %4742, !prof !50

; <label>:4741:                                   ; preds = %4650
  call void @__assert_rtn(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__._ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEENS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEC2EllRKS3_, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.13, i64 0, i64 0), i32 74, i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.14, i64 0, i64 0)) #13, !noalias !166
  unreachable

; <label>:4742:                                   ; preds = %4650
  %4743 = mul nsw i32 %4736, %4736
  %4744 = call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %4735, <4 x i32> %4735) #11
  %4745 = extractelement <4 x i32> %4744, i32 0
  %4746 = mul nsw i32 %4737, %4737
  %4747 = mul nsw i32 %4738, %4738
  %4748 = add nuw i32 %4746, %4743
  %4749 = add i32 %4748, %4747
  %4750 = add i32 %4749, %4745
  %4751 = sitofp i32 %4750 to double
  %4752 = call double @sqrt(double %4751) #5
  %4753 = fptosi double %4752 to i32
  %4754 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %190, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.32"* %108, %"class.Eigen::Matrix.32"** %4754, align 8
  %4755 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %190, i64 0, i32 0, i32 1
  store %"class.Eigen::Matrix.153"* %148, %"class.Eigen::Matrix.153"** %4755, align 8
  %4756 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %190, i64 0, i32 1, i32 0, i32 0
  store i64 %4739, i64* %4756, align 8, !alias.scope !166
  %4757 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %190, i64 0, i32 1, i32 2, i32 0
  store i32 %4753, i32* %4757, align 4, !tbaa !51, !alias.scope !166
  %4758 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %55, i64 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start(i64 48, i8* nonnull %4758) #11
  %4759 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %190, i64 0, i32 0
  %4760 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %55, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS3_IiLi47ELi1ELi0ELi47ELi1EEELi0EEELi7ENS_10DenseShapeES7_iiEC2ERKS6_(%"struct.Eigen::internal::product_evaluator.706"* %4760, %"class.Eigen::Product.226"* nonnull dereferenceable(16) %4759) #11
  %4761 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %55, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %4762 = load i32, i32* %4757, align 4, !tbaa !51
  store i32 %4762, i32* %4761, align 8, !tbaa !51
  %4763 = load i64, i64* %1257, align 8, !tbaa !46
  %4764 = load i64, i64* %4756, align 8, !tbaa !59
  %4765 = icmp eq i64 %4763, %4764
  br i1 %4765, label %4767, label %4766

; <label>:4766:                                   ; preds = %4742
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__._ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEENS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES3_EEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.15, i64 0, i64 0), i32 710, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.29, i64 0, i64 0)) #13
  unreachable

; <label>:4767:                                   ; preds = %4742
  %4768 = load i64, i64* %2263, align 8, !tbaa !44
  %4769 = sdiv i64 %4763, 4
  %4770 = shl nsw i64 %4769, 2
  %4771 = icmp sgt i64 %4763, 3
  br i1 %4771, label %4772, label %4817

; <label>:4772:                                   ; preds = %4767
  %4773 = inttoptr i64 %4768 to i32*
  %4774 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %55, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %4775 = bitcast i32** %4774 to <4 x i32>**
  %4776 = load <4 x i32>*, <4 x i32>** %4775, align 8, !tbaa !61
  %4777 = load <4 x i32>, <4 x i32>* %4776, align 16, !tbaa !11
  %4778 = insertelement <4 x i32> undef, i32 %4762, i32 0
  %4779 = shufflevector <4 x i32> %4778, <4 x i32> undef, <4 x i32> zeroinitializer
  %4780 = mul <4 x i32> %4777, %4779
  %4781 = inttoptr i64 %4768 to <4 x i32>*
  %4782 = load <4 x i32>, <4 x i32>* %4781, align 16, !tbaa !11
  %4783 = sub <4 x i32> %4782, %4780
  store <4 x i32> %4783, <4 x i32>* %4781, align 16, !tbaa !11
  %4784 = icmp sgt i64 %4770, 4
  br i1 %4784, label %4785, label %4817

; <label>:4785:                                   ; preds = %4772
  %4786 = add i64 %4770, -5
  %4787 = lshr i64 %4786, 2
  %4788 = add nuw nsw i64 %4787, 1
  %4789 = and i64 %4788, 3
  %4790 = icmp eq i64 %4789, 0
  br i1 %4790, label %4811, label %4791

; <label>:4791:                                   ; preds = %4785
  br label %4792

; <label>:4792:                                   ; preds = %4792, %4791
  %4793 = phi i64 [ %4807, %4792 ], [ 4, %4791 ]
  %4794 = phi i64 [ %4808, %4792 ], [ %4789, %4791 ]
  %4795 = load i32, i32* %4761, align 8, !tbaa !33
  %4796 = getelementptr inbounds i32, i32* %4773, i64 %4793
  %4797 = load i32*, i32** %4774, align 8, !tbaa !61
  %4798 = getelementptr inbounds i32, i32* %4797, i64 %4793
  %4799 = bitcast i32* %4798 to <4 x i32>*
  %4800 = load <4 x i32>, <4 x i32>* %4799, align 16, !tbaa !11
  %4801 = insertelement <4 x i32> undef, i32 %4795, i32 0
  %4802 = shufflevector <4 x i32> %4801, <4 x i32> undef, <4 x i32> zeroinitializer
  %4803 = mul <4 x i32> %4800, %4802
  %4804 = bitcast i32* %4796 to <4 x i32>*
  %4805 = load <4 x i32>, <4 x i32>* %4804, align 16, !tbaa !11
  %4806 = sub <4 x i32> %4805, %4803
  store <4 x i32> %4806, <4 x i32>* %4804, align 16, !tbaa !11
  %4807 = add nuw nsw i64 %4793, 4
  %4808 = add i64 %4794, -1
  %4809 = icmp eq i64 %4808, 0
  br i1 %4809, label %4810, label %4792, !llvm.loop !169

; <label>:4810:                                   ; preds = %4792
  br label %4811

; <label>:4811:                                   ; preds = %4785, %4810
  %4812 = phi i64 [ 4, %4785 ], [ %4807, %4810 ]
  %4813 = icmp ult i64 %4786, 12
  br i1 %4813, label %4816, label %4814

; <label>:4814:                                   ; preds = %4811
  br label %4955

; <label>:4815:                                   ; preds = %4955
  br label %4816

; <label>:4816:                                   ; preds = %4811, %4815
  br label %4817

; <label>:4817:                                   ; preds = %4816, %4772, %4767
  %4818 = icmp sgt i64 %4763, %4770
  br i1 %4818, label %4819, label %5012

; <label>:4819:                                   ; preds = %4817
  %4820 = inttoptr i64 %4768 to i32*
  %4821 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %55, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %4822 = load i32*, i32** %4821, align 8, !tbaa !61
  %4823 = sub i64 %4763, %4770
  %4824 = icmp ult i64 %4823, 32
  br i1 %4824, label %4894, label %4825

; <label>:4825:                                   ; preds = %4819
  %4826 = and i64 %4823, -32
  %4827 = icmp eq i64 %4826, 0
  br i1 %4827, label %4894, label %4828

; <label>:4828:                                   ; preds = %4825
  %4829 = getelementptr i32, i32* %4820, i64 %4770
  %4830 = getelementptr i32, i32* %4820, i64 %4763
  %4831 = getelementptr i32, i32* %4822, i64 %4770
  %4832 = getelementptr i32, i32* %4822, i64 %4763
  %4833 = icmp ult i32* %4829, %4761
  %4834 = icmp ult i32* %4761, %4830
  %4835 = and i1 %4833, %4834
  %4836 = icmp ult i32* %4829, %4832
  %4837 = icmp ult i32* %4831, %4830
  %4838 = and i1 %4836, %4837
  %4839 = or i1 %4835, %4838
  %4840 = add i64 %4770, %4826
  br i1 %4839, label %4894, label %4841

; <label>:4841:                                   ; preds = %4828
  %4842 = load i32, i32* %4761, align 8, !tbaa !51, !alias.scope !170
  %4843 = insertelement <8 x i32> undef, i32 %4842, i32 0
  %4844 = shufflevector <8 x i32> %4843, <8 x i32> undef, <8 x i32> zeroinitializer
  %4845 = insertelement <8 x i32> undef, i32 %4842, i32 0
  %4846 = shufflevector <8 x i32> %4845, <8 x i32> undef, <8 x i32> zeroinitializer
  %4847 = insertelement <8 x i32> undef, i32 %4842, i32 0
  %4848 = shufflevector <8 x i32> %4847, <8 x i32> undef, <8 x i32> zeroinitializer
  %4849 = insertelement <8 x i32> undef, i32 %4842, i32 0
  %4850 = shufflevector <8 x i32> %4849, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %4851

; <label>:4851:                                   ; preds = %4841, %4851
  %4852 = phi i64 [ %4890, %4851 ], [ 0, %4841 ]
  %4853 = add i64 %4770, %4852
  %4854 = getelementptr inbounds i32, i32* %4820, i64 %4853
  %4855 = getelementptr inbounds i32, i32* %4822, i64 %4853
  %4856 = bitcast i32* %4855 to <8 x i32>*
  %4857 = load <8 x i32>, <8 x i32>* %4856, align 4, !tbaa !33, !alias.scope !173
  %4858 = getelementptr i32, i32* %4855, i64 8
  %4859 = bitcast i32* %4858 to <8 x i32>*
  %4860 = load <8 x i32>, <8 x i32>* %4859, align 4, !tbaa !33, !alias.scope !173
  %4861 = getelementptr i32, i32* %4855, i64 16
  %4862 = bitcast i32* %4861 to <8 x i32>*
  %4863 = load <8 x i32>, <8 x i32>* %4862, align 4, !tbaa !33, !alias.scope !173
  %4864 = getelementptr i32, i32* %4855, i64 24
  %4865 = bitcast i32* %4864 to <8 x i32>*
  %4866 = load <8 x i32>, <8 x i32>* %4865, align 4, !tbaa !33, !alias.scope !173
  %4867 = mul nsw <8 x i32> %4857, %4844
  %4868 = mul nsw <8 x i32> %4860, %4846
  %4869 = mul nsw <8 x i32> %4863, %4848
  %4870 = mul nsw <8 x i32> %4866, %4850
  %4871 = bitcast i32* %4854 to <8 x i32>*
  %4872 = load <8 x i32>, <8 x i32>* %4871, align 4, !tbaa !33, !alias.scope !175, !noalias !177
  %4873 = getelementptr i32, i32* %4854, i64 8
  %4874 = bitcast i32* %4873 to <8 x i32>*
  %4875 = load <8 x i32>, <8 x i32>* %4874, align 4, !tbaa !33, !alias.scope !175, !noalias !177
  %4876 = getelementptr i32, i32* %4854, i64 16
  %4877 = bitcast i32* %4876 to <8 x i32>*
  %4878 = load <8 x i32>, <8 x i32>* %4877, align 4, !tbaa !33, !alias.scope !175, !noalias !177
  %4879 = getelementptr i32, i32* %4854, i64 24
  %4880 = bitcast i32* %4879 to <8 x i32>*
  %4881 = load <8 x i32>, <8 x i32>* %4880, align 4, !tbaa !33, !alias.scope !175, !noalias !177
  %4882 = sub nsw <8 x i32> %4872, %4867
  %4883 = sub nsw <8 x i32> %4875, %4868
  %4884 = sub nsw <8 x i32> %4878, %4869
  %4885 = sub nsw <8 x i32> %4881, %4870
  %4886 = bitcast i32* %4854 to <8 x i32>*
  store <8 x i32> %4882, <8 x i32>* %4886, align 4, !tbaa !33, !alias.scope !175, !noalias !177
  %4887 = bitcast i32* %4873 to <8 x i32>*
  store <8 x i32> %4883, <8 x i32>* %4887, align 4, !tbaa !33, !alias.scope !175, !noalias !177
  %4888 = bitcast i32* %4876 to <8 x i32>*
  store <8 x i32> %4884, <8 x i32>* %4888, align 4, !tbaa !33, !alias.scope !175, !noalias !177
  %4889 = bitcast i32* %4879 to <8 x i32>*
  store <8 x i32> %4885, <8 x i32>* %4889, align 4, !tbaa !33, !alias.scope !175, !noalias !177
  %4890 = add i64 %4852, 32
  %4891 = icmp eq i64 %4890, %4826
  br i1 %4891, label %4892, label %4851, !llvm.loop !178

; <label>:4892:                                   ; preds = %4851
  %4893 = icmp eq i64 %4823, %4826
  br i1 %4893, label %5012, label %4894

; <label>:4894:                                   ; preds = %4892, %4828, %4825, %4819
  %4895 = phi i64 [ %4770, %4828 ], [ %4770, %4825 ], [ %4770, %4819 ], [ %4840, %4892 ]
  %4896 = sub i64 %4763, %4895
  %4897 = add i64 %4763, -1
  %4898 = sub i64 %4897, %4895
  %4899 = and i64 %4896, 3
  %4900 = icmp eq i64 %4899, 0
  br i1 %4900, label %4916, label %4901

; <label>:4901:                                   ; preds = %4894
  br label %4902

; <label>:4902:                                   ; preds = %4902, %4901
  %4903 = phi i64 [ %4912, %4902 ], [ %4895, %4901 ]
  %4904 = phi i64 [ %4913, %4902 ], [ %4899, %4901 ]
  %4905 = getelementptr inbounds i32, i32* %4820, i64 %4903
  %4906 = getelementptr inbounds i32, i32* %4822, i64 %4903
  %4907 = load i32, i32* %4761, align 8, !tbaa !51
  %4908 = load i32, i32* %4906, align 4, !tbaa !33
  %4909 = mul nsw i32 %4908, %4907
  %4910 = load i32, i32* %4905, align 4, !tbaa !33
  %4911 = sub nsw i32 %4910, %4909
  store i32 %4911, i32* %4905, align 4, !tbaa !33
  %4912 = add nsw i64 %4903, 1
  %4913 = add i64 %4904, -1
  %4914 = icmp eq i64 %4913, 0
  br i1 %4914, label %4915, label %4902, !llvm.loop !179

; <label>:4915:                                   ; preds = %4902
  br label %4916

; <label>:4916:                                   ; preds = %4894, %4915
  %4917 = phi i64 [ %4895, %4894 ], [ %4912, %4915 ]
  %4918 = icmp ult i64 %4898, 3
  br i1 %4918, label %5011, label %4919

; <label>:4919:                                   ; preds = %4916
  br label %4920

; <label>:4920:                                   ; preds = %4920, %4919
  %4921 = phi i64 [ %4917, %4919 ], [ %4953, %4920 ]
  %4922 = getelementptr inbounds i32, i32* %4820, i64 %4921
  %4923 = getelementptr inbounds i32, i32* %4822, i64 %4921
  %4924 = load i32, i32* %4761, align 8, !tbaa !51
  %4925 = load i32, i32* %4923, align 4, !tbaa !33
  %4926 = mul nsw i32 %4925, %4924
  %4927 = load i32, i32* %4922, align 4, !tbaa !33
  %4928 = sub nsw i32 %4927, %4926
  store i32 %4928, i32* %4922, align 4, !tbaa !33
  %4929 = add nsw i64 %4921, 1
  %4930 = getelementptr inbounds i32, i32* %4820, i64 %4929
  %4931 = getelementptr inbounds i32, i32* %4822, i64 %4929
  %4932 = load i32, i32* %4761, align 8, !tbaa !51
  %4933 = load i32, i32* %4931, align 4, !tbaa !33
  %4934 = mul nsw i32 %4933, %4932
  %4935 = load i32, i32* %4930, align 4, !tbaa !33
  %4936 = sub nsw i32 %4935, %4934
  store i32 %4936, i32* %4930, align 4, !tbaa !33
  %4937 = add nsw i64 %4921, 2
  %4938 = getelementptr inbounds i32, i32* %4820, i64 %4937
  %4939 = getelementptr inbounds i32, i32* %4822, i64 %4937
  %4940 = load i32, i32* %4761, align 8, !tbaa !51
  %4941 = load i32, i32* %4939, align 4, !tbaa !33
  %4942 = mul nsw i32 %4941, %4940
  %4943 = load i32, i32* %4938, align 4, !tbaa !33
  %4944 = sub nsw i32 %4943, %4942
  store i32 %4944, i32* %4938, align 4, !tbaa !33
  %4945 = add nsw i64 %4921, 3
  %4946 = getelementptr inbounds i32, i32* %4820, i64 %4945
  %4947 = getelementptr inbounds i32, i32* %4822, i64 %4945
  %4948 = load i32, i32* %4761, align 8, !tbaa !51
  %4949 = load i32, i32* %4947, align 4, !tbaa !33
  %4950 = mul nsw i32 %4949, %4948
  %4951 = load i32, i32* %4946, align 4, !tbaa !33
  %4952 = sub nsw i32 %4951, %4950
  store i32 %4952, i32* %4946, align 4, !tbaa !33
  %4953 = add nsw i64 %4921, 4
  %4954 = icmp eq i64 %4953, %4763
  br i1 %4954, label %5010, label %4920, !llvm.loop !180

; <label>:4955:                                   ; preds = %4955, %4814
  %4956 = phi i64 [ %4812, %4814 ], [ %5008, %4955 ]
  %4957 = load i32, i32* %4761, align 8, !tbaa !33
  %4958 = getelementptr inbounds i32, i32* %4773, i64 %4956
  %4959 = load i32*, i32** %4774, align 8, !tbaa !61
  %4960 = getelementptr inbounds i32, i32* %4959, i64 %4956
  %4961 = bitcast i32* %4960 to <4 x i32>*
  %4962 = load <4 x i32>, <4 x i32>* %4961, align 16, !tbaa !11
  %4963 = insertelement <4 x i32> undef, i32 %4957, i32 0
  %4964 = shufflevector <4 x i32> %4963, <4 x i32> undef, <4 x i32> zeroinitializer
  %4965 = mul <4 x i32> %4962, %4964
  %4966 = bitcast i32* %4958 to <4 x i32>*
  %4967 = load <4 x i32>, <4 x i32>* %4966, align 16, !tbaa !11
  %4968 = sub <4 x i32> %4967, %4965
  store <4 x i32> %4968, <4 x i32>* %4966, align 16, !tbaa !11
  %4969 = add nuw nsw i64 %4956, 4
  %4970 = load i32, i32* %4761, align 8, !tbaa !33
  %4971 = getelementptr inbounds i32, i32* %4773, i64 %4969
  %4972 = load i32*, i32** %4774, align 8, !tbaa !61
  %4973 = getelementptr inbounds i32, i32* %4972, i64 %4969
  %4974 = bitcast i32* %4973 to <4 x i32>*
  %4975 = load <4 x i32>, <4 x i32>* %4974, align 16, !tbaa !11
  %4976 = insertelement <4 x i32> undef, i32 %4970, i32 0
  %4977 = shufflevector <4 x i32> %4976, <4 x i32> undef, <4 x i32> zeroinitializer
  %4978 = mul <4 x i32> %4975, %4977
  %4979 = bitcast i32* %4971 to <4 x i32>*
  %4980 = load <4 x i32>, <4 x i32>* %4979, align 16, !tbaa !11
  %4981 = sub <4 x i32> %4980, %4978
  store <4 x i32> %4981, <4 x i32>* %4979, align 16, !tbaa !11
  %4982 = add nsw i64 %4956, 8
  %4983 = load i32, i32* %4761, align 8, !tbaa !33
  %4984 = getelementptr inbounds i32, i32* %4773, i64 %4982
  %4985 = load i32*, i32** %4774, align 8, !tbaa !61
  %4986 = getelementptr inbounds i32, i32* %4985, i64 %4982
  %4987 = bitcast i32* %4986 to <4 x i32>*
  %4988 = load <4 x i32>, <4 x i32>* %4987, align 16, !tbaa !11
  %4989 = insertelement <4 x i32> undef, i32 %4983, i32 0
  %4990 = shufflevector <4 x i32> %4989, <4 x i32> undef, <4 x i32> zeroinitializer
  %4991 = mul <4 x i32> %4988, %4990
  %4992 = bitcast i32* %4984 to <4 x i32>*
  %4993 = load <4 x i32>, <4 x i32>* %4992, align 16, !tbaa !11
  %4994 = sub <4 x i32> %4993, %4991
  store <4 x i32> %4994, <4 x i32>* %4992, align 16, !tbaa !11
  %4995 = add nsw i64 %4956, 12
  %4996 = load i32, i32* %4761, align 8, !tbaa !33
  %4997 = getelementptr inbounds i32, i32* %4773, i64 %4995
  %4998 = load i32*, i32** %4774, align 8, !tbaa !61
  %4999 = getelementptr inbounds i32, i32* %4998, i64 %4995
  %5000 = bitcast i32* %4999 to <4 x i32>*
  %5001 = load <4 x i32>, <4 x i32>* %5000, align 16, !tbaa !11
  %5002 = insertelement <4 x i32> undef, i32 %4996, i32 0
  %5003 = shufflevector <4 x i32> %5002, <4 x i32> undef, <4 x i32> zeroinitializer
  %5004 = mul <4 x i32> %5001, %5003
  %5005 = bitcast i32* %4997 to <4 x i32>*
  %5006 = load <4 x i32>, <4 x i32>* %5005, align 16, !tbaa !11
  %5007 = sub <4 x i32> %5006, %5004
  store <4 x i32> %5007, <4 x i32>* %5005, align 16, !tbaa !11
  %5008 = add nsw i64 %4956, 16
  %5009 = icmp slt i64 %5008, %4770
  br i1 %5009, label %4955, label %4815

; <label>:5010:                                   ; preds = %4920
  br label %5011

; <label>:5011:                                   ; preds = %4916, %5010
  br label %5012

; <label>:5012:                                   ; preds = %5011, %4892, %4817
  %5013 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %55, i64 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %5014 = load i32*, i32** %5013, align 8, !tbaa !44
  %5015 = icmp eq i32* %5014, null
  br i1 %5015, label %5020, label %5016

; <label>:5016:                                   ; preds = %5012
  %5017 = getelementptr inbounds i32, i32* %5014, i64 -2
  %5018 = bitcast i32* %5017 to i8**
  %5019 = load i8*, i8** %5018, align 8, !tbaa !29
  call void @free(i8* %5019) #11
  br label %5020

; <label>:5020:                                   ; preds = %5012, %5016
  call void @llvm.lifetime.end(i64 48, i8* nonnull %4758) #11
  call void @llvm.lifetime.end(i64 40, i8* nonnull %4702) #11
  %5021 = getelementptr inbounds %"class.Eigen::Product.369", %"class.Eigen::Product.369"* %191, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start(i64 40, i8* nonnull %5021) #11
  %5022 = getelementptr inbounds %"class.Eigen::Product.369", %"class.Eigen::Product.369"* %191, i64 0, i32 0, i32 1, i32 2, i32 0
  store i32 17, i32* %5022, align 4, !tbaa !51, !alias.scope !181
  %5023 = getelementptr inbounds %"class.Eigen::Product.369", %"class.Eigen::Product.369"* %191, i64 0, i32 0, i32 3
  %5024 = bitcast %"class.Eigen::Matrix.77"** %5023 to i64*
  store i64 %3600, i64* %5024, align 8, !tbaa !11, !alias.scope !181
  %5025 = getelementptr inbounds %"class.Eigen::Product.369", %"class.Eigen::Product.369"* %191, i64 0, i32 1
  %5026 = bitcast %"class.Eigen::Transpose.331"* %5025 to i64*
  store i64 %3060, i64* %5026, align 8, !alias.scope !181
  %5027 = getelementptr inbounds %"struct.Eigen::internal::add_assign_op", %"struct.Eigen::internal::add_assign_op"* %54, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %5027) #11
  call void @_ZN5Eigen8internal15call_assignmentINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS2_IiLi47ELi6ELi0ELi47ELi6EEEEESC_EENS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS0_13add_assign_opIiiEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsr25evaluator_assume_aliasingISO_EE5valueEPvE4typeE(%"class.Eigen::Matrix.48"* nonnull dereferenceable(16) %115, %"class.Eigen::Product.369"* nonnull dereferenceable(40) %191, %"struct.Eigen::internal::add_assign_op"* nonnull dereferenceable(1) %54, i8* null) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %5027) #11
  call void @llvm.lifetime.end(i64 40, i8* nonnull %5021) #11
  %5028 = load i64, i64* %499, align 8, !tbaa !40
  %5029 = load i64, i64* %781, align 8, !tbaa !43
  %5030 = icmp eq i64 %5028, %5029
  br i1 %5030, label %5032, label %5031, !prof !10

; <label>:5031:                                   ; preds = %5020
  call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS1_IdLin1ELi1ELi0ELin1ELi1EEELi0EEC2ERKS2_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 97, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2, i64 0, i64 0)) #13
  unreachable

; <label>:5032:                                   ; preds = %5020
  %5033 = bitcast %"class.Eigen::Matrix.77"* %53 to i8*
  call void @llvm.lifetime.start(i64 1128, i8* nonnull %5033) #11
  call void @_ZN5Eigen8internal20generic_product_implINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS2_IiLin1ELi6ELi0ELin1ELi6EEENS_10DenseShapeES5_Li8EE6evalToINS2_IiLi47ELi6ELi0ELi47ELi6EEEEEvRT_RKS3_RKS4_(%"class.Eigen::Matrix.77"* nonnull dereferenceable(1128) %53, %"class.Eigen::Matrix.48"* nonnull dereferenceable(16) %114, %"class.Eigen::Matrix.123"* nonnull dereferenceable(16) %140) #11
  br i1 %3079, label %5036, label %5034

; <label>:5034:                                   ; preds = %5032
  br label %5063

; <label>:5035:                                   ; preds = %8635, %8628, %5063
  br label %5036

; <label>:5036:                                   ; preds = %5035, %5032
  %5037 = phi i64 [ 0, %5032 ], [ %3075, %5035 ]
  %5038 = add nsw i64 %3078, -1
  %5039 = sub nsw i64 %5038, %5037
  %5040 = lshr i64 %5039, 2
  %5041 = add nuw nsw i64 %5040, 1
  %5042 = and i64 %5041, 7
  %5043 = icmp eq i64 %5042, 0
  br i1 %5043, label %5059, label %5044

; <label>:5044:                                   ; preds = %5036
  br label %5045

; <label>:5045:                                   ; preds = %5045, %5044
  %5046 = phi i64 [ %5055, %5045 ], [ %5037, %5044 ]
  %5047 = phi i64 [ %5056, %5045 ], [ %5042, %5044 ]
  %5048 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %5046
  %5049 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %53, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %5046
  %5050 = bitcast i32* %5049 to <4 x i32>*
  %5051 = load <4 x i32>, <4 x i32>* %5050, align 4, !tbaa !11
  %5052 = bitcast i32* %5048 to <4 x i32>*
  %5053 = load <4 x i32>, <4 x i32>* %5052, align 16, !tbaa !11
  %5054 = add <4 x i32> %5053, %5051
  store <4 x i32> %5054, <4 x i32>* %5052, align 16, !tbaa !11
  %5055 = add nuw nsw i64 %5046, 4
  %5056 = add i64 %5047, -1
  %5057 = icmp eq i64 %5056, 0
  br i1 %5057, label %5058, label %5045, !llvm.loop !184

; <label>:5058:                                   ; preds = %5045
  br label %5059

; <label>:5059:                                   ; preds = %5036, %5058
  %5060 = phi i64 [ %5037, %5036 ], [ %5055, %5058 ]
  %5061 = icmp ult i64 %5039, 28
  br i1 %5061, label %5071, label %5062

; <label>:5062:                                   ; preds = %5059
  br label %5207

; <label>:5063:                                   ; preds = %5034
  %5064 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %5065 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %53, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %5066 = load i32, i32* %5065, align 4, !tbaa !33
  %5067 = load i32, i32* %5064, align 4, !tbaa !33
  %5068 = add nsw i32 %5067, %5066
  store i32 %5068, i32* %5064, align 4, !tbaa !33
  %5069 = icmp eq i64 %3075, 1
  br i1 %5069, label %5035, label %8628

; <label>:5070:                                   ; preds = %5207
  br label %5071

; <label>:5071:                                   ; preds = %5059, %5070
  br i1 %3118, label %5072, label %5275

; <label>:5072:                                   ; preds = %5071
  %5073 = sub nsw i64 282, %3078
  %5074 = icmp ult i64 %5073, 32
  br i1 %5074, label %5196, label %5075

; <label>:5075:                                   ; preds = %5072
  %5076 = and i64 %5073, -32
  %5077 = icmp eq i64 %5076, 0
  %5078 = add nsw i64 %3078, %5076
  br i1 %5077, label %5196, label %5079

; <label>:5079:                                   ; preds = %5075
  %5080 = add nsw i64 %5076, -32
  %5081 = lshr exact i64 %5080, 5
  %5082 = and i64 %5081, 1
  %5083 = icmp eq i64 %5082, 0
  br i1 %5083, label %5084, label %5118

; <label>:5084:                                   ; preds = %5079
  br label %5085

; <label>:5085:                                   ; preds = %5084
  %5086 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3078
  %5087 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %53, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3078
  %5088 = bitcast i32* %5087 to <8 x i32>*
  %5089 = load <8 x i32>, <8 x i32>* %5088, align 4, !tbaa !33
  %5090 = getelementptr i32, i32* %5087, i64 8
  %5091 = bitcast i32* %5090 to <8 x i32>*
  %5092 = load <8 x i32>, <8 x i32>* %5091, align 4, !tbaa !33
  %5093 = getelementptr i32, i32* %5087, i64 16
  %5094 = bitcast i32* %5093 to <8 x i32>*
  %5095 = load <8 x i32>, <8 x i32>* %5094, align 4, !tbaa !33
  %5096 = getelementptr i32, i32* %5087, i64 24
  %5097 = bitcast i32* %5096 to <8 x i32>*
  %5098 = load <8 x i32>, <8 x i32>* %5097, align 4, !tbaa !33
  %5099 = bitcast i32* %5086 to <8 x i32>*
  %5100 = load <8 x i32>, <8 x i32>* %5099, align 4, !tbaa !33
  %5101 = getelementptr i32, i32* %5086, i64 8
  %5102 = bitcast i32* %5101 to <8 x i32>*
  %5103 = load <8 x i32>, <8 x i32>* %5102, align 4, !tbaa !33
  %5104 = getelementptr i32, i32* %5086, i64 16
  %5105 = bitcast i32* %5104 to <8 x i32>*
  %5106 = load <8 x i32>, <8 x i32>* %5105, align 4, !tbaa !33
  %5107 = getelementptr i32, i32* %5086, i64 24
  %5108 = bitcast i32* %5107 to <8 x i32>*
  %5109 = load <8 x i32>, <8 x i32>* %5108, align 4, !tbaa !33
  %5110 = add nsw <8 x i32> %5100, %5089
  %5111 = add nsw <8 x i32> %5103, %5092
  %5112 = add nsw <8 x i32> %5106, %5095
  %5113 = add nsw <8 x i32> %5109, %5098
  %5114 = bitcast i32* %5086 to <8 x i32>*
  store <8 x i32> %5110, <8 x i32>* %5114, align 4, !tbaa !33
  %5115 = bitcast i32* %5101 to <8 x i32>*
  store <8 x i32> %5111, <8 x i32>* %5115, align 4, !tbaa !33
  %5116 = bitcast i32* %5104 to <8 x i32>*
  store <8 x i32> %5112, <8 x i32>* %5116, align 4, !tbaa !33
  %5117 = bitcast i32* %5107 to <8 x i32>*
  store <8 x i32> %5113, <8 x i32>* %5117, align 4, !tbaa !33
  br label %5118

; <label>:5118:                                   ; preds = %5085, %5079
  %5119 = phi i64 [ 0, %5079 ], [ 32, %5085 ]
  %5120 = icmp eq i64 %5081, 0
  br i1 %5120, label %5194, label %5121

; <label>:5121:                                   ; preds = %5118
  br label %5122

; <label>:5122:                                   ; preds = %5122, %5121
  %5123 = phi i64 [ %5119, %5121 ], [ %5191, %5122 ]
  %5124 = add i64 %3078, %5123
  %5125 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %5124
  %5126 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %53, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %5124
  %5127 = bitcast i32* %5126 to <8 x i32>*
  %5128 = load <8 x i32>, <8 x i32>* %5127, align 4, !tbaa !33
  %5129 = getelementptr i32, i32* %5126, i64 8
  %5130 = bitcast i32* %5129 to <8 x i32>*
  %5131 = load <8 x i32>, <8 x i32>* %5130, align 4, !tbaa !33
  %5132 = getelementptr i32, i32* %5126, i64 16
  %5133 = bitcast i32* %5132 to <8 x i32>*
  %5134 = load <8 x i32>, <8 x i32>* %5133, align 4, !tbaa !33
  %5135 = getelementptr i32, i32* %5126, i64 24
  %5136 = bitcast i32* %5135 to <8 x i32>*
  %5137 = load <8 x i32>, <8 x i32>* %5136, align 4, !tbaa !33
  %5138 = bitcast i32* %5125 to <8 x i32>*
  %5139 = load <8 x i32>, <8 x i32>* %5138, align 4, !tbaa !33
  %5140 = getelementptr i32, i32* %5125, i64 8
  %5141 = bitcast i32* %5140 to <8 x i32>*
  %5142 = load <8 x i32>, <8 x i32>* %5141, align 4, !tbaa !33
  %5143 = getelementptr i32, i32* %5125, i64 16
  %5144 = bitcast i32* %5143 to <8 x i32>*
  %5145 = load <8 x i32>, <8 x i32>* %5144, align 4, !tbaa !33
  %5146 = getelementptr i32, i32* %5125, i64 24
  %5147 = bitcast i32* %5146 to <8 x i32>*
  %5148 = load <8 x i32>, <8 x i32>* %5147, align 4, !tbaa !33
  %5149 = add nsw <8 x i32> %5139, %5128
  %5150 = add nsw <8 x i32> %5142, %5131
  %5151 = add nsw <8 x i32> %5145, %5134
  %5152 = add nsw <8 x i32> %5148, %5137
  %5153 = bitcast i32* %5125 to <8 x i32>*
  store <8 x i32> %5149, <8 x i32>* %5153, align 4, !tbaa !33
  %5154 = bitcast i32* %5140 to <8 x i32>*
  store <8 x i32> %5150, <8 x i32>* %5154, align 4, !tbaa !33
  %5155 = bitcast i32* %5143 to <8 x i32>*
  store <8 x i32> %5151, <8 x i32>* %5155, align 4, !tbaa !33
  %5156 = bitcast i32* %5146 to <8 x i32>*
  store <8 x i32> %5152, <8 x i32>* %5156, align 4, !tbaa !33
  %5157 = add i64 %5123, 32
  %5158 = add i64 %3078, %5157
  %5159 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %5158
  %5160 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %53, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %5158
  %5161 = bitcast i32* %5160 to <8 x i32>*
  %5162 = load <8 x i32>, <8 x i32>* %5161, align 4, !tbaa !33
  %5163 = getelementptr i32, i32* %5160, i64 8
  %5164 = bitcast i32* %5163 to <8 x i32>*
  %5165 = load <8 x i32>, <8 x i32>* %5164, align 4, !tbaa !33
  %5166 = getelementptr i32, i32* %5160, i64 16
  %5167 = bitcast i32* %5166 to <8 x i32>*
  %5168 = load <8 x i32>, <8 x i32>* %5167, align 4, !tbaa !33
  %5169 = getelementptr i32, i32* %5160, i64 24
  %5170 = bitcast i32* %5169 to <8 x i32>*
  %5171 = load <8 x i32>, <8 x i32>* %5170, align 4, !tbaa !33
  %5172 = bitcast i32* %5159 to <8 x i32>*
  %5173 = load <8 x i32>, <8 x i32>* %5172, align 4, !tbaa !33
  %5174 = getelementptr i32, i32* %5159, i64 8
  %5175 = bitcast i32* %5174 to <8 x i32>*
  %5176 = load <8 x i32>, <8 x i32>* %5175, align 4, !tbaa !33
  %5177 = getelementptr i32, i32* %5159, i64 16
  %5178 = bitcast i32* %5177 to <8 x i32>*
  %5179 = load <8 x i32>, <8 x i32>* %5178, align 4, !tbaa !33
  %5180 = getelementptr i32, i32* %5159, i64 24
  %5181 = bitcast i32* %5180 to <8 x i32>*
  %5182 = load <8 x i32>, <8 x i32>* %5181, align 4, !tbaa !33
  %5183 = add nsw <8 x i32> %5173, %5162
  %5184 = add nsw <8 x i32> %5176, %5165
  %5185 = add nsw <8 x i32> %5179, %5168
  %5186 = add nsw <8 x i32> %5182, %5171
  %5187 = bitcast i32* %5159 to <8 x i32>*
  store <8 x i32> %5183, <8 x i32>* %5187, align 4, !tbaa !33
  %5188 = bitcast i32* %5174 to <8 x i32>*
  store <8 x i32> %5184, <8 x i32>* %5188, align 4, !tbaa !33
  %5189 = bitcast i32* %5177 to <8 x i32>*
  store <8 x i32> %5185, <8 x i32>* %5189, align 4, !tbaa !33
  %5190 = bitcast i32* %5180 to <8 x i32>*
  store <8 x i32> %5186, <8 x i32>* %5190, align 4, !tbaa !33
  %5191 = add i64 %5123, 64
  %5192 = icmp eq i64 %5191, %5076
  br i1 %5192, label %5193, label %5122, !llvm.loop !185

; <label>:5193:                                   ; preds = %5122
  br label %5194

; <label>:5194:                                   ; preds = %5118, %5193
  %5195 = icmp eq i64 %5073, %5076
  br i1 %5195, label %5275, label %5196

; <label>:5196:                                   ; preds = %5194, %5075, %5072
  %5197 = phi i64 [ %3078, %5075 ], [ %3078, %5072 ], [ %5078, %5194 ]
  br label %5198

; <label>:5198:                                   ; preds = %5196, %5198
  %5199 = phi i64 [ %5205, %5198 ], [ %5197, %5196 ]
  %5200 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %5199
  %5201 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %53, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %5199
  %5202 = load i32, i32* %5201, align 4, !tbaa !33
  %5203 = load i32, i32* %5200, align 4, !tbaa !33
  %5204 = add nsw i32 %5203, %5202
  store i32 %5204, i32* %5200, align 4, !tbaa !33
  %5205 = add nsw i64 %5199, 1
  %5206 = icmp eq i64 %5205, 282
  br i1 %5206, label %5274, label %5198, !llvm.loop !186

; <label>:5207:                                   ; preds = %5207, %5062
  %5208 = phi i64 [ %5060, %5062 ], [ %5272, %5207 ]
  %5209 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %5208
  %5210 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %53, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %5208
  %5211 = bitcast i32* %5210 to <4 x i32>*
  %5212 = load <4 x i32>, <4 x i32>* %5211, align 4, !tbaa !11
  %5213 = bitcast i32* %5209 to <4 x i32>*
  %5214 = load <4 x i32>, <4 x i32>* %5213, align 16, !tbaa !11
  %5215 = add <4 x i32> %5214, %5212
  store <4 x i32> %5215, <4 x i32>* %5213, align 16, !tbaa !11
  %5216 = add nuw nsw i64 %5208, 4
  %5217 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %5216
  %5218 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %53, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %5216
  %5219 = bitcast i32* %5218 to <4 x i32>*
  %5220 = load <4 x i32>, <4 x i32>* %5219, align 4, !tbaa !11
  %5221 = bitcast i32* %5217 to <4 x i32>*
  %5222 = load <4 x i32>, <4 x i32>* %5221, align 16, !tbaa !11
  %5223 = add <4 x i32> %5222, %5220
  store <4 x i32> %5223, <4 x i32>* %5221, align 16, !tbaa !11
  %5224 = add nsw i64 %5208, 8
  %5225 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %5224
  %5226 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %53, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %5224
  %5227 = bitcast i32* %5226 to <4 x i32>*
  %5228 = load <4 x i32>, <4 x i32>* %5227, align 4, !tbaa !11
  %5229 = bitcast i32* %5225 to <4 x i32>*
  %5230 = load <4 x i32>, <4 x i32>* %5229, align 16, !tbaa !11
  %5231 = add <4 x i32> %5230, %5228
  store <4 x i32> %5231, <4 x i32>* %5229, align 16, !tbaa !11
  %5232 = add nsw i64 %5208, 12
  %5233 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %5232
  %5234 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %53, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %5232
  %5235 = bitcast i32* %5234 to <4 x i32>*
  %5236 = load <4 x i32>, <4 x i32>* %5235, align 4, !tbaa !11
  %5237 = bitcast i32* %5233 to <4 x i32>*
  %5238 = load <4 x i32>, <4 x i32>* %5237, align 16, !tbaa !11
  %5239 = add <4 x i32> %5238, %5236
  store <4 x i32> %5239, <4 x i32>* %5237, align 16, !tbaa !11
  %5240 = add nsw i64 %5208, 16
  %5241 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %5240
  %5242 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %53, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %5240
  %5243 = bitcast i32* %5242 to <4 x i32>*
  %5244 = load <4 x i32>, <4 x i32>* %5243, align 4, !tbaa !11
  %5245 = bitcast i32* %5241 to <4 x i32>*
  %5246 = load <4 x i32>, <4 x i32>* %5245, align 16, !tbaa !11
  %5247 = add <4 x i32> %5246, %5244
  store <4 x i32> %5247, <4 x i32>* %5245, align 16, !tbaa !11
  %5248 = add nsw i64 %5208, 20
  %5249 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %5248
  %5250 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %53, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %5248
  %5251 = bitcast i32* %5250 to <4 x i32>*
  %5252 = load <4 x i32>, <4 x i32>* %5251, align 4, !tbaa !11
  %5253 = bitcast i32* %5249 to <4 x i32>*
  %5254 = load <4 x i32>, <4 x i32>* %5253, align 16, !tbaa !11
  %5255 = add <4 x i32> %5254, %5252
  store <4 x i32> %5255, <4 x i32>* %5253, align 16, !tbaa !11
  %5256 = add nsw i64 %5208, 24
  %5257 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %5256
  %5258 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %53, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %5256
  %5259 = bitcast i32* %5258 to <4 x i32>*
  %5260 = load <4 x i32>, <4 x i32>* %5259, align 4, !tbaa !11
  %5261 = bitcast i32* %5257 to <4 x i32>*
  %5262 = load <4 x i32>, <4 x i32>* %5261, align 16, !tbaa !11
  %5263 = add <4 x i32> %5262, %5260
  store <4 x i32> %5263, <4 x i32>* %5261, align 16, !tbaa !11
  %5264 = add nsw i64 %5208, 28
  %5265 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %5264
  %5266 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %53, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %5264
  %5267 = bitcast i32* %5266 to <4 x i32>*
  %5268 = load <4 x i32>, <4 x i32>* %5267, align 4, !tbaa !11
  %5269 = bitcast i32* %5265 to <4 x i32>*
  %5270 = load <4 x i32>, <4 x i32>* %5269, align 16, !tbaa !11
  %5271 = add <4 x i32> %5270, %5268
  store <4 x i32> %5271, <4 x i32>* %5269, align 16, !tbaa !11
  %5272 = add nsw i64 %5208, 32
  %5273 = icmp slt i64 %5272, %3078
  br i1 %5273, label %5207, label %5070

; <label>:5274:                                   ; preds = %5198
  br label %5275

; <label>:5275:                                   ; preds = %5274, %5194, %5071
  call void @llvm.lifetime.end(i64 1128, i8* nonnull %5033) #11
  %5276 = bitcast %"class.Eigen::Product.310"* %192 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %5276) #11
  %5277 = ptrtoint %"class.Eigen::Matrix.123"* %140 to i64
  %5278 = getelementptr inbounds %"class.Eigen::Product.310", %"class.Eigen::Product.310"* %192, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.32"* %112, %"class.Eigen::Matrix.32"** %5278, align 8
  %5279 = getelementptr inbounds %"class.Eigen::Product.310", %"class.Eigen::Product.310"* %192, i64 0, i32 0, i32 1
  store %"class.Eigen::Matrix.77"* %126, %"class.Eigen::Matrix.77"** %5279, align 8
  %5280 = getelementptr inbounds %"class.Eigen::Product.310", %"class.Eigen::Product.310"* %192, i64 0, i32 1
  %5281 = bitcast %"class.Eigen::Transpose.296"* %5280 to i64*
  store i64 %5277, i64* %5281, align 8, !alias.scope !187
  %5282 = getelementptr inbounds %"struct.Eigen::internal::add_assign_op", %"struct.Eigen::internal::add_assign_op"* %52, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %5282) #11
  call void @_ZN5Eigen8internal15call_assignmentINS_6MatrixIiLin1ELin1ELi0ELin1ELin1EEENS_7ProductINS4_INS2_IiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS0_13add_assign_opIiiEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsr25evaluator_assume_aliasingISH_EE5valueEPvE4typeE(%"class.Eigen::Matrix.19"* nonnull dereferenceable(24) %104, %"class.Eigen::Product.310"* nonnull dereferenceable(24) %192, %"struct.Eigen::internal::add_assign_op"* nonnull dereferenceable(1) %52, i8* null) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %5282) #11
  call void @llvm.lifetime.end(i64 24, i8* nonnull %5276) #11
  %5283 = bitcast %"class.Eigen::Product.376"* %193 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %5283) #11
  %5284 = load i64, i64* %803, align 8, !tbaa !43
  %5285 = load i64, i64* %411, align 8, !tbaa !37
  %5286 = icmp eq i64 %5284, %5285
  br i1 %5286, label %5288, label %5287, !prof !10

; <label>:5287:                                   ; preds = %5275
  call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS1_IdLin1ELi1ELi0ELin1ELi1EEELi0EEC2ERKS2_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 97, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2, i64 0, i64 0)) #13
  unreachable

; <label>:5288:                                   ; preds = %5275
  %5289 = getelementptr inbounds %"class.Eigen::Product.376", %"class.Eigen::Product.376"* %193, i64 0, i32 0, i32 0, i32 0
  store %"class.Eigen::Matrix.123"* %141, %"class.Eigen::Matrix.123"** %5289, align 8
  %5290 = getelementptr inbounds %"class.Eigen::Product.376", %"class.Eigen::Product.376"* %193, i64 0, i32 0, i32 1
  store %"class.Eigen::Matrix.32"* %110, %"class.Eigen::Matrix.32"** %5290, align 8
  %5291 = getelementptr inbounds %"class.Eigen::Product.376", %"class.Eigen::Product.376"* %193, i64 0, i32 1
  store %"class.Eigen::Matrix.77"* %126, %"class.Eigen::Matrix.77"** %5291, align 8, !tbaa !11, !alias.scope !190
  %5292 = bitcast %"class.Eigen::Matrix.108"* %51 to i8*
  call void @llvm.lifetime.start(i64 144, i8* nonnull %5292) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %5292, i8 0, i64 144, i32 16, i1 false) #11
  %5293 = bitcast %"class.Eigen::Matrix.94"* %49 to i8*
  call void @llvm.lifetime.start(i64 1128, i8* nonnull %5293) #11
  %5294 = getelementptr inbounds %"class.Eigen::Product.376", %"class.Eigen::Product.376"* %193, i64 0, i32 0, i32 0
  call void @_ZN5Eigen8internal20generic_product_implINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS3_IiLin1ELi47ELi0ELin1ELi47EEENS_10DenseShapeES7_Li8EE6evalToINS3_IiLi6ELi47ELi0ELi6ELi47EEEEEvRT_RKS5_RKS6_(%"class.Eigen::Matrix.94"* nonnull dereferenceable(1128) %49, %"class.Eigen::Transpose.331"* nonnull dereferenceable(8) %5294, %"class.Eigen::Matrix.32"* nonnull dereferenceable(16) %110) #11
  %5295 = bitcast %"class.Eigen::internal::gemm_blocking_space.1501"* %50 to i8*
  call void @llvm.lifetime.start(i64 2368, i8* nonnull %5295) #11
  %5296 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1501", %"class.Eigen::internal::gemm_blocking_space.1501"* %50, i64 0, i32 0, i32 2
  %5297 = bitcast i64* %5296 to <2 x i64>*
  store <2 x i64> <i64 6, i64 6>, <2 x i64>* %5297, align 16, !tbaa !32
  %5298 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1501", %"class.Eigen::internal::gemm_blocking_space.1501"* %50, i64 0, i32 0, i32 4
  store i64 47, i64* %5298, align 32, !tbaa !193
  %5299 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1501", %"class.Eigen::internal::gemm_blocking_space.1501"* %50, i64 0, i32 2, i64 0
  %5300 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1501", %"class.Eigen::internal::gemm_blocking_space.1501"* %50, i64 0, i32 0, i32 0
  store i32* %5299, i32** %5300, align 32, !tbaa !195
  %5301 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1501", %"class.Eigen::internal::gemm_blocking_space.1501"* %50, i64 0, i32 4, i64 0
  %5302 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1501", %"class.Eigen::internal::gemm_blocking_space.1501"* %50, i64 0, i32 0, i32 1
  store i32* %5301, i32** %5302, align 8, !tbaa !196
  %5303 = getelementptr inbounds %"class.Eigen::Matrix.94", %"class.Eigen::Matrix.94"* %49, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %5304 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %5305 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %51, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %5306 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1501", %"class.Eigen::internal::gemm_blocking_space.1501"* %50, i64 0, i32 0
  call void @_ZN5Eigen8internal29general_matrix_matrix_productIliLi0ELb0EiLi0ELb0ELi0EE3runElllPKilS4_lPiliRNS0_15level3_blockingIiiEEPNS0_16GemmParallelInfoIlEE(i64 6, i64 6, i64 47, i32* nonnull %5303, i64 6, i32* nonnull %5304, i64 47, i32* nonnull %5305, i64 6, i32 1, %"class.Eigen::internal::level3_blocking"* nonnull dereferenceable(40) %5306, %"struct.Eigen::internal::GemmParallelInfo"* null) #11
  call void @llvm.lifetime.end(i64 2368, i8* nonnull %5295) #11
  call void @llvm.lifetime.end(i64 1128, i8* nonnull %5293) #11
  %5307 = bitcast %"class.Eigen::Matrix.108"* %135 to <2 x i64>*
  %5308 = bitcast %"class.Eigen::Matrix.108"* %51 to <2 x i64>*
  %5309 = load <2 x i64>, <2 x i64>* %5308, align 16, !tbaa !11
  store <2 x i64> %5309, <2 x i64>* %5307, align 16, !tbaa !11
  %5310 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %135, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %5311 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %51, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %5312 = bitcast i32* %5311 to <2 x i64>*
  %5313 = load <2 x i64>, <2 x i64>* %5312, align 16, !tbaa !11
  %5314 = bitcast i32* %5310 to <2 x i64>*
  store <2 x i64> %5313, <2 x i64>* %5314, align 16, !tbaa !11
  %5315 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %135, i64 0, i32 0, i32 0, i32 0, i32 0, i64 8
  %5316 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %51, i64 0, i32 0, i32 0, i32 0, i32 0, i64 8
  %5317 = bitcast i32* %5316 to <2 x i64>*
  %5318 = load <2 x i64>, <2 x i64>* %5317, align 16, !tbaa !11
  %5319 = bitcast i32* %5315 to <2 x i64>*
  store <2 x i64> %5318, <2 x i64>* %5319, align 16, !tbaa !11
  %5320 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %135, i64 0, i32 0, i32 0, i32 0, i32 0, i64 12
  %5321 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %51, i64 0, i32 0, i32 0, i32 0, i32 0, i64 12
  %5322 = bitcast i32* %5321 to <2 x i64>*
  %5323 = load <2 x i64>, <2 x i64>* %5322, align 16, !tbaa !11
  %5324 = bitcast i32* %5320 to <2 x i64>*
  store <2 x i64> %5323, <2 x i64>* %5324, align 16, !tbaa !11
  %5325 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %135, i64 0, i32 0, i32 0, i32 0, i32 0, i64 16
  %5326 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %51, i64 0, i32 0, i32 0, i32 0, i32 0, i64 16
  %5327 = bitcast i32* %5326 to <2 x i64>*
  %5328 = load <2 x i64>, <2 x i64>* %5327, align 16, !tbaa !11
  %5329 = bitcast i32* %5325 to <2 x i64>*
  store <2 x i64> %5328, <2 x i64>* %5329, align 16, !tbaa !11
  %5330 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %135, i64 0, i32 0, i32 0, i32 0, i32 0, i64 20
  %5331 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %51, i64 0, i32 0, i32 0, i32 0, i32 0, i64 20
  %5332 = bitcast i32* %5331 to <2 x i64>*
  %5333 = load <2 x i64>, <2 x i64>* %5332, align 16, !tbaa !11
  %5334 = bitcast i32* %5330 to <2 x i64>*
  store <2 x i64> %5333, <2 x i64>* %5334, align 16, !tbaa !11
  %5335 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %135, i64 0, i32 0, i32 0, i32 0, i32 0, i64 24
  %5336 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %51, i64 0, i32 0, i32 0, i32 0, i32 0, i64 24
  %5337 = bitcast i32* %5336 to <2 x i64>*
  %5338 = load <2 x i64>, <2 x i64>* %5337, align 16, !tbaa !11
  %5339 = bitcast i32* %5335 to <2 x i64>*
  store <2 x i64> %5338, <2 x i64>* %5339, align 16, !tbaa !11
  %5340 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %135, i64 0, i32 0, i32 0, i32 0, i32 0, i64 28
  %5341 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %51, i64 0, i32 0, i32 0, i32 0, i32 0, i64 28
  %5342 = bitcast i32* %5341 to <2 x i64>*
  %5343 = load <2 x i64>, <2 x i64>* %5342, align 16, !tbaa !11
  %5344 = bitcast i32* %5340 to <2 x i64>*
  store <2 x i64> %5343, <2 x i64>* %5344, align 16, !tbaa !11
  %5345 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %135, i64 0, i32 0, i32 0, i32 0, i32 0, i64 32
  %5346 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %51, i64 0, i32 0, i32 0, i32 0, i32 0, i64 32
  %5347 = bitcast i32* %5346 to <2 x i64>*
  %5348 = load <2 x i64>, <2 x i64>* %5347, align 16, !tbaa !11
  %5349 = bitcast i32* %5345 to <2 x i64>*
  store <2 x i64> %5348, <2 x i64>* %5349, align 16, !tbaa !11
  call void @llvm.lifetime.end(i64 144, i8* nonnull %5292) #11
  call void @llvm.lifetime.end(i64 24, i8* nonnull %5283) #11
  %5350 = bitcast %"class.Eigen::Product.234"* %194 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %5350) #11
  %5351 = getelementptr inbounds %"class.Eigen::Product.234", %"class.Eigen::Product.234"* %194, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.153"* %150, %"class.Eigen::Matrix.153"** %5351, align 8
  %5352 = getelementptr inbounds %"class.Eigen::Product.234", %"class.Eigen::Product.234"* %194, i64 0, i32 1, i32 0
  store %"class.Eigen::Matrix.32"* %111, %"class.Eigen::Matrix.32"** %5352, align 8
  %5353 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %152, i64 0, i32 0
  %5354 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %48, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %5354) #11
  %5355 = bitcast %"class.Eigen::Matrix.724"* %47 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %5355) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %5355, i8 0, i64 16, i32 8, i1 false) #11
  %5356 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %46, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %5356) #11
  call void @_ZN5Eigen8internal10AssignmentINS_6MatrixIiLi1ELin1ELi1ELi1ELin1EEENS_7ProductINS_9TransposeINS2_IiLi47ELi1ELi0ELi47ELi1EEEEENS5_INS2_IiLin1ELi47ELi0ELin1ELi47EEEEELi0EEENS0_9assign_opIiiEENS0_11Dense2DenseEvE3runERS3_RKSA_RKSC_(%"class.Eigen::Matrix.724"* nonnull dereferenceable(16) %47, %"class.Eigen::Product.234"* nonnull dereferenceable(16) %194, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %46) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %5356) #11
  %5357 = bitcast %"class.Eigen::Transpose.798"* %45 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %5357) #11
  %5358 = bitcast %"class.Eigen::Transpose.798"* %45 to %"class.Eigen::PlainObjectBase.171"**
  store %"class.Eigen::PlainObjectBase.171"* %5353, %"class.Eigen::PlainObjectBase.171"** %5358, align 8, !tbaa !11
  %5359 = load i32*, i32** %1191, align 8, !tbaa !44
  %5360 = getelementptr inbounds %"class.Eigen::Matrix.724", %"class.Eigen::Matrix.724"* %47, i64 0, i32 0, i32 0, i32 0
  %5361 = load i32*, i32** %5360, align 8
  %5362 = icmp eq i32* %5361, %5359
  %5363 = icmp ne i32* %5359, null
  %5364 = and i1 %5363, %5362
  br i1 %5364, label %5365, label %5366, !prof !50

; <label>:5365:                                   ; preds = %5288
  call void @__assert_rtn(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__func__._ZN5Eigen8internal10redux_implINS0_17scalar_product_opIiiEENS0_15redux_evaluatorINS_6MatrixIiLi6ELi1ELi0ELi6ELi1EEEEELi3ELi2EE3runERKS7_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.31, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([275 x i8], [275 x i8]* @.str.32, i64 0, i64 0)) #13
  unreachable

; <label>:5366:                                   ; preds = %5288
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_9TransposeINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEEEENS3_IiLi1ELin1ELi1ELi1ELin1EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Transpose.798"* nonnull dereferenceable(8) %45, %"class.Eigen::Matrix.724"* nonnull dereferenceable(16) %47, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %48) #11
  call void @llvm.lifetime.end(i64 8, i8* nonnull %5357) #11
  %5367 = load i32*, i32** %5360, align 8, !tbaa !197
  %5368 = icmp eq i32* %5367, null
  br i1 %5368, label %5373, label %5369

; <label>:5369:                                   ; preds = %5366
  %5370 = getelementptr inbounds i32, i32* %5367, i64 -2
  %5371 = bitcast i32* %5370 to i8**
  %5372 = load i8*, i8** %5371, align 8, !tbaa !29
  call void @free(i8* %5372) #11
  br label %5373

; <label>:5373:                                   ; preds = %5366, %5369
  call void @llvm.lifetime.end(i64 16, i8* nonnull %5355) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %5354) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %5350) #11
  %5374 = bitcast %"class.Eigen::CwiseBinaryOp.220"* %195 to i8*
  call void @llvm.lifetime.start(i64 40, i8* nonnull %5374) #11
  %5375 = load <4 x i32>, <4 x i32>* %2174, align 16, !tbaa !11
  %5376 = mul <4 x i32> %5375, %5375
  %5377 = load <4 x i32>, <4 x i32>* %2178, align 16, !tbaa !11
  %5378 = mul <4 x i32> %5377, %5377
  %5379 = load <4 x i32>, <4 x i32>* %2182, align 16, !tbaa !11
  %5380 = mul <4 x i32> %5379, %5379
  %5381 = load <4 x i32>, <4 x i32>* %2186, align 16, !tbaa !11
  %5382 = mul <4 x i32> %5381, %5381
  %5383 = load <4 x i32>, <4 x i32>* %2190, align 16, !tbaa !11
  %5384 = mul <4 x i32> %5383, %5383
  %5385 = load <4 x i32>, <4 x i32>* %2194, align 16, !tbaa !11
  %5386 = mul <4 x i32> %5385, %5385
  %5387 = load <4 x i32>, <4 x i32>* %2198, align 16, !tbaa !11
  %5388 = mul <4 x i32> %5387, %5387
  %5389 = load <4 x i32>, <4 x i32>* %2202, align 16, !tbaa !11
  %5390 = mul <4 x i32> %5389, %5389
  %5391 = load <4 x i32>, <4 x i32>* %2206, align 16, !tbaa !11
  %5392 = mul <4 x i32> %5391, %5391
  %5393 = load <4 x i32>, <4 x i32>* %2210, align 16, !tbaa !11
  %5394 = mul <4 x i32> %5393, %5393
  %5395 = load <4 x i32>, <4 x i32>* %2214, align 16, !tbaa !11
  %5396 = mul <4 x i32> %5395, %5395
  %5397 = add <4 x i32> %5378, %5376
  %5398 = add <4 x i32> %5397, %5380
  %5399 = add <4 x i32> %5398, %5382
  %5400 = add <4 x i32> %5399, %5384
  %5401 = add <4 x i32> %5400, %5386
  %5402 = add <4 x i32> %5401, %5388
  %5403 = add <4 x i32> %5402, %5390
  %5404 = add <4 x i32> %5403, %5392
  %5405 = add <4 x i32> %5404, %5394
  %5406 = add <4 x i32> %5405, %5396
  %5407 = call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %5406, <4 x i32> %5406) #11
  %5408 = load i32, i32* %2228, align 16, !tbaa !33
  %5409 = load i32, i32* %2230, align 4, !tbaa !33
  %5410 = load i32, i32* %2232, align 8, !tbaa !33
  %5411 = load i64, i64* %345, align 8, !tbaa !37, !noalias !199
  %5412 = icmp slt i64 %5411, 0
  br i1 %5412, label %5413, label %5414, !prof !50

; <label>:5413:                                   ; preds = %5373
  call void @__assert_rtn(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__._ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEENS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEC2EllRKS3_, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.13, i64 0, i64 0), i32 74, i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.14, i64 0, i64 0)) #13, !noalias !199
  unreachable

; <label>:5414:                                   ; preds = %5373
  %5415 = mul nsw i32 %5408, %5408
  %5416 = call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %5407, <4 x i32> %5407) #11
  %5417 = extractelement <4 x i32> %5416, i32 0
  %5418 = mul nsw i32 %5409, %5409
  %5419 = mul nsw i32 %5410, %5410
  %5420 = add nuw i32 %5418, %5415
  %5421 = add i32 %5420, %5419
  %5422 = add i32 %5421, %5417
  %5423 = sitofp i32 %5422 to double
  %5424 = call double @sqrt(double %5423) #5
  %5425 = fptosi double %5424 to i32
  %5426 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %195, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.32"* %107, %"class.Eigen::Matrix.32"** %5426, align 8
  %5427 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %195, i64 0, i32 0, i32 1
  store %"class.Eigen::Matrix.153"* %149, %"class.Eigen::Matrix.153"** %5427, align 8
  %5428 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %195, i64 0, i32 1, i32 0, i32 0
  store i64 %5411, i64* %5428, align 8, !alias.scope !199
  %5429 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %195, i64 0, i32 1, i32 2, i32 0
  store i32 %5425, i32* %5429, align 4, !tbaa !51, !alias.scope !199
  %5430 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %44, i64 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start(i64 48, i8* nonnull %5430) #11
  %5431 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %195, i64 0, i32 0
  %5432 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %44, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS3_IiLi47ELi1ELi0ELi47ELi1EEELi0EEELi7ENS_10DenseShapeES7_iiEC2ERKS6_(%"struct.Eigen::internal::product_evaluator.706"* %5432, %"class.Eigen::Product.226"* nonnull dereferenceable(16) %5431) #11
  %5433 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %44, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %5434 = load i32, i32* %5429, align 4, !tbaa !51
  store i32 %5434, i32* %5433, align 8, !tbaa !51
  %5435 = load i64, i64* %1257, align 8, !tbaa !46
  %5436 = load i64, i64* %5428, align 8, !tbaa !59
  %5437 = icmp eq i64 %5435, %5436
  br i1 %5437, label %5439, label %5438

; <label>:5438:                                   ; preds = %5414
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__._ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEENS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES3_EEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.15, i64 0, i64 0), i32 710, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.29, i64 0, i64 0)) #13
  unreachable

; <label>:5439:                                   ; preds = %5414
  %5440 = load i64, i64* %2263, align 8, !tbaa !44
  %5441 = sdiv i64 %5435, 4
  %5442 = shl nsw i64 %5441, 2
  %5443 = icmp sgt i64 %5435, 3
  br i1 %5443, label %5444, label %5489

; <label>:5444:                                   ; preds = %5439
  %5445 = inttoptr i64 %5440 to i32*
  %5446 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %44, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %5447 = bitcast i32** %5446 to <4 x i32>**
  %5448 = load <4 x i32>*, <4 x i32>** %5447, align 8, !tbaa !61
  %5449 = load <4 x i32>, <4 x i32>* %5448, align 16, !tbaa !11
  %5450 = insertelement <4 x i32> undef, i32 %5434, i32 0
  %5451 = shufflevector <4 x i32> %5450, <4 x i32> undef, <4 x i32> zeroinitializer
  %5452 = mul <4 x i32> %5449, %5451
  %5453 = inttoptr i64 %5440 to <4 x i32>*
  %5454 = load <4 x i32>, <4 x i32>* %5453, align 16, !tbaa !11
  %5455 = add <4 x i32> %5452, %5454
  store <4 x i32> %5455, <4 x i32>* %5453, align 16, !tbaa !11
  %5456 = icmp sgt i64 %5442, 4
  br i1 %5456, label %5457, label %5489

; <label>:5457:                                   ; preds = %5444
  %5458 = add i64 %5442, -5
  %5459 = lshr i64 %5458, 2
  %5460 = add nuw nsw i64 %5459, 1
  %5461 = and i64 %5460, 3
  %5462 = icmp eq i64 %5461, 0
  br i1 %5462, label %5483, label %5463

; <label>:5463:                                   ; preds = %5457
  br label %5464

; <label>:5464:                                   ; preds = %5464, %5463
  %5465 = phi i64 [ %5479, %5464 ], [ 4, %5463 ]
  %5466 = phi i64 [ %5480, %5464 ], [ %5461, %5463 ]
  %5467 = load i32, i32* %5433, align 8, !tbaa !33
  %5468 = getelementptr inbounds i32, i32* %5445, i64 %5465
  %5469 = load i32*, i32** %5446, align 8, !tbaa !61
  %5470 = getelementptr inbounds i32, i32* %5469, i64 %5465
  %5471 = bitcast i32* %5470 to <4 x i32>*
  %5472 = load <4 x i32>, <4 x i32>* %5471, align 16, !tbaa !11
  %5473 = insertelement <4 x i32> undef, i32 %5467, i32 0
  %5474 = shufflevector <4 x i32> %5473, <4 x i32> undef, <4 x i32> zeroinitializer
  %5475 = mul <4 x i32> %5472, %5474
  %5476 = bitcast i32* %5468 to <4 x i32>*
  %5477 = load <4 x i32>, <4 x i32>* %5476, align 16, !tbaa !11
  %5478 = add <4 x i32> %5475, %5477
  store <4 x i32> %5478, <4 x i32>* %5476, align 16, !tbaa !11
  %5479 = add nuw nsw i64 %5465, 4
  %5480 = add i64 %5466, -1
  %5481 = icmp eq i64 %5480, 0
  br i1 %5481, label %5482, label %5464, !llvm.loop !202

; <label>:5482:                                   ; preds = %5464
  br label %5483

; <label>:5483:                                   ; preds = %5457, %5482
  %5484 = phi i64 [ 4, %5457 ], [ %5479, %5482 ]
  %5485 = icmp ult i64 %5458, 12
  br i1 %5485, label %5488, label %5486

; <label>:5486:                                   ; preds = %5483
  br label %5627

; <label>:5487:                                   ; preds = %5627
  br label %5488

; <label>:5488:                                   ; preds = %5483, %5487
  br label %5489

; <label>:5489:                                   ; preds = %5488, %5444, %5439
  %5490 = icmp sgt i64 %5435, %5442
  br i1 %5490, label %5491, label %5684

; <label>:5491:                                   ; preds = %5489
  %5492 = inttoptr i64 %5440 to i32*
  %5493 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %44, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %5494 = load i32*, i32** %5493, align 8, !tbaa !61
  %5495 = sub i64 %5435, %5442
  %5496 = icmp ult i64 %5495, 32
  br i1 %5496, label %5566, label %5497

; <label>:5497:                                   ; preds = %5491
  %5498 = and i64 %5495, -32
  %5499 = icmp eq i64 %5498, 0
  br i1 %5499, label %5566, label %5500

; <label>:5500:                                   ; preds = %5497
  %5501 = getelementptr i32, i32* %5492, i64 %5442
  %5502 = getelementptr i32, i32* %5492, i64 %5435
  %5503 = getelementptr i32, i32* %5494, i64 %5442
  %5504 = getelementptr i32, i32* %5494, i64 %5435
  %5505 = icmp ult i32* %5501, %5433
  %5506 = icmp ult i32* %5433, %5502
  %5507 = and i1 %5505, %5506
  %5508 = icmp ult i32* %5501, %5504
  %5509 = icmp ult i32* %5503, %5502
  %5510 = and i1 %5508, %5509
  %5511 = or i1 %5507, %5510
  %5512 = add i64 %5442, %5498
  br i1 %5511, label %5566, label %5513

; <label>:5513:                                   ; preds = %5500
  %5514 = load i32, i32* %5433, align 8, !tbaa !51, !alias.scope !203
  %5515 = insertelement <8 x i32> undef, i32 %5514, i32 0
  %5516 = shufflevector <8 x i32> %5515, <8 x i32> undef, <8 x i32> zeroinitializer
  %5517 = insertelement <8 x i32> undef, i32 %5514, i32 0
  %5518 = shufflevector <8 x i32> %5517, <8 x i32> undef, <8 x i32> zeroinitializer
  %5519 = insertelement <8 x i32> undef, i32 %5514, i32 0
  %5520 = shufflevector <8 x i32> %5519, <8 x i32> undef, <8 x i32> zeroinitializer
  %5521 = insertelement <8 x i32> undef, i32 %5514, i32 0
  %5522 = shufflevector <8 x i32> %5521, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %5523

; <label>:5523:                                   ; preds = %5513, %5523
  %5524 = phi i64 [ %5562, %5523 ], [ 0, %5513 ]
  %5525 = add i64 %5442, %5524
  %5526 = getelementptr inbounds i32, i32* %5492, i64 %5525
  %5527 = getelementptr inbounds i32, i32* %5494, i64 %5525
  %5528 = bitcast i32* %5527 to <8 x i32>*
  %5529 = load <8 x i32>, <8 x i32>* %5528, align 4, !tbaa !33, !alias.scope !206
  %5530 = getelementptr i32, i32* %5527, i64 8
  %5531 = bitcast i32* %5530 to <8 x i32>*
  %5532 = load <8 x i32>, <8 x i32>* %5531, align 4, !tbaa !33, !alias.scope !206
  %5533 = getelementptr i32, i32* %5527, i64 16
  %5534 = bitcast i32* %5533 to <8 x i32>*
  %5535 = load <8 x i32>, <8 x i32>* %5534, align 4, !tbaa !33, !alias.scope !206
  %5536 = getelementptr i32, i32* %5527, i64 24
  %5537 = bitcast i32* %5536 to <8 x i32>*
  %5538 = load <8 x i32>, <8 x i32>* %5537, align 4, !tbaa !33, !alias.scope !206
  %5539 = mul nsw <8 x i32> %5529, %5516
  %5540 = mul nsw <8 x i32> %5532, %5518
  %5541 = mul nsw <8 x i32> %5535, %5520
  %5542 = mul nsw <8 x i32> %5538, %5522
  %5543 = bitcast i32* %5526 to <8 x i32>*
  %5544 = load <8 x i32>, <8 x i32>* %5543, align 4, !tbaa !33, !alias.scope !208, !noalias !210
  %5545 = getelementptr i32, i32* %5526, i64 8
  %5546 = bitcast i32* %5545 to <8 x i32>*
  %5547 = load <8 x i32>, <8 x i32>* %5546, align 4, !tbaa !33, !alias.scope !208, !noalias !210
  %5548 = getelementptr i32, i32* %5526, i64 16
  %5549 = bitcast i32* %5548 to <8 x i32>*
  %5550 = load <8 x i32>, <8 x i32>* %5549, align 4, !tbaa !33, !alias.scope !208, !noalias !210
  %5551 = getelementptr i32, i32* %5526, i64 24
  %5552 = bitcast i32* %5551 to <8 x i32>*
  %5553 = load <8 x i32>, <8 x i32>* %5552, align 4, !tbaa !33, !alias.scope !208, !noalias !210
  %5554 = add nsw <8 x i32> %5544, %5539
  %5555 = add nsw <8 x i32> %5547, %5540
  %5556 = add nsw <8 x i32> %5550, %5541
  %5557 = add nsw <8 x i32> %5553, %5542
  %5558 = bitcast i32* %5526 to <8 x i32>*
  store <8 x i32> %5554, <8 x i32>* %5558, align 4, !tbaa !33, !alias.scope !208, !noalias !210
  %5559 = bitcast i32* %5545 to <8 x i32>*
  store <8 x i32> %5555, <8 x i32>* %5559, align 4, !tbaa !33, !alias.scope !208, !noalias !210
  %5560 = bitcast i32* %5548 to <8 x i32>*
  store <8 x i32> %5556, <8 x i32>* %5560, align 4, !tbaa !33, !alias.scope !208, !noalias !210
  %5561 = bitcast i32* %5551 to <8 x i32>*
  store <8 x i32> %5557, <8 x i32>* %5561, align 4, !tbaa !33, !alias.scope !208, !noalias !210
  %5562 = add i64 %5524, 32
  %5563 = icmp eq i64 %5562, %5498
  br i1 %5563, label %5564, label %5523, !llvm.loop !211

; <label>:5564:                                   ; preds = %5523
  %5565 = icmp eq i64 %5495, %5498
  br i1 %5565, label %5684, label %5566

; <label>:5566:                                   ; preds = %5564, %5500, %5497, %5491
  %5567 = phi i64 [ %5442, %5500 ], [ %5442, %5497 ], [ %5442, %5491 ], [ %5512, %5564 ]
  %5568 = sub i64 %5435, %5567
  %5569 = add i64 %5435, -1
  %5570 = sub i64 %5569, %5567
  %5571 = and i64 %5568, 3
  %5572 = icmp eq i64 %5571, 0
  br i1 %5572, label %5588, label %5573

; <label>:5573:                                   ; preds = %5566
  br label %5574

; <label>:5574:                                   ; preds = %5574, %5573
  %5575 = phi i64 [ %5584, %5574 ], [ %5567, %5573 ]
  %5576 = phi i64 [ %5585, %5574 ], [ %5571, %5573 ]
  %5577 = getelementptr inbounds i32, i32* %5492, i64 %5575
  %5578 = getelementptr inbounds i32, i32* %5494, i64 %5575
  %5579 = load i32, i32* %5433, align 8, !tbaa !51
  %5580 = load i32, i32* %5578, align 4, !tbaa !33
  %5581 = mul nsw i32 %5580, %5579
  %5582 = load i32, i32* %5577, align 4, !tbaa !33
  %5583 = add nsw i32 %5582, %5581
  store i32 %5583, i32* %5577, align 4, !tbaa !33
  %5584 = add nsw i64 %5575, 1
  %5585 = add i64 %5576, -1
  %5586 = icmp eq i64 %5585, 0
  br i1 %5586, label %5587, label %5574, !llvm.loop !212

; <label>:5587:                                   ; preds = %5574
  br label %5588

; <label>:5588:                                   ; preds = %5566, %5587
  %5589 = phi i64 [ %5567, %5566 ], [ %5584, %5587 ]
  %5590 = icmp ult i64 %5570, 3
  br i1 %5590, label %5683, label %5591

; <label>:5591:                                   ; preds = %5588
  br label %5592

; <label>:5592:                                   ; preds = %5592, %5591
  %5593 = phi i64 [ %5589, %5591 ], [ %5625, %5592 ]
  %5594 = getelementptr inbounds i32, i32* %5492, i64 %5593
  %5595 = getelementptr inbounds i32, i32* %5494, i64 %5593
  %5596 = load i32, i32* %5433, align 8, !tbaa !51
  %5597 = load i32, i32* %5595, align 4, !tbaa !33
  %5598 = mul nsw i32 %5597, %5596
  %5599 = load i32, i32* %5594, align 4, !tbaa !33
  %5600 = add nsw i32 %5599, %5598
  store i32 %5600, i32* %5594, align 4, !tbaa !33
  %5601 = add nsw i64 %5593, 1
  %5602 = getelementptr inbounds i32, i32* %5492, i64 %5601
  %5603 = getelementptr inbounds i32, i32* %5494, i64 %5601
  %5604 = load i32, i32* %5433, align 8, !tbaa !51
  %5605 = load i32, i32* %5603, align 4, !tbaa !33
  %5606 = mul nsw i32 %5605, %5604
  %5607 = load i32, i32* %5602, align 4, !tbaa !33
  %5608 = add nsw i32 %5607, %5606
  store i32 %5608, i32* %5602, align 4, !tbaa !33
  %5609 = add nsw i64 %5593, 2
  %5610 = getelementptr inbounds i32, i32* %5492, i64 %5609
  %5611 = getelementptr inbounds i32, i32* %5494, i64 %5609
  %5612 = load i32, i32* %5433, align 8, !tbaa !51
  %5613 = load i32, i32* %5611, align 4, !tbaa !33
  %5614 = mul nsw i32 %5613, %5612
  %5615 = load i32, i32* %5610, align 4, !tbaa !33
  %5616 = add nsw i32 %5615, %5614
  store i32 %5616, i32* %5610, align 4, !tbaa !33
  %5617 = add nsw i64 %5593, 3
  %5618 = getelementptr inbounds i32, i32* %5492, i64 %5617
  %5619 = getelementptr inbounds i32, i32* %5494, i64 %5617
  %5620 = load i32, i32* %5433, align 8, !tbaa !51
  %5621 = load i32, i32* %5619, align 4, !tbaa !33
  %5622 = mul nsw i32 %5621, %5620
  %5623 = load i32, i32* %5618, align 4, !tbaa !33
  %5624 = add nsw i32 %5623, %5622
  store i32 %5624, i32* %5618, align 4, !tbaa !33
  %5625 = add nsw i64 %5593, 4
  %5626 = icmp eq i64 %5625, %5435
  br i1 %5626, label %5682, label %5592, !llvm.loop !213

; <label>:5627:                                   ; preds = %5627, %5486
  %5628 = phi i64 [ %5484, %5486 ], [ %5680, %5627 ]
  %5629 = load i32, i32* %5433, align 8, !tbaa !33
  %5630 = getelementptr inbounds i32, i32* %5445, i64 %5628
  %5631 = load i32*, i32** %5446, align 8, !tbaa !61
  %5632 = getelementptr inbounds i32, i32* %5631, i64 %5628
  %5633 = bitcast i32* %5632 to <4 x i32>*
  %5634 = load <4 x i32>, <4 x i32>* %5633, align 16, !tbaa !11
  %5635 = insertelement <4 x i32> undef, i32 %5629, i32 0
  %5636 = shufflevector <4 x i32> %5635, <4 x i32> undef, <4 x i32> zeroinitializer
  %5637 = mul <4 x i32> %5634, %5636
  %5638 = bitcast i32* %5630 to <4 x i32>*
  %5639 = load <4 x i32>, <4 x i32>* %5638, align 16, !tbaa !11
  %5640 = add <4 x i32> %5637, %5639
  store <4 x i32> %5640, <4 x i32>* %5638, align 16, !tbaa !11
  %5641 = add nuw nsw i64 %5628, 4
  %5642 = load i32, i32* %5433, align 8, !tbaa !33
  %5643 = getelementptr inbounds i32, i32* %5445, i64 %5641
  %5644 = load i32*, i32** %5446, align 8, !tbaa !61
  %5645 = getelementptr inbounds i32, i32* %5644, i64 %5641
  %5646 = bitcast i32* %5645 to <4 x i32>*
  %5647 = load <4 x i32>, <4 x i32>* %5646, align 16, !tbaa !11
  %5648 = insertelement <4 x i32> undef, i32 %5642, i32 0
  %5649 = shufflevector <4 x i32> %5648, <4 x i32> undef, <4 x i32> zeroinitializer
  %5650 = mul <4 x i32> %5647, %5649
  %5651 = bitcast i32* %5643 to <4 x i32>*
  %5652 = load <4 x i32>, <4 x i32>* %5651, align 16, !tbaa !11
  %5653 = add <4 x i32> %5650, %5652
  store <4 x i32> %5653, <4 x i32>* %5651, align 16, !tbaa !11
  %5654 = add nsw i64 %5628, 8
  %5655 = load i32, i32* %5433, align 8, !tbaa !33
  %5656 = getelementptr inbounds i32, i32* %5445, i64 %5654
  %5657 = load i32*, i32** %5446, align 8, !tbaa !61
  %5658 = getelementptr inbounds i32, i32* %5657, i64 %5654
  %5659 = bitcast i32* %5658 to <4 x i32>*
  %5660 = load <4 x i32>, <4 x i32>* %5659, align 16, !tbaa !11
  %5661 = insertelement <4 x i32> undef, i32 %5655, i32 0
  %5662 = shufflevector <4 x i32> %5661, <4 x i32> undef, <4 x i32> zeroinitializer
  %5663 = mul <4 x i32> %5660, %5662
  %5664 = bitcast i32* %5656 to <4 x i32>*
  %5665 = load <4 x i32>, <4 x i32>* %5664, align 16, !tbaa !11
  %5666 = add <4 x i32> %5663, %5665
  store <4 x i32> %5666, <4 x i32>* %5664, align 16, !tbaa !11
  %5667 = add nsw i64 %5628, 12
  %5668 = load i32, i32* %5433, align 8, !tbaa !33
  %5669 = getelementptr inbounds i32, i32* %5445, i64 %5667
  %5670 = load i32*, i32** %5446, align 8, !tbaa !61
  %5671 = getelementptr inbounds i32, i32* %5670, i64 %5667
  %5672 = bitcast i32* %5671 to <4 x i32>*
  %5673 = load <4 x i32>, <4 x i32>* %5672, align 16, !tbaa !11
  %5674 = insertelement <4 x i32> undef, i32 %5668, i32 0
  %5675 = shufflevector <4 x i32> %5674, <4 x i32> undef, <4 x i32> zeroinitializer
  %5676 = mul <4 x i32> %5673, %5675
  %5677 = bitcast i32* %5669 to <4 x i32>*
  %5678 = load <4 x i32>, <4 x i32>* %5677, align 16, !tbaa !11
  %5679 = add <4 x i32> %5676, %5678
  store <4 x i32> %5679, <4 x i32>* %5677, align 16, !tbaa !11
  %5680 = add nsw i64 %5628, 16
  %5681 = icmp slt i64 %5680, %5442
  br i1 %5681, label %5627, label %5487

; <label>:5682:                                   ; preds = %5592
  br label %5683

; <label>:5683:                                   ; preds = %5588, %5682
  br label %5684

; <label>:5684:                                   ; preds = %5683, %5564, %5489
  %5685 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %44, i64 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %5686 = load i32*, i32** %5685, align 8, !tbaa !44
  %5687 = icmp eq i32* %5686, null
  br i1 %5687, label %5692, label %5688

; <label>:5688:                                   ; preds = %5684
  %5689 = getelementptr inbounds i32, i32* %5686, i64 -2
  %5690 = bitcast i32* %5689 to i8**
  %5691 = load i8*, i8** %5690, align 8, !tbaa !29
  call void @free(i8* %5691) #11
  br label %5692

; <label>:5692:                                   ; preds = %5684, %5688
  call void @llvm.lifetime.end(i64 48, i8* nonnull %5430) #11
  call void @llvm.lifetime.end(i64 40, i8* nonnull %5374) #11
  %5693 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %124, i64 0, i32 0, i32 0, i32 0, i32 0, i64 47
  %5694 = ptrtoint i32* %5693 to i64
  %5695 = getelementptr inbounds %"struct.Eigen::internal::evaluator.817", %"struct.Eigen::internal::evaluator.817"* %43, i64 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start(i64 224, i8* nonnull %5695) #11
  %5696 = getelementptr inbounds %"struct.Eigen::internal::evaluator.817", %"struct.Eigen::internal::evaluator.817"* %43, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %5697 = getelementptr inbounds %"struct.Eigen::internal::evaluator.817", %"struct.Eigen::internal::evaluator.817"* %43, i64 0, i32 0, i32 2, i32 0, i32 0, i32 1
  %5698 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %5697, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  store i32* %5698, i32** %5696, align 8, !tbaa !92
  %5699 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %42, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %5699) #11
  %5700 = bitcast %"struct.Eigen::internal::evaluator.840"* %39 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %5700) #11
  %5701 = bitcast %"struct.Eigen::internal::evaluator.840"* %39 to i64*
  store i64 %2870, i64* %5701, align 8, !tbaa !11
  %5702 = getelementptr inbounds %"struct.Eigen::internal::evaluator.840", %"struct.Eigen::internal::evaluator.840"* %39, i64 0, i32 0, i32 1
  %5703 = bitcast %"class.Eigen::Matrix.185"** %5702 to i64*
  store i64 %3601, i64* %5703, align 8, !tbaa !11
  %5704 = getelementptr inbounds %"struct.Eigen::internal::evaluator.840", %"struct.Eigen::internal::evaluator.840"* %39, i64 0, i32 0, i32 2, i32 0, i32 0
  store i32* %2878, i32** %5704, align 8, !tbaa !94
  %5705 = getelementptr inbounds %"struct.Eigen::internal::evaluator.840", %"struct.Eigen::internal::evaluator.840"* %39, i64 0, i32 0, i32 3, i32 0, i32 0
  store i32* %1527, i32** %5705, align 8, !tbaa !97
  %5706 = getelementptr inbounds %"struct.Eigen::internal::evaluator.840", %"struct.Eigen::internal::evaluator.840"* %39, i64 0, i32 0, i32 4
  store i64 6, i64* %5706, align 8, !tbaa !99
  %5707 = bitcast %"struct.Eigen::internal::evaluator.583"* %40 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %5707) #11
  %5708 = getelementptr inbounds %"struct.Eigen::internal::evaluator.583", %"struct.Eigen::internal::evaluator.583"* %40, i64 0, i32 0, i32 0
  store i32* %5698, i32** %5708, align 8, !tbaa !92
  %5709 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %41 to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %5709) #11
  %5710 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %41, i64 0, i32 0
  store %"struct.Eigen::internal::evaluator.583"* %40, %"struct.Eigen::internal::evaluator.583"** %5710, align 8, !tbaa !11
  %5711 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %41, i64 0, i32 1
  store %"struct.Eigen::internal::evaluator.840"* %39, %"struct.Eigen::internal::evaluator.840"** %5711, align 8, !tbaa !11
  %5712 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %41, i64 0, i32 2
  store %"struct.Eigen::internal::assign_op.512"* %42, %"struct.Eigen::internal::assign_op.512"** %5712, align 8, !tbaa !11
  %5713 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %41, i64 0, i32 3
  store %"class.Eigen::Matrix.153"* %5697, %"class.Eigen::Matrix.153"** %5713, align 8, !tbaa !11
  call void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi47ELi1ELi0ELi47ELi1EEEEENS3_INS_7ProductINS4_IiLi47ELi6ELi0ELi47ELi6EEENS4_IiLi6ELi1ELi0ELi6ELi1EEELi1EEEEENS0_9assign_opIiiEELi0EEELi3ELi0EE3runERSE_(%"class.Eigen::internal::generic_dense_assignment_kernel.843"* nonnull dereferenceable(32) %41) #11
  call void @llvm.lifetime.end(i64 32, i8* nonnull %5709) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %5707) #11
  call void @llvm.lifetime.end(i64 56, i8* nonnull %5700) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %5699) #11
  %5714 = getelementptr inbounds %"struct.Eigen::internal::evaluator.817", %"struct.Eigen::internal::evaluator.817"* %43, i64 0, i32 0, i32 3
  %5715 = bitcast %"struct.Eigen::internal::evaluator.823"* %5714 to i64*
  store i64 %5694, i64* %5715, align 8, !tbaa !103
  %5716 = bitcast i32* %5693 to <4 x i32>*
  %5717 = bitcast %"class.Eigen::Matrix.153"* %162 to <4 x i32>*
  %5718 = bitcast i32** %5696 to <4 x i32>**
  %5719 = load <4 x i32>*, <4 x i32>** %5718, align 8, !tbaa !92
  %5720 = load <4 x i32>, <4 x i32>* %5719, align 1, !tbaa !11
  %5721 = load <4 x i32>, <4 x i32>* %5716, align 4, !tbaa !11
  %5722 = add <4 x i32> %5721, %5720
  %5723 = load <4 x i32>, <4 x i32>* %5717, align 16, !tbaa !11
  %5724 = add <4 x i32> %5722, %5723
  store <4 x i32> %5724, <4 x i32>* %5717, align 16, !tbaa !11
  %5725 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %162, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %5726 = getelementptr inbounds <4 x i32>, <4 x i32>* %5719, i64 0, i64 4
  %5727 = bitcast i32* %5726 to <4 x i32>*
  %5728 = load <4 x i32>, <4 x i32>* %5727, align 1, !tbaa !11
  %5729 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %124, i64 0, i32 0, i32 0, i32 0, i32 0, i64 51
  %5730 = bitcast i32* %5729 to <4 x i32>*
  %5731 = load <4 x i32>, <4 x i32>* %5730, align 4, !tbaa !11
  %5732 = add <4 x i32> %5731, %5728
  %5733 = bitcast i32* %5725 to <4 x i32>*
  %5734 = load <4 x i32>, <4 x i32>* %5733, align 16, !tbaa !11
  %5735 = add <4 x i32> %5732, %5734
  store <4 x i32> %5735, <4 x i32>* %5733, align 16, !tbaa !11
  %5736 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %162, i64 0, i32 0, i32 0, i32 0, i32 0, i64 8
  %5737 = getelementptr inbounds <4 x i32>, <4 x i32>* %5719, i64 0, i64 8
  %5738 = bitcast i32* %5737 to <4 x i32>*
  %5739 = load <4 x i32>, <4 x i32>* %5738, align 1, !tbaa !11
  %5740 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %124, i64 0, i32 0, i32 0, i32 0, i32 0, i64 55
  %5741 = bitcast i32* %5740 to <4 x i32>*
  %5742 = load <4 x i32>, <4 x i32>* %5741, align 4, !tbaa !11
  %5743 = add <4 x i32> %5742, %5739
  %5744 = bitcast i32* %5736 to <4 x i32>*
  %5745 = load <4 x i32>, <4 x i32>* %5744, align 16, !tbaa !11
  %5746 = add <4 x i32> %5743, %5745
  store <4 x i32> %5746, <4 x i32>* %5744, align 16, !tbaa !11
  %5747 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %162, i64 0, i32 0, i32 0, i32 0, i32 0, i64 12
  %5748 = getelementptr inbounds <4 x i32>, <4 x i32>* %5719, i64 0, i64 12
  %5749 = bitcast i32* %5748 to <4 x i32>*
  %5750 = load <4 x i32>, <4 x i32>* %5749, align 1, !tbaa !11
  %5751 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %124, i64 0, i32 0, i32 0, i32 0, i32 0, i64 59
  %5752 = bitcast i32* %5751 to <4 x i32>*
  %5753 = load <4 x i32>, <4 x i32>* %5752, align 4, !tbaa !11
  %5754 = add <4 x i32> %5753, %5750
  %5755 = bitcast i32* %5747 to <4 x i32>*
  %5756 = load <4 x i32>, <4 x i32>* %5755, align 16, !tbaa !11
  %5757 = add <4 x i32> %5754, %5756
  store <4 x i32> %5757, <4 x i32>* %5755, align 16, !tbaa !11
  %5758 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %162, i64 0, i32 0, i32 0, i32 0, i32 0, i64 16
  %5759 = getelementptr inbounds <4 x i32>, <4 x i32>* %5719, i64 0, i64 16
  %5760 = bitcast i32* %5759 to <4 x i32>*
  %5761 = load <4 x i32>, <4 x i32>* %5760, align 1, !tbaa !11
  %5762 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %124, i64 0, i32 0, i32 0, i32 0, i32 0, i64 63
  %5763 = bitcast i32* %5762 to <4 x i32>*
  %5764 = load <4 x i32>, <4 x i32>* %5763, align 4, !tbaa !11
  %5765 = add <4 x i32> %5764, %5761
  %5766 = bitcast i32* %5758 to <4 x i32>*
  %5767 = load <4 x i32>, <4 x i32>* %5766, align 16, !tbaa !11
  %5768 = add <4 x i32> %5765, %5767
  store <4 x i32> %5768, <4 x i32>* %5766, align 16, !tbaa !11
  %5769 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %162, i64 0, i32 0, i32 0, i32 0, i32 0, i64 20
  %5770 = getelementptr inbounds <4 x i32>, <4 x i32>* %5719, i64 0, i64 20
  %5771 = bitcast i32* %5770 to <4 x i32>*
  %5772 = load <4 x i32>, <4 x i32>* %5771, align 1, !tbaa !11
  %5773 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %124, i64 0, i32 0, i32 0, i32 0, i32 0, i64 67
  %5774 = bitcast i32* %5773 to <4 x i32>*
  %5775 = load <4 x i32>, <4 x i32>* %5774, align 4, !tbaa !11
  %5776 = add <4 x i32> %5775, %5772
  %5777 = bitcast i32* %5769 to <4 x i32>*
  %5778 = load <4 x i32>, <4 x i32>* %5777, align 16, !tbaa !11
  %5779 = add <4 x i32> %5776, %5778
  store <4 x i32> %5779, <4 x i32>* %5777, align 16, !tbaa !11
  %5780 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %162, i64 0, i32 0, i32 0, i32 0, i32 0, i64 24
  %5781 = getelementptr inbounds <4 x i32>, <4 x i32>* %5719, i64 0, i64 24
  %5782 = bitcast i32* %5781 to <4 x i32>*
  %5783 = load <4 x i32>, <4 x i32>* %5782, align 1, !tbaa !11
  %5784 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %124, i64 0, i32 0, i32 0, i32 0, i32 0, i64 71
  %5785 = bitcast i32* %5784 to <4 x i32>*
  %5786 = load <4 x i32>, <4 x i32>* %5785, align 4, !tbaa !11
  %5787 = add <4 x i32> %5786, %5783
  %5788 = bitcast i32* %5780 to <4 x i32>*
  %5789 = load <4 x i32>, <4 x i32>* %5788, align 16, !tbaa !11
  %5790 = add <4 x i32> %5787, %5789
  store <4 x i32> %5790, <4 x i32>* %5788, align 16, !tbaa !11
  %5791 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %162, i64 0, i32 0, i32 0, i32 0, i32 0, i64 28
  %5792 = getelementptr inbounds <4 x i32>, <4 x i32>* %5719, i64 0, i64 28
  %5793 = bitcast i32* %5792 to <4 x i32>*
  %5794 = load <4 x i32>, <4 x i32>* %5793, align 1, !tbaa !11
  %5795 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %124, i64 0, i32 0, i32 0, i32 0, i32 0, i64 75
  %5796 = bitcast i32* %5795 to <4 x i32>*
  %5797 = load <4 x i32>, <4 x i32>* %5796, align 4, !tbaa !11
  %5798 = add <4 x i32> %5797, %5794
  %5799 = bitcast i32* %5791 to <4 x i32>*
  %5800 = load <4 x i32>, <4 x i32>* %5799, align 16, !tbaa !11
  %5801 = add <4 x i32> %5798, %5800
  store <4 x i32> %5801, <4 x i32>* %5799, align 16, !tbaa !11
  %5802 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %162, i64 0, i32 0, i32 0, i32 0, i32 0, i64 32
  %5803 = getelementptr inbounds <4 x i32>, <4 x i32>* %5719, i64 0, i64 32
  %5804 = bitcast i32* %5803 to <4 x i32>*
  %5805 = load <4 x i32>, <4 x i32>* %5804, align 1, !tbaa !11
  %5806 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %124, i64 0, i32 0, i32 0, i32 0, i32 0, i64 79
  %5807 = bitcast i32* %5806 to <4 x i32>*
  %5808 = load <4 x i32>, <4 x i32>* %5807, align 4, !tbaa !11
  %5809 = add <4 x i32> %5808, %5805
  %5810 = bitcast i32* %5802 to <4 x i32>*
  %5811 = load <4 x i32>, <4 x i32>* %5810, align 16, !tbaa !11
  %5812 = add <4 x i32> %5809, %5811
  store <4 x i32> %5812, <4 x i32>* %5810, align 16, !tbaa !11
  %5813 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %162, i64 0, i32 0, i32 0, i32 0, i32 0, i64 36
  %5814 = getelementptr inbounds <4 x i32>, <4 x i32>* %5719, i64 0, i64 36
  %5815 = bitcast i32* %5814 to <4 x i32>*
  %5816 = load <4 x i32>, <4 x i32>* %5815, align 1, !tbaa !11
  %5817 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %124, i64 0, i32 0, i32 0, i32 0, i32 0, i64 83
  %5818 = bitcast i32* %5817 to <4 x i32>*
  %5819 = load <4 x i32>, <4 x i32>* %5818, align 4, !tbaa !11
  %5820 = add <4 x i32> %5819, %5816
  %5821 = bitcast i32* %5813 to <4 x i32>*
  %5822 = load <4 x i32>, <4 x i32>* %5821, align 16, !tbaa !11
  %5823 = add <4 x i32> %5820, %5822
  store <4 x i32> %5823, <4 x i32>* %5821, align 16, !tbaa !11
  %5824 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %162, i64 0, i32 0, i32 0, i32 0, i32 0, i64 40
  %5825 = getelementptr inbounds <4 x i32>, <4 x i32>* %5719, i64 0, i64 40
  %5826 = bitcast i32* %5825 to <4 x i32>*
  %5827 = load <4 x i32>, <4 x i32>* %5826, align 1, !tbaa !11
  %5828 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %124, i64 0, i32 0, i32 0, i32 0, i32 0, i64 87
  %5829 = bitcast i32* %5828 to <4 x i32>*
  %5830 = load <4 x i32>, <4 x i32>* %5829, align 4, !tbaa !11
  %5831 = add <4 x i32> %5830, %5827
  %5832 = bitcast i32* %5824 to <4 x i32>*
  %5833 = load <4 x i32>, <4 x i32>* %5832, align 16, !tbaa !11
  %5834 = add <4 x i32> %5831, %5833
  store <4 x i32> %5834, <4 x i32>* %5832, align 16, !tbaa !11
  %5835 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %162, i64 0, i32 0, i32 0, i32 0, i32 0, i64 44
  %5836 = getelementptr inbounds <4 x i32>, <4 x i32>* %5719, i64 0, i64 44
  %5837 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %124, i64 0, i32 0, i32 0, i32 0, i32 0, i64 91
  %5838 = load i32, i32* %5836, align 4, !tbaa !33
  %5839 = load i32, i32* %5837, align 4, !tbaa !33
  %5840 = add nsw i32 %5839, %5838
  %5841 = load i32, i32* %5835, align 16, !tbaa !33
  %5842 = add nsw i32 %5840, %5841
  store i32 %5842, i32* %5835, align 16, !tbaa !33
  %5843 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %162, i64 0, i32 0, i32 0, i32 0, i32 0, i64 45
  %5844 = getelementptr inbounds <4 x i32>, <4 x i32>* %5719, i64 0, i64 45
  %5845 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %124, i64 0, i32 0, i32 0, i32 0, i32 0, i64 92
  %5846 = load i32, i32* %5844, align 4, !tbaa !33
  %5847 = load i32, i32* %5845, align 4, !tbaa !33
  %5848 = add nsw i32 %5847, %5846
  %5849 = load i32, i32* %5843, align 4, !tbaa !33
  %5850 = add nsw i32 %5848, %5849
  store i32 %5850, i32* %5843, align 4, !tbaa !33
  %5851 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %162, i64 0, i32 0, i32 0, i32 0, i32 0, i64 46
  %5852 = getelementptr inbounds <4 x i32>, <4 x i32>* %5719, i64 0, i64 46
  %5853 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %124, i64 0, i32 0, i32 0, i32 0, i32 0, i64 93
  %5854 = load i32, i32* %5852, align 4, !tbaa !33
  %5855 = load i32, i32* %5853, align 4, !tbaa !33
  %5856 = add nsw i32 %5855, %5854
  %5857 = load i32, i32* %5851, align 8, !tbaa !33
  %5858 = add nsw i32 %5856, %5857
  store i32 %5858, i32* %5851, align 8, !tbaa !33
  call void @llvm.lifetime.end(i64 224, i8* nonnull %5695) #11
  %5859 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %125, i64 0, i32 0, i32 0, i32 0, i32 0, i64 47
  %5860 = ptrtoint i32* %5859 to i64
  %5861 = getelementptr inbounds %"struct.Eigen::internal::evaluator.817", %"struct.Eigen::internal::evaluator.817"* %38, i64 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start(i64 224, i8* nonnull %5861) #11
  %5862 = getelementptr inbounds %"struct.Eigen::internal::evaluator.817", %"struct.Eigen::internal::evaluator.817"* %38, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %5863 = getelementptr inbounds %"struct.Eigen::internal::evaluator.817", %"struct.Eigen::internal::evaluator.817"* %38, i64 0, i32 0, i32 2, i32 0, i32 0, i32 1
  %5864 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %5863, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  store i32* %5864, i32** %5862, align 8, !tbaa !92
  %5865 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %37, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %5865) #11
  %5866 = bitcast %"struct.Eigen::internal::evaluator.840"* %34 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %5866) #11
  %5867 = bitcast %"struct.Eigen::internal::evaluator.840"* %34 to i64*
  store i64 %3713, i64* %5867, align 8, !tbaa !11
  %5868 = getelementptr inbounds %"struct.Eigen::internal::evaluator.840", %"struct.Eigen::internal::evaluator.840"* %34, i64 0, i32 0, i32 1
  %5869 = bitcast %"class.Eigen::Matrix.185"** %5868 to i64*
  store i64 %4099, i64* %5869, align 8, !tbaa !11
  %5870 = getelementptr inbounds %"struct.Eigen::internal::evaluator.840", %"struct.Eigen::internal::evaluator.840"* %34, i64 0, i32 0, i32 2, i32 0, i32 0
  store i32* %3721, i32** %5870, align 8, !tbaa !94
  %5871 = getelementptr inbounds %"struct.Eigen::internal::evaluator.840", %"struct.Eigen::internal::evaluator.840"* %34, i64 0, i32 0, i32 3, i32 0, i32 0
  store i32* %1464, i32** %5871, align 8, !tbaa !97
  %5872 = getelementptr inbounds %"struct.Eigen::internal::evaluator.840", %"struct.Eigen::internal::evaluator.840"* %34, i64 0, i32 0, i32 4
  store i64 6, i64* %5872, align 8, !tbaa !99
  %5873 = bitcast %"struct.Eigen::internal::evaluator.583"* %35 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %5873) #11
  %5874 = getelementptr inbounds %"struct.Eigen::internal::evaluator.583", %"struct.Eigen::internal::evaluator.583"* %35, i64 0, i32 0, i32 0
  store i32* %5864, i32** %5874, align 8, !tbaa !92
  %5875 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %36 to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %5875) #11
  %5876 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %36, i64 0, i32 0
  store %"struct.Eigen::internal::evaluator.583"* %35, %"struct.Eigen::internal::evaluator.583"** %5876, align 8, !tbaa !11
  %5877 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %36, i64 0, i32 1
  store %"struct.Eigen::internal::evaluator.840"* %34, %"struct.Eigen::internal::evaluator.840"** %5877, align 8, !tbaa !11
  %5878 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %36, i64 0, i32 2
  store %"struct.Eigen::internal::assign_op.512"* %37, %"struct.Eigen::internal::assign_op.512"** %5878, align 8, !tbaa !11
  %5879 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %36, i64 0, i32 3
  store %"class.Eigen::Matrix.153"* %5863, %"class.Eigen::Matrix.153"** %5879, align 8, !tbaa !11
  call void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi47ELi1ELi0ELi47ELi1EEEEENS3_INS_7ProductINS4_IiLi47ELi6ELi0ELi47ELi6EEENS4_IiLi6ELi1ELi0ELi6ELi1EEELi1EEEEENS0_9assign_opIiiEELi0EEELi3ELi0EE3runERSE_(%"class.Eigen::internal::generic_dense_assignment_kernel.843"* nonnull dereferenceable(32) %36) #11
  call void @llvm.lifetime.end(i64 32, i8* nonnull %5875) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %5873) #11
  call void @llvm.lifetime.end(i64 56, i8* nonnull %5866) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %5865) #11
  %5880 = getelementptr inbounds %"struct.Eigen::internal::evaluator.817", %"struct.Eigen::internal::evaluator.817"* %38, i64 0, i32 0, i32 3
  %5881 = bitcast %"struct.Eigen::internal::evaluator.823"* %5880 to i64*
  store i64 %5860, i64* %5881, align 8, !tbaa !103
  %5882 = bitcast i32* %5859 to <4 x i32>*
  %5883 = bitcast %"class.Eigen::Matrix.153"* %161 to <4 x i32>*
  %5884 = bitcast i32** %5862 to <4 x i32>**
  %5885 = load <4 x i32>*, <4 x i32>** %5884, align 8, !tbaa !92
  %5886 = load <4 x i32>, <4 x i32>* %5885, align 1, !tbaa !11
  %5887 = load <4 x i32>, <4 x i32>* %5882, align 4, !tbaa !11
  %5888 = add <4 x i32> %5887, %5886
  %5889 = load <4 x i32>, <4 x i32>* %5883, align 16, !tbaa !11
  %5890 = add <4 x i32> %5888, %5889
  store <4 x i32> %5890, <4 x i32>* %5883, align 16, !tbaa !11
  %5891 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %161, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %5892 = getelementptr inbounds <4 x i32>, <4 x i32>* %5885, i64 0, i64 4
  %5893 = bitcast i32* %5892 to <4 x i32>*
  %5894 = load <4 x i32>, <4 x i32>* %5893, align 1, !tbaa !11
  %5895 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %125, i64 0, i32 0, i32 0, i32 0, i32 0, i64 51
  %5896 = bitcast i32* %5895 to <4 x i32>*
  %5897 = load <4 x i32>, <4 x i32>* %5896, align 4, !tbaa !11
  %5898 = add <4 x i32> %5897, %5894
  %5899 = bitcast i32* %5891 to <4 x i32>*
  %5900 = load <4 x i32>, <4 x i32>* %5899, align 16, !tbaa !11
  %5901 = add <4 x i32> %5898, %5900
  store <4 x i32> %5901, <4 x i32>* %5899, align 16, !tbaa !11
  %5902 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %161, i64 0, i32 0, i32 0, i32 0, i32 0, i64 8
  %5903 = getelementptr inbounds <4 x i32>, <4 x i32>* %5885, i64 0, i64 8
  %5904 = bitcast i32* %5903 to <4 x i32>*
  %5905 = load <4 x i32>, <4 x i32>* %5904, align 1, !tbaa !11
  %5906 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %125, i64 0, i32 0, i32 0, i32 0, i32 0, i64 55
  %5907 = bitcast i32* %5906 to <4 x i32>*
  %5908 = load <4 x i32>, <4 x i32>* %5907, align 4, !tbaa !11
  %5909 = add <4 x i32> %5908, %5905
  %5910 = bitcast i32* %5902 to <4 x i32>*
  %5911 = load <4 x i32>, <4 x i32>* %5910, align 16, !tbaa !11
  %5912 = add <4 x i32> %5909, %5911
  store <4 x i32> %5912, <4 x i32>* %5910, align 16, !tbaa !11
  %5913 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %161, i64 0, i32 0, i32 0, i32 0, i32 0, i64 12
  %5914 = getelementptr inbounds <4 x i32>, <4 x i32>* %5885, i64 0, i64 12
  %5915 = bitcast i32* %5914 to <4 x i32>*
  %5916 = load <4 x i32>, <4 x i32>* %5915, align 1, !tbaa !11
  %5917 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %125, i64 0, i32 0, i32 0, i32 0, i32 0, i64 59
  %5918 = bitcast i32* %5917 to <4 x i32>*
  %5919 = load <4 x i32>, <4 x i32>* %5918, align 4, !tbaa !11
  %5920 = add <4 x i32> %5919, %5916
  %5921 = bitcast i32* %5913 to <4 x i32>*
  %5922 = load <4 x i32>, <4 x i32>* %5921, align 16, !tbaa !11
  %5923 = add <4 x i32> %5920, %5922
  store <4 x i32> %5923, <4 x i32>* %5921, align 16, !tbaa !11
  %5924 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %161, i64 0, i32 0, i32 0, i32 0, i32 0, i64 16
  %5925 = getelementptr inbounds <4 x i32>, <4 x i32>* %5885, i64 0, i64 16
  %5926 = bitcast i32* %5925 to <4 x i32>*
  %5927 = load <4 x i32>, <4 x i32>* %5926, align 1, !tbaa !11
  %5928 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %125, i64 0, i32 0, i32 0, i32 0, i32 0, i64 63
  %5929 = bitcast i32* %5928 to <4 x i32>*
  %5930 = load <4 x i32>, <4 x i32>* %5929, align 4, !tbaa !11
  %5931 = add <4 x i32> %5930, %5927
  %5932 = bitcast i32* %5924 to <4 x i32>*
  %5933 = load <4 x i32>, <4 x i32>* %5932, align 16, !tbaa !11
  %5934 = add <4 x i32> %5931, %5933
  store <4 x i32> %5934, <4 x i32>* %5932, align 16, !tbaa !11
  %5935 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %161, i64 0, i32 0, i32 0, i32 0, i32 0, i64 20
  %5936 = getelementptr inbounds <4 x i32>, <4 x i32>* %5885, i64 0, i64 20
  %5937 = bitcast i32* %5936 to <4 x i32>*
  %5938 = load <4 x i32>, <4 x i32>* %5937, align 1, !tbaa !11
  %5939 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %125, i64 0, i32 0, i32 0, i32 0, i32 0, i64 67
  %5940 = bitcast i32* %5939 to <4 x i32>*
  %5941 = load <4 x i32>, <4 x i32>* %5940, align 4, !tbaa !11
  %5942 = add <4 x i32> %5941, %5938
  %5943 = bitcast i32* %5935 to <4 x i32>*
  %5944 = load <4 x i32>, <4 x i32>* %5943, align 16, !tbaa !11
  %5945 = add <4 x i32> %5942, %5944
  store <4 x i32> %5945, <4 x i32>* %5943, align 16, !tbaa !11
  %5946 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %161, i64 0, i32 0, i32 0, i32 0, i32 0, i64 24
  %5947 = getelementptr inbounds <4 x i32>, <4 x i32>* %5885, i64 0, i64 24
  %5948 = bitcast i32* %5947 to <4 x i32>*
  %5949 = load <4 x i32>, <4 x i32>* %5948, align 1, !tbaa !11
  %5950 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %125, i64 0, i32 0, i32 0, i32 0, i32 0, i64 71
  %5951 = bitcast i32* %5950 to <4 x i32>*
  %5952 = load <4 x i32>, <4 x i32>* %5951, align 4, !tbaa !11
  %5953 = add <4 x i32> %5952, %5949
  %5954 = bitcast i32* %5946 to <4 x i32>*
  %5955 = load <4 x i32>, <4 x i32>* %5954, align 16, !tbaa !11
  %5956 = add <4 x i32> %5953, %5955
  store <4 x i32> %5956, <4 x i32>* %5954, align 16, !tbaa !11
  %5957 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %161, i64 0, i32 0, i32 0, i32 0, i32 0, i64 28
  %5958 = getelementptr inbounds <4 x i32>, <4 x i32>* %5885, i64 0, i64 28
  %5959 = bitcast i32* %5958 to <4 x i32>*
  %5960 = load <4 x i32>, <4 x i32>* %5959, align 1, !tbaa !11
  %5961 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %125, i64 0, i32 0, i32 0, i32 0, i32 0, i64 75
  %5962 = bitcast i32* %5961 to <4 x i32>*
  %5963 = load <4 x i32>, <4 x i32>* %5962, align 4, !tbaa !11
  %5964 = add <4 x i32> %5963, %5960
  %5965 = bitcast i32* %5957 to <4 x i32>*
  %5966 = load <4 x i32>, <4 x i32>* %5965, align 16, !tbaa !11
  %5967 = add <4 x i32> %5964, %5966
  store <4 x i32> %5967, <4 x i32>* %5965, align 16, !tbaa !11
  %5968 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %161, i64 0, i32 0, i32 0, i32 0, i32 0, i64 32
  %5969 = getelementptr inbounds <4 x i32>, <4 x i32>* %5885, i64 0, i64 32
  %5970 = bitcast i32* %5969 to <4 x i32>*
  %5971 = load <4 x i32>, <4 x i32>* %5970, align 1, !tbaa !11
  %5972 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %125, i64 0, i32 0, i32 0, i32 0, i32 0, i64 79
  %5973 = bitcast i32* %5972 to <4 x i32>*
  %5974 = load <4 x i32>, <4 x i32>* %5973, align 4, !tbaa !11
  %5975 = add <4 x i32> %5974, %5971
  %5976 = bitcast i32* %5968 to <4 x i32>*
  %5977 = load <4 x i32>, <4 x i32>* %5976, align 16, !tbaa !11
  %5978 = add <4 x i32> %5975, %5977
  store <4 x i32> %5978, <4 x i32>* %5976, align 16, !tbaa !11
  %5979 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %161, i64 0, i32 0, i32 0, i32 0, i32 0, i64 36
  %5980 = getelementptr inbounds <4 x i32>, <4 x i32>* %5885, i64 0, i64 36
  %5981 = bitcast i32* %5980 to <4 x i32>*
  %5982 = load <4 x i32>, <4 x i32>* %5981, align 1, !tbaa !11
  %5983 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %125, i64 0, i32 0, i32 0, i32 0, i32 0, i64 83
  %5984 = bitcast i32* %5983 to <4 x i32>*
  %5985 = load <4 x i32>, <4 x i32>* %5984, align 4, !tbaa !11
  %5986 = add <4 x i32> %5985, %5982
  %5987 = bitcast i32* %5979 to <4 x i32>*
  %5988 = load <4 x i32>, <4 x i32>* %5987, align 16, !tbaa !11
  %5989 = add <4 x i32> %5986, %5988
  store <4 x i32> %5989, <4 x i32>* %5987, align 16, !tbaa !11
  %5990 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %161, i64 0, i32 0, i32 0, i32 0, i32 0, i64 40
  %5991 = getelementptr inbounds <4 x i32>, <4 x i32>* %5885, i64 0, i64 40
  %5992 = bitcast i32* %5991 to <4 x i32>*
  %5993 = load <4 x i32>, <4 x i32>* %5992, align 1, !tbaa !11
  %5994 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %125, i64 0, i32 0, i32 0, i32 0, i32 0, i64 87
  %5995 = bitcast i32* %5994 to <4 x i32>*
  %5996 = load <4 x i32>, <4 x i32>* %5995, align 4, !tbaa !11
  %5997 = add <4 x i32> %5996, %5993
  %5998 = bitcast i32* %5990 to <4 x i32>*
  %5999 = load <4 x i32>, <4 x i32>* %5998, align 16, !tbaa !11
  %6000 = add <4 x i32> %5997, %5999
  store <4 x i32> %6000, <4 x i32>* %5998, align 16, !tbaa !11
  %6001 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %161, i64 0, i32 0, i32 0, i32 0, i32 0, i64 44
  %6002 = getelementptr inbounds <4 x i32>, <4 x i32>* %5885, i64 0, i64 44
  %6003 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %125, i64 0, i32 0, i32 0, i32 0, i32 0, i64 91
  %6004 = load i32, i32* %6002, align 4, !tbaa !33
  %6005 = load i32, i32* %6003, align 4, !tbaa !33
  %6006 = add nsw i32 %6005, %6004
  %6007 = load i32, i32* %6001, align 16, !tbaa !33
  %6008 = add nsw i32 %6006, %6007
  store i32 %6008, i32* %6001, align 16, !tbaa !33
  %6009 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %161, i64 0, i32 0, i32 0, i32 0, i32 0, i64 45
  %6010 = getelementptr inbounds <4 x i32>, <4 x i32>* %5885, i64 0, i64 45
  %6011 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %125, i64 0, i32 0, i32 0, i32 0, i32 0, i64 92
  %6012 = load i32, i32* %6010, align 4, !tbaa !33
  %6013 = load i32, i32* %6011, align 4, !tbaa !33
  %6014 = add nsw i32 %6013, %6012
  %6015 = load i32, i32* %6009, align 4, !tbaa !33
  %6016 = add nsw i32 %6014, %6015
  store i32 %6016, i32* %6009, align 4, !tbaa !33
  %6017 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %161, i64 0, i32 0, i32 0, i32 0, i32 0, i64 46
  %6018 = getelementptr inbounds <4 x i32>, <4 x i32>* %5885, i64 0, i64 46
  %6019 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %125, i64 0, i32 0, i32 0, i32 0, i32 0, i64 93
  %6020 = load i32, i32* %6018, align 4, !tbaa !33
  %6021 = load i32, i32* %6019, align 4, !tbaa !33
  %6022 = add nsw i32 %6021, %6020
  %6023 = load i32, i32* %6017, align 8, !tbaa !33
  %6024 = add nsw i32 %6022, %6023
  store i32 %6024, i32* %6017, align 8, !tbaa !33
  call void @llvm.lifetime.end(i64 224, i8* nonnull %5861) #11
  %6025 = load i64, i64* %521, align 8, !tbaa !40
  %6026 = load i64, i64* %825, align 8, !tbaa !43
  %6027 = icmp eq i64 %6025, %6026
  br i1 %6027, label %6029, label %6028, !prof !10

; <label>:6028:                                   ; preds = %5692
  call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS1_IdLin1ELi1ELi0ELin1ELi1EEELi0EEC2ERKS2_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 97, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2, i64 0, i64 0)) #13
  unreachable

; <label>:6029:                                   ; preds = %5692
  %6030 = bitcast %"class.Eigen::Matrix.77"* %33 to i8*
  call void @llvm.lifetime.start(i64 1128, i8* nonnull %6030) #11
  call void @_ZN5Eigen8internal20generic_product_implINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS2_IiLin1ELi6ELi0ELin1ELi6EEENS_10DenseShapeES5_Li8EE6evalToINS2_IiLi47ELi6ELi0ELi47ELi6EEEEEvRT_RKS3_RKS4_(%"class.Eigen::Matrix.77"* nonnull dereferenceable(1128) %33, %"class.Eigen::Matrix.48"* nonnull dereferenceable(16) %115, %"class.Eigen::Matrix.123"* nonnull dereferenceable(16) %142) #11
  %6031 = lshr exact i64 %3600, 2
  %6032 = sub nsw i64 0, %6031
  %6033 = and i64 %6032, 3
  %6034 = sub nsw i64 282, %6033
  %6035 = and i64 %6034, 284
  %6036 = or i64 %6035, %6033
  %6037 = icmp eq i64 %6033, 0
  br i1 %6037, label %6040, label %6038

; <label>:6038:                                   ; preds = %6029
  br label %6067

; <label>:6039:                                   ; preds = %8622, %8615, %6067
  br label %6040

; <label>:6040:                                   ; preds = %6039, %6029
  %6041 = phi i64 [ 0, %6029 ], [ %6033, %6039 ]
  %6042 = add nsw i64 %6036, -1
  %6043 = sub nsw i64 %6042, %6041
  %6044 = lshr i64 %6043, 2
  %6045 = add nuw nsw i64 %6044, 1
  %6046 = and i64 %6045, 7
  %6047 = icmp eq i64 %6046, 0
  br i1 %6047, label %6063, label %6048

; <label>:6048:                                   ; preds = %6040
  br label %6049

; <label>:6049:                                   ; preds = %6049, %6048
  %6050 = phi i64 [ %6059, %6049 ], [ %6041, %6048 ]
  %6051 = phi i64 [ %6060, %6049 ], [ %6046, %6048 ]
  %6052 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %122, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6050
  %6053 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6050
  %6054 = bitcast i32* %6053 to <4 x i32>*
  %6055 = load <4 x i32>, <4 x i32>* %6054, align 4, !tbaa !11
  %6056 = bitcast i32* %6052 to <4 x i32>*
  %6057 = load <4 x i32>, <4 x i32>* %6056, align 16, !tbaa !11
  %6058 = add <4 x i32> %6057, %6055
  store <4 x i32> %6058, <4 x i32>* %6056, align 16, !tbaa !11
  %6059 = add nuw nsw i64 %6050, 4
  %6060 = add i64 %6051, -1
  %6061 = icmp eq i64 %6060, 0
  br i1 %6061, label %6062, label %6049, !llvm.loop !214

; <label>:6062:                                   ; preds = %6049
  br label %6063

; <label>:6063:                                   ; preds = %6040, %6062
  %6064 = phi i64 [ %6041, %6040 ], [ %6059, %6062 ]
  %6065 = icmp ult i64 %6043, 28
  br i1 %6065, label %6075, label %6066

; <label>:6066:                                   ; preds = %6063
  br label %6212

; <label>:6067:                                   ; preds = %6038
  %6068 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %122, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %6069 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %6070 = load i32, i32* %6069, align 4, !tbaa !33
  %6071 = load i32, i32* %6068, align 4, !tbaa !33
  %6072 = add nsw i32 %6071, %6070
  store i32 %6072, i32* %6068, align 4, !tbaa !33
  %6073 = icmp eq i64 %6033, 1
  br i1 %6073, label %6039, label %8615

; <label>:6074:                                   ; preds = %6212
  br label %6075

; <label>:6075:                                   ; preds = %6063, %6074
  %6076 = icmp ult i64 %6036, 282
  br i1 %6076, label %6077, label %6280

; <label>:6077:                                   ; preds = %6075
  %6078 = sub nsw i64 282, %6036
  %6079 = icmp ult i64 %6078, 32
  br i1 %6079, label %6201, label %6080

; <label>:6080:                                   ; preds = %6077
  %6081 = and i64 %6078, -32
  %6082 = icmp eq i64 %6081, 0
  %6083 = add nsw i64 %6036, %6081
  br i1 %6082, label %6201, label %6084

; <label>:6084:                                   ; preds = %6080
  %6085 = add nsw i64 %6081, -32
  %6086 = lshr exact i64 %6085, 5
  %6087 = and i64 %6086, 1
  %6088 = icmp eq i64 %6087, 0
  br i1 %6088, label %6089, label %6123

; <label>:6089:                                   ; preds = %6084
  br label %6090

; <label>:6090:                                   ; preds = %6089
  %6091 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %122, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6036
  %6092 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6036
  %6093 = bitcast i32* %6092 to <8 x i32>*
  %6094 = load <8 x i32>, <8 x i32>* %6093, align 4, !tbaa !33
  %6095 = getelementptr i32, i32* %6092, i64 8
  %6096 = bitcast i32* %6095 to <8 x i32>*
  %6097 = load <8 x i32>, <8 x i32>* %6096, align 4, !tbaa !33
  %6098 = getelementptr i32, i32* %6092, i64 16
  %6099 = bitcast i32* %6098 to <8 x i32>*
  %6100 = load <8 x i32>, <8 x i32>* %6099, align 4, !tbaa !33
  %6101 = getelementptr i32, i32* %6092, i64 24
  %6102 = bitcast i32* %6101 to <8 x i32>*
  %6103 = load <8 x i32>, <8 x i32>* %6102, align 4, !tbaa !33
  %6104 = bitcast i32* %6091 to <8 x i32>*
  %6105 = load <8 x i32>, <8 x i32>* %6104, align 4, !tbaa !33
  %6106 = getelementptr i32, i32* %6091, i64 8
  %6107 = bitcast i32* %6106 to <8 x i32>*
  %6108 = load <8 x i32>, <8 x i32>* %6107, align 4, !tbaa !33
  %6109 = getelementptr i32, i32* %6091, i64 16
  %6110 = bitcast i32* %6109 to <8 x i32>*
  %6111 = load <8 x i32>, <8 x i32>* %6110, align 4, !tbaa !33
  %6112 = getelementptr i32, i32* %6091, i64 24
  %6113 = bitcast i32* %6112 to <8 x i32>*
  %6114 = load <8 x i32>, <8 x i32>* %6113, align 4, !tbaa !33
  %6115 = add nsw <8 x i32> %6105, %6094
  %6116 = add nsw <8 x i32> %6108, %6097
  %6117 = add nsw <8 x i32> %6111, %6100
  %6118 = add nsw <8 x i32> %6114, %6103
  %6119 = bitcast i32* %6091 to <8 x i32>*
  store <8 x i32> %6115, <8 x i32>* %6119, align 4, !tbaa !33
  %6120 = bitcast i32* %6106 to <8 x i32>*
  store <8 x i32> %6116, <8 x i32>* %6120, align 4, !tbaa !33
  %6121 = bitcast i32* %6109 to <8 x i32>*
  store <8 x i32> %6117, <8 x i32>* %6121, align 4, !tbaa !33
  %6122 = bitcast i32* %6112 to <8 x i32>*
  store <8 x i32> %6118, <8 x i32>* %6122, align 4, !tbaa !33
  br label %6123

; <label>:6123:                                   ; preds = %6090, %6084
  %6124 = phi i64 [ 0, %6084 ], [ 32, %6090 ]
  %6125 = icmp eq i64 %6086, 0
  br i1 %6125, label %6199, label %6126

; <label>:6126:                                   ; preds = %6123
  br label %6127

; <label>:6127:                                   ; preds = %6127, %6126
  %6128 = phi i64 [ %6124, %6126 ], [ %6196, %6127 ]
  %6129 = add i64 %6036, %6128
  %6130 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %122, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6129
  %6131 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6129
  %6132 = bitcast i32* %6131 to <8 x i32>*
  %6133 = load <8 x i32>, <8 x i32>* %6132, align 4, !tbaa !33
  %6134 = getelementptr i32, i32* %6131, i64 8
  %6135 = bitcast i32* %6134 to <8 x i32>*
  %6136 = load <8 x i32>, <8 x i32>* %6135, align 4, !tbaa !33
  %6137 = getelementptr i32, i32* %6131, i64 16
  %6138 = bitcast i32* %6137 to <8 x i32>*
  %6139 = load <8 x i32>, <8 x i32>* %6138, align 4, !tbaa !33
  %6140 = getelementptr i32, i32* %6131, i64 24
  %6141 = bitcast i32* %6140 to <8 x i32>*
  %6142 = load <8 x i32>, <8 x i32>* %6141, align 4, !tbaa !33
  %6143 = bitcast i32* %6130 to <8 x i32>*
  %6144 = load <8 x i32>, <8 x i32>* %6143, align 4, !tbaa !33
  %6145 = getelementptr i32, i32* %6130, i64 8
  %6146 = bitcast i32* %6145 to <8 x i32>*
  %6147 = load <8 x i32>, <8 x i32>* %6146, align 4, !tbaa !33
  %6148 = getelementptr i32, i32* %6130, i64 16
  %6149 = bitcast i32* %6148 to <8 x i32>*
  %6150 = load <8 x i32>, <8 x i32>* %6149, align 4, !tbaa !33
  %6151 = getelementptr i32, i32* %6130, i64 24
  %6152 = bitcast i32* %6151 to <8 x i32>*
  %6153 = load <8 x i32>, <8 x i32>* %6152, align 4, !tbaa !33
  %6154 = add nsw <8 x i32> %6144, %6133
  %6155 = add nsw <8 x i32> %6147, %6136
  %6156 = add nsw <8 x i32> %6150, %6139
  %6157 = add nsw <8 x i32> %6153, %6142
  %6158 = bitcast i32* %6130 to <8 x i32>*
  store <8 x i32> %6154, <8 x i32>* %6158, align 4, !tbaa !33
  %6159 = bitcast i32* %6145 to <8 x i32>*
  store <8 x i32> %6155, <8 x i32>* %6159, align 4, !tbaa !33
  %6160 = bitcast i32* %6148 to <8 x i32>*
  store <8 x i32> %6156, <8 x i32>* %6160, align 4, !tbaa !33
  %6161 = bitcast i32* %6151 to <8 x i32>*
  store <8 x i32> %6157, <8 x i32>* %6161, align 4, !tbaa !33
  %6162 = add i64 %6128, 32
  %6163 = add i64 %6036, %6162
  %6164 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %122, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6163
  %6165 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6163
  %6166 = bitcast i32* %6165 to <8 x i32>*
  %6167 = load <8 x i32>, <8 x i32>* %6166, align 4, !tbaa !33
  %6168 = getelementptr i32, i32* %6165, i64 8
  %6169 = bitcast i32* %6168 to <8 x i32>*
  %6170 = load <8 x i32>, <8 x i32>* %6169, align 4, !tbaa !33
  %6171 = getelementptr i32, i32* %6165, i64 16
  %6172 = bitcast i32* %6171 to <8 x i32>*
  %6173 = load <8 x i32>, <8 x i32>* %6172, align 4, !tbaa !33
  %6174 = getelementptr i32, i32* %6165, i64 24
  %6175 = bitcast i32* %6174 to <8 x i32>*
  %6176 = load <8 x i32>, <8 x i32>* %6175, align 4, !tbaa !33
  %6177 = bitcast i32* %6164 to <8 x i32>*
  %6178 = load <8 x i32>, <8 x i32>* %6177, align 4, !tbaa !33
  %6179 = getelementptr i32, i32* %6164, i64 8
  %6180 = bitcast i32* %6179 to <8 x i32>*
  %6181 = load <8 x i32>, <8 x i32>* %6180, align 4, !tbaa !33
  %6182 = getelementptr i32, i32* %6164, i64 16
  %6183 = bitcast i32* %6182 to <8 x i32>*
  %6184 = load <8 x i32>, <8 x i32>* %6183, align 4, !tbaa !33
  %6185 = getelementptr i32, i32* %6164, i64 24
  %6186 = bitcast i32* %6185 to <8 x i32>*
  %6187 = load <8 x i32>, <8 x i32>* %6186, align 4, !tbaa !33
  %6188 = add nsw <8 x i32> %6178, %6167
  %6189 = add nsw <8 x i32> %6181, %6170
  %6190 = add nsw <8 x i32> %6184, %6173
  %6191 = add nsw <8 x i32> %6187, %6176
  %6192 = bitcast i32* %6164 to <8 x i32>*
  store <8 x i32> %6188, <8 x i32>* %6192, align 4, !tbaa !33
  %6193 = bitcast i32* %6179 to <8 x i32>*
  store <8 x i32> %6189, <8 x i32>* %6193, align 4, !tbaa !33
  %6194 = bitcast i32* %6182 to <8 x i32>*
  store <8 x i32> %6190, <8 x i32>* %6194, align 4, !tbaa !33
  %6195 = bitcast i32* %6185 to <8 x i32>*
  store <8 x i32> %6191, <8 x i32>* %6195, align 4, !tbaa !33
  %6196 = add i64 %6128, 64
  %6197 = icmp eq i64 %6196, %6081
  br i1 %6197, label %6198, label %6127, !llvm.loop !215

; <label>:6198:                                   ; preds = %6127
  br label %6199

; <label>:6199:                                   ; preds = %6123, %6198
  %6200 = icmp eq i64 %6078, %6081
  br i1 %6200, label %6280, label %6201

; <label>:6201:                                   ; preds = %6199, %6080, %6077
  %6202 = phi i64 [ %6036, %6080 ], [ %6036, %6077 ], [ %6083, %6199 ]
  br label %6203

; <label>:6203:                                   ; preds = %6201, %6203
  %6204 = phi i64 [ %6210, %6203 ], [ %6202, %6201 ]
  %6205 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %122, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6204
  %6206 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6204
  %6207 = load i32, i32* %6206, align 4, !tbaa !33
  %6208 = load i32, i32* %6205, align 4, !tbaa !33
  %6209 = add nsw i32 %6208, %6207
  store i32 %6209, i32* %6205, align 4, !tbaa !33
  %6210 = add nsw i64 %6204, 1
  %6211 = icmp eq i64 %6210, 282
  br i1 %6211, label %6279, label %6203, !llvm.loop !216

; <label>:6212:                                   ; preds = %6212, %6066
  %6213 = phi i64 [ %6064, %6066 ], [ %6277, %6212 ]
  %6214 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %122, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6213
  %6215 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6213
  %6216 = bitcast i32* %6215 to <4 x i32>*
  %6217 = load <4 x i32>, <4 x i32>* %6216, align 4, !tbaa !11
  %6218 = bitcast i32* %6214 to <4 x i32>*
  %6219 = load <4 x i32>, <4 x i32>* %6218, align 16, !tbaa !11
  %6220 = add <4 x i32> %6219, %6217
  store <4 x i32> %6220, <4 x i32>* %6218, align 16, !tbaa !11
  %6221 = add nuw nsw i64 %6213, 4
  %6222 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %122, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6221
  %6223 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6221
  %6224 = bitcast i32* %6223 to <4 x i32>*
  %6225 = load <4 x i32>, <4 x i32>* %6224, align 4, !tbaa !11
  %6226 = bitcast i32* %6222 to <4 x i32>*
  %6227 = load <4 x i32>, <4 x i32>* %6226, align 16, !tbaa !11
  %6228 = add <4 x i32> %6227, %6225
  store <4 x i32> %6228, <4 x i32>* %6226, align 16, !tbaa !11
  %6229 = add nsw i64 %6213, 8
  %6230 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %122, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6229
  %6231 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6229
  %6232 = bitcast i32* %6231 to <4 x i32>*
  %6233 = load <4 x i32>, <4 x i32>* %6232, align 4, !tbaa !11
  %6234 = bitcast i32* %6230 to <4 x i32>*
  %6235 = load <4 x i32>, <4 x i32>* %6234, align 16, !tbaa !11
  %6236 = add <4 x i32> %6235, %6233
  store <4 x i32> %6236, <4 x i32>* %6234, align 16, !tbaa !11
  %6237 = add nsw i64 %6213, 12
  %6238 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %122, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6237
  %6239 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6237
  %6240 = bitcast i32* %6239 to <4 x i32>*
  %6241 = load <4 x i32>, <4 x i32>* %6240, align 4, !tbaa !11
  %6242 = bitcast i32* %6238 to <4 x i32>*
  %6243 = load <4 x i32>, <4 x i32>* %6242, align 16, !tbaa !11
  %6244 = add <4 x i32> %6243, %6241
  store <4 x i32> %6244, <4 x i32>* %6242, align 16, !tbaa !11
  %6245 = add nsw i64 %6213, 16
  %6246 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %122, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6245
  %6247 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6245
  %6248 = bitcast i32* %6247 to <4 x i32>*
  %6249 = load <4 x i32>, <4 x i32>* %6248, align 4, !tbaa !11
  %6250 = bitcast i32* %6246 to <4 x i32>*
  %6251 = load <4 x i32>, <4 x i32>* %6250, align 16, !tbaa !11
  %6252 = add <4 x i32> %6251, %6249
  store <4 x i32> %6252, <4 x i32>* %6250, align 16, !tbaa !11
  %6253 = add nsw i64 %6213, 20
  %6254 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %122, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6253
  %6255 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6253
  %6256 = bitcast i32* %6255 to <4 x i32>*
  %6257 = load <4 x i32>, <4 x i32>* %6256, align 4, !tbaa !11
  %6258 = bitcast i32* %6254 to <4 x i32>*
  %6259 = load <4 x i32>, <4 x i32>* %6258, align 16, !tbaa !11
  %6260 = add <4 x i32> %6259, %6257
  store <4 x i32> %6260, <4 x i32>* %6258, align 16, !tbaa !11
  %6261 = add nsw i64 %6213, 24
  %6262 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %122, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6261
  %6263 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6261
  %6264 = bitcast i32* %6263 to <4 x i32>*
  %6265 = load <4 x i32>, <4 x i32>* %6264, align 4, !tbaa !11
  %6266 = bitcast i32* %6262 to <4 x i32>*
  %6267 = load <4 x i32>, <4 x i32>* %6266, align 16, !tbaa !11
  %6268 = add <4 x i32> %6267, %6265
  store <4 x i32> %6268, <4 x i32>* %6266, align 16, !tbaa !11
  %6269 = add nsw i64 %6213, 28
  %6270 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %122, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6269
  %6271 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6269
  %6272 = bitcast i32* %6271 to <4 x i32>*
  %6273 = load <4 x i32>, <4 x i32>* %6272, align 4, !tbaa !11
  %6274 = bitcast i32* %6270 to <4 x i32>*
  %6275 = load <4 x i32>, <4 x i32>* %6274, align 16, !tbaa !11
  %6276 = add <4 x i32> %6275, %6273
  store <4 x i32> %6276, <4 x i32>* %6274, align 16, !tbaa !11
  %6277 = add nsw i64 %6213, 32
  %6278 = icmp slt i64 %6277, %6036
  br i1 %6278, label %6212, label %6074

; <label>:6279:                                   ; preds = %6203
  br label %6280

; <label>:6280:                                   ; preds = %6279, %6199, %6075
  call void @llvm.lifetime.end(i64 1128, i8* nonnull %6030) #11
  %6281 = bitcast %"class.Eigen::Product.324"* %196 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %6281) #11
  %6282 = getelementptr inbounds %"class.Eigen::Product.324", %"class.Eigen::Product.324"* %196, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.32"* %111, %"class.Eigen::Matrix.32"** %6282, align 8
  %6283 = getelementptr inbounds %"class.Eigen::Product.324", %"class.Eigen::Product.324"* %196, i64 0, i32 0, i32 1
  store %"class.Eigen::Matrix.77"* %121, %"class.Eigen::Matrix.77"** %6283, align 8
  %6284 = getelementptr inbounds %"class.Eigen::Product.324", %"class.Eigen::Product.324"* %196, i64 0, i32 1
  %6285 = bitcast %"class.Eigen::Transpose.331"* %6284 to i64*
  store i64 %3324, i64* %6285, align 8, !alias.scope !217
  %6286 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %32, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %6286) #11
  call void @_ZN5Eigen8internal15call_assignmentINS_6MatrixIiLin1ELin1ELi0ELin1ELin1EEENS_7ProductINS4_INS2_IiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsr25evaluator_assume_aliasingISG_EE5valueEPvE4typeE(%"class.Eigen::Matrix.19"* nonnull dereferenceable(24) %102, %"class.Eigen::Product.324"* nonnull dereferenceable(24) %196, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %32, i8* null) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %6286) #11
  call void @llvm.lifetime.end(i64 24, i8* nonnull %6281) #11
  %6287 = bitcast %"class.Eigen::Product.234"* %197 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %6287) #11
  %6288 = getelementptr inbounds %"class.Eigen::Product.234", %"class.Eigen::Product.234"* %197, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.153"* %145, %"class.Eigen::Matrix.153"** %6288, align 8
  %6289 = getelementptr inbounds %"class.Eigen::Product.234", %"class.Eigen::Product.234"* %197, i64 0, i32 1, i32 0
  store %"class.Eigen::Matrix.32"* %111, %"class.Eigen::Matrix.32"** %6289, align 8
  %6290 = getelementptr inbounds %"struct.Eigen::internal::add_assign_op", %"struct.Eigen::internal::add_assign_op"* %31, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %6290) #11
  call void @_ZN5Eigen8internal15call_assignmentINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEENS_7ProductINS_9TransposeINS2_IiLi47ELi1ELi0ELi47ELi1EEEEENS5_INS2_IiLin1ELi47ELi0ELin1ELi47EEEEELi0EEENS0_13add_assign_opIiiEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsr25evaluator_assume_aliasingISF_EE5valueEPvE4typeE(%"class.Eigen::Matrix.170"* nonnull dereferenceable(16) %154, %"class.Eigen::Product.234"* nonnull dereferenceable(16) %197, %"struct.Eigen::internal::add_assign_op"* nonnull dereferenceable(1) %31, i8* null) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %6290) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %6287) #11
  %6291 = bitcast %"class.Eigen::CwiseBinaryOp.200"* %198 to i8*
  call void @llvm.lifetime.start(i64 40, i8* nonnull %6291) #11
  %6292 = bitcast %"class.Eigen::Matrix.185"* %159 to i128*
  %6293 = load i128, i128* %6292, align 8, !tbaa !11
  %6294 = load i64, i64* %803, align 8, !tbaa !43, !noalias !220
  %6295 = icmp slt i64 %6294, 0
  br i1 %6295, label %6296, label %6297, !prof !50

; <label>:6296:                                   ; preds = %6280
  call void @__assert_rtn(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__._ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEENS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEC2EllRKS3_, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.13, i64 0, i64 0), i32 74, i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.14, i64 0, i64 0)) #13, !noalias !220
  unreachable

; <label>:6297:                                   ; preds = %6280
  %6298 = load i32, i32* %1539, align 8, !tbaa !33
  %6299 = trunc i128 %6293 to i32
  %6300 = lshr i128 %6293, 32
  %6301 = trunc i128 %6300 to i32
  %6302 = lshr i128 %6293, 64
  %6303 = trunc i128 %6302 to i32
  %6304 = lshr i128 %6293, 96
  %6305 = trunc i128 %6304 to i32
  %6306 = load i32, i32* %1542, align 4, !tbaa !33
  %6307 = mul i32 %6301, %6299
  %6308 = mul i32 %6307, %6303
  %6309 = mul i32 %6308, %6305
  %6310 = mul i32 %6309, %6298
  %6311 = mul i32 %6310, %6306
  %6312 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %198, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.123"* %141, %"class.Eigen::Matrix.123"** %6312, align 8
  %6313 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %198, i64 0, i32 0, i32 1
  store %"class.Eigen::Matrix.185"* %166, %"class.Eigen::Matrix.185"** %6313, align 8
  %6314 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %198, i64 0, i32 1, i32 0, i32 0
  store i64 %6294, i64* %6314, align 8, !alias.scope !220
  %6315 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %198, i64 0, i32 1, i32 2, i32 0
  store i32 %6311, i32* %6315, align 4, !tbaa !51, !alias.scope !220
  %6316 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %30, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %6316) #11
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEENS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_7ProductINS2_IiLin1ELi6ELi0ELin1ELi6EEENS2_IiLi6ELi1ELi0ELi6ELi1EEELi0EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKS3_EEEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.170"* nonnull dereferenceable(16) %171, %"class.Eigen::CwiseBinaryOp.200"* nonnull dereferenceable(40) %198, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %30) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %6316) #11
  call void @llvm.lifetime.end(i64 40, i8* nonnull %6291) #11
  %6317 = bitcast %"class.Eigen::Product.317"* %199 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %6317) #11
  %6318 = getelementptr inbounds %"class.Eigen::Product.317", %"class.Eigen::Product.317"* %199, i64 0, i32 0
  store %"class.Eigen::Matrix.32"* %107, %"class.Eigen::Matrix.32"** %6318, align 8
  %6319 = getelementptr inbounds %"class.Eigen::Product.317", %"class.Eigen::Product.317"* %199, i64 0, i32 1
  store %"class.Eigen::Matrix.77"* %121, %"class.Eigen::Matrix.77"** %6319, align 8
  %6320 = bitcast %"class.Eigen::Matrix.123"* %29 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %6320) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %6320, i8 0, i64 16, i32 8, i1 false) #11
  %6321 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %28, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %6321) #11
  call void @_ZN5Eigen8internal10AssignmentINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEENS_7ProductINS2_IiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS0_9assign_opIiiEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_(%"class.Eigen::Matrix.123"* nonnull dereferenceable(16) %29, %"class.Eigen::Product.317"* nonnull dereferenceable(16) %199, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %28) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %6321) #11
  %6322 = bitcast %"class.Eigen::Matrix.123"* %29 to i64*
  %6323 = load i64, i64* %6322, align 8, !tbaa !41
  %6324 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %29, i64 0, i32 0, i32 0, i32 1
  %6325 = load i64, i64* %6324, align 8, !tbaa !43
  %6326 = load i64, i64* %803, align 8, !tbaa !43
  %6327 = icmp eq i64 %6326, %6325
  br i1 %6327, label %6360, label %6328

; <label>:6328:                                   ; preds = %6297
  %6329 = icmp sgt i64 %6325, -1
  br i1 %6329, label %6331, label %6330, !prof !10

; <label>:6330:                                   ; preds = %6328
  call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:6331:                                   ; preds = %6328
  %6332 = xor i64 %6326, %6325
  %6333 = and i64 %6332, 9223372036854775807
  %6334 = icmp eq i64 %6333, 0
  br i1 %6334, label %6359, label %6335

; <label>:6335:                                   ; preds = %6331
  %6336 = load i32*, i32** %804, align 8, !tbaa !41
  %6337 = icmp eq i32* %6336, null
  br i1 %6337, label %6342, label %6338

; <label>:6338:                                   ; preds = %6335
  %6339 = getelementptr inbounds i32, i32* %6336, i64 -2
  %6340 = bitcast i32* %6339 to i8**
  %6341 = load i8*, i8** %6340, align 8, !tbaa !29
  call void @free(i8* %6341) #11
  br label %6342

; <label>:6342:                                   ; preds = %6338, %6335
  %6343 = icmp eq i64 %6325, 0
  br i1 %6343, label %6358, label %6344

; <label>:6344:                                   ; preds = %6342
  %6345 = mul i64 %6325, 24
  %6346 = add i64 %6345, 32
  %6347 = call i8* @malloc(i64 %6346) #14
  %6348 = icmp eq i8* %6347, null
  br i1 %6348, label %6356, label %6349

; <label>:6349:                                   ; preds = %6344
  %6350 = ptrtoint i8* %6347 to i64
  %6351 = add i64 %6350, 32
  %6352 = and i64 %6351, -32
  %6353 = inttoptr i64 %6352 to i8**
  %6354 = getelementptr inbounds i8*, i8** %6353, i64 -1
  store i8* %6347, i8** %6354, align 8, !tbaa !29
  %6355 = inttoptr i64 %6352 to i32*
  br label %6356

; <label>:6356:                                   ; preds = %6349, %6344
  %6357 = phi i32* [ %6355, %6349 ], [ null, %6344 ]
  store i32* %6357, i32** %804, align 8, !tbaa !41
  br label %6359

; <label>:6358:                                   ; preds = %6342
  store i32* null, i32** %804, align 8, !tbaa !41
  br label %6359

; <label>:6359:                                   ; preds = %6358, %6356, %6331
  store i64 %6325, i64* %803, align 8, !tbaa !43
  br label %6360

; <label>:6360:                                   ; preds = %6359, %6297
  %6361 = bitcast %"class.Eigen::Matrix.123"* %141 to i64*
  %6362 = load i64, i64* %6361, align 8, !tbaa !41
  %6363 = mul nsw i64 %6325, 6
  %6364 = sdiv i64 %6363, 4
  %6365 = shl nsw i64 %6364, 2
  %6366 = icmp sgt i64 %6363, 3
  br i1 %6366, label %6367, label %6396

; <label>:6367:                                   ; preds = %6360
  %6368 = inttoptr i64 %6362 to i32*
  %6369 = inttoptr i64 %6323 to i32*
  %6370 = icmp sgt i64 %6365, 4
  %6371 = select i1 %6370, i64 %6365, i64 4
  %6372 = add nsw i64 %6371, -1
  %6373 = lshr i64 %6372, 2
  %6374 = add nuw nsw i64 %6373, 1
  %6375 = and i64 %6374, 7
  %6376 = icmp eq i64 %6375, 0
  br i1 %6376, label %6390, label %6377

; <label>:6377:                                   ; preds = %6367
  br label %6378

; <label>:6378:                                   ; preds = %6378, %6377
  %6379 = phi i64 [ %6386, %6378 ], [ 0, %6377 ]
  %6380 = phi i64 [ %6387, %6378 ], [ %6375, %6377 ]
  %6381 = getelementptr inbounds i32, i32* %6368, i64 %6379
  %6382 = getelementptr inbounds i32, i32* %6369, i64 %6379
  %6383 = bitcast i32* %6382 to <2 x i64>*
  %6384 = load <2 x i64>, <2 x i64>* %6383, align 16, !tbaa !11
  %6385 = bitcast i32* %6381 to <2 x i64>*
  store <2 x i64> %6384, <2 x i64>* %6385, align 16, !tbaa !11
  %6386 = add nuw nsw i64 %6379, 4
  %6387 = add i64 %6380, -1
  %6388 = icmp eq i64 %6387, 0
  br i1 %6388, label %6389, label %6378, !llvm.loop !223

; <label>:6389:                                   ; preds = %6378
  br label %6390

; <label>:6390:                                   ; preds = %6367, %6389
  %6391 = phi i64 [ 0, %6367 ], [ %6386, %6389 ]
  %6392 = icmp ult i64 %6372, 28
  br i1 %6392, label %6395, label %6393

; <label>:6393:                                   ; preds = %6390
  br label %6605

; <label>:6394:                                   ; preds = %6605
  br label %6395

; <label>:6395:                                   ; preds = %6390, %6394
  br label %6396

; <label>:6396:                                   ; preds = %6395, %6360
  %6397 = icmp sgt i64 %6363, %6365
  br i1 %6397, label %6398, label %6658

; <label>:6398:                                   ; preds = %6396
  %6399 = inttoptr i64 %6362 to i32*
  %6400 = inttoptr i64 %6323 to i32*
  %6401 = sub i64 %6363, %6365
  %6402 = icmp ult i64 %6401, 32
  br i1 %6402, label %6548, label %6403

; <label>:6403:                                   ; preds = %6398
  %6404 = and i64 %6401, -32
  %6405 = icmp eq i64 %6404, 0
  br i1 %6405, label %6548, label %6406

; <label>:6406:                                   ; preds = %6403
  %6407 = getelementptr i32, i32* %6399, i64 %6365
  %6408 = getelementptr i32, i32* %6399, i64 %6363
  %6409 = getelementptr i32, i32* %6400, i64 %6365
  %6410 = getelementptr i32, i32* %6400, i64 %6363
  %6411 = icmp ult i32* %6407, %6410
  %6412 = icmp ult i32* %6409, %6408
  %6413 = and i1 %6411, %6412
  %6414 = add i64 %6365, %6404
  br i1 %6413, label %6548, label %6415

; <label>:6415:                                   ; preds = %6406
  %6416 = add i64 %6404, -32
  %6417 = lshr exact i64 %6416, 5
  %6418 = add nuw nsw i64 %6417, 1
  %6419 = and i64 %6418, 3
  %6420 = icmp eq i64 %6419, 0
  br i1 %6420, label %6450, label %6421

; <label>:6421:                                   ; preds = %6415
  br label %6422

; <label>:6422:                                   ; preds = %6422, %6421
  %6423 = phi i64 [ %6446, %6422 ], [ 0, %6421 ]
  %6424 = phi i64 [ %6447, %6422 ], [ %6419, %6421 ]
  %6425 = add i64 %6365, %6423
  %6426 = getelementptr inbounds i32, i32* %6399, i64 %6425
  %6427 = getelementptr inbounds i32, i32* %6400, i64 %6425
  %6428 = bitcast i32* %6427 to <8 x i32>*
  %6429 = load <8 x i32>, <8 x i32>* %6428, align 4, !tbaa !33, !alias.scope !224
  %6430 = getelementptr i32, i32* %6427, i64 8
  %6431 = bitcast i32* %6430 to <8 x i32>*
  %6432 = load <8 x i32>, <8 x i32>* %6431, align 4, !tbaa !33, !alias.scope !224
  %6433 = getelementptr i32, i32* %6427, i64 16
  %6434 = bitcast i32* %6433 to <8 x i32>*
  %6435 = load <8 x i32>, <8 x i32>* %6434, align 4, !tbaa !33, !alias.scope !224
  %6436 = getelementptr i32, i32* %6427, i64 24
  %6437 = bitcast i32* %6436 to <8 x i32>*
  %6438 = load <8 x i32>, <8 x i32>* %6437, align 4, !tbaa !33, !alias.scope !224
  %6439 = bitcast i32* %6426 to <8 x i32>*
  store <8 x i32> %6429, <8 x i32>* %6439, align 4, !tbaa !33, !alias.scope !227, !noalias !224
  %6440 = getelementptr i32, i32* %6426, i64 8
  %6441 = bitcast i32* %6440 to <8 x i32>*
  store <8 x i32> %6432, <8 x i32>* %6441, align 4, !tbaa !33, !alias.scope !227, !noalias !224
  %6442 = getelementptr i32, i32* %6426, i64 16
  %6443 = bitcast i32* %6442 to <8 x i32>*
  store <8 x i32> %6435, <8 x i32>* %6443, align 4, !tbaa !33, !alias.scope !227, !noalias !224
  %6444 = getelementptr i32, i32* %6426, i64 24
  %6445 = bitcast i32* %6444 to <8 x i32>*
  store <8 x i32> %6438, <8 x i32>* %6445, align 4, !tbaa !33, !alias.scope !227, !noalias !224
  %6446 = add i64 %6423, 32
  %6447 = add i64 %6424, -1
  %6448 = icmp eq i64 %6447, 0
  br i1 %6448, label %6449, label %6422, !llvm.loop !229

; <label>:6449:                                   ; preds = %6422
  br label %6450

; <label>:6450:                                   ; preds = %6415, %6449
  %6451 = phi i64 [ 0, %6415 ], [ %6446, %6449 ]
  %6452 = icmp ult i64 %6416, 96
  br i1 %6452, label %6546, label %6453

; <label>:6453:                                   ; preds = %6450
  br label %6454

; <label>:6454:                                   ; preds = %6454, %6453
  %6455 = phi i64 [ %6451, %6453 ], [ %6543, %6454 ]
  %6456 = add i64 %6365, %6455
  %6457 = getelementptr inbounds i32, i32* %6399, i64 %6456
  %6458 = getelementptr inbounds i32, i32* %6400, i64 %6456
  %6459 = bitcast i32* %6458 to <8 x i32>*
  %6460 = load <8 x i32>, <8 x i32>* %6459, align 4, !tbaa !33, !alias.scope !224
  %6461 = getelementptr i32, i32* %6458, i64 8
  %6462 = bitcast i32* %6461 to <8 x i32>*
  %6463 = load <8 x i32>, <8 x i32>* %6462, align 4, !tbaa !33, !alias.scope !224
  %6464 = getelementptr i32, i32* %6458, i64 16
  %6465 = bitcast i32* %6464 to <8 x i32>*
  %6466 = load <8 x i32>, <8 x i32>* %6465, align 4, !tbaa !33, !alias.scope !224
  %6467 = getelementptr i32, i32* %6458, i64 24
  %6468 = bitcast i32* %6467 to <8 x i32>*
  %6469 = load <8 x i32>, <8 x i32>* %6468, align 4, !tbaa !33, !alias.scope !224
  %6470 = bitcast i32* %6457 to <8 x i32>*
  store <8 x i32> %6460, <8 x i32>* %6470, align 4, !tbaa !33, !alias.scope !227, !noalias !224
  %6471 = getelementptr i32, i32* %6457, i64 8
  %6472 = bitcast i32* %6471 to <8 x i32>*
  store <8 x i32> %6463, <8 x i32>* %6472, align 4, !tbaa !33, !alias.scope !227, !noalias !224
  %6473 = getelementptr i32, i32* %6457, i64 16
  %6474 = bitcast i32* %6473 to <8 x i32>*
  store <8 x i32> %6466, <8 x i32>* %6474, align 4, !tbaa !33, !alias.scope !227, !noalias !224
  %6475 = getelementptr i32, i32* %6457, i64 24
  %6476 = bitcast i32* %6475 to <8 x i32>*
  store <8 x i32> %6469, <8 x i32>* %6476, align 4, !tbaa !33, !alias.scope !227, !noalias !224
  %6477 = add i64 %6455, 32
  %6478 = add i64 %6365, %6477
  %6479 = getelementptr inbounds i32, i32* %6399, i64 %6478
  %6480 = getelementptr inbounds i32, i32* %6400, i64 %6478
  %6481 = bitcast i32* %6480 to <8 x i32>*
  %6482 = load <8 x i32>, <8 x i32>* %6481, align 4, !tbaa !33, !alias.scope !224
  %6483 = getelementptr i32, i32* %6480, i64 8
  %6484 = bitcast i32* %6483 to <8 x i32>*
  %6485 = load <8 x i32>, <8 x i32>* %6484, align 4, !tbaa !33, !alias.scope !224
  %6486 = getelementptr i32, i32* %6480, i64 16
  %6487 = bitcast i32* %6486 to <8 x i32>*
  %6488 = load <8 x i32>, <8 x i32>* %6487, align 4, !tbaa !33, !alias.scope !224
  %6489 = getelementptr i32, i32* %6480, i64 24
  %6490 = bitcast i32* %6489 to <8 x i32>*
  %6491 = load <8 x i32>, <8 x i32>* %6490, align 4, !tbaa !33, !alias.scope !224
  %6492 = bitcast i32* %6479 to <8 x i32>*
  store <8 x i32> %6482, <8 x i32>* %6492, align 4, !tbaa !33, !alias.scope !227, !noalias !224
  %6493 = getelementptr i32, i32* %6479, i64 8
  %6494 = bitcast i32* %6493 to <8 x i32>*
  store <8 x i32> %6485, <8 x i32>* %6494, align 4, !tbaa !33, !alias.scope !227, !noalias !224
  %6495 = getelementptr i32, i32* %6479, i64 16
  %6496 = bitcast i32* %6495 to <8 x i32>*
  store <8 x i32> %6488, <8 x i32>* %6496, align 4, !tbaa !33, !alias.scope !227, !noalias !224
  %6497 = getelementptr i32, i32* %6479, i64 24
  %6498 = bitcast i32* %6497 to <8 x i32>*
  store <8 x i32> %6491, <8 x i32>* %6498, align 4, !tbaa !33, !alias.scope !227, !noalias !224
  %6499 = add i64 %6455, 64
  %6500 = add i64 %6365, %6499
  %6501 = getelementptr inbounds i32, i32* %6399, i64 %6500
  %6502 = getelementptr inbounds i32, i32* %6400, i64 %6500
  %6503 = bitcast i32* %6502 to <8 x i32>*
  %6504 = load <8 x i32>, <8 x i32>* %6503, align 4, !tbaa !33, !alias.scope !224
  %6505 = getelementptr i32, i32* %6502, i64 8
  %6506 = bitcast i32* %6505 to <8 x i32>*
  %6507 = load <8 x i32>, <8 x i32>* %6506, align 4, !tbaa !33, !alias.scope !224
  %6508 = getelementptr i32, i32* %6502, i64 16
  %6509 = bitcast i32* %6508 to <8 x i32>*
  %6510 = load <8 x i32>, <8 x i32>* %6509, align 4, !tbaa !33, !alias.scope !224
  %6511 = getelementptr i32, i32* %6502, i64 24
  %6512 = bitcast i32* %6511 to <8 x i32>*
  %6513 = load <8 x i32>, <8 x i32>* %6512, align 4, !tbaa !33, !alias.scope !224
  %6514 = bitcast i32* %6501 to <8 x i32>*
  store <8 x i32> %6504, <8 x i32>* %6514, align 4, !tbaa !33, !alias.scope !227, !noalias !224
  %6515 = getelementptr i32, i32* %6501, i64 8
  %6516 = bitcast i32* %6515 to <8 x i32>*
  store <8 x i32> %6507, <8 x i32>* %6516, align 4, !tbaa !33, !alias.scope !227, !noalias !224
  %6517 = getelementptr i32, i32* %6501, i64 16
  %6518 = bitcast i32* %6517 to <8 x i32>*
  store <8 x i32> %6510, <8 x i32>* %6518, align 4, !tbaa !33, !alias.scope !227, !noalias !224
  %6519 = getelementptr i32, i32* %6501, i64 24
  %6520 = bitcast i32* %6519 to <8 x i32>*
  store <8 x i32> %6513, <8 x i32>* %6520, align 4, !tbaa !33, !alias.scope !227, !noalias !224
  %6521 = add i64 %6455, 96
  %6522 = add i64 %6365, %6521
  %6523 = getelementptr inbounds i32, i32* %6399, i64 %6522
  %6524 = getelementptr inbounds i32, i32* %6400, i64 %6522
  %6525 = bitcast i32* %6524 to <8 x i32>*
  %6526 = load <8 x i32>, <8 x i32>* %6525, align 4, !tbaa !33, !alias.scope !224
  %6527 = getelementptr i32, i32* %6524, i64 8
  %6528 = bitcast i32* %6527 to <8 x i32>*
  %6529 = load <8 x i32>, <8 x i32>* %6528, align 4, !tbaa !33, !alias.scope !224
  %6530 = getelementptr i32, i32* %6524, i64 16
  %6531 = bitcast i32* %6530 to <8 x i32>*
  %6532 = load <8 x i32>, <8 x i32>* %6531, align 4, !tbaa !33, !alias.scope !224
  %6533 = getelementptr i32, i32* %6524, i64 24
  %6534 = bitcast i32* %6533 to <8 x i32>*
  %6535 = load <8 x i32>, <8 x i32>* %6534, align 4, !tbaa !33, !alias.scope !224
  %6536 = bitcast i32* %6523 to <8 x i32>*
  store <8 x i32> %6526, <8 x i32>* %6536, align 4, !tbaa !33, !alias.scope !227, !noalias !224
  %6537 = getelementptr i32, i32* %6523, i64 8
  %6538 = bitcast i32* %6537 to <8 x i32>*
  store <8 x i32> %6529, <8 x i32>* %6538, align 4, !tbaa !33, !alias.scope !227, !noalias !224
  %6539 = getelementptr i32, i32* %6523, i64 16
  %6540 = bitcast i32* %6539 to <8 x i32>*
  store <8 x i32> %6532, <8 x i32>* %6540, align 4, !tbaa !33, !alias.scope !227, !noalias !224
  %6541 = getelementptr i32, i32* %6523, i64 24
  %6542 = bitcast i32* %6541 to <8 x i32>*
  store <8 x i32> %6535, <8 x i32>* %6542, align 4, !tbaa !33, !alias.scope !227, !noalias !224
  %6543 = add i64 %6455, 128
  %6544 = icmp eq i64 %6543, %6404
  br i1 %6544, label %6545, label %6454, !llvm.loop !230

; <label>:6545:                                   ; preds = %6454
  br label %6546

; <label>:6546:                                   ; preds = %6450, %6545
  %6547 = icmp eq i64 %6401, %6404
  br i1 %6547, label %6658, label %6548

; <label>:6548:                                   ; preds = %6546, %6406, %6403, %6398
  %6549 = phi i64 [ %6365, %6406 ], [ %6365, %6403 ], [ %6365, %6398 ], [ %6414, %6546 ]
  %6550 = sub i64 %6363, %6549
  %6551 = add i64 %6363, -1
  %6552 = sub i64 %6551, %6549
  %6553 = and i64 %6550, 7
  %6554 = icmp eq i64 %6553, 0
  br i1 %6554, label %6566, label %6555

; <label>:6555:                                   ; preds = %6548
  br label %6556

; <label>:6556:                                   ; preds = %6556, %6555
  %6557 = phi i64 [ %6562, %6556 ], [ %6549, %6555 ]
  %6558 = phi i64 [ %6563, %6556 ], [ %6553, %6555 ]
  %6559 = getelementptr inbounds i32, i32* %6399, i64 %6557
  %6560 = getelementptr inbounds i32, i32* %6400, i64 %6557
  %6561 = load i32, i32* %6560, align 4, !tbaa !33
  store i32 %6561, i32* %6559, align 4, !tbaa !33
  %6562 = add nsw i64 %6557, 1
  %6563 = add i64 %6558, -1
  %6564 = icmp eq i64 %6563, 0
  br i1 %6564, label %6565, label %6556, !llvm.loop !231

; <label>:6565:                                   ; preds = %6556
  br label %6566

; <label>:6566:                                   ; preds = %6548, %6565
  %6567 = phi i64 [ %6549, %6548 ], [ %6562, %6565 ]
  %6568 = icmp ult i64 %6552, 7
  br i1 %6568, label %6657, label %6569

; <label>:6569:                                   ; preds = %6566
  br label %6570

; <label>:6570:                                   ; preds = %6570, %6569
  %6571 = phi i64 [ %6567, %6569 ], [ %6603, %6570 ]
  %6572 = getelementptr inbounds i32, i32* %6399, i64 %6571
  %6573 = getelementptr inbounds i32, i32* %6400, i64 %6571
  %6574 = load i32, i32* %6573, align 4, !tbaa !33
  store i32 %6574, i32* %6572, align 4, !tbaa !33
  %6575 = add nsw i64 %6571, 1
  %6576 = getelementptr inbounds i32, i32* %6399, i64 %6575
  %6577 = getelementptr inbounds i32, i32* %6400, i64 %6575
  %6578 = load i32, i32* %6577, align 4, !tbaa !33
  store i32 %6578, i32* %6576, align 4, !tbaa !33
  %6579 = add nsw i64 %6571, 2
  %6580 = getelementptr inbounds i32, i32* %6399, i64 %6579
  %6581 = getelementptr inbounds i32, i32* %6400, i64 %6579
  %6582 = load i32, i32* %6581, align 4, !tbaa !33
  store i32 %6582, i32* %6580, align 4, !tbaa !33
  %6583 = add nsw i64 %6571, 3
  %6584 = getelementptr inbounds i32, i32* %6399, i64 %6583
  %6585 = getelementptr inbounds i32, i32* %6400, i64 %6583
  %6586 = load i32, i32* %6585, align 4, !tbaa !33
  store i32 %6586, i32* %6584, align 4, !tbaa !33
  %6587 = add nsw i64 %6571, 4
  %6588 = getelementptr inbounds i32, i32* %6399, i64 %6587
  %6589 = getelementptr inbounds i32, i32* %6400, i64 %6587
  %6590 = load i32, i32* %6589, align 4, !tbaa !33
  store i32 %6590, i32* %6588, align 4, !tbaa !33
  %6591 = add nsw i64 %6571, 5
  %6592 = getelementptr inbounds i32, i32* %6399, i64 %6591
  %6593 = getelementptr inbounds i32, i32* %6400, i64 %6591
  %6594 = load i32, i32* %6593, align 4, !tbaa !33
  store i32 %6594, i32* %6592, align 4, !tbaa !33
  %6595 = add nsw i64 %6571, 6
  %6596 = getelementptr inbounds i32, i32* %6399, i64 %6595
  %6597 = getelementptr inbounds i32, i32* %6400, i64 %6595
  %6598 = load i32, i32* %6597, align 4, !tbaa !33
  store i32 %6598, i32* %6596, align 4, !tbaa !33
  %6599 = add nsw i64 %6571, 7
  %6600 = getelementptr inbounds i32, i32* %6399, i64 %6599
  %6601 = getelementptr inbounds i32, i32* %6400, i64 %6599
  %6602 = load i32, i32* %6601, align 4, !tbaa !33
  store i32 %6602, i32* %6600, align 4, !tbaa !33
  %6603 = add nsw i64 %6571, 8
  %6604 = icmp eq i64 %6603, %6363
  br i1 %6604, label %6656, label %6570, !llvm.loop !232

; <label>:6605:                                   ; preds = %6605, %6393
  %6606 = phi i64 [ %6391, %6393 ], [ %6654, %6605 ]
  %6607 = getelementptr inbounds i32, i32* %6368, i64 %6606
  %6608 = getelementptr inbounds i32, i32* %6369, i64 %6606
  %6609 = bitcast i32* %6608 to <2 x i64>*
  %6610 = load <2 x i64>, <2 x i64>* %6609, align 16, !tbaa !11
  %6611 = bitcast i32* %6607 to <2 x i64>*
  store <2 x i64> %6610, <2 x i64>* %6611, align 16, !tbaa !11
  %6612 = add nuw nsw i64 %6606, 4
  %6613 = getelementptr inbounds i32, i32* %6368, i64 %6612
  %6614 = getelementptr inbounds i32, i32* %6369, i64 %6612
  %6615 = bitcast i32* %6614 to <2 x i64>*
  %6616 = load <2 x i64>, <2 x i64>* %6615, align 16, !tbaa !11
  %6617 = bitcast i32* %6613 to <2 x i64>*
  store <2 x i64> %6616, <2 x i64>* %6617, align 16, !tbaa !11
  %6618 = add nsw i64 %6606, 8
  %6619 = getelementptr inbounds i32, i32* %6368, i64 %6618
  %6620 = getelementptr inbounds i32, i32* %6369, i64 %6618
  %6621 = bitcast i32* %6620 to <2 x i64>*
  %6622 = load <2 x i64>, <2 x i64>* %6621, align 16, !tbaa !11
  %6623 = bitcast i32* %6619 to <2 x i64>*
  store <2 x i64> %6622, <2 x i64>* %6623, align 16, !tbaa !11
  %6624 = add nsw i64 %6606, 12
  %6625 = getelementptr inbounds i32, i32* %6368, i64 %6624
  %6626 = getelementptr inbounds i32, i32* %6369, i64 %6624
  %6627 = bitcast i32* %6626 to <2 x i64>*
  %6628 = load <2 x i64>, <2 x i64>* %6627, align 16, !tbaa !11
  %6629 = bitcast i32* %6625 to <2 x i64>*
  store <2 x i64> %6628, <2 x i64>* %6629, align 16, !tbaa !11
  %6630 = add nsw i64 %6606, 16
  %6631 = getelementptr inbounds i32, i32* %6368, i64 %6630
  %6632 = getelementptr inbounds i32, i32* %6369, i64 %6630
  %6633 = bitcast i32* %6632 to <2 x i64>*
  %6634 = load <2 x i64>, <2 x i64>* %6633, align 16, !tbaa !11
  %6635 = bitcast i32* %6631 to <2 x i64>*
  store <2 x i64> %6634, <2 x i64>* %6635, align 16, !tbaa !11
  %6636 = add nsw i64 %6606, 20
  %6637 = getelementptr inbounds i32, i32* %6368, i64 %6636
  %6638 = getelementptr inbounds i32, i32* %6369, i64 %6636
  %6639 = bitcast i32* %6638 to <2 x i64>*
  %6640 = load <2 x i64>, <2 x i64>* %6639, align 16, !tbaa !11
  %6641 = bitcast i32* %6637 to <2 x i64>*
  store <2 x i64> %6640, <2 x i64>* %6641, align 16, !tbaa !11
  %6642 = add nsw i64 %6606, 24
  %6643 = getelementptr inbounds i32, i32* %6368, i64 %6642
  %6644 = getelementptr inbounds i32, i32* %6369, i64 %6642
  %6645 = bitcast i32* %6644 to <2 x i64>*
  %6646 = load <2 x i64>, <2 x i64>* %6645, align 16, !tbaa !11
  %6647 = bitcast i32* %6643 to <2 x i64>*
  store <2 x i64> %6646, <2 x i64>* %6647, align 16, !tbaa !11
  %6648 = add nsw i64 %6606, 28
  %6649 = getelementptr inbounds i32, i32* %6368, i64 %6648
  %6650 = getelementptr inbounds i32, i32* %6369, i64 %6648
  %6651 = bitcast i32* %6650 to <2 x i64>*
  %6652 = load <2 x i64>, <2 x i64>* %6651, align 16, !tbaa !11
  %6653 = bitcast i32* %6649 to <2 x i64>*
  store <2 x i64> %6652, <2 x i64>* %6653, align 16, !tbaa !11
  %6654 = add nsw i64 %6606, 32
  %6655 = icmp slt i64 %6654, %6365
  br i1 %6655, label %6605, label %6394

; <label>:6656:                                   ; preds = %6570
  br label %6657

; <label>:6657:                                   ; preds = %6566, %6656
  br label %6658

; <label>:6658:                                   ; preds = %6657, %6546, %6396
  %6659 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %29, i64 0, i32 0, i32 0, i32 0
  %6660 = load i32*, i32** %6659, align 8, !tbaa !41
  %6661 = icmp eq i32* %6660, null
  br i1 %6661, label %6666, label %6662

; <label>:6662:                                   ; preds = %6658
  %6663 = getelementptr inbounds i32, i32* %6660, i64 -2
  %6664 = bitcast i32* %6663 to i8**
  %6665 = load i8*, i8** %6664, align 8, !tbaa !29
  call void @free(i8* %6665) #11
  br label %6666

; <label>:6666:                                   ; preds = %6658, %6662
  call void @llvm.lifetime.end(i64 16, i8* nonnull %6320) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %6317) #11
  %6667 = bitcast %"class.Eigen::Product.390"* %200 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %6667) #11
  %6668 = load i64, i64* %825, align 8, !tbaa !43
  %6669 = load i64, i64* %345, align 8, !tbaa !37
  %6670 = icmp eq i64 %6668, %6669
  br i1 %6670, label %6672, label %6671, !prof !10

; <label>:6671:                                   ; preds = %6666
  call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS1_IdLin1ELi1ELi0ELin1ELi1EEELi0EEC2ERKS2_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 97, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2, i64 0, i64 0)) #13
  unreachable

; <label>:6672:                                   ; preds = %6666
  %6673 = getelementptr inbounds %"class.Eigen::Product.390", %"class.Eigen::Product.390"* %200, i64 0, i32 0, i32 0, i32 0
  store %"class.Eigen::Matrix.123"* %142, %"class.Eigen::Matrix.123"** %6673, align 8
  %6674 = getelementptr inbounds %"class.Eigen::Product.390", %"class.Eigen::Product.390"* %200, i64 0, i32 0, i32 1
  store %"class.Eigen::Matrix.32"* %107, %"class.Eigen::Matrix.32"** %6674, align 8
  %6675 = getelementptr inbounds %"class.Eigen::Product.390", %"class.Eigen::Product.390"* %200, i64 0, i32 1
  store %"class.Eigen::Matrix.77"* %124, %"class.Eigen::Matrix.77"** %6675, align 8, !tbaa !11, !alias.scope !233
  %6676 = bitcast %"class.Eigen::Matrix.108"* %27 to i8*
  call void @llvm.lifetime.start(i64 144, i8* nonnull %6676) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %6676, i8 0, i64 144, i32 16, i1 false) #11
  %6677 = bitcast %"class.Eigen::Matrix.94"* %25 to i8*
  call void @llvm.lifetime.start(i64 1128, i8* nonnull %6677) #11
  %6678 = getelementptr inbounds %"class.Eigen::Product.390", %"class.Eigen::Product.390"* %200, i64 0, i32 0, i32 0
  call void @_ZN5Eigen8internal20generic_product_implINS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS3_IiLin1ELi47ELi0ELin1ELi47EEENS_10DenseShapeES8_Li8EE6evalToINS3_IiLi6ELi47ELi0ELi6ELi47EEEEEvRT_RKS6_RKS7_(%"class.Eigen::Matrix.94"* nonnull dereferenceable(1128) %25, %"class.Eigen::Transpose.296"* nonnull dereferenceable(8) %6678, %"class.Eigen::Matrix.32"* nonnull dereferenceable(16) %107) #11
  %6679 = bitcast %"class.Eigen::internal::gemm_blocking_space.1501"* %26 to i8*
  call void @llvm.lifetime.start(i64 2368, i8* nonnull %6679) #11
  %6680 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1501", %"class.Eigen::internal::gemm_blocking_space.1501"* %26, i64 0, i32 0, i32 2
  %6681 = bitcast i64* %6680 to <2 x i64>*
  store <2 x i64> <i64 6, i64 6>, <2 x i64>* %6681, align 16, !tbaa !32
  %6682 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1501", %"class.Eigen::internal::gemm_blocking_space.1501"* %26, i64 0, i32 0, i32 4
  store i64 47, i64* %6682, align 32, !tbaa !193
  %6683 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1501", %"class.Eigen::internal::gemm_blocking_space.1501"* %26, i64 0, i32 2, i64 0
  %6684 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1501", %"class.Eigen::internal::gemm_blocking_space.1501"* %26, i64 0, i32 0, i32 0
  store i32* %6683, i32** %6684, align 32, !tbaa !195
  %6685 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1501", %"class.Eigen::internal::gemm_blocking_space.1501"* %26, i64 0, i32 4, i64 0
  %6686 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1501", %"class.Eigen::internal::gemm_blocking_space.1501"* %26, i64 0, i32 0, i32 1
  store i32* %6685, i32** %6686, align 8, !tbaa !196
  %6687 = getelementptr inbounds %"class.Eigen::Matrix.94", %"class.Eigen::Matrix.94"* %25, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %6688 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %27, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %6689 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1501", %"class.Eigen::internal::gemm_blocking_space.1501"* %26, i64 0, i32 0
  call void @_ZN5Eigen8internal29general_matrix_matrix_productIliLi0ELb0EiLi0ELb0ELi0EE3runElllPKilS4_lPiliRNS0_15level3_blockingIiiEEPNS0_16GemmParallelInfoIlEE(i64 6, i64 6, i64 47, i32* nonnull %6687, i64 6, i32* nonnull %4107, i64 47, i32* nonnull %6688, i64 6, i32 1, %"class.Eigen::internal::level3_blocking"* nonnull dereferenceable(40) %6689, %"struct.Eigen::internal::GemmParallelInfo"* null) #11
  call void @llvm.lifetime.end(i64 2368, i8* nonnull %6679) #11
  call void @llvm.lifetime.end(i64 1128, i8* nonnull %6677) #11
  %6690 = bitcast %"class.Eigen::Matrix.108"* %131 to <4 x i32>*
  %6691 = bitcast %"class.Eigen::Matrix.108"* %27 to <4 x i32>*
  %6692 = load <4 x i32>, <4 x i32>* %6691, align 16, !tbaa !11
  %6693 = load <4 x i32>, <4 x i32>* %6690, align 16, !tbaa !11
  %6694 = add <4 x i32> %6693, %6692
  store <4 x i32> %6694, <4 x i32>* %6690, align 16, !tbaa !11
  %6695 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %131, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %6696 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %27, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %6697 = bitcast i32* %6696 to <4 x i32>*
  %6698 = load <4 x i32>, <4 x i32>* %6697, align 16, !tbaa !11
  %6699 = bitcast i32* %6695 to <4 x i32>*
  %6700 = load <4 x i32>, <4 x i32>* %6699, align 16, !tbaa !11
  %6701 = add <4 x i32> %6700, %6698
  store <4 x i32> %6701, <4 x i32>* %6699, align 16, !tbaa !11
  %6702 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %131, i64 0, i32 0, i32 0, i32 0, i32 0, i64 8
  %6703 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %27, i64 0, i32 0, i32 0, i32 0, i32 0, i64 8
  %6704 = bitcast i32* %6703 to <4 x i32>*
  %6705 = load <4 x i32>, <4 x i32>* %6704, align 16, !tbaa !11
  %6706 = bitcast i32* %6702 to <4 x i32>*
  %6707 = load <4 x i32>, <4 x i32>* %6706, align 16, !tbaa !11
  %6708 = add <4 x i32> %6707, %6705
  store <4 x i32> %6708, <4 x i32>* %6706, align 16, !tbaa !11
  %6709 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %131, i64 0, i32 0, i32 0, i32 0, i32 0, i64 12
  %6710 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %27, i64 0, i32 0, i32 0, i32 0, i32 0, i64 12
  %6711 = bitcast i32* %6710 to <4 x i32>*
  %6712 = load <4 x i32>, <4 x i32>* %6711, align 16, !tbaa !11
  %6713 = bitcast i32* %6709 to <4 x i32>*
  %6714 = load <4 x i32>, <4 x i32>* %6713, align 16, !tbaa !11
  %6715 = add <4 x i32> %6714, %6712
  store <4 x i32> %6715, <4 x i32>* %6713, align 16, !tbaa !11
  %6716 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %131, i64 0, i32 0, i32 0, i32 0, i32 0, i64 16
  %6717 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %27, i64 0, i32 0, i32 0, i32 0, i32 0, i64 16
  %6718 = bitcast i32* %6717 to <4 x i32>*
  %6719 = load <4 x i32>, <4 x i32>* %6718, align 16, !tbaa !11
  %6720 = bitcast i32* %6716 to <4 x i32>*
  %6721 = load <4 x i32>, <4 x i32>* %6720, align 16, !tbaa !11
  %6722 = add <4 x i32> %6721, %6719
  store <4 x i32> %6722, <4 x i32>* %6720, align 16, !tbaa !11
  %6723 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %131, i64 0, i32 0, i32 0, i32 0, i32 0, i64 20
  %6724 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %27, i64 0, i32 0, i32 0, i32 0, i32 0, i64 20
  %6725 = bitcast i32* %6724 to <4 x i32>*
  %6726 = load <4 x i32>, <4 x i32>* %6725, align 16, !tbaa !11
  %6727 = bitcast i32* %6723 to <4 x i32>*
  %6728 = load <4 x i32>, <4 x i32>* %6727, align 16, !tbaa !11
  %6729 = add <4 x i32> %6728, %6726
  store <4 x i32> %6729, <4 x i32>* %6727, align 16, !tbaa !11
  %6730 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %131, i64 0, i32 0, i32 0, i32 0, i32 0, i64 24
  %6731 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %27, i64 0, i32 0, i32 0, i32 0, i32 0, i64 24
  %6732 = bitcast i32* %6731 to <4 x i32>*
  %6733 = load <4 x i32>, <4 x i32>* %6732, align 16, !tbaa !11
  %6734 = bitcast i32* %6730 to <4 x i32>*
  %6735 = load <4 x i32>, <4 x i32>* %6734, align 16, !tbaa !11
  %6736 = add <4 x i32> %6735, %6733
  store <4 x i32> %6736, <4 x i32>* %6734, align 16, !tbaa !11
  %6737 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %131, i64 0, i32 0, i32 0, i32 0, i32 0, i64 28
  %6738 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %27, i64 0, i32 0, i32 0, i32 0, i32 0, i64 28
  %6739 = bitcast i32* %6738 to <4 x i32>*
  %6740 = load <4 x i32>, <4 x i32>* %6739, align 16, !tbaa !11
  %6741 = bitcast i32* %6737 to <4 x i32>*
  %6742 = load <4 x i32>, <4 x i32>* %6741, align 16, !tbaa !11
  %6743 = add <4 x i32> %6742, %6740
  store <4 x i32> %6743, <4 x i32>* %6741, align 16, !tbaa !11
  %6744 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %131, i64 0, i32 0, i32 0, i32 0, i32 0, i64 32
  %6745 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %27, i64 0, i32 0, i32 0, i32 0, i32 0, i64 32
  %6746 = bitcast i32* %6745 to <4 x i32>*
  %6747 = load <4 x i32>, <4 x i32>* %6746, align 16, !tbaa !11
  %6748 = bitcast i32* %6744 to <4 x i32>*
  %6749 = load <4 x i32>, <4 x i32>* %6748, align 16, !tbaa !11
  %6750 = add <4 x i32> %6749, %6747
  store <4 x i32> %6750, <4 x i32>* %6748, align 16, !tbaa !11
  call void @llvm.lifetime.end(i64 144, i8* nonnull %6676) #11
  call void @llvm.lifetime.end(i64 24, i8* nonnull %6667) #11
  %6751 = load <4 x i32>, <4 x i32>* %3762, align 16, !tbaa !11
  %6752 = mul <4 x i32> %6751, %6751
  %6753 = load <4 x i32>, <4 x i32>* %3766, align 16, !tbaa !11
  %6754 = mul <4 x i32> %6753, %6753
  %6755 = load <4 x i32>, <4 x i32>* %3770, align 16, !tbaa !11
  %6756 = mul <4 x i32> %6755, %6755
  %6757 = load <4 x i32>, <4 x i32>* %3774, align 16, !tbaa !11
  %6758 = mul <4 x i32> %6757, %6757
  %6759 = load <4 x i32>, <4 x i32>* %3778, align 16, !tbaa !11
  %6760 = mul <4 x i32> %6759, %6759
  %6761 = load <4 x i32>, <4 x i32>* %3782, align 16, !tbaa !11
  %6762 = mul <4 x i32> %6761, %6761
  %6763 = load <4 x i32>, <4 x i32>* %3786, align 16, !tbaa !11
  %6764 = mul <4 x i32> %6763, %6763
  %6765 = load <4 x i32>, <4 x i32>* %3790, align 16, !tbaa !11
  %6766 = mul <4 x i32> %6765, %6765
  %6767 = load <4 x i32>, <4 x i32>* %3794, align 16, !tbaa !11
  %6768 = mul <4 x i32> %6767, %6767
  %6769 = load <4 x i32>, <4 x i32>* %3798, align 16, !tbaa !11
  %6770 = mul <4 x i32> %6769, %6769
  %6771 = load <4 x i32>, <4 x i32>* %3802, align 16, !tbaa !11
  %6772 = mul <4 x i32> %6771, %6771
  %6773 = add <4 x i32> %6754, %6752
  %6774 = add <4 x i32> %6773, %6756
  %6775 = add <4 x i32> %6774, %6758
  %6776 = add <4 x i32> %6775, %6760
  %6777 = add <4 x i32> %6776, %6762
  %6778 = add <4 x i32> %6777, %6764
  %6779 = add <4 x i32> %6778, %6766
  %6780 = add <4 x i32> %6779, %6768
  %6781 = add <4 x i32> %6780, %6770
  %6782 = add <4 x i32> %6781, %6772
  %6783 = call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %6782, <4 x i32> %6782) #11
  %6784 = call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %6783, <4 x i32> %6783) #11
  %6785 = extractelement <4 x i32> %6784, i32 0
  %6786 = load i32, i32* %3816, align 16, !tbaa !33
  %6787 = mul nsw i32 %6786, %6786
  %6788 = load i32, i32* %3818, align 4, !tbaa !33
  %6789 = mul nsw i32 %6788, %6788
  %6790 = load i32, i32* %3820, align 8, !tbaa !33
  %6791 = mul nsw i32 %6790, %6790
  %6792 = add i32 %6787, %6785
  %6793 = add i32 %6792, %6789
  %6794 = add i32 %6793, %6791
  %6795 = bitcast %"class.Eigen::Matrix.185"* %166 to <4 x i32>*
  %6796 = bitcast %"class.Eigen::Matrix.185"* %165 to <4 x i32>*
  %6797 = load <4 x i32>, <4 x i32>* %6796, align 16, !tbaa !11
  %6798 = add <4 x i32> %6797, %1711
  %6799 = insertelement <4 x i32> undef, i32 %6794, i32 0
  %6800 = shufflevector <4 x i32> %6799, <4 x i32> undef, <4 x i32> zeroinitializer
  %6801 = mul <4 x i32> %6800, %6798
  %6802 = load <4 x i32>, <4 x i32>* %6795, align 16, !tbaa !11
  %6803 = add <4 x i32> %6801, %6802
  store <4 x i32> %6803, <4 x i32>* %6795, align 16, !tbaa !11
  %6804 = load i32, i32* %1650, align 16, !tbaa !33
  %6805 = add nsw i32 %1713, %6804
  %6806 = mul nsw i32 %6805, %6794
  %6807 = load i32, i32* %1675, align 16, !tbaa !33
  %6808 = add nsw i32 %6806, %6807
  store i32 %6808, i32* %1675, align 16, !tbaa !33
  %6809 = load i32, i32* %1653, align 4, !tbaa !33
  %6810 = add nsw i32 %1715, %6809
  %6811 = mul nsw i32 %6810, %6794
  %6812 = load i32, i32* %1678, align 4, !tbaa !33
  %6813 = add nsw i32 %6811, %6812
  store i32 %6813, i32* %1678, align 4, !tbaa !33
  %6814 = load i64, i64* %584, align 8, !tbaa !40
  %6815 = load i64, i64* %803, align 8, !tbaa !43
  %6816 = icmp eq i64 %6814, %6815
  br i1 %6816, label %6818, label %6817, !prof !10

; <label>:6817:                                   ; preds = %6672
  call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS1_IdLin1ELi1ELi0ELin1ELi1EEELi0EEC2ERKS2_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 97, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2, i64 0, i64 0)) #13
  unreachable

; <label>:6818:                                   ; preds = %6672
  %6819 = bitcast %"class.Eigen::Matrix.77"* %24 to i8*
  call void @llvm.lifetime.start(i64 1128, i8* nonnull %6819) #11
  call void @_ZN5Eigen8internal20generic_product_implINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS2_IiLin1ELi6ELi0ELin1ELi6EEENS_10DenseShapeES5_Li8EE6evalToINS2_IiLi47ELi6ELi0ELi47ELi6EEEEEvRT_RKS3_RKS4_(%"class.Eigen::Matrix.77"* nonnull dereferenceable(1128) %24, %"class.Eigen::Matrix.48"* nonnull dereferenceable(16) %117, %"class.Eigen::Matrix.123"* nonnull dereferenceable(16) %141) #11
  br i1 %3079, label %6822, label %6820

; <label>:6820:                                   ; preds = %6818
  br label %6849

; <label>:6821:                                   ; preds = %8609, %8602, %6849
  br label %6822

; <label>:6822:                                   ; preds = %6821, %6818
  %6823 = phi i64 [ 0, %6818 ], [ %3075, %6821 ]
  %6824 = add nsw i64 %3078, -1
  %6825 = sub nsw i64 %6824, %6823
  %6826 = lshr i64 %6825, 2
  %6827 = add nuw nsw i64 %6826, 1
  %6828 = and i64 %6827, 7
  %6829 = icmp eq i64 %6828, 0
  br i1 %6829, label %6845, label %6830

; <label>:6830:                                   ; preds = %6822
  br label %6831

; <label>:6831:                                   ; preds = %6831, %6830
  %6832 = phi i64 [ %6841, %6831 ], [ %6823, %6830 ]
  %6833 = phi i64 [ %6842, %6831 ], [ %6828, %6830 ]
  %6834 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6832
  %6835 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6832
  %6836 = bitcast i32* %6835 to <4 x i32>*
  %6837 = load <4 x i32>, <4 x i32>* %6836, align 4, !tbaa !11
  %6838 = bitcast i32* %6834 to <4 x i32>*
  %6839 = load <4 x i32>, <4 x i32>* %6838, align 16, !tbaa !11
  %6840 = sub <4 x i32> %6839, %6837
  store <4 x i32> %6840, <4 x i32>* %6838, align 16, !tbaa !11
  %6841 = add nuw nsw i64 %6832, 4
  %6842 = add i64 %6833, -1
  %6843 = icmp eq i64 %6842, 0
  br i1 %6843, label %6844, label %6831, !llvm.loop !236

; <label>:6844:                                   ; preds = %6831
  br label %6845

; <label>:6845:                                   ; preds = %6822, %6844
  %6846 = phi i64 [ %6823, %6822 ], [ %6841, %6844 ]
  %6847 = icmp ult i64 %6825, 28
  br i1 %6847, label %6857, label %6848

; <label>:6848:                                   ; preds = %6845
  br label %6993

; <label>:6849:                                   ; preds = %6820
  %6850 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %6851 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %6852 = load i32, i32* %6851, align 4, !tbaa !33
  %6853 = load i32, i32* %6850, align 4, !tbaa !33
  %6854 = sub nsw i32 %6853, %6852
  store i32 %6854, i32* %6850, align 4, !tbaa !33
  %6855 = icmp eq i64 %3075, 1
  br i1 %6855, label %6821, label %8602

; <label>:6856:                                   ; preds = %6993
  br label %6857

; <label>:6857:                                   ; preds = %6845, %6856
  br i1 %3118, label %6858, label %7061

; <label>:6858:                                   ; preds = %6857
  %6859 = sub nsw i64 282, %3078
  %6860 = icmp ult i64 %6859, 32
  br i1 %6860, label %6982, label %6861

; <label>:6861:                                   ; preds = %6858
  %6862 = and i64 %6859, -32
  %6863 = icmp eq i64 %6862, 0
  %6864 = add nsw i64 %3078, %6862
  br i1 %6863, label %6982, label %6865

; <label>:6865:                                   ; preds = %6861
  %6866 = add nsw i64 %6862, -32
  %6867 = lshr exact i64 %6866, 5
  %6868 = and i64 %6867, 1
  %6869 = icmp eq i64 %6868, 0
  br i1 %6869, label %6870, label %6904

; <label>:6870:                                   ; preds = %6865
  br label %6871

; <label>:6871:                                   ; preds = %6870
  %6872 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3078
  %6873 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3078
  %6874 = bitcast i32* %6873 to <8 x i32>*
  %6875 = load <8 x i32>, <8 x i32>* %6874, align 4, !tbaa !33
  %6876 = getelementptr i32, i32* %6873, i64 8
  %6877 = bitcast i32* %6876 to <8 x i32>*
  %6878 = load <8 x i32>, <8 x i32>* %6877, align 4, !tbaa !33
  %6879 = getelementptr i32, i32* %6873, i64 16
  %6880 = bitcast i32* %6879 to <8 x i32>*
  %6881 = load <8 x i32>, <8 x i32>* %6880, align 4, !tbaa !33
  %6882 = getelementptr i32, i32* %6873, i64 24
  %6883 = bitcast i32* %6882 to <8 x i32>*
  %6884 = load <8 x i32>, <8 x i32>* %6883, align 4, !tbaa !33
  %6885 = bitcast i32* %6872 to <8 x i32>*
  %6886 = load <8 x i32>, <8 x i32>* %6885, align 4, !tbaa !33
  %6887 = getelementptr i32, i32* %6872, i64 8
  %6888 = bitcast i32* %6887 to <8 x i32>*
  %6889 = load <8 x i32>, <8 x i32>* %6888, align 4, !tbaa !33
  %6890 = getelementptr i32, i32* %6872, i64 16
  %6891 = bitcast i32* %6890 to <8 x i32>*
  %6892 = load <8 x i32>, <8 x i32>* %6891, align 4, !tbaa !33
  %6893 = getelementptr i32, i32* %6872, i64 24
  %6894 = bitcast i32* %6893 to <8 x i32>*
  %6895 = load <8 x i32>, <8 x i32>* %6894, align 4, !tbaa !33
  %6896 = sub nsw <8 x i32> %6886, %6875
  %6897 = sub nsw <8 x i32> %6889, %6878
  %6898 = sub nsw <8 x i32> %6892, %6881
  %6899 = sub nsw <8 x i32> %6895, %6884
  %6900 = bitcast i32* %6872 to <8 x i32>*
  store <8 x i32> %6896, <8 x i32>* %6900, align 4, !tbaa !33
  %6901 = bitcast i32* %6887 to <8 x i32>*
  store <8 x i32> %6897, <8 x i32>* %6901, align 4, !tbaa !33
  %6902 = bitcast i32* %6890 to <8 x i32>*
  store <8 x i32> %6898, <8 x i32>* %6902, align 4, !tbaa !33
  %6903 = bitcast i32* %6893 to <8 x i32>*
  store <8 x i32> %6899, <8 x i32>* %6903, align 4, !tbaa !33
  br label %6904

; <label>:6904:                                   ; preds = %6871, %6865
  %6905 = phi i64 [ 0, %6865 ], [ 32, %6871 ]
  %6906 = icmp eq i64 %6867, 0
  br i1 %6906, label %6980, label %6907

; <label>:6907:                                   ; preds = %6904
  br label %6908

; <label>:6908:                                   ; preds = %6908, %6907
  %6909 = phi i64 [ %6905, %6907 ], [ %6977, %6908 ]
  %6910 = add i64 %3078, %6909
  %6911 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6910
  %6912 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6910
  %6913 = bitcast i32* %6912 to <8 x i32>*
  %6914 = load <8 x i32>, <8 x i32>* %6913, align 4, !tbaa !33
  %6915 = getelementptr i32, i32* %6912, i64 8
  %6916 = bitcast i32* %6915 to <8 x i32>*
  %6917 = load <8 x i32>, <8 x i32>* %6916, align 4, !tbaa !33
  %6918 = getelementptr i32, i32* %6912, i64 16
  %6919 = bitcast i32* %6918 to <8 x i32>*
  %6920 = load <8 x i32>, <8 x i32>* %6919, align 4, !tbaa !33
  %6921 = getelementptr i32, i32* %6912, i64 24
  %6922 = bitcast i32* %6921 to <8 x i32>*
  %6923 = load <8 x i32>, <8 x i32>* %6922, align 4, !tbaa !33
  %6924 = bitcast i32* %6911 to <8 x i32>*
  %6925 = load <8 x i32>, <8 x i32>* %6924, align 4, !tbaa !33
  %6926 = getelementptr i32, i32* %6911, i64 8
  %6927 = bitcast i32* %6926 to <8 x i32>*
  %6928 = load <8 x i32>, <8 x i32>* %6927, align 4, !tbaa !33
  %6929 = getelementptr i32, i32* %6911, i64 16
  %6930 = bitcast i32* %6929 to <8 x i32>*
  %6931 = load <8 x i32>, <8 x i32>* %6930, align 4, !tbaa !33
  %6932 = getelementptr i32, i32* %6911, i64 24
  %6933 = bitcast i32* %6932 to <8 x i32>*
  %6934 = load <8 x i32>, <8 x i32>* %6933, align 4, !tbaa !33
  %6935 = sub nsw <8 x i32> %6925, %6914
  %6936 = sub nsw <8 x i32> %6928, %6917
  %6937 = sub nsw <8 x i32> %6931, %6920
  %6938 = sub nsw <8 x i32> %6934, %6923
  %6939 = bitcast i32* %6911 to <8 x i32>*
  store <8 x i32> %6935, <8 x i32>* %6939, align 4, !tbaa !33
  %6940 = bitcast i32* %6926 to <8 x i32>*
  store <8 x i32> %6936, <8 x i32>* %6940, align 4, !tbaa !33
  %6941 = bitcast i32* %6929 to <8 x i32>*
  store <8 x i32> %6937, <8 x i32>* %6941, align 4, !tbaa !33
  %6942 = bitcast i32* %6932 to <8 x i32>*
  store <8 x i32> %6938, <8 x i32>* %6942, align 4, !tbaa !33
  %6943 = add i64 %6909, 32
  %6944 = add i64 %3078, %6943
  %6945 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6944
  %6946 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6944
  %6947 = bitcast i32* %6946 to <8 x i32>*
  %6948 = load <8 x i32>, <8 x i32>* %6947, align 4, !tbaa !33
  %6949 = getelementptr i32, i32* %6946, i64 8
  %6950 = bitcast i32* %6949 to <8 x i32>*
  %6951 = load <8 x i32>, <8 x i32>* %6950, align 4, !tbaa !33
  %6952 = getelementptr i32, i32* %6946, i64 16
  %6953 = bitcast i32* %6952 to <8 x i32>*
  %6954 = load <8 x i32>, <8 x i32>* %6953, align 4, !tbaa !33
  %6955 = getelementptr i32, i32* %6946, i64 24
  %6956 = bitcast i32* %6955 to <8 x i32>*
  %6957 = load <8 x i32>, <8 x i32>* %6956, align 4, !tbaa !33
  %6958 = bitcast i32* %6945 to <8 x i32>*
  %6959 = load <8 x i32>, <8 x i32>* %6958, align 4, !tbaa !33
  %6960 = getelementptr i32, i32* %6945, i64 8
  %6961 = bitcast i32* %6960 to <8 x i32>*
  %6962 = load <8 x i32>, <8 x i32>* %6961, align 4, !tbaa !33
  %6963 = getelementptr i32, i32* %6945, i64 16
  %6964 = bitcast i32* %6963 to <8 x i32>*
  %6965 = load <8 x i32>, <8 x i32>* %6964, align 4, !tbaa !33
  %6966 = getelementptr i32, i32* %6945, i64 24
  %6967 = bitcast i32* %6966 to <8 x i32>*
  %6968 = load <8 x i32>, <8 x i32>* %6967, align 4, !tbaa !33
  %6969 = sub nsw <8 x i32> %6959, %6948
  %6970 = sub nsw <8 x i32> %6962, %6951
  %6971 = sub nsw <8 x i32> %6965, %6954
  %6972 = sub nsw <8 x i32> %6968, %6957
  %6973 = bitcast i32* %6945 to <8 x i32>*
  store <8 x i32> %6969, <8 x i32>* %6973, align 4, !tbaa !33
  %6974 = bitcast i32* %6960 to <8 x i32>*
  store <8 x i32> %6970, <8 x i32>* %6974, align 4, !tbaa !33
  %6975 = bitcast i32* %6963 to <8 x i32>*
  store <8 x i32> %6971, <8 x i32>* %6975, align 4, !tbaa !33
  %6976 = bitcast i32* %6966 to <8 x i32>*
  store <8 x i32> %6972, <8 x i32>* %6976, align 4, !tbaa !33
  %6977 = add i64 %6909, 64
  %6978 = icmp eq i64 %6977, %6862
  br i1 %6978, label %6979, label %6908, !llvm.loop !237

; <label>:6979:                                   ; preds = %6908
  br label %6980

; <label>:6980:                                   ; preds = %6904, %6979
  %6981 = icmp eq i64 %6859, %6862
  br i1 %6981, label %7061, label %6982

; <label>:6982:                                   ; preds = %6980, %6861, %6858
  %6983 = phi i64 [ %3078, %6861 ], [ %3078, %6858 ], [ %6864, %6980 ]
  br label %6984

; <label>:6984:                                   ; preds = %6982, %6984
  %6985 = phi i64 [ %6991, %6984 ], [ %6983, %6982 ]
  %6986 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6985
  %6987 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6985
  %6988 = load i32, i32* %6987, align 4, !tbaa !33
  %6989 = load i32, i32* %6986, align 4, !tbaa !33
  %6990 = sub nsw i32 %6989, %6988
  store i32 %6990, i32* %6986, align 4, !tbaa !33
  %6991 = add nsw i64 %6985, 1
  %6992 = icmp eq i64 %6991, 282
  br i1 %6992, label %7060, label %6984, !llvm.loop !238

; <label>:6993:                                   ; preds = %6993, %6848
  %6994 = phi i64 [ %6846, %6848 ], [ %7058, %6993 ]
  %6995 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6994
  %6996 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %6994
  %6997 = bitcast i32* %6996 to <4 x i32>*
  %6998 = load <4 x i32>, <4 x i32>* %6997, align 4, !tbaa !11
  %6999 = bitcast i32* %6995 to <4 x i32>*
  %7000 = load <4 x i32>, <4 x i32>* %6999, align 16, !tbaa !11
  %7001 = sub <4 x i32> %7000, %6998
  store <4 x i32> %7001, <4 x i32>* %6999, align 16, !tbaa !11
  %7002 = add nuw nsw i64 %6994, 4
  %7003 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7002
  %7004 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7002
  %7005 = bitcast i32* %7004 to <4 x i32>*
  %7006 = load <4 x i32>, <4 x i32>* %7005, align 4, !tbaa !11
  %7007 = bitcast i32* %7003 to <4 x i32>*
  %7008 = load <4 x i32>, <4 x i32>* %7007, align 16, !tbaa !11
  %7009 = sub <4 x i32> %7008, %7006
  store <4 x i32> %7009, <4 x i32>* %7007, align 16, !tbaa !11
  %7010 = add nsw i64 %6994, 8
  %7011 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7010
  %7012 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7010
  %7013 = bitcast i32* %7012 to <4 x i32>*
  %7014 = load <4 x i32>, <4 x i32>* %7013, align 4, !tbaa !11
  %7015 = bitcast i32* %7011 to <4 x i32>*
  %7016 = load <4 x i32>, <4 x i32>* %7015, align 16, !tbaa !11
  %7017 = sub <4 x i32> %7016, %7014
  store <4 x i32> %7017, <4 x i32>* %7015, align 16, !tbaa !11
  %7018 = add nsw i64 %6994, 12
  %7019 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7018
  %7020 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7018
  %7021 = bitcast i32* %7020 to <4 x i32>*
  %7022 = load <4 x i32>, <4 x i32>* %7021, align 4, !tbaa !11
  %7023 = bitcast i32* %7019 to <4 x i32>*
  %7024 = load <4 x i32>, <4 x i32>* %7023, align 16, !tbaa !11
  %7025 = sub <4 x i32> %7024, %7022
  store <4 x i32> %7025, <4 x i32>* %7023, align 16, !tbaa !11
  %7026 = add nsw i64 %6994, 16
  %7027 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7026
  %7028 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7026
  %7029 = bitcast i32* %7028 to <4 x i32>*
  %7030 = load <4 x i32>, <4 x i32>* %7029, align 4, !tbaa !11
  %7031 = bitcast i32* %7027 to <4 x i32>*
  %7032 = load <4 x i32>, <4 x i32>* %7031, align 16, !tbaa !11
  %7033 = sub <4 x i32> %7032, %7030
  store <4 x i32> %7033, <4 x i32>* %7031, align 16, !tbaa !11
  %7034 = add nsw i64 %6994, 20
  %7035 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7034
  %7036 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7034
  %7037 = bitcast i32* %7036 to <4 x i32>*
  %7038 = load <4 x i32>, <4 x i32>* %7037, align 4, !tbaa !11
  %7039 = bitcast i32* %7035 to <4 x i32>*
  %7040 = load <4 x i32>, <4 x i32>* %7039, align 16, !tbaa !11
  %7041 = sub <4 x i32> %7040, %7038
  store <4 x i32> %7041, <4 x i32>* %7039, align 16, !tbaa !11
  %7042 = add nsw i64 %6994, 24
  %7043 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7042
  %7044 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7042
  %7045 = bitcast i32* %7044 to <4 x i32>*
  %7046 = load <4 x i32>, <4 x i32>* %7045, align 4, !tbaa !11
  %7047 = bitcast i32* %7043 to <4 x i32>*
  %7048 = load <4 x i32>, <4 x i32>* %7047, align 16, !tbaa !11
  %7049 = sub <4 x i32> %7048, %7046
  store <4 x i32> %7049, <4 x i32>* %7047, align 16, !tbaa !11
  %7050 = add nsw i64 %6994, 28
  %7051 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7050
  %7052 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7050
  %7053 = bitcast i32* %7052 to <4 x i32>*
  %7054 = load <4 x i32>, <4 x i32>* %7053, align 4, !tbaa !11
  %7055 = bitcast i32* %7051 to <4 x i32>*
  %7056 = load <4 x i32>, <4 x i32>* %7055, align 16, !tbaa !11
  %7057 = sub <4 x i32> %7056, %7054
  store <4 x i32> %7057, <4 x i32>* %7055, align 16, !tbaa !11
  %7058 = add nsw i64 %6994, 32
  %7059 = icmp slt i64 %7058, %3078
  br i1 %7059, label %6993, label %6856

; <label>:7060:                                   ; preds = %6984
  br label %7061

; <label>:7061:                                   ; preds = %7060, %6980, %6857
  call void @llvm.lifetime.end(i64 1128, i8* nonnull %6819) #11
  %7062 = bitcast %"class.Eigen::Product.324"* %201 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %7062) #11
  %7063 = getelementptr inbounds %"class.Eigen::Product.324", %"class.Eigen::Product.324"* %201, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.32"* %112, %"class.Eigen::Matrix.32"** %7063, align 8
  %7064 = getelementptr inbounds %"class.Eigen::Product.324", %"class.Eigen::Product.324"* %201, i64 0, i32 0, i32 1
  store %"class.Eigen::Matrix.77"* %123, %"class.Eigen::Matrix.77"** %7064, align 8
  %7065 = getelementptr inbounds %"class.Eigen::Product.324", %"class.Eigen::Product.324"* %201, i64 0, i32 1
  %7066 = bitcast %"class.Eigen::Transpose.331"* %7065 to i64*
  store i64 %5277, i64* %7066, align 8, !alias.scope !239
  %7067 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %23, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %7067) #11
  call void @_ZN5Eigen8internal15call_assignmentINS_6MatrixIiLin1ELin1ELi0ELin1ELin1EEENS_7ProductINS4_INS2_IiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsr25evaluator_assume_aliasingISG_EE5valueEPvE4typeE(%"class.Eigen::Matrix.19"* nonnull dereferenceable(24) %103, %"class.Eigen::Product.324"* nonnull dereferenceable(24) %201, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %23, i8* null) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %7067) #11
  call void @llvm.lifetime.end(i64 24, i8* nonnull %7062) #11
  %7068 = load i64, i64* %477, align 8, !tbaa !40
  %7069 = load i64, i64* %803, align 8, !tbaa !43
  %7070 = icmp eq i64 %7068, %7069
  br i1 %7070, label %7072, label %7071, !prof !10

; <label>:7071:                                   ; preds = %7061
  call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS1_IdLin1ELi1ELi0ELin1ELi1EEELi0EEC2ERKS2_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 97, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2, i64 0, i64 0)) #13
  unreachable

; <label>:7072:                                   ; preds = %7061
  %7073 = bitcast %"class.Eigen::Matrix.77"* %22 to i8*
  call void @llvm.lifetime.start(i64 1128, i8* nonnull %7073) #11
  call void @_ZN5Eigen8internal20generic_product_implINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS2_IiLin1ELi6ELi0ELin1ELi6EEENS_10DenseShapeES5_Li8EE6evalToINS2_IiLi47ELi6ELi0ELi47ELi6EEEEEvRT_RKS3_RKS4_(%"class.Eigen::Matrix.77"* nonnull dereferenceable(1128) %22, %"class.Eigen::Matrix.48"* nonnull dereferenceable(16) %113, %"class.Eigen::Matrix.123"* nonnull dereferenceable(16) %141) #11
  br i1 %3347, label %7076, label %7074

; <label>:7074:                                   ; preds = %7072
  br label %7103

; <label>:7075:                                   ; preds = %8596, %8589, %7103
  br label %7076

; <label>:7076:                                   ; preds = %7075, %7072
  %7077 = phi i64 [ 0, %7072 ], [ %3343, %7075 ]
  %7078 = add nsw i64 %3346, -1
  %7079 = sub nsw i64 %7078, %7077
  %7080 = lshr i64 %7079, 2
  %7081 = add nuw nsw i64 %7080, 1
  %7082 = and i64 %7081, 7
  %7083 = icmp eq i64 %7082, 0
  br i1 %7083, label %7099, label %7084

; <label>:7084:                                   ; preds = %7076
  br label %7085

; <label>:7085:                                   ; preds = %7085, %7084
  %7086 = phi i64 [ %7095, %7085 ], [ %7077, %7084 ]
  %7087 = phi i64 [ %7096, %7085 ], [ %7082, %7084 ]
  %7088 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7086
  %7089 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7086
  %7090 = bitcast i32* %7089 to <4 x i32>*
  %7091 = load <4 x i32>, <4 x i32>* %7090, align 4, !tbaa !11
  %7092 = bitcast i32* %7088 to <4 x i32>*
  %7093 = load <4 x i32>, <4 x i32>* %7092, align 16, !tbaa !11
  %7094 = add <4 x i32> %7093, %7091
  store <4 x i32> %7094, <4 x i32>* %7092, align 16, !tbaa !11
  %7095 = add nuw nsw i64 %7086, 4
  %7096 = add i64 %7087, -1
  %7097 = icmp eq i64 %7096, 0
  br i1 %7097, label %7098, label %7085, !llvm.loop !242

; <label>:7098:                                   ; preds = %7085
  br label %7099

; <label>:7099:                                   ; preds = %7076, %7098
  %7100 = phi i64 [ %7077, %7076 ], [ %7095, %7098 ]
  %7101 = icmp ult i64 %7079, 28
  br i1 %7101, label %7111, label %7102

; <label>:7102:                                   ; preds = %7099
  br label %7247

; <label>:7103:                                   ; preds = %7074
  %7104 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %7105 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %7106 = load i32, i32* %7105, align 4, !tbaa !33
  %7107 = load i32, i32* %7104, align 4, !tbaa !33
  %7108 = add nsw i32 %7107, %7106
  store i32 %7108, i32* %7104, align 4, !tbaa !33
  %7109 = icmp eq i64 %3343, 1
  br i1 %7109, label %7075, label %8589

; <label>:7110:                                   ; preds = %7247
  br label %7111

; <label>:7111:                                   ; preds = %7099, %7110
  br i1 %3386, label %7112, label %7315

; <label>:7112:                                   ; preds = %7111
  %7113 = sub nsw i64 282, %3346
  %7114 = icmp ult i64 %7113, 32
  br i1 %7114, label %7236, label %7115

; <label>:7115:                                   ; preds = %7112
  %7116 = and i64 %7113, -32
  %7117 = icmp eq i64 %7116, 0
  %7118 = add nsw i64 %3346, %7116
  br i1 %7117, label %7236, label %7119

; <label>:7119:                                   ; preds = %7115
  %7120 = add nsw i64 %7116, -32
  %7121 = lshr exact i64 %7120, 5
  %7122 = and i64 %7121, 1
  %7123 = icmp eq i64 %7122, 0
  br i1 %7123, label %7124, label %7158

; <label>:7124:                                   ; preds = %7119
  br label %7125

; <label>:7125:                                   ; preds = %7124
  %7126 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3346
  %7127 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %3346
  %7128 = bitcast i32* %7127 to <8 x i32>*
  %7129 = load <8 x i32>, <8 x i32>* %7128, align 4, !tbaa !33
  %7130 = getelementptr i32, i32* %7127, i64 8
  %7131 = bitcast i32* %7130 to <8 x i32>*
  %7132 = load <8 x i32>, <8 x i32>* %7131, align 4, !tbaa !33
  %7133 = getelementptr i32, i32* %7127, i64 16
  %7134 = bitcast i32* %7133 to <8 x i32>*
  %7135 = load <8 x i32>, <8 x i32>* %7134, align 4, !tbaa !33
  %7136 = getelementptr i32, i32* %7127, i64 24
  %7137 = bitcast i32* %7136 to <8 x i32>*
  %7138 = load <8 x i32>, <8 x i32>* %7137, align 4, !tbaa !33
  %7139 = bitcast i32* %7126 to <8 x i32>*
  %7140 = load <8 x i32>, <8 x i32>* %7139, align 4, !tbaa !33
  %7141 = getelementptr i32, i32* %7126, i64 8
  %7142 = bitcast i32* %7141 to <8 x i32>*
  %7143 = load <8 x i32>, <8 x i32>* %7142, align 4, !tbaa !33
  %7144 = getelementptr i32, i32* %7126, i64 16
  %7145 = bitcast i32* %7144 to <8 x i32>*
  %7146 = load <8 x i32>, <8 x i32>* %7145, align 4, !tbaa !33
  %7147 = getelementptr i32, i32* %7126, i64 24
  %7148 = bitcast i32* %7147 to <8 x i32>*
  %7149 = load <8 x i32>, <8 x i32>* %7148, align 4, !tbaa !33
  %7150 = add nsw <8 x i32> %7140, %7129
  %7151 = add nsw <8 x i32> %7143, %7132
  %7152 = add nsw <8 x i32> %7146, %7135
  %7153 = add nsw <8 x i32> %7149, %7138
  %7154 = bitcast i32* %7126 to <8 x i32>*
  store <8 x i32> %7150, <8 x i32>* %7154, align 4, !tbaa !33
  %7155 = bitcast i32* %7141 to <8 x i32>*
  store <8 x i32> %7151, <8 x i32>* %7155, align 4, !tbaa !33
  %7156 = bitcast i32* %7144 to <8 x i32>*
  store <8 x i32> %7152, <8 x i32>* %7156, align 4, !tbaa !33
  %7157 = bitcast i32* %7147 to <8 x i32>*
  store <8 x i32> %7153, <8 x i32>* %7157, align 4, !tbaa !33
  br label %7158

; <label>:7158:                                   ; preds = %7125, %7119
  %7159 = phi i64 [ 0, %7119 ], [ 32, %7125 ]
  %7160 = icmp eq i64 %7121, 0
  br i1 %7160, label %7234, label %7161

; <label>:7161:                                   ; preds = %7158
  br label %7162

; <label>:7162:                                   ; preds = %7162, %7161
  %7163 = phi i64 [ %7159, %7161 ], [ %7231, %7162 ]
  %7164 = add i64 %3346, %7163
  %7165 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7164
  %7166 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7164
  %7167 = bitcast i32* %7166 to <8 x i32>*
  %7168 = load <8 x i32>, <8 x i32>* %7167, align 4, !tbaa !33
  %7169 = getelementptr i32, i32* %7166, i64 8
  %7170 = bitcast i32* %7169 to <8 x i32>*
  %7171 = load <8 x i32>, <8 x i32>* %7170, align 4, !tbaa !33
  %7172 = getelementptr i32, i32* %7166, i64 16
  %7173 = bitcast i32* %7172 to <8 x i32>*
  %7174 = load <8 x i32>, <8 x i32>* %7173, align 4, !tbaa !33
  %7175 = getelementptr i32, i32* %7166, i64 24
  %7176 = bitcast i32* %7175 to <8 x i32>*
  %7177 = load <8 x i32>, <8 x i32>* %7176, align 4, !tbaa !33
  %7178 = bitcast i32* %7165 to <8 x i32>*
  %7179 = load <8 x i32>, <8 x i32>* %7178, align 4, !tbaa !33
  %7180 = getelementptr i32, i32* %7165, i64 8
  %7181 = bitcast i32* %7180 to <8 x i32>*
  %7182 = load <8 x i32>, <8 x i32>* %7181, align 4, !tbaa !33
  %7183 = getelementptr i32, i32* %7165, i64 16
  %7184 = bitcast i32* %7183 to <8 x i32>*
  %7185 = load <8 x i32>, <8 x i32>* %7184, align 4, !tbaa !33
  %7186 = getelementptr i32, i32* %7165, i64 24
  %7187 = bitcast i32* %7186 to <8 x i32>*
  %7188 = load <8 x i32>, <8 x i32>* %7187, align 4, !tbaa !33
  %7189 = add nsw <8 x i32> %7179, %7168
  %7190 = add nsw <8 x i32> %7182, %7171
  %7191 = add nsw <8 x i32> %7185, %7174
  %7192 = add nsw <8 x i32> %7188, %7177
  %7193 = bitcast i32* %7165 to <8 x i32>*
  store <8 x i32> %7189, <8 x i32>* %7193, align 4, !tbaa !33
  %7194 = bitcast i32* %7180 to <8 x i32>*
  store <8 x i32> %7190, <8 x i32>* %7194, align 4, !tbaa !33
  %7195 = bitcast i32* %7183 to <8 x i32>*
  store <8 x i32> %7191, <8 x i32>* %7195, align 4, !tbaa !33
  %7196 = bitcast i32* %7186 to <8 x i32>*
  store <8 x i32> %7192, <8 x i32>* %7196, align 4, !tbaa !33
  %7197 = add i64 %7163, 32
  %7198 = add i64 %3346, %7197
  %7199 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7198
  %7200 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7198
  %7201 = bitcast i32* %7200 to <8 x i32>*
  %7202 = load <8 x i32>, <8 x i32>* %7201, align 4, !tbaa !33
  %7203 = getelementptr i32, i32* %7200, i64 8
  %7204 = bitcast i32* %7203 to <8 x i32>*
  %7205 = load <8 x i32>, <8 x i32>* %7204, align 4, !tbaa !33
  %7206 = getelementptr i32, i32* %7200, i64 16
  %7207 = bitcast i32* %7206 to <8 x i32>*
  %7208 = load <8 x i32>, <8 x i32>* %7207, align 4, !tbaa !33
  %7209 = getelementptr i32, i32* %7200, i64 24
  %7210 = bitcast i32* %7209 to <8 x i32>*
  %7211 = load <8 x i32>, <8 x i32>* %7210, align 4, !tbaa !33
  %7212 = bitcast i32* %7199 to <8 x i32>*
  %7213 = load <8 x i32>, <8 x i32>* %7212, align 4, !tbaa !33
  %7214 = getelementptr i32, i32* %7199, i64 8
  %7215 = bitcast i32* %7214 to <8 x i32>*
  %7216 = load <8 x i32>, <8 x i32>* %7215, align 4, !tbaa !33
  %7217 = getelementptr i32, i32* %7199, i64 16
  %7218 = bitcast i32* %7217 to <8 x i32>*
  %7219 = load <8 x i32>, <8 x i32>* %7218, align 4, !tbaa !33
  %7220 = getelementptr i32, i32* %7199, i64 24
  %7221 = bitcast i32* %7220 to <8 x i32>*
  %7222 = load <8 x i32>, <8 x i32>* %7221, align 4, !tbaa !33
  %7223 = add nsw <8 x i32> %7213, %7202
  %7224 = add nsw <8 x i32> %7216, %7205
  %7225 = add nsw <8 x i32> %7219, %7208
  %7226 = add nsw <8 x i32> %7222, %7211
  %7227 = bitcast i32* %7199 to <8 x i32>*
  store <8 x i32> %7223, <8 x i32>* %7227, align 4, !tbaa !33
  %7228 = bitcast i32* %7214 to <8 x i32>*
  store <8 x i32> %7224, <8 x i32>* %7228, align 4, !tbaa !33
  %7229 = bitcast i32* %7217 to <8 x i32>*
  store <8 x i32> %7225, <8 x i32>* %7229, align 4, !tbaa !33
  %7230 = bitcast i32* %7220 to <8 x i32>*
  store <8 x i32> %7226, <8 x i32>* %7230, align 4, !tbaa !33
  %7231 = add i64 %7163, 64
  %7232 = icmp eq i64 %7231, %7116
  br i1 %7232, label %7233, label %7162, !llvm.loop !243

; <label>:7233:                                   ; preds = %7162
  br label %7234

; <label>:7234:                                   ; preds = %7158, %7233
  %7235 = icmp eq i64 %7113, %7116
  br i1 %7235, label %7315, label %7236

; <label>:7236:                                   ; preds = %7234, %7115, %7112
  %7237 = phi i64 [ %3346, %7115 ], [ %3346, %7112 ], [ %7118, %7234 ]
  br label %7238

; <label>:7238:                                   ; preds = %7236, %7238
  %7239 = phi i64 [ %7245, %7238 ], [ %7237, %7236 ]
  %7240 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7239
  %7241 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7239
  %7242 = load i32, i32* %7241, align 4, !tbaa !33
  %7243 = load i32, i32* %7240, align 4, !tbaa !33
  %7244 = add nsw i32 %7243, %7242
  store i32 %7244, i32* %7240, align 4, !tbaa !33
  %7245 = add nsw i64 %7239, 1
  %7246 = icmp eq i64 %7245, 282
  br i1 %7246, label %7314, label %7238, !llvm.loop !244

; <label>:7247:                                   ; preds = %7247, %7102
  %7248 = phi i64 [ %7100, %7102 ], [ %7312, %7247 ]
  %7249 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7248
  %7250 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7248
  %7251 = bitcast i32* %7250 to <4 x i32>*
  %7252 = load <4 x i32>, <4 x i32>* %7251, align 4, !tbaa !11
  %7253 = bitcast i32* %7249 to <4 x i32>*
  %7254 = load <4 x i32>, <4 x i32>* %7253, align 16, !tbaa !11
  %7255 = add <4 x i32> %7254, %7252
  store <4 x i32> %7255, <4 x i32>* %7253, align 16, !tbaa !11
  %7256 = add nuw nsw i64 %7248, 4
  %7257 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7256
  %7258 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7256
  %7259 = bitcast i32* %7258 to <4 x i32>*
  %7260 = load <4 x i32>, <4 x i32>* %7259, align 4, !tbaa !11
  %7261 = bitcast i32* %7257 to <4 x i32>*
  %7262 = load <4 x i32>, <4 x i32>* %7261, align 16, !tbaa !11
  %7263 = add <4 x i32> %7262, %7260
  store <4 x i32> %7263, <4 x i32>* %7261, align 16, !tbaa !11
  %7264 = add nsw i64 %7248, 8
  %7265 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7264
  %7266 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7264
  %7267 = bitcast i32* %7266 to <4 x i32>*
  %7268 = load <4 x i32>, <4 x i32>* %7267, align 4, !tbaa !11
  %7269 = bitcast i32* %7265 to <4 x i32>*
  %7270 = load <4 x i32>, <4 x i32>* %7269, align 16, !tbaa !11
  %7271 = add <4 x i32> %7270, %7268
  store <4 x i32> %7271, <4 x i32>* %7269, align 16, !tbaa !11
  %7272 = add nsw i64 %7248, 12
  %7273 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7272
  %7274 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7272
  %7275 = bitcast i32* %7274 to <4 x i32>*
  %7276 = load <4 x i32>, <4 x i32>* %7275, align 4, !tbaa !11
  %7277 = bitcast i32* %7273 to <4 x i32>*
  %7278 = load <4 x i32>, <4 x i32>* %7277, align 16, !tbaa !11
  %7279 = add <4 x i32> %7278, %7276
  store <4 x i32> %7279, <4 x i32>* %7277, align 16, !tbaa !11
  %7280 = add nsw i64 %7248, 16
  %7281 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7280
  %7282 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7280
  %7283 = bitcast i32* %7282 to <4 x i32>*
  %7284 = load <4 x i32>, <4 x i32>* %7283, align 4, !tbaa !11
  %7285 = bitcast i32* %7281 to <4 x i32>*
  %7286 = load <4 x i32>, <4 x i32>* %7285, align 16, !tbaa !11
  %7287 = add <4 x i32> %7286, %7284
  store <4 x i32> %7287, <4 x i32>* %7285, align 16, !tbaa !11
  %7288 = add nsw i64 %7248, 20
  %7289 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7288
  %7290 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7288
  %7291 = bitcast i32* %7290 to <4 x i32>*
  %7292 = load <4 x i32>, <4 x i32>* %7291, align 4, !tbaa !11
  %7293 = bitcast i32* %7289 to <4 x i32>*
  %7294 = load <4 x i32>, <4 x i32>* %7293, align 16, !tbaa !11
  %7295 = add <4 x i32> %7294, %7292
  store <4 x i32> %7295, <4 x i32>* %7293, align 16, !tbaa !11
  %7296 = add nsw i64 %7248, 24
  %7297 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7296
  %7298 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7296
  %7299 = bitcast i32* %7298 to <4 x i32>*
  %7300 = load <4 x i32>, <4 x i32>* %7299, align 4, !tbaa !11
  %7301 = bitcast i32* %7297 to <4 x i32>*
  %7302 = load <4 x i32>, <4 x i32>* %7301, align 16, !tbaa !11
  %7303 = add <4 x i32> %7302, %7300
  store <4 x i32> %7303, <4 x i32>* %7301, align 16, !tbaa !11
  %7304 = add nsw i64 %7248, 28
  %7305 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7304
  %7306 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7304
  %7307 = bitcast i32* %7306 to <4 x i32>*
  %7308 = load <4 x i32>, <4 x i32>* %7307, align 4, !tbaa !11
  %7309 = bitcast i32* %7305 to <4 x i32>*
  %7310 = load <4 x i32>, <4 x i32>* %7309, align 16, !tbaa !11
  %7311 = add <4 x i32> %7310, %7308
  store <4 x i32> %7311, <4 x i32>* %7309, align 16, !tbaa !11
  %7312 = add nsw i64 %7248, 32
  %7313 = icmp slt i64 %7312, %3346
  br i1 %7313, label %7247, label %7110

; <label>:7314:                                   ; preds = %7238
  br label %7315

; <label>:7315:                                   ; preds = %7314, %7234, %7111
  call void @llvm.lifetime.end(i64 1128, i8* nonnull %7073) #11
  %7316 = bitcast %"class.Eigen::Product.310"* %202 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %7316) #11
  %7317 = getelementptr inbounds %"class.Eigen::Product.310", %"class.Eigen::Product.310"* %202, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.32"* %108, %"class.Eigen::Matrix.32"** %7317, align 8
  %7318 = getelementptr inbounds %"class.Eigen::Product.310", %"class.Eigen::Product.310"* %202, i64 0, i32 0, i32 1
  store %"class.Eigen::Matrix.77"* %123, %"class.Eigen::Matrix.77"** %7318, align 8
  %7319 = getelementptr inbounds %"class.Eigen::Product.310", %"class.Eigen::Product.310"* %202, i64 0, i32 1
  %7320 = bitcast %"class.Eigen::Transpose.296"* %7319 to i64*
  store i64 %3592, i64* %7320, align 8, !alias.scope !245
  %7321 = getelementptr inbounds %"struct.Eigen::internal::add_assign_op", %"struct.Eigen::internal::add_assign_op"* %21, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %7321) #11
  call void @_ZN5Eigen8internal15call_assignmentINS_6MatrixIiLin1ELin1ELi0ELin1ELin1EEENS_7ProductINS4_INS2_IiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS0_13add_assign_opIiiEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsr25evaluator_assume_aliasingISH_EE5valueEPvE4typeE(%"class.Eigen::Matrix.19"* nonnull dereferenceable(24) %105, %"class.Eigen::Product.310"* nonnull dereferenceable(24) %202, %"struct.Eigen::internal::add_assign_op"* nonnull dereferenceable(1) %21, i8* null) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %7321) #11
  call void @llvm.lifetime.end(i64 24, i8* nonnull %7316) #11
  %7322 = bitcast %"class.Eigen::CwiseBinaryOp.220"* %203 to i8*
  call void @llvm.lifetime.start(i64 40, i8* nonnull %7322) #11
  %7323 = load <4 x i32>, <4 x i32>* %2174, align 16, !tbaa !11
  %7324 = mul <4 x i32> %7323, %7323
  %7325 = load <4 x i32>, <4 x i32>* %2178, align 16, !tbaa !11
  %7326 = mul <4 x i32> %7325, %7325
  %7327 = load <4 x i32>, <4 x i32>* %2182, align 16, !tbaa !11
  %7328 = mul <4 x i32> %7327, %7327
  %7329 = load <4 x i32>, <4 x i32>* %2186, align 16, !tbaa !11
  %7330 = mul <4 x i32> %7329, %7329
  %7331 = load <4 x i32>, <4 x i32>* %2190, align 16, !tbaa !11
  %7332 = mul <4 x i32> %7331, %7331
  %7333 = load <4 x i32>, <4 x i32>* %2194, align 16, !tbaa !11
  %7334 = mul <4 x i32> %7333, %7333
  %7335 = load <4 x i32>, <4 x i32>* %2198, align 16, !tbaa !11
  %7336 = mul <4 x i32> %7335, %7335
  %7337 = load <4 x i32>, <4 x i32>* %2202, align 16, !tbaa !11
  %7338 = mul <4 x i32> %7337, %7337
  %7339 = load <4 x i32>, <4 x i32>* %2206, align 16, !tbaa !11
  %7340 = mul <4 x i32> %7339, %7339
  %7341 = load <4 x i32>, <4 x i32>* %2210, align 16, !tbaa !11
  %7342 = mul <4 x i32> %7341, %7341
  %7343 = load <4 x i32>, <4 x i32>* %2214, align 16, !tbaa !11
  %7344 = mul <4 x i32> %7343, %7343
  %7345 = add <4 x i32> %7326, %7324
  %7346 = add <4 x i32> %7345, %7328
  %7347 = add <4 x i32> %7346, %7330
  %7348 = add <4 x i32> %7347, %7332
  %7349 = add <4 x i32> %7348, %7334
  %7350 = add <4 x i32> %7349, %7336
  %7351 = add <4 x i32> %7350, %7338
  %7352 = add <4 x i32> %7351, %7340
  %7353 = add <4 x i32> %7352, %7342
  %7354 = add <4 x i32> %7353, %7344
  %7355 = call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %7354, <4 x i32> %7354) #11
  %7356 = load i32, i32* %2228, align 16, !tbaa !33
  %7357 = load i32, i32* %2230, align 4, !tbaa !33
  %7358 = load i32, i32* %2232, align 8, !tbaa !33
  %7359 = load i64, i64* %411, align 8, !tbaa !37, !noalias !248
  %7360 = icmp slt i64 %7359, 0
  br i1 %7360, label %7361, label %7362, !prof !50

; <label>:7361:                                   ; preds = %7315
  call void @__assert_rtn(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__._ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEENS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEC2EllRKS3_, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.13, i64 0, i64 0), i32 74, i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.14, i64 0, i64 0)) #13, !noalias !248
  unreachable

; <label>:7362:                                   ; preds = %7315
  %7363 = mul nsw i32 %7356, %7356
  %7364 = call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %7355, <4 x i32> %7355) #11
  %7365 = extractelement <4 x i32> %7364, i32 0
  %7366 = mul nsw i32 %7357, %7357
  %7367 = mul nsw i32 %7358, %7358
  %7368 = add nuw i32 %7366, %7363
  %7369 = add i32 %7368, %7367
  %7370 = add i32 %7369, %7365
  %7371 = sitofp i32 %7370 to double
  %7372 = call double @sqrt(double %7371) #5
  %7373 = fptosi double %7372 to i32
  %7374 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %203, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.32"* %110, %"class.Eigen::Matrix.32"** %7374, align 8
  %7375 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %203, i64 0, i32 0, i32 1
  store %"class.Eigen::Matrix.153"* %146, %"class.Eigen::Matrix.153"** %7375, align 8
  %7376 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %203, i64 0, i32 1, i32 0, i32 0
  store i64 %7359, i64* %7376, align 8, !alias.scope !248
  %7377 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %203, i64 0, i32 1, i32 2, i32 0
  store i32 %7373, i32* %7377, align 4, !tbaa !51, !alias.scope !248
  %7378 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %20, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %7378) #11
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEENS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_7ProductINS2_IiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi1ELi0ELi47ELi1EEELi0EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKS3_EEEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.170"* nonnull dereferenceable(16) %153, %"class.Eigen::CwiseBinaryOp.220"* nonnull dereferenceable(40) %203, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %20) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %7378) #11
  call void @llvm.lifetime.end(i64 40, i8* nonnull %7322) #11
  %7379 = bitcast %"class.Eigen::Product.423"* %204 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %7379) #11
  %7380 = getelementptr inbounds %"class.Eigen::Product.423", %"class.Eigen::Product.423"* %204, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.77"* %122, %"class.Eigen::Matrix.77"** %7380, align 8
  %7381 = getelementptr inbounds %"class.Eigen::Product.423", %"class.Eigen::Product.423"* %204, i64 0, i32 0, i32 1, i32 0
  store %"class.Eigen::Matrix.123"* %139, %"class.Eigen::Matrix.123"** %7381, align 8
  %7382 = getelementptr inbounds %"class.Eigen::Product.423", %"class.Eigen::Product.423"* %204, i64 0, i32 1
  store %"class.Eigen::Matrix.32"* %108, %"class.Eigen::Matrix.32"** %7382, align 8, !tbaa !11, !alias.scope !251
  %7383 = load i64, i64* %759, align 8, !tbaa !43, !noalias !251
  %7384 = load i64, i64* %367, align 8, !tbaa !37, !noalias !251
  %7385 = icmp eq i64 %7383, %7384
  br i1 %7385, label %7387, label %7386, !prof !10

; <label>:7386:                                   ; preds = %7362
  call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS1_IdLin1ELi1ELi0ELin1ELi1EEELi0EEC2ERKS2_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 97, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2, i64 0, i64 0)) #13, !noalias !251
  unreachable

; <label>:7387:                                   ; preds = %7362
  %7388 = bitcast %"class.Eigen::Matrix.63"* %19 to i8*
  call void @llvm.lifetime.start(i64 8836, i8* nonnull %7388) #11
  %7389 = getelementptr inbounds %"class.Eigen::Product.423", %"class.Eigen::Product.423"* %204, i64 0, i32 0
  call void @_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS3_IiLin1ELi47ELi0ELin1ELi47EEENS_10DenseShapeESB_Li8EE6evalToINS3_IiLi47ELi47ELi0ELi47ELi47EEEEEvRT_RKS9_RKSA_(%"class.Eigen::Matrix.63"* nonnull dereferenceable(8836) %19, %"class.Eigen::Product.430"* nonnull dereferenceable(16) %7389, %"class.Eigen::Matrix.32"* nonnull dereferenceable(16) %108) #11
  %7390 = ptrtoint %"class.Eigen::Matrix.63"* %120 to i64
  %7391 = lshr exact i64 %7390, 2
  %7392 = sub nsw i64 0, %7391
  %7393 = and i64 %7392, 3
  %7394 = sub nsw i64 2209, %7393
  %7395 = and i64 %7394, 2236
  %7396 = or i64 %7395, %7393
  %7397 = icmp eq i64 %7393, 0
  br i1 %7397, label %7400, label %7398

; <label>:7398:                                   ; preds = %7387
  br label %7427

; <label>:7399:                                   ; preds = %8583, %8576, %7427
  br label %7400

; <label>:7400:                                   ; preds = %7399, %7387
  %7401 = phi i64 [ 0, %7387 ], [ %7393, %7399 ]
  %7402 = add nsw i64 %7396, -1
  %7403 = sub nsw i64 %7402, %7401
  %7404 = lshr i64 %7403, 2
  %7405 = add nuw nsw i64 %7404, 1
  %7406 = and i64 %7405, 7
  %7407 = icmp eq i64 %7406, 0
  br i1 %7407, label %7423, label %7408

; <label>:7408:                                   ; preds = %7400
  br label %7409

; <label>:7409:                                   ; preds = %7409, %7408
  %7410 = phi i64 [ %7419, %7409 ], [ %7401, %7408 ]
  %7411 = phi i64 [ %7420, %7409 ], [ %7406, %7408 ]
  %7412 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %120, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7410
  %7413 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7410
  %7414 = bitcast i32* %7413 to <4 x i32>*
  %7415 = load <4 x i32>, <4 x i32>* %7414, align 4, !tbaa !11
  %7416 = bitcast i32* %7412 to <4 x i32>*
  %7417 = load <4 x i32>, <4 x i32>* %7416, align 16, !tbaa !11
  %7418 = sub <4 x i32> %7417, %7415
  store <4 x i32> %7418, <4 x i32>* %7416, align 16, !tbaa !11
  %7419 = add nuw nsw i64 %7410, 4
  %7420 = add i64 %7411, -1
  %7421 = icmp eq i64 %7420, 0
  br i1 %7421, label %7422, label %7409, !llvm.loop !254

; <label>:7422:                                   ; preds = %7409
  br label %7423

; <label>:7423:                                   ; preds = %7400, %7422
  %7424 = phi i64 [ %7401, %7400 ], [ %7419, %7422 ]
  %7425 = icmp ult i64 %7403, 28
  br i1 %7425, label %7435, label %7426

; <label>:7426:                                   ; preds = %7423
  br label %7572

; <label>:7427:                                   ; preds = %7398
  %7428 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %120, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %7429 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %7430 = load i32, i32* %7429, align 4, !tbaa !33
  %7431 = load i32, i32* %7428, align 4, !tbaa !33
  %7432 = sub nsw i32 %7431, %7430
  store i32 %7432, i32* %7428, align 4, !tbaa !33
  %7433 = icmp eq i64 %7393, 1
  br i1 %7433, label %7399, label %8576

; <label>:7434:                                   ; preds = %7572
  br label %7435

; <label>:7435:                                   ; preds = %7423, %7434
  %7436 = icmp ult i64 %7396, 2209
  br i1 %7436, label %7437, label %7640

; <label>:7437:                                   ; preds = %7435
  %7438 = sub nsw i64 2209, %7396
  %7439 = icmp ult i64 %7438, 32
  br i1 %7439, label %7561, label %7440

; <label>:7440:                                   ; preds = %7437
  %7441 = and i64 %7438, -32
  %7442 = icmp eq i64 %7441, 0
  %7443 = add nsw i64 %7396, %7441
  br i1 %7442, label %7561, label %7444

; <label>:7444:                                   ; preds = %7440
  %7445 = add nsw i64 %7441, -32
  %7446 = lshr exact i64 %7445, 5
  %7447 = and i64 %7446, 1
  %7448 = icmp eq i64 %7447, 0
  br i1 %7448, label %7449, label %7483

; <label>:7449:                                   ; preds = %7444
  br label %7450

; <label>:7450:                                   ; preds = %7449
  %7451 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %120, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7396
  %7452 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7396
  %7453 = bitcast i32* %7452 to <8 x i32>*
  %7454 = load <8 x i32>, <8 x i32>* %7453, align 4, !tbaa !33
  %7455 = getelementptr i32, i32* %7452, i64 8
  %7456 = bitcast i32* %7455 to <8 x i32>*
  %7457 = load <8 x i32>, <8 x i32>* %7456, align 4, !tbaa !33
  %7458 = getelementptr i32, i32* %7452, i64 16
  %7459 = bitcast i32* %7458 to <8 x i32>*
  %7460 = load <8 x i32>, <8 x i32>* %7459, align 4, !tbaa !33
  %7461 = getelementptr i32, i32* %7452, i64 24
  %7462 = bitcast i32* %7461 to <8 x i32>*
  %7463 = load <8 x i32>, <8 x i32>* %7462, align 4, !tbaa !33
  %7464 = bitcast i32* %7451 to <8 x i32>*
  %7465 = load <8 x i32>, <8 x i32>* %7464, align 4, !tbaa !33
  %7466 = getelementptr i32, i32* %7451, i64 8
  %7467 = bitcast i32* %7466 to <8 x i32>*
  %7468 = load <8 x i32>, <8 x i32>* %7467, align 4, !tbaa !33
  %7469 = getelementptr i32, i32* %7451, i64 16
  %7470 = bitcast i32* %7469 to <8 x i32>*
  %7471 = load <8 x i32>, <8 x i32>* %7470, align 4, !tbaa !33
  %7472 = getelementptr i32, i32* %7451, i64 24
  %7473 = bitcast i32* %7472 to <8 x i32>*
  %7474 = load <8 x i32>, <8 x i32>* %7473, align 4, !tbaa !33
  %7475 = sub nsw <8 x i32> %7465, %7454
  %7476 = sub nsw <8 x i32> %7468, %7457
  %7477 = sub nsw <8 x i32> %7471, %7460
  %7478 = sub nsw <8 x i32> %7474, %7463
  %7479 = bitcast i32* %7451 to <8 x i32>*
  store <8 x i32> %7475, <8 x i32>* %7479, align 4, !tbaa !33
  %7480 = bitcast i32* %7466 to <8 x i32>*
  store <8 x i32> %7476, <8 x i32>* %7480, align 4, !tbaa !33
  %7481 = bitcast i32* %7469 to <8 x i32>*
  store <8 x i32> %7477, <8 x i32>* %7481, align 4, !tbaa !33
  %7482 = bitcast i32* %7472 to <8 x i32>*
  store <8 x i32> %7478, <8 x i32>* %7482, align 4, !tbaa !33
  br label %7483

; <label>:7483:                                   ; preds = %7450, %7444
  %7484 = phi i64 [ 0, %7444 ], [ 32, %7450 ]
  %7485 = icmp eq i64 %7446, 0
  br i1 %7485, label %7559, label %7486

; <label>:7486:                                   ; preds = %7483
  br label %7487

; <label>:7487:                                   ; preds = %7487, %7486
  %7488 = phi i64 [ %7484, %7486 ], [ %7556, %7487 ]
  %7489 = add i64 %7396, %7488
  %7490 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %120, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7489
  %7491 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7489
  %7492 = bitcast i32* %7491 to <8 x i32>*
  %7493 = load <8 x i32>, <8 x i32>* %7492, align 4, !tbaa !33
  %7494 = getelementptr i32, i32* %7491, i64 8
  %7495 = bitcast i32* %7494 to <8 x i32>*
  %7496 = load <8 x i32>, <8 x i32>* %7495, align 4, !tbaa !33
  %7497 = getelementptr i32, i32* %7491, i64 16
  %7498 = bitcast i32* %7497 to <8 x i32>*
  %7499 = load <8 x i32>, <8 x i32>* %7498, align 4, !tbaa !33
  %7500 = getelementptr i32, i32* %7491, i64 24
  %7501 = bitcast i32* %7500 to <8 x i32>*
  %7502 = load <8 x i32>, <8 x i32>* %7501, align 4, !tbaa !33
  %7503 = bitcast i32* %7490 to <8 x i32>*
  %7504 = load <8 x i32>, <8 x i32>* %7503, align 4, !tbaa !33
  %7505 = getelementptr i32, i32* %7490, i64 8
  %7506 = bitcast i32* %7505 to <8 x i32>*
  %7507 = load <8 x i32>, <8 x i32>* %7506, align 4, !tbaa !33
  %7508 = getelementptr i32, i32* %7490, i64 16
  %7509 = bitcast i32* %7508 to <8 x i32>*
  %7510 = load <8 x i32>, <8 x i32>* %7509, align 4, !tbaa !33
  %7511 = getelementptr i32, i32* %7490, i64 24
  %7512 = bitcast i32* %7511 to <8 x i32>*
  %7513 = load <8 x i32>, <8 x i32>* %7512, align 4, !tbaa !33
  %7514 = sub nsw <8 x i32> %7504, %7493
  %7515 = sub nsw <8 x i32> %7507, %7496
  %7516 = sub nsw <8 x i32> %7510, %7499
  %7517 = sub nsw <8 x i32> %7513, %7502
  %7518 = bitcast i32* %7490 to <8 x i32>*
  store <8 x i32> %7514, <8 x i32>* %7518, align 4, !tbaa !33
  %7519 = bitcast i32* %7505 to <8 x i32>*
  store <8 x i32> %7515, <8 x i32>* %7519, align 4, !tbaa !33
  %7520 = bitcast i32* %7508 to <8 x i32>*
  store <8 x i32> %7516, <8 x i32>* %7520, align 4, !tbaa !33
  %7521 = bitcast i32* %7511 to <8 x i32>*
  store <8 x i32> %7517, <8 x i32>* %7521, align 4, !tbaa !33
  %7522 = add i64 %7488, 32
  %7523 = add i64 %7396, %7522
  %7524 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %120, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7523
  %7525 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7523
  %7526 = bitcast i32* %7525 to <8 x i32>*
  %7527 = load <8 x i32>, <8 x i32>* %7526, align 4, !tbaa !33
  %7528 = getelementptr i32, i32* %7525, i64 8
  %7529 = bitcast i32* %7528 to <8 x i32>*
  %7530 = load <8 x i32>, <8 x i32>* %7529, align 4, !tbaa !33
  %7531 = getelementptr i32, i32* %7525, i64 16
  %7532 = bitcast i32* %7531 to <8 x i32>*
  %7533 = load <8 x i32>, <8 x i32>* %7532, align 4, !tbaa !33
  %7534 = getelementptr i32, i32* %7525, i64 24
  %7535 = bitcast i32* %7534 to <8 x i32>*
  %7536 = load <8 x i32>, <8 x i32>* %7535, align 4, !tbaa !33
  %7537 = bitcast i32* %7524 to <8 x i32>*
  %7538 = load <8 x i32>, <8 x i32>* %7537, align 4, !tbaa !33
  %7539 = getelementptr i32, i32* %7524, i64 8
  %7540 = bitcast i32* %7539 to <8 x i32>*
  %7541 = load <8 x i32>, <8 x i32>* %7540, align 4, !tbaa !33
  %7542 = getelementptr i32, i32* %7524, i64 16
  %7543 = bitcast i32* %7542 to <8 x i32>*
  %7544 = load <8 x i32>, <8 x i32>* %7543, align 4, !tbaa !33
  %7545 = getelementptr i32, i32* %7524, i64 24
  %7546 = bitcast i32* %7545 to <8 x i32>*
  %7547 = load <8 x i32>, <8 x i32>* %7546, align 4, !tbaa !33
  %7548 = sub nsw <8 x i32> %7538, %7527
  %7549 = sub nsw <8 x i32> %7541, %7530
  %7550 = sub nsw <8 x i32> %7544, %7533
  %7551 = sub nsw <8 x i32> %7547, %7536
  %7552 = bitcast i32* %7524 to <8 x i32>*
  store <8 x i32> %7548, <8 x i32>* %7552, align 4, !tbaa !33
  %7553 = bitcast i32* %7539 to <8 x i32>*
  store <8 x i32> %7549, <8 x i32>* %7553, align 4, !tbaa !33
  %7554 = bitcast i32* %7542 to <8 x i32>*
  store <8 x i32> %7550, <8 x i32>* %7554, align 4, !tbaa !33
  %7555 = bitcast i32* %7545 to <8 x i32>*
  store <8 x i32> %7551, <8 x i32>* %7555, align 4, !tbaa !33
  %7556 = add i64 %7488, 64
  %7557 = icmp eq i64 %7556, %7441
  br i1 %7557, label %7558, label %7487, !llvm.loop !255

; <label>:7558:                                   ; preds = %7487
  br label %7559

; <label>:7559:                                   ; preds = %7483, %7558
  %7560 = icmp eq i64 %7438, %7441
  br i1 %7560, label %7640, label %7561

; <label>:7561:                                   ; preds = %7559, %7440, %7437
  %7562 = phi i64 [ %7396, %7440 ], [ %7396, %7437 ], [ %7443, %7559 ]
  br label %7563

; <label>:7563:                                   ; preds = %7561, %7563
  %7564 = phi i64 [ %7570, %7563 ], [ %7562, %7561 ]
  %7565 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %120, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7564
  %7566 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7564
  %7567 = load i32, i32* %7566, align 4, !tbaa !33
  %7568 = load i32, i32* %7565, align 4, !tbaa !33
  %7569 = sub nsw i32 %7568, %7567
  store i32 %7569, i32* %7565, align 4, !tbaa !33
  %7570 = add nsw i64 %7564, 1
  %7571 = icmp eq i64 %7570, 2209
  br i1 %7571, label %7639, label %7563, !llvm.loop !256

; <label>:7572:                                   ; preds = %7572, %7426
  %7573 = phi i64 [ %7424, %7426 ], [ %7637, %7572 ]
  %7574 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %120, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7573
  %7575 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7573
  %7576 = bitcast i32* %7575 to <4 x i32>*
  %7577 = load <4 x i32>, <4 x i32>* %7576, align 4, !tbaa !11
  %7578 = bitcast i32* %7574 to <4 x i32>*
  %7579 = load <4 x i32>, <4 x i32>* %7578, align 16, !tbaa !11
  %7580 = sub <4 x i32> %7579, %7577
  store <4 x i32> %7580, <4 x i32>* %7578, align 16, !tbaa !11
  %7581 = add nuw nsw i64 %7573, 4
  %7582 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %120, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7581
  %7583 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7581
  %7584 = bitcast i32* %7583 to <4 x i32>*
  %7585 = load <4 x i32>, <4 x i32>* %7584, align 4, !tbaa !11
  %7586 = bitcast i32* %7582 to <4 x i32>*
  %7587 = load <4 x i32>, <4 x i32>* %7586, align 16, !tbaa !11
  %7588 = sub <4 x i32> %7587, %7585
  store <4 x i32> %7588, <4 x i32>* %7586, align 16, !tbaa !11
  %7589 = add nsw i64 %7573, 8
  %7590 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %120, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7589
  %7591 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7589
  %7592 = bitcast i32* %7591 to <4 x i32>*
  %7593 = load <4 x i32>, <4 x i32>* %7592, align 4, !tbaa !11
  %7594 = bitcast i32* %7590 to <4 x i32>*
  %7595 = load <4 x i32>, <4 x i32>* %7594, align 16, !tbaa !11
  %7596 = sub <4 x i32> %7595, %7593
  store <4 x i32> %7596, <4 x i32>* %7594, align 16, !tbaa !11
  %7597 = add nsw i64 %7573, 12
  %7598 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %120, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7597
  %7599 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7597
  %7600 = bitcast i32* %7599 to <4 x i32>*
  %7601 = load <4 x i32>, <4 x i32>* %7600, align 4, !tbaa !11
  %7602 = bitcast i32* %7598 to <4 x i32>*
  %7603 = load <4 x i32>, <4 x i32>* %7602, align 16, !tbaa !11
  %7604 = sub <4 x i32> %7603, %7601
  store <4 x i32> %7604, <4 x i32>* %7602, align 16, !tbaa !11
  %7605 = add nsw i64 %7573, 16
  %7606 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %120, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7605
  %7607 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7605
  %7608 = bitcast i32* %7607 to <4 x i32>*
  %7609 = load <4 x i32>, <4 x i32>* %7608, align 4, !tbaa !11
  %7610 = bitcast i32* %7606 to <4 x i32>*
  %7611 = load <4 x i32>, <4 x i32>* %7610, align 16, !tbaa !11
  %7612 = sub <4 x i32> %7611, %7609
  store <4 x i32> %7612, <4 x i32>* %7610, align 16, !tbaa !11
  %7613 = add nsw i64 %7573, 20
  %7614 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %120, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7613
  %7615 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7613
  %7616 = bitcast i32* %7615 to <4 x i32>*
  %7617 = load <4 x i32>, <4 x i32>* %7616, align 4, !tbaa !11
  %7618 = bitcast i32* %7614 to <4 x i32>*
  %7619 = load <4 x i32>, <4 x i32>* %7618, align 16, !tbaa !11
  %7620 = sub <4 x i32> %7619, %7617
  store <4 x i32> %7620, <4 x i32>* %7618, align 16, !tbaa !11
  %7621 = add nsw i64 %7573, 24
  %7622 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %120, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7621
  %7623 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7621
  %7624 = bitcast i32* %7623 to <4 x i32>*
  %7625 = load <4 x i32>, <4 x i32>* %7624, align 4, !tbaa !11
  %7626 = bitcast i32* %7622 to <4 x i32>*
  %7627 = load <4 x i32>, <4 x i32>* %7626, align 16, !tbaa !11
  %7628 = sub <4 x i32> %7627, %7625
  store <4 x i32> %7628, <4 x i32>* %7626, align 16, !tbaa !11
  %7629 = add nsw i64 %7573, 28
  %7630 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %120, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7629
  %7631 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7629
  %7632 = bitcast i32* %7631 to <4 x i32>*
  %7633 = load <4 x i32>, <4 x i32>* %7632, align 4, !tbaa !11
  %7634 = bitcast i32* %7630 to <4 x i32>*
  %7635 = load <4 x i32>, <4 x i32>* %7634, align 16, !tbaa !11
  %7636 = sub <4 x i32> %7635, %7633
  store <4 x i32> %7636, <4 x i32>* %7634, align 16, !tbaa !11
  %7637 = add nsw i64 %7573, 32
  %7638 = icmp slt i64 %7637, %7396
  br i1 %7638, label %7572, label %7434

; <label>:7639:                                   ; preds = %7563
  br label %7640

; <label>:7640:                                   ; preds = %7639, %7559, %7435
  call void @llvm.lifetime.end(i64 8836, i8* nonnull %7388) #11
  call void @llvm.lifetime.end(i64 24, i8* nonnull %7379) #11
  %7641 = bitcast %"class.Eigen::Product.437"* %205 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %7641) #11
  %7642 = getelementptr inbounds %"class.Eigen::Product.437", %"class.Eigen::Product.437"* %205, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.77"* %121, %"class.Eigen::Matrix.77"** %7642, align 8
  %7643 = getelementptr inbounds %"class.Eigen::Product.437", %"class.Eigen::Product.437"* %205, i64 0, i32 0, i32 1, i32 0
  store %"class.Eigen::Matrix.123"* %144, %"class.Eigen::Matrix.123"** %7643, align 8
  %7644 = getelementptr inbounds %"class.Eigen::Product.437", %"class.Eigen::Product.437"* %205, i64 0, i32 1
  store %"class.Eigen::Matrix.32"* %108, %"class.Eigen::Matrix.32"** %7644, align 8, !tbaa !11, !alias.scope !257
  %7645 = load i64, i64* %869, align 8, !tbaa !43, !noalias !257
  %7646 = load i64, i64* %367, align 8, !tbaa !37, !noalias !257
  %7647 = icmp eq i64 %7645, %7646
  br i1 %7647, label %7649, label %7648, !prof !10

; <label>:7648:                                   ; preds = %7640
  call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS1_IdLin1ELi1ELi0ELin1ELi1EEELi0EEC2ERKS2_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 97, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2, i64 0, i64 0)) #13, !noalias !257
  unreachable

; <label>:7649:                                   ; preds = %7640
  %7650 = bitcast %"class.Eigen::Matrix.63"* %18 to i8*
  call void @llvm.lifetime.start(i64 8836, i8* nonnull %7650) #11
  %7651 = getelementptr inbounds %"class.Eigen::Product.437", %"class.Eigen::Product.437"* %205, i64 0, i32 0
  call void @_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS3_IiLin1ELi47ELi0ELin1ELi47EEENS_10DenseShapeESA_Li8EE6evalToINS3_IiLi47ELi47ELi0ELi47ELi47EEEEEvRT_RKS8_RKS9_(%"class.Eigen::Matrix.63"* nonnull dereferenceable(8836) %18, %"class.Eigen::Product.444"* nonnull dereferenceable(16) %7651, %"class.Eigen::Matrix.32"* nonnull dereferenceable(16) %108) #11
  %7652 = ptrtoint %"class.Eigen::Matrix.63"* %118 to i64
  %7653 = lshr exact i64 %7652, 2
  %7654 = sub nsw i64 0, %7653
  %7655 = and i64 %7654, 3
  %7656 = sub nsw i64 2209, %7655
  %7657 = and i64 %7656, 2236
  %7658 = or i64 %7657, %7655
  %7659 = icmp eq i64 %7655, 0
  br i1 %7659, label %7662, label %7660

; <label>:7660:                                   ; preds = %7649
  %7661 = shl nuw nsw i64 %7655, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %611, i8* nonnull %7650, i64 %7661, i32 4, i1 false) #11
  br label %7662

; <label>:7662:                                   ; preds = %7660, %7649
  %7663 = phi i64 [ %7655, %7660 ], [ 0, %7649 ]
  %7664 = getelementptr %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %118, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7663
  %7665 = bitcast i32* %7664 to i8*
  %7666 = getelementptr %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7663
  %7667 = bitcast i32* %7666 to i8*
  %7668 = add nuw nsw i64 %7658, 4611686018427387903
  %7669 = sub nsw i64 %7668, %7663
  %7670 = lshr i64 %7669, 2
  %7671 = shl i64 %7670, 4
  %7672 = add i64 %7671, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7665, i8* %7667, i64 %7672, i32 4, i1 false) #11
  %7673 = icmp ult i64 %7658, 2209
  br i1 %7673, label %7674, label %7681

; <label>:7674:                                   ; preds = %7662
  %7675 = getelementptr %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %118, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7658
  %7676 = bitcast i32* %7675 to i8*
  %7677 = getelementptr %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7658
  %7678 = bitcast i32* %7677 to i8*
  %7679 = shl nuw nsw i64 %7658, 2
  %7680 = sub nsw i64 8836, %7679
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7676, i8* %7678, i64 %7680, i32 4, i1 false) #11
  br label %7681

; <label>:7681:                                   ; preds = %7674, %7662
  call void @llvm.lifetime.end(i64 8836, i8* nonnull %7650) #11
  call void @llvm.lifetime.end(i64 24, i8* nonnull %7641) #11
  %7682 = getelementptr inbounds %"struct.Eigen::internal::evaluator.817", %"struct.Eigen::internal::evaluator.817"* %17, i64 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start(i64 224, i8* nonnull %7682) #11
  %7683 = getelementptr inbounds %"struct.Eigen::internal::evaluator.817", %"struct.Eigen::internal::evaluator.817"* %17, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %7684 = getelementptr inbounds %"struct.Eigen::internal::evaluator.817", %"struct.Eigen::internal::evaluator.817"* %17, i64 0, i32 0, i32 2, i32 0, i32 0, i32 1
  %7685 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %7684, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  store i32* %7685, i32** %7683, align 8, !tbaa !92
  %7686 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %16, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %7686) #11
  %7687 = bitcast %"struct.Eigen::internal::evaluator.840"* %13 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %7687) #11
  %7688 = bitcast %"struct.Eigen::internal::evaluator.840"* %13 to i64*
  store i64 %3340, i64* %7688, align 8, !tbaa !11
  %7689 = getelementptr inbounds %"struct.Eigen::internal::evaluator.840", %"struct.Eigen::internal::evaluator.840"* %13, i64 0, i32 0, i32 1
  %7690 = bitcast %"class.Eigen::Matrix.185"** %7689 to i64*
  store i64 %4099, i64* %7690, align 8, !tbaa !11
  %7691 = getelementptr inbounds %"struct.Eigen::internal::evaluator.840", %"struct.Eigen::internal::evaluator.840"* %13, i64 0, i32 0, i32 2, i32 0, i32 0
  store i32* %5304, i32** %7691, align 8, !tbaa !94
  %7692 = getelementptr inbounds %"struct.Eigen::internal::evaluator.840", %"struct.Eigen::internal::evaluator.840"* %13, i64 0, i32 0, i32 3, i32 0, i32 0
  store i32* %1464, i32** %7692, align 8, !tbaa !97
  %7693 = getelementptr inbounds %"struct.Eigen::internal::evaluator.840", %"struct.Eigen::internal::evaluator.840"* %13, i64 0, i32 0, i32 4
  store i64 6, i64* %7693, align 8, !tbaa !99
  %7694 = bitcast %"struct.Eigen::internal::evaluator.583"* %14 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %7694) #11
  %7695 = getelementptr inbounds %"struct.Eigen::internal::evaluator.583", %"struct.Eigen::internal::evaluator.583"* %14, i64 0, i32 0, i32 0
  store i32* %7685, i32** %7695, align 8, !tbaa !92
  %7696 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %15 to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %7696) #11
  %7697 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %15, i64 0, i32 0
  store %"struct.Eigen::internal::evaluator.583"* %14, %"struct.Eigen::internal::evaluator.583"** %7697, align 8, !tbaa !11
  %7698 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %15, i64 0, i32 1
  store %"struct.Eigen::internal::evaluator.840"* %13, %"struct.Eigen::internal::evaluator.840"** %7698, align 8, !tbaa !11
  %7699 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %15, i64 0, i32 2
  store %"struct.Eigen::internal::assign_op.512"* %16, %"struct.Eigen::internal::assign_op.512"** %7699, align 8, !tbaa !11
  %7700 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %15, i64 0, i32 3
  store %"class.Eigen::Matrix.153"* %7684, %"class.Eigen::Matrix.153"** %7700, align 8, !tbaa !11
  call void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi47ELi1ELi0ELi47ELi1EEEEENS3_INS_7ProductINS4_IiLi47ELi6ELi0ELi47ELi6EEENS4_IiLi6ELi1ELi0ELi6ELi1EEELi1EEEEENS0_9assign_opIiiEELi0EEELi3ELi0EE3runERSE_(%"class.Eigen::internal::generic_dense_assignment_kernel.843"* nonnull dereferenceable(32) %15) #11
  call void @llvm.lifetime.end(i64 32, i8* nonnull %7696) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %7694) #11
  call void @llvm.lifetime.end(i64 56, i8* nonnull %7687) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %7686) #11
  %7701 = getelementptr inbounds %"struct.Eigen::internal::evaluator.817", %"struct.Eigen::internal::evaluator.817"* %17, i64 0, i32 0, i32 3
  %7702 = bitcast %"struct.Eigen::internal::evaluator.823"* %7701 to i64*
  store i64 %5694, i64* %7702, align 8, !tbaa !103
  %7703 = bitcast i32** %7683 to <4 x i32>**
  %7704 = load <4 x i32>*, <4 x i32>** %7703, align 8, !tbaa !92
  %7705 = load <4 x i32>, <4 x i32>* %7704, align 1, !tbaa !11
  %7706 = load <4 x i32>, <4 x i32>* %5716, align 4, !tbaa !11
  %7707 = add <4 x i32> %7706, %7705
  store <4 x i32> %7707, <4 x i32>* %5883, align 16, !tbaa !11
  %7708 = getelementptr inbounds <4 x i32>, <4 x i32>* %7704, i64 0, i64 4
  %7709 = bitcast i32* %7708 to <4 x i32>*
  %7710 = load <4 x i32>, <4 x i32>* %7709, align 1, !tbaa !11
  %7711 = load <4 x i32>, <4 x i32>* %5730, align 4, !tbaa !11
  %7712 = add <4 x i32> %7711, %7710
  store <4 x i32> %7712, <4 x i32>* %5899, align 16, !tbaa !11
  %7713 = getelementptr inbounds <4 x i32>, <4 x i32>* %7704, i64 0, i64 8
  %7714 = bitcast i32* %7713 to <4 x i32>*
  %7715 = load <4 x i32>, <4 x i32>* %7714, align 1, !tbaa !11
  %7716 = load <4 x i32>, <4 x i32>* %5741, align 4, !tbaa !11
  %7717 = add <4 x i32> %7716, %7715
  store <4 x i32> %7717, <4 x i32>* %5910, align 16, !tbaa !11
  %7718 = getelementptr inbounds <4 x i32>, <4 x i32>* %7704, i64 0, i64 12
  %7719 = bitcast i32* %7718 to <4 x i32>*
  %7720 = load <4 x i32>, <4 x i32>* %7719, align 1, !tbaa !11
  %7721 = load <4 x i32>, <4 x i32>* %5752, align 4, !tbaa !11
  %7722 = add <4 x i32> %7721, %7720
  store <4 x i32> %7722, <4 x i32>* %5921, align 16, !tbaa !11
  %7723 = getelementptr inbounds <4 x i32>, <4 x i32>* %7704, i64 0, i64 16
  %7724 = bitcast i32* %7723 to <4 x i32>*
  %7725 = load <4 x i32>, <4 x i32>* %7724, align 1, !tbaa !11
  %7726 = load <4 x i32>, <4 x i32>* %5763, align 4, !tbaa !11
  %7727 = add <4 x i32> %7726, %7725
  store <4 x i32> %7727, <4 x i32>* %5932, align 16, !tbaa !11
  %7728 = getelementptr inbounds <4 x i32>, <4 x i32>* %7704, i64 0, i64 20
  %7729 = bitcast i32* %7728 to <4 x i32>*
  %7730 = load <4 x i32>, <4 x i32>* %7729, align 1, !tbaa !11
  %7731 = load <4 x i32>, <4 x i32>* %5774, align 4, !tbaa !11
  %7732 = add <4 x i32> %7731, %7730
  store <4 x i32> %7732, <4 x i32>* %5943, align 16, !tbaa !11
  %7733 = getelementptr inbounds <4 x i32>, <4 x i32>* %7704, i64 0, i64 24
  %7734 = bitcast i32* %7733 to <4 x i32>*
  %7735 = load <4 x i32>, <4 x i32>* %7734, align 1, !tbaa !11
  %7736 = load <4 x i32>, <4 x i32>* %5785, align 4, !tbaa !11
  %7737 = add <4 x i32> %7736, %7735
  store <4 x i32> %7737, <4 x i32>* %5954, align 16, !tbaa !11
  %7738 = getelementptr inbounds <4 x i32>, <4 x i32>* %7704, i64 0, i64 28
  %7739 = bitcast i32* %7738 to <4 x i32>*
  %7740 = load <4 x i32>, <4 x i32>* %7739, align 1, !tbaa !11
  %7741 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %124, i64 0, i32 0, i32 0, i32 0, i32 0, i64 75
  %7742 = bitcast i32* %7741 to <4 x i32>*
  %7743 = load <4 x i32>, <4 x i32>* %7742, align 4, !tbaa !11
  %7744 = add <4 x i32> %7743, %7740
  store <4 x i32> %7744, <4 x i32>* %5965, align 16, !tbaa !11
  %7745 = getelementptr inbounds <4 x i32>, <4 x i32>* %7704, i64 0, i64 32
  %7746 = bitcast i32* %7745 to <4 x i32>*
  %7747 = load <4 x i32>, <4 x i32>* %7746, align 1, !tbaa !11
  %7748 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %124, i64 0, i32 0, i32 0, i32 0, i32 0, i64 79
  %7749 = bitcast i32* %7748 to <4 x i32>*
  %7750 = load <4 x i32>, <4 x i32>* %7749, align 4, !tbaa !11
  %7751 = add <4 x i32> %7750, %7747
  store <4 x i32> %7751, <4 x i32>* %5976, align 16, !tbaa !11
  %7752 = getelementptr inbounds <4 x i32>, <4 x i32>* %7704, i64 0, i64 36
  %7753 = bitcast i32* %7752 to <4 x i32>*
  %7754 = load <4 x i32>, <4 x i32>* %7753, align 1, !tbaa !11
  %7755 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %124, i64 0, i32 0, i32 0, i32 0, i32 0, i64 83
  %7756 = bitcast i32* %7755 to <4 x i32>*
  %7757 = load <4 x i32>, <4 x i32>* %7756, align 4, !tbaa !11
  %7758 = add <4 x i32> %7757, %7754
  store <4 x i32> %7758, <4 x i32>* %5987, align 16, !tbaa !11
  %7759 = getelementptr inbounds <4 x i32>, <4 x i32>* %7704, i64 0, i64 40
  %7760 = bitcast i32* %7759 to <4 x i32>*
  %7761 = load <4 x i32>, <4 x i32>* %7760, align 1, !tbaa !11
  %7762 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %124, i64 0, i32 0, i32 0, i32 0, i32 0, i64 87
  %7763 = bitcast i32* %7762 to <4 x i32>*
  %7764 = load <4 x i32>, <4 x i32>* %7763, align 4, !tbaa !11
  %7765 = add <4 x i32> %7764, %7761
  store <4 x i32> %7765, <4 x i32>* %5998, align 16, !tbaa !11
  %7766 = getelementptr inbounds <4 x i32>, <4 x i32>* %7704, i64 0, i64 44
  %7767 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %124, i64 0, i32 0, i32 0, i32 0, i32 0, i64 91
  %7768 = load i32, i32* %7766, align 4, !tbaa !33
  %7769 = load i32, i32* %7767, align 4, !tbaa !33
  %7770 = add nsw i32 %7769, %7768
  store i32 %7770, i32* %6001, align 16, !tbaa !33
  %7771 = getelementptr inbounds <4 x i32>, <4 x i32>* %7704, i64 0, i64 45
  %7772 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %124, i64 0, i32 0, i32 0, i32 0, i32 0, i64 92
  %7773 = load i32, i32* %7771, align 4, !tbaa !33
  %7774 = load i32, i32* %7772, align 4, !tbaa !33
  %7775 = add nsw i32 %7774, %7773
  store i32 %7775, i32* %6009, align 4, !tbaa !33
  %7776 = getelementptr inbounds <4 x i32>, <4 x i32>* %7704, i64 0, i64 46
  %7777 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %124, i64 0, i32 0, i32 0, i32 0, i32 0, i64 93
  %7778 = load i32, i32* %7776, align 4, !tbaa !33
  %7779 = load i32, i32* %7777, align 4, !tbaa !33
  %7780 = add nsw i32 %7779, %7778
  store i32 %7780, i32* %6017, align 8, !tbaa !33
  call void @llvm.lifetime.end(i64 224, i8* nonnull %7682) #11
  %7781 = getelementptr inbounds %"class.Eigen::Product.277", %"class.Eigen::Product.277"* %206, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start(i64 40, i8* nonnull %7781) #11
  %7782 = ptrtoint %"class.Eigen::Matrix.123"* %141 to i64
  %7783 = getelementptr inbounds %"class.Eigen::Product.277", %"class.Eigen::Product.277"* %206, i64 0, i32 0, i32 1, i32 2, i32 0
  store i32 17, i32* %7783, align 4, !tbaa !51, !alias.scope !260
  %7784 = getelementptr inbounds %"class.Eigen::Product.277", %"class.Eigen::Product.277"* %206, i64 0, i32 0, i32 3
  %7785 = bitcast %"class.Eigen::Matrix.77"** %7784 to i64*
  store i64 %3059, i64* %7785, align 8, !tbaa !11, !alias.scope !260
  %7786 = getelementptr inbounds %"class.Eigen::Product.277", %"class.Eigen::Product.277"* %206, i64 0, i32 1
  %7787 = bitcast %"class.Eigen::Transpose.296"* %7786 to i64*
  store i64 %7782, i64* %7787, align 8, !alias.scope !260
  %7788 = getelementptr inbounds %"struct.Eigen::internal::add_assign_op", %"struct.Eigen::internal::add_assign_op"* %12, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %7788) #11
  call void @_ZN5Eigen8internal15call_assignmentINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS2_IiLi47ELi6ELi0ELi47ELi6EEEEESC_EENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS0_13add_assign_opIiiEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsr25evaluator_assume_aliasingISP_EE5valueEPvE4typeE(%"class.Eigen::Matrix.48"* nonnull dereferenceable(16) %116, %"class.Eigen::Product.277"* nonnull dereferenceable(40) %206, %"struct.Eigen::internal::add_assign_op"* nonnull dereferenceable(1) %12, i8* null) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %7788) #11
  call void @llvm.lifetime.end(i64 40, i8* nonnull %7781) #11
  %7789 = bitcast %"class.Eigen::Product.234"* %207 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %7789) #11
  %7790 = getelementptr inbounds %"class.Eigen::Product.234", %"class.Eigen::Product.234"* %207, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.153"* %145, %"class.Eigen::Matrix.153"** %7790, align 8
  %7791 = getelementptr inbounds %"class.Eigen::Product.234", %"class.Eigen::Product.234"* %207, i64 0, i32 1, i32 0
  store %"class.Eigen::Matrix.32"* %109, %"class.Eigen::Matrix.32"** %7791, align 8
  %7792 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %155, i64 0, i32 0
  %7793 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %11, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %7793) #11
  %7794 = bitcast %"class.Eigen::Matrix.724"* %10 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %7794) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %7794, i8 0, i64 16, i32 8, i1 false) #11
  %7795 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %9, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %7795) #11
  call void @_ZN5Eigen8internal10AssignmentINS_6MatrixIiLi1ELin1ELi1ELi1ELin1EEENS_7ProductINS_9TransposeINS2_IiLi47ELi1ELi0ELi47ELi1EEEEENS5_INS2_IiLin1ELi47ELi0ELin1ELi47EEEEELi0EEENS0_9assign_opIiiEENS0_11Dense2DenseEvE3runERS3_RKSA_RKSC_(%"class.Eigen::Matrix.724"* nonnull dereferenceable(16) %10, %"class.Eigen::Product.234"* nonnull dereferenceable(16) %207, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %9) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %7795) #11
  %7796 = bitcast %"class.Eigen::Transpose.798"* %8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7796) #11
  %7797 = bitcast %"class.Eigen::Transpose.798"* %8 to %"class.Eigen::PlainObjectBase.171"**
  store %"class.Eigen::PlainObjectBase.171"* %7792, %"class.Eigen::PlainObjectBase.171"** %7797, align 8, !tbaa !11
  %7798 = load i32*, i32** %1392, align 8, !tbaa !44
  %7799 = getelementptr inbounds %"class.Eigen::Matrix.724", %"class.Eigen::Matrix.724"* %10, i64 0, i32 0, i32 0, i32 0
  %7800 = load i32*, i32** %7799, align 8
  %7801 = icmp eq i32* %7800, %7798
  %7802 = icmp ne i32* %7798, null
  %7803 = and i1 %7802, %7801
  br i1 %7803, label %7804, label %7805, !prof !50

; <label>:7804:                                   ; preds = %7681
  call void @__assert_rtn(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__func__._ZN5Eigen8internal10redux_implINS0_17scalar_product_opIiiEENS0_15redux_evaluatorINS_6MatrixIiLi6ELi1ELi0ELi6ELi1EEEEELi3ELi2EE3runERKS7_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.31, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([275 x i8], [275 x i8]* @.str.32, i64 0, i64 0)) #13
  unreachable

; <label>:7805:                                   ; preds = %7681
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_9TransposeINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEEEENS3_IiLi1ELin1ELi1ELi1ELin1EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Transpose.798"* nonnull dereferenceable(8) %8, %"class.Eigen::Matrix.724"* nonnull dereferenceable(16) %10, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %11) #11
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7796) #11
  %7806 = load i32*, i32** %7799, align 8, !tbaa !197
  %7807 = icmp eq i32* %7806, null
  br i1 %7807, label %7812, label %7808

; <label>:7808:                                   ; preds = %7805
  %7809 = getelementptr inbounds i32, i32* %7806, i64 -2
  %7810 = bitcast i32* %7809 to i8**
  %7811 = load i8*, i8** %7810, align 8, !tbaa !29
  call void @free(i8* %7811) #11
  br label %7812

; <label>:7812:                                   ; preds = %7805, %7808
  call void @llvm.lifetime.end(i64 16, i8* nonnull %7794) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %7793) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %7789) #11
  %7813 = bitcast %"class.Eigen::Product.423"* %208 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %7813) #11
  %7814 = getelementptr inbounds %"class.Eigen::Product.423", %"class.Eigen::Product.423"* %208, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.77"* %121, %"class.Eigen::Matrix.77"** %7814, align 8
  %7815 = getelementptr inbounds %"class.Eigen::Product.423", %"class.Eigen::Product.423"* %208, i64 0, i32 0, i32 1, i32 0
  store %"class.Eigen::Matrix.123"* %143, %"class.Eigen::Matrix.123"** %7815, align 8
  %7816 = getelementptr inbounds %"class.Eigen::Product.423", %"class.Eigen::Product.423"* %208, i64 0, i32 1
  store %"class.Eigen::Matrix.32"* %112, %"class.Eigen::Matrix.32"** %7816, align 8, !tbaa !11, !alias.scope !263
  %7817 = load i64, i64* %847, align 8, !tbaa !43, !noalias !263
  %7818 = load i64, i64* %455, align 8, !tbaa !37, !noalias !263
  %7819 = icmp eq i64 %7817, %7818
  br i1 %7819, label %7821, label %7820, !prof !10

; <label>:7820:                                   ; preds = %7812
  call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS1_IdLin1ELi1ELi0ELin1ELi1EEELi0EEC2ERKS2_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 97, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2, i64 0, i64 0)) #13, !noalias !263
  unreachable

; <label>:7821:                                   ; preds = %7812
  %7822 = bitcast %"class.Eigen::Matrix.63"* %7 to i8*
  call void @llvm.lifetime.start(i64 8836, i8* nonnull %7822) #11
  %7823 = getelementptr inbounds %"class.Eigen::Product.423", %"class.Eigen::Product.423"* %208, i64 0, i32 0
  call void @_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS3_IiLin1ELi47ELi0ELin1ELi47EEENS_10DenseShapeESB_Li8EE6evalToINS3_IiLi47ELi47ELi0ELi47ELi47EEEEEvRT_RKS9_RKSA_(%"class.Eigen::Matrix.63"* nonnull dereferenceable(8836) %7, %"class.Eigen::Product.430"* nonnull dereferenceable(16) %7823, %"class.Eigen::Matrix.32"* nonnull dereferenceable(16) %112) #11
  %7824 = ptrtoint %"class.Eigen::Matrix.63"* %119 to i64
  %7825 = lshr exact i64 %7824, 2
  %7826 = sub nsw i64 0, %7825
  %7827 = and i64 %7826, 3
  %7828 = sub nsw i64 2209, %7827
  %7829 = and i64 %7828, 2236
  %7830 = or i64 %7829, %7827
  %7831 = icmp eq i64 %7827, 0
  br i1 %7831, label %7834, label %7832

; <label>:7832:                                   ; preds = %7821
  br label %7861

; <label>:7833:                                   ; preds = %8570, %8563, %7861
  br label %7834

; <label>:7834:                                   ; preds = %7833, %7821
  %7835 = phi i64 [ 0, %7821 ], [ %7827, %7833 ]
  %7836 = add nsw i64 %7830, -1
  %7837 = sub nsw i64 %7836, %7835
  %7838 = lshr i64 %7837, 2
  %7839 = add nuw nsw i64 %7838, 1
  %7840 = and i64 %7839, 7
  %7841 = icmp eq i64 %7840, 0
  br i1 %7841, label %7857, label %7842

; <label>:7842:                                   ; preds = %7834
  br label %7843

; <label>:7843:                                   ; preds = %7843, %7842
  %7844 = phi i64 [ %7853, %7843 ], [ %7835, %7842 ]
  %7845 = phi i64 [ %7854, %7843 ], [ %7840, %7842 ]
  %7846 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %119, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7844
  %7847 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7844
  %7848 = bitcast i32* %7847 to <4 x i32>*
  %7849 = load <4 x i32>, <4 x i32>* %7848, align 4, !tbaa !11
  %7850 = bitcast i32* %7846 to <4 x i32>*
  %7851 = load <4 x i32>, <4 x i32>* %7850, align 16, !tbaa !11
  %7852 = add <4 x i32> %7851, %7849
  store <4 x i32> %7852, <4 x i32>* %7850, align 16, !tbaa !11
  %7853 = add nuw nsw i64 %7844, 4
  %7854 = add i64 %7845, -1
  %7855 = icmp eq i64 %7854, 0
  br i1 %7855, label %7856, label %7843, !llvm.loop !266

; <label>:7856:                                   ; preds = %7843
  br label %7857

; <label>:7857:                                   ; preds = %7834, %7856
  %7858 = phi i64 [ %7835, %7834 ], [ %7853, %7856 ]
  %7859 = icmp ult i64 %7837, 28
  br i1 %7859, label %7869, label %7860

; <label>:7860:                                   ; preds = %7857
  br label %8006

; <label>:7861:                                   ; preds = %7832
  %7862 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %119, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %7863 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %7864 = load i32, i32* %7863, align 4, !tbaa !33
  %7865 = load i32, i32* %7862, align 4, !tbaa !33
  %7866 = add nsw i32 %7865, %7864
  store i32 %7866, i32* %7862, align 4, !tbaa !33
  %7867 = icmp eq i64 %7827, 1
  br i1 %7867, label %7833, label %8563

; <label>:7868:                                   ; preds = %8006
  br label %7869

; <label>:7869:                                   ; preds = %7857, %7868
  %7870 = icmp ult i64 %7830, 2209
  br i1 %7870, label %7871, label %8074

; <label>:7871:                                   ; preds = %7869
  %7872 = sub nsw i64 2209, %7830
  %7873 = icmp ult i64 %7872, 32
  br i1 %7873, label %7995, label %7874

; <label>:7874:                                   ; preds = %7871
  %7875 = and i64 %7872, -32
  %7876 = icmp eq i64 %7875, 0
  %7877 = add nsw i64 %7830, %7875
  br i1 %7876, label %7995, label %7878

; <label>:7878:                                   ; preds = %7874
  %7879 = add nsw i64 %7875, -32
  %7880 = lshr exact i64 %7879, 5
  %7881 = and i64 %7880, 1
  %7882 = icmp eq i64 %7881, 0
  br i1 %7882, label %7883, label %7917

; <label>:7883:                                   ; preds = %7878
  br label %7884

; <label>:7884:                                   ; preds = %7883
  %7885 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %119, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7830
  %7886 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7830
  %7887 = bitcast i32* %7886 to <8 x i32>*
  %7888 = load <8 x i32>, <8 x i32>* %7887, align 4, !tbaa !33
  %7889 = getelementptr i32, i32* %7886, i64 8
  %7890 = bitcast i32* %7889 to <8 x i32>*
  %7891 = load <8 x i32>, <8 x i32>* %7890, align 4, !tbaa !33
  %7892 = getelementptr i32, i32* %7886, i64 16
  %7893 = bitcast i32* %7892 to <8 x i32>*
  %7894 = load <8 x i32>, <8 x i32>* %7893, align 4, !tbaa !33
  %7895 = getelementptr i32, i32* %7886, i64 24
  %7896 = bitcast i32* %7895 to <8 x i32>*
  %7897 = load <8 x i32>, <8 x i32>* %7896, align 4, !tbaa !33
  %7898 = bitcast i32* %7885 to <8 x i32>*
  %7899 = load <8 x i32>, <8 x i32>* %7898, align 4, !tbaa !33
  %7900 = getelementptr i32, i32* %7885, i64 8
  %7901 = bitcast i32* %7900 to <8 x i32>*
  %7902 = load <8 x i32>, <8 x i32>* %7901, align 4, !tbaa !33
  %7903 = getelementptr i32, i32* %7885, i64 16
  %7904 = bitcast i32* %7903 to <8 x i32>*
  %7905 = load <8 x i32>, <8 x i32>* %7904, align 4, !tbaa !33
  %7906 = getelementptr i32, i32* %7885, i64 24
  %7907 = bitcast i32* %7906 to <8 x i32>*
  %7908 = load <8 x i32>, <8 x i32>* %7907, align 4, !tbaa !33
  %7909 = add nsw <8 x i32> %7899, %7888
  %7910 = add nsw <8 x i32> %7902, %7891
  %7911 = add nsw <8 x i32> %7905, %7894
  %7912 = add nsw <8 x i32> %7908, %7897
  %7913 = bitcast i32* %7885 to <8 x i32>*
  store <8 x i32> %7909, <8 x i32>* %7913, align 4, !tbaa !33
  %7914 = bitcast i32* %7900 to <8 x i32>*
  store <8 x i32> %7910, <8 x i32>* %7914, align 4, !tbaa !33
  %7915 = bitcast i32* %7903 to <8 x i32>*
  store <8 x i32> %7911, <8 x i32>* %7915, align 4, !tbaa !33
  %7916 = bitcast i32* %7906 to <8 x i32>*
  store <8 x i32> %7912, <8 x i32>* %7916, align 4, !tbaa !33
  br label %7917

; <label>:7917:                                   ; preds = %7884, %7878
  %7918 = phi i64 [ 0, %7878 ], [ 32, %7884 ]
  %7919 = icmp eq i64 %7880, 0
  br i1 %7919, label %7993, label %7920

; <label>:7920:                                   ; preds = %7917
  br label %7921

; <label>:7921:                                   ; preds = %7921, %7920
  %7922 = phi i64 [ %7918, %7920 ], [ %7990, %7921 ]
  %7923 = add i64 %7830, %7922
  %7924 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %119, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7923
  %7925 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7923
  %7926 = bitcast i32* %7925 to <8 x i32>*
  %7927 = load <8 x i32>, <8 x i32>* %7926, align 4, !tbaa !33
  %7928 = getelementptr i32, i32* %7925, i64 8
  %7929 = bitcast i32* %7928 to <8 x i32>*
  %7930 = load <8 x i32>, <8 x i32>* %7929, align 4, !tbaa !33
  %7931 = getelementptr i32, i32* %7925, i64 16
  %7932 = bitcast i32* %7931 to <8 x i32>*
  %7933 = load <8 x i32>, <8 x i32>* %7932, align 4, !tbaa !33
  %7934 = getelementptr i32, i32* %7925, i64 24
  %7935 = bitcast i32* %7934 to <8 x i32>*
  %7936 = load <8 x i32>, <8 x i32>* %7935, align 4, !tbaa !33
  %7937 = bitcast i32* %7924 to <8 x i32>*
  %7938 = load <8 x i32>, <8 x i32>* %7937, align 4, !tbaa !33
  %7939 = getelementptr i32, i32* %7924, i64 8
  %7940 = bitcast i32* %7939 to <8 x i32>*
  %7941 = load <8 x i32>, <8 x i32>* %7940, align 4, !tbaa !33
  %7942 = getelementptr i32, i32* %7924, i64 16
  %7943 = bitcast i32* %7942 to <8 x i32>*
  %7944 = load <8 x i32>, <8 x i32>* %7943, align 4, !tbaa !33
  %7945 = getelementptr i32, i32* %7924, i64 24
  %7946 = bitcast i32* %7945 to <8 x i32>*
  %7947 = load <8 x i32>, <8 x i32>* %7946, align 4, !tbaa !33
  %7948 = add nsw <8 x i32> %7938, %7927
  %7949 = add nsw <8 x i32> %7941, %7930
  %7950 = add nsw <8 x i32> %7944, %7933
  %7951 = add nsw <8 x i32> %7947, %7936
  %7952 = bitcast i32* %7924 to <8 x i32>*
  store <8 x i32> %7948, <8 x i32>* %7952, align 4, !tbaa !33
  %7953 = bitcast i32* %7939 to <8 x i32>*
  store <8 x i32> %7949, <8 x i32>* %7953, align 4, !tbaa !33
  %7954 = bitcast i32* %7942 to <8 x i32>*
  store <8 x i32> %7950, <8 x i32>* %7954, align 4, !tbaa !33
  %7955 = bitcast i32* %7945 to <8 x i32>*
  store <8 x i32> %7951, <8 x i32>* %7955, align 4, !tbaa !33
  %7956 = add i64 %7922, 32
  %7957 = add i64 %7830, %7956
  %7958 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %119, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7957
  %7959 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7957
  %7960 = bitcast i32* %7959 to <8 x i32>*
  %7961 = load <8 x i32>, <8 x i32>* %7960, align 4, !tbaa !33
  %7962 = getelementptr i32, i32* %7959, i64 8
  %7963 = bitcast i32* %7962 to <8 x i32>*
  %7964 = load <8 x i32>, <8 x i32>* %7963, align 4, !tbaa !33
  %7965 = getelementptr i32, i32* %7959, i64 16
  %7966 = bitcast i32* %7965 to <8 x i32>*
  %7967 = load <8 x i32>, <8 x i32>* %7966, align 4, !tbaa !33
  %7968 = getelementptr i32, i32* %7959, i64 24
  %7969 = bitcast i32* %7968 to <8 x i32>*
  %7970 = load <8 x i32>, <8 x i32>* %7969, align 4, !tbaa !33
  %7971 = bitcast i32* %7958 to <8 x i32>*
  %7972 = load <8 x i32>, <8 x i32>* %7971, align 4, !tbaa !33
  %7973 = getelementptr i32, i32* %7958, i64 8
  %7974 = bitcast i32* %7973 to <8 x i32>*
  %7975 = load <8 x i32>, <8 x i32>* %7974, align 4, !tbaa !33
  %7976 = getelementptr i32, i32* %7958, i64 16
  %7977 = bitcast i32* %7976 to <8 x i32>*
  %7978 = load <8 x i32>, <8 x i32>* %7977, align 4, !tbaa !33
  %7979 = getelementptr i32, i32* %7958, i64 24
  %7980 = bitcast i32* %7979 to <8 x i32>*
  %7981 = load <8 x i32>, <8 x i32>* %7980, align 4, !tbaa !33
  %7982 = add nsw <8 x i32> %7972, %7961
  %7983 = add nsw <8 x i32> %7975, %7964
  %7984 = add nsw <8 x i32> %7978, %7967
  %7985 = add nsw <8 x i32> %7981, %7970
  %7986 = bitcast i32* %7958 to <8 x i32>*
  store <8 x i32> %7982, <8 x i32>* %7986, align 4, !tbaa !33
  %7987 = bitcast i32* %7973 to <8 x i32>*
  store <8 x i32> %7983, <8 x i32>* %7987, align 4, !tbaa !33
  %7988 = bitcast i32* %7976 to <8 x i32>*
  store <8 x i32> %7984, <8 x i32>* %7988, align 4, !tbaa !33
  %7989 = bitcast i32* %7979 to <8 x i32>*
  store <8 x i32> %7985, <8 x i32>* %7989, align 4, !tbaa !33
  %7990 = add i64 %7922, 64
  %7991 = icmp eq i64 %7990, %7875
  br i1 %7991, label %7992, label %7921, !llvm.loop !267

; <label>:7992:                                   ; preds = %7921
  br label %7993

; <label>:7993:                                   ; preds = %7917, %7992
  %7994 = icmp eq i64 %7872, %7875
  br i1 %7994, label %8074, label %7995

; <label>:7995:                                   ; preds = %7993, %7874, %7871
  %7996 = phi i64 [ %7830, %7874 ], [ %7830, %7871 ], [ %7877, %7993 ]
  br label %7997

; <label>:7997:                                   ; preds = %7995, %7997
  %7998 = phi i64 [ %8004, %7997 ], [ %7996, %7995 ]
  %7999 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %119, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7998
  %8000 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %7998
  %8001 = load i32, i32* %8000, align 4, !tbaa !33
  %8002 = load i32, i32* %7999, align 4, !tbaa !33
  %8003 = add nsw i32 %8002, %8001
  store i32 %8003, i32* %7999, align 4, !tbaa !33
  %8004 = add nsw i64 %7998, 1
  %8005 = icmp eq i64 %8004, 2209
  br i1 %8005, label %8073, label %7997, !llvm.loop !268

; <label>:8006:                                   ; preds = %8006, %7860
  %8007 = phi i64 [ %7858, %7860 ], [ %8071, %8006 ]
  %8008 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %119, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %8007
  %8009 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %8007
  %8010 = bitcast i32* %8009 to <4 x i32>*
  %8011 = load <4 x i32>, <4 x i32>* %8010, align 4, !tbaa !11
  %8012 = bitcast i32* %8008 to <4 x i32>*
  %8013 = load <4 x i32>, <4 x i32>* %8012, align 16, !tbaa !11
  %8014 = add <4 x i32> %8013, %8011
  store <4 x i32> %8014, <4 x i32>* %8012, align 16, !tbaa !11
  %8015 = add nuw nsw i64 %8007, 4
  %8016 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %119, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %8015
  %8017 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %8015
  %8018 = bitcast i32* %8017 to <4 x i32>*
  %8019 = load <4 x i32>, <4 x i32>* %8018, align 4, !tbaa !11
  %8020 = bitcast i32* %8016 to <4 x i32>*
  %8021 = load <4 x i32>, <4 x i32>* %8020, align 16, !tbaa !11
  %8022 = add <4 x i32> %8021, %8019
  store <4 x i32> %8022, <4 x i32>* %8020, align 16, !tbaa !11
  %8023 = add nsw i64 %8007, 8
  %8024 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %119, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %8023
  %8025 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %8023
  %8026 = bitcast i32* %8025 to <4 x i32>*
  %8027 = load <4 x i32>, <4 x i32>* %8026, align 4, !tbaa !11
  %8028 = bitcast i32* %8024 to <4 x i32>*
  %8029 = load <4 x i32>, <4 x i32>* %8028, align 16, !tbaa !11
  %8030 = add <4 x i32> %8029, %8027
  store <4 x i32> %8030, <4 x i32>* %8028, align 16, !tbaa !11
  %8031 = add nsw i64 %8007, 12
  %8032 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %119, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %8031
  %8033 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %8031
  %8034 = bitcast i32* %8033 to <4 x i32>*
  %8035 = load <4 x i32>, <4 x i32>* %8034, align 4, !tbaa !11
  %8036 = bitcast i32* %8032 to <4 x i32>*
  %8037 = load <4 x i32>, <4 x i32>* %8036, align 16, !tbaa !11
  %8038 = add <4 x i32> %8037, %8035
  store <4 x i32> %8038, <4 x i32>* %8036, align 16, !tbaa !11
  %8039 = add nsw i64 %8007, 16
  %8040 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %119, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %8039
  %8041 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %8039
  %8042 = bitcast i32* %8041 to <4 x i32>*
  %8043 = load <4 x i32>, <4 x i32>* %8042, align 4, !tbaa !11
  %8044 = bitcast i32* %8040 to <4 x i32>*
  %8045 = load <4 x i32>, <4 x i32>* %8044, align 16, !tbaa !11
  %8046 = add <4 x i32> %8045, %8043
  store <4 x i32> %8046, <4 x i32>* %8044, align 16, !tbaa !11
  %8047 = add nsw i64 %8007, 20
  %8048 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %119, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %8047
  %8049 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %8047
  %8050 = bitcast i32* %8049 to <4 x i32>*
  %8051 = load <4 x i32>, <4 x i32>* %8050, align 4, !tbaa !11
  %8052 = bitcast i32* %8048 to <4 x i32>*
  %8053 = load <4 x i32>, <4 x i32>* %8052, align 16, !tbaa !11
  %8054 = add <4 x i32> %8053, %8051
  store <4 x i32> %8054, <4 x i32>* %8052, align 16, !tbaa !11
  %8055 = add nsw i64 %8007, 24
  %8056 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %119, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %8055
  %8057 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %8055
  %8058 = bitcast i32* %8057 to <4 x i32>*
  %8059 = load <4 x i32>, <4 x i32>* %8058, align 4, !tbaa !11
  %8060 = bitcast i32* %8056 to <4 x i32>*
  %8061 = load <4 x i32>, <4 x i32>* %8060, align 16, !tbaa !11
  %8062 = add <4 x i32> %8061, %8059
  store <4 x i32> %8062, <4 x i32>* %8060, align 16, !tbaa !11
  %8063 = add nsw i64 %8007, 28
  %8064 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %119, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %8063
  %8065 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %8063
  %8066 = bitcast i32* %8065 to <4 x i32>*
  %8067 = load <4 x i32>, <4 x i32>* %8066, align 4, !tbaa !11
  %8068 = bitcast i32* %8064 to <4 x i32>*
  %8069 = load <4 x i32>, <4 x i32>* %8068, align 16, !tbaa !11
  %8070 = add <4 x i32> %8069, %8067
  store <4 x i32> %8070, <4 x i32>* %8068, align 16, !tbaa !11
  %8071 = add nsw i64 %8007, 32
  %8072 = icmp slt i64 %8071, %7830
  br i1 %8072, label %8006, label %7868

; <label>:8073:                                   ; preds = %7997
  br label %8074

; <label>:8074:                                   ; preds = %8073, %7993, %7869
  call void @llvm.lifetime.end(i64 8836, i8* nonnull %7822) #11
  call void @llvm.lifetime.end(i64 24, i8* nonnull %7813) #11
  %8075 = bitcast %"class.Eigen::CwiseBinaryOp.200"* %209 to i8*
  call void @llvm.lifetime.start(i64 40, i8* nonnull %8075) #11
  %8076 = load i128, i128* %6292, align 8, !tbaa !11
  %8077 = load i64, i64* %825, align 8, !tbaa !43, !noalias !269
  %8078 = icmp slt i64 %8077, 0
  br i1 %8078, label %8079, label %8080, !prof !50

; <label>:8079:                                   ; preds = %8074
  call void @__assert_rtn(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__._ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEENS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEC2EllRKS3_, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.13, i64 0, i64 0), i32 74, i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.14, i64 0, i64 0)) #13, !noalias !269
  unreachable

; <label>:8080:                                   ; preds = %8074
  %8081 = load i32, i32* %1539, align 8, !tbaa !33
  %8082 = trunc i128 %8076 to i32
  %8083 = lshr i128 %8076, 32
  %8084 = trunc i128 %8083 to i32
  %8085 = lshr i128 %8076, 64
  %8086 = trunc i128 %8085 to i32
  %8087 = lshr i128 %8076, 96
  %8088 = trunc i128 %8087 to i32
  %8089 = load i32, i32* %1542, align 4, !tbaa !33
  %8090 = mul i32 %8084, %8082
  %8091 = mul i32 %8090, %8086
  %8092 = mul i32 %8091, %8088
  %8093 = mul i32 %8092, %8081
  %8094 = mul i32 %8093, %8089
  %8095 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %209, i64 0, i32 0, i32 0
  store %"class.Eigen::Matrix.123"* %142, %"class.Eigen::Matrix.123"** %8095, align 8
  %8096 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %209, i64 0, i32 0, i32 1
  store %"class.Eigen::Matrix.185"* %167, %"class.Eigen::Matrix.185"** %8096, align 8
  %8097 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %209, i64 0, i32 1, i32 0, i32 0
  store i64 %8077, i64* %8097, align 8, !alias.scope !269
  %8098 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %209, i64 0, i32 1, i32 2, i32 0
  store i32 %8094, i32* %8098, align 4, !tbaa !51, !alias.scope !269
  %8099 = getelementptr inbounds %"struct.Eigen::internal::add_assign_op", %"struct.Eigen::internal::add_assign_op"* %6, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %8099) #11
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEENS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_7ProductINS2_IiLin1ELi6ELi0ELin1ELi6EEENS2_IiLi6ELi1ELi0ELi6ELi1EEELi0EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKS3_EEEENS0_13add_assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.170"* nonnull dereferenceable(16) %172, %"class.Eigen::CwiseBinaryOp.200"* nonnull dereferenceable(40) %209, %"struct.Eigen::internal::add_assign_op"* nonnull dereferenceable(1) %6) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %8099) #11
  call void @llvm.lifetime.end(i64 40, i8* nonnull %8075) #11
  %8100 = bitcast %"class.Eigen::Matrix.153"* %5 to i8*
  call void @llvm.lifetime.start(i64 188, i8* nonnull %8100) #11
  %8101 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %5, i64 0, i32 0
  %8102 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %4, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %8102) #11
  %8103 = bitcast %"struct.Eigen::internal::evaluator.840"* %1 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %8103) #11
  %8104 = bitcast %"struct.Eigen::internal::evaluator.840"* %1 to i64*
  store i64 %2870, i64* %8104, align 8, !tbaa !11
  %8105 = getelementptr inbounds %"struct.Eigen::internal::evaluator.840", %"struct.Eigen::internal::evaluator.840"* %1, i64 0, i32 0, i32 1
  %8106 = bitcast %"class.Eigen::Matrix.185"** %8105 to i64*
  store i64 %3712, i64* %8106, align 8, !tbaa !11
  %8107 = getelementptr inbounds %"struct.Eigen::internal::evaluator.840", %"struct.Eigen::internal::evaluator.840"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  store i32* %2878, i32** %8107, align 8, !tbaa !94
  %8108 = getelementptr inbounds %"struct.Eigen::internal::evaluator.840", %"struct.Eigen::internal::evaluator.840"* %1, i64 0, i32 0, i32 3, i32 0, i32 0
  store i32* %1508, i32** %8108, align 8, !tbaa !97
  %8109 = getelementptr inbounds %"struct.Eigen::internal::evaluator.840", %"struct.Eigen::internal::evaluator.840"* %1, i64 0, i32 0, i32 4
  store i64 6, i64* %8109, align 8, !tbaa !99
  %8110 = bitcast %"struct.Eigen::internal::evaluator.583"* %2 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %8110) #11
  %8111 = getelementptr inbounds %"struct.Eigen::internal::evaluator.583", %"struct.Eigen::internal::evaluator.583"* %2, i64 0, i32 0, i32 0
  %8112 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  store i32* %8112, i32** %8111, align 8, !tbaa !92
  %8113 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %3 to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %8113) #11
  %8114 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %3, i64 0, i32 0
  store %"struct.Eigen::internal::evaluator.583"* %2, %"struct.Eigen::internal::evaluator.583"** %8114, align 8, !tbaa !11
  %8115 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %3, i64 0, i32 1
  store %"struct.Eigen::internal::evaluator.840"* %1, %"struct.Eigen::internal::evaluator.840"** %8115, align 8, !tbaa !11
  %8116 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %3, i64 0, i32 2
  store %"struct.Eigen::internal::assign_op.512"* %4, %"struct.Eigen::internal::assign_op.512"** %8116, align 8, !tbaa !11
  %8117 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %3, i64 0, i32 3
  %8118 = bitcast %"class.Eigen::Matrix.153"** %8117 to %"class.Eigen::PlainObjectBase.154"**
  store %"class.Eigen::PlainObjectBase.154"* %8101, %"class.Eigen::PlainObjectBase.154"** %8118, align 8, !tbaa !11
  call void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi47ELi1ELi0ELi47ELi1EEEEENS3_INS_7ProductINS4_IiLi47ELi6ELi0ELi47ELi6EEENS4_IiLi6ELi1ELi0ELi6ELi1EEELi1EEEEENS0_9assign_opIiiEELi0EEELi3ELi0EE3runERSE_(%"class.Eigen::internal::generic_dense_assignment_kernel.843"* nonnull dereferenceable(32) %3) #11
  call void @llvm.lifetime.end(i64 32, i8* nonnull %8113) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %8110) #11
  call void @llvm.lifetime.end(i64 56, i8* nonnull %8103) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %8102) #11
  %8119 = bitcast %"class.Eigen::Matrix.153"* %161 to <2 x i64>*
  %8120 = bitcast %"class.Eigen::Matrix.153"* %5 to <2 x i64>*
  %8121 = load <2 x i64>, <2 x i64>* %8120, align 16, !tbaa !11
  store <2 x i64> %8121, <2 x i64>* %8119, align 16, !tbaa !11
  %8122 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %8123 = bitcast i32* %8122 to <2 x i64>*
  %8124 = load <2 x i64>, <2 x i64>* %8123, align 16, !tbaa !11
  %8125 = bitcast i32* %5891 to <2 x i64>*
  store <2 x i64> %8124, <2 x i64>* %8125, align 16, !tbaa !11
  %8126 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i64 8
  %8127 = bitcast i32* %8126 to <2 x i64>*
  %8128 = load <2 x i64>, <2 x i64>* %8127, align 16, !tbaa !11
  %8129 = bitcast i32* %5902 to <2 x i64>*
  store <2 x i64> %8128, <2 x i64>* %8129, align 16, !tbaa !11
  %8130 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i64 12
  %8131 = bitcast i32* %8130 to <2 x i64>*
  %8132 = load <2 x i64>, <2 x i64>* %8131, align 16, !tbaa !11
  %8133 = bitcast i32* %5913 to <2 x i64>*
  store <2 x i64> %8132, <2 x i64>* %8133, align 16, !tbaa !11
  %8134 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i64 16
  %8135 = bitcast i32* %8134 to <2 x i64>*
  %8136 = load <2 x i64>, <2 x i64>* %8135, align 16, !tbaa !11
  %8137 = bitcast i32* %5924 to <2 x i64>*
  store <2 x i64> %8136, <2 x i64>* %8137, align 16, !tbaa !11
  %8138 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i64 20
  %8139 = bitcast i32* %8138 to <2 x i64>*
  %8140 = load <2 x i64>, <2 x i64>* %8139, align 16, !tbaa !11
  %8141 = bitcast i32* %5935 to <2 x i64>*
  store <2 x i64> %8140, <2 x i64>* %8141, align 16, !tbaa !11
  %8142 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i64 24
  %8143 = bitcast i32* %8142 to <2 x i64>*
  %8144 = load <2 x i64>, <2 x i64>* %8143, align 16, !tbaa !11
  %8145 = bitcast i32* %5946 to <2 x i64>*
  store <2 x i64> %8144, <2 x i64>* %8145, align 16, !tbaa !11
  %8146 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i64 28
  %8147 = bitcast i32* %8146 to <2 x i64>*
  %8148 = load <2 x i64>, <2 x i64>* %8147, align 16, !tbaa !11
  %8149 = bitcast i32* %5957 to <2 x i64>*
  store <2 x i64> %8148, <2 x i64>* %8149, align 16, !tbaa !11
  %8150 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i64 32
  %8151 = bitcast i32* %8150 to <2 x i64>*
  %8152 = load <2 x i64>, <2 x i64>* %8151, align 16, !tbaa !11
  %8153 = bitcast i32* %5968 to <2 x i64>*
  store <2 x i64> %8152, <2 x i64>* %8153, align 16, !tbaa !11
  %8154 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i64 36
  %8155 = bitcast i32* %8154 to <2 x i64>*
  %8156 = load <2 x i64>, <2 x i64>* %8155, align 16, !tbaa !11
  %8157 = bitcast i32* %5979 to <2 x i64>*
  store <2 x i64> %8156, <2 x i64>* %8157, align 16, !tbaa !11
  %8158 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i64 40
  %8159 = bitcast i32* %8158 to <2 x i64>*
  %8160 = load <2 x i64>, <2 x i64>* %8159, align 16, !tbaa !11
  %8161 = bitcast i32* %5990 to <2 x i64>*
  store <2 x i64> %8160, <2 x i64>* %8161, align 16, !tbaa !11
  %8162 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i64 44
  %8163 = load i32, i32* %8162, align 16, !tbaa !33
  store i32 %8163, i32* %6001, align 16, !tbaa !33
  %8164 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i64 45
  %8165 = load i32, i32* %8164, align 4, !tbaa !33
  store i32 %8165, i32* %6009, align 4, !tbaa !33
  %8166 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i64 46
  %8167 = load i32, i32* %8166, align 8, !tbaa !33
  store i32 %8167, i32* %6017, align 8, !tbaa !33
  call void @llvm.lifetime.end(i64 188, i8* nonnull %8100) #11
  %8168 = load <4 x i32>, <4 x i32>* %3762, align 16, !tbaa !11
  %8169 = mul <4 x i32> %8168, %8168
  %8170 = load <4 x i32>, <4 x i32>* %3766, align 16, !tbaa !11
  %8171 = mul <4 x i32> %8170, %8170
  %8172 = load <4 x i32>, <4 x i32>* %3770, align 16, !tbaa !11
  %8173 = mul <4 x i32> %8172, %8172
  %8174 = load <4 x i32>, <4 x i32>* %3774, align 16, !tbaa !11
  %8175 = mul <4 x i32> %8174, %8174
  %8176 = load <4 x i32>, <4 x i32>* %3778, align 16, !tbaa !11
  %8177 = mul <4 x i32> %8176, %8176
  %8178 = load <4 x i32>, <4 x i32>* %3782, align 16, !tbaa !11
  %8179 = mul <4 x i32> %8178, %8178
  %8180 = load <4 x i32>, <4 x i32>* %3786, align 16, !tbaa !11
  %8181 = mul <4 x i32> %8180, %8180
  %8182 = load <4 x i32>, <4 x i32>* %3790, align 16, !tbaa !11
  %8183 = mul <4 x i32> %8182, %8182
  %8184 = load <4 x i32>, <4 x i32>* %3794, align 16, !tbaa !11
  %8185 = mul <4 x i32> %8184, %8184
  %8186 = load <4 x i32>, <4 x i32>* %3798, align 16, !tbaa !11
  %8187 = mul <4 x i32> %8186, %8186
  %8188 = load <4 x i32>, <4 x i32>* %3802, align 16, !tbaa !11
  %8189 = mul <4 x i32> %8188, %8188
  %8190 = add <4 x i32> %8171, %8169
  %8191 = add <4 x i32> %8190, %8173
  %8192 = add <4 x i32> %8191, %8175
  %8193 = add <4 x i32> %8192, %8177
  %8194 = add <4 x i32> %8193, %8179
  %8195 = add <4 x i32> %8194, %8181
  %8196 = add <4 x i32> %8195, %8183
  %8197 = add <4 x i32> %8196, %8185
  %8198 = add <4 x i32> %8197, %8187
  %8199 = add <4 x i32> %8198, %8189
  %8200 = call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %8199, <4 x i32> %8199) #11
  %8201 = call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %8200, <4 x i32> %8200) #11
  %8202 = extractelement <4 x i32> %8201, i32 0
  %8203 = load i32, i32* %3816, align 16, !tbaa !33
  %8204 = mul nsw i32 %8203, %8203
  %8205 = load i32, i32* %3818, align 4, !tbaa !33
  %8206 = mul nsw i32 %8205, %8205
  %8207 = load i32, i32* %3820, align 8, !tbaa !33
  %8208 = mul nsw i32 %8207, %8207
  %8209 = add i32 %8204, %8202
  %8210 = add i32 %8209, %8206
  %8211 = add i32 %8210, %8208
  %8212 = load i64, i64* %584, align 8, !tbaa !40
  %8213 = icmp eq i64 %8212, 18
  br i1 %8213, label %8215, label %8214, !prof !10

; <label>:8214:                                   ; preds = %8080
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__._ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEENS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES3_EEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.15, i64 0, i64 0), i32 710, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.29, i64 0, i64 0)) #13
  unreachable

; <label>:8215:                                   ; preds = %8080
  %8216 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %117, i64 0, i32 0, i32 0, i32 0
  %8217 = load i32*, i32** %8216, align 8, !tbaa !38
  %8218 = insertelement <4 x i32> undef, i32 %8211, i32 0
  %8219 = shufflevector <4 x i32> %8218, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %8237

; <label>:8220:                                   ; preds = %8237
  %8221 = shl i32 %8211, 1
  br label %8222

; <label>:8222:                                   ; preds = %8220
  %8223 = getelementptr inbounds i32, i32* %8217, i64 844
  %8224 = getelementptr inbounds i32, i32* %574, i64 844
  %8225 = load i32, i32* %8224, align 4, !tbaa !33
  %8226 = mul i32 %8221, %8225
  %8227 = load i32, i32* %8223, align 4, !tbaa !33
  %8228 = add nsw i32 %8226, %8227
  store i32 %8228, i32* %8223, align 4, !tbaa !33
  %8229 = getelementptr inbounds i32, i32* %8217, i64 845
  %8230 = getelementptr inbounds i32, i32* %574, i64 845
  %8231 = load i32, i32* %8230, align 4, !tbaa !33
  %8232 = mul i32 %8221, %8231
  %8233 = load i32, i32* %8229, align 4, !tbaa !33
  %8234 = add nsw i32 %8232, %8233
  store i32 %8234, i32* %8229, align 4, !tbaa !33
  %8235 = load i32*, i32** %2056, align 8, !tbaa !44
  %8236 = icmp eq i32* %8235, null
  br i1 %8236, label %8274, label %8270

; <label>:8237:                                   ; preds = %8552, %8215
  %8238 = phi i64 [ 0, %8215 ], [ %8562, %8552 ]
  %8239 = getelementptr inbounds i32, i32* %8217, i64 %8238
  %8240 = getelementptr inbounds i32, i32* %574, i64 %8238
  %8241 = bitcast i32* %8240 to <4 x i32>*
  %8242 = load <4 x i32>, <4 x i32>* %8241, align 16, !tbaa !11
  %8243 = shl <4 x i32> %8242, <i32 1, i32 1, i32 1, i32 1>
  %8244 = mul <4 x i32> %8243, %8219
  %8245 = bitcast i32* %8239 to <4 x i32>*
  %8246 = load <4 x i32>, <4 x i32>* %8245, align 16, !tbaa !11
  %8247 = add <4 x i32> %8244, %8246
  store <4 x i32> %8247, <4 x i32>* %8245, align 16, !tbaa !11
  %8248 = or i64 %8238, 4
  %8249 = getelementptr inbounds i32, i32* %8217, i64 %8248
  %8250 = getelementptr inbounds i32, i32* %574, i64 %8248
  %8251 = bitcast i32* %8250 to <4 x i32>*
  %8252 = load <4 x i32>, <4 x i32>* %8251, align 16, !tbaa !11
  %8253 = shl <4 x i32> %8252, <i32 1, i32 1, i32 1, i32 1>
  %8254 = mul <4 x i32> %8253, %8219
  %8255 = bitcast i32* %8249 to <4 x i32>*
  %8256 = load <4 x i32>, <4 x i32>* %8255, align 16, !tbaa !11
  %8257 = add <4 x i32> %8254, %8256
  store <4 x i32> %8257, <4 x i32>* %8255, align 16, !tbaa !11
  %8258 = or i64 %8238, 8
  %8259 = getelementptr inbounds i32, i32* %8217, i64 %8258
  %8260 = getelementptr inbounds i32, i32* %574, i64 %8258
  %8261 = bitcast i32* %8260 to <4 x i32>*
  %8262 = load <4 x i32>, <4 x i32>* %8261, align 16, !tbaa !11
  %8263 = shl <4 x i32> %8262, <i32 1, i32 1, i32 1, i32 1>
  %8264 = mul <4 x i32> %8263, %8219
  %8265 = bitcast i32* %8259 to <4 x i32>*
  %8266 = load <4 x i32>, <4 x i32>* %8265, align 16, !tbaa !11
  %8267 = add <4 x i32> %8264, %8266
  store <4 x i32> %8267, <4 x i32>* %8265, align 16, !tbaa !11
  %8268 = or i64 %8238, 12
  %8269 = icmp slt i64 %8268, 844
  br i1 %8269, label %8552, label %8220

; <label>:8270:                                   ; preds = %8222
  %8271 = getelementptr inbounds i32, i32* %8235, i64 -2
  %8272 = bitcast i32* %8271 to i8**
  %8273 = load i8*, i8** %8272, align 8, !tbaa !29
  call void @free(i8* %8273) #11
  br label %8274

; <label>:8274:                                   ; preds = %8222, %8270
  call void @llvm.lifetime.end(i64 16, i8* nonnull %2054) #11
  %8275 = load i32*, i32** %1989, align 8, !tbaa !44
  %8276 = icmp eq i32* %8275, null
  br i1 %8276, label %8281, label %8277

; <label>:8277:                                   ; preds = %8274
  %8278 = getelementptr inbounds i32, i32* %8275, i64 -2
  %8279 = bitcast i32* %8278 to i8**
  %8280 = load i8*, i8** %8279, align 8, !tbaa !29
  call void @free(i8* %8280) #11
  br label %8281

; <label>:8281:                                   ; preds = %8274, %8277
  call void @llvm.lifetime.end(i64 16, i8* nonnull %1987) #11
  %8282 = load i32*, i32** %1922, align 8, !tbaa !44
  %8283 = icmp eq i32* %8282, null
  br i1 %8283, label %8288, label %8284

; <label>:8284:                                   ; preds = %8281
  %8285 = getelementptr inbounds i32, i32* %8282, i64 -2
  %8286 = bitcast i32* %8285 to i8**
  %8287 = load i8*, i8** %8286, align 8, !tbaa !29
  call void @free(i8* %8287) #11
  br label %8288

; <label>:8288:                                   ; preds = %8281, %8284
  call void @llvm.lifetime.end(i64 16, i8* nonnull %1920) #11
  %8289 = load i32*, i32** %1855, align 8, !tbaa !44
  %8290 = icmp eq i32* %8289, null
  br i1 %8290, label %8295, label %8291

; <label>:8291:                                   ; preds = %8288
  %8292 = getelementptr inbounds i32, i32* %8289, i64 -2
  %8293 = bitcast i32* %8292 to i8**
  %8294 = load i8*, i8** %8293, align 8, !tbaa !29
  call void @free(i8* %8294) #11
  br label %8295

; <label>:8295:                                   ; preds = %8288, %8291
  call void @llvm.lifetime.end(i64 16, i8* nonnull %1853) #11
  %8296 = icmp eq i32* %1799, null
  br i1 %8296, label %8301, label %8297

; <label>:8297:                                   ; preds = %8295
  %8298 = getelementptr inbounds i32, i32* %1799, i64 -2
  %8299 = bitcast i32* %8298 to i8**
  %8300 = load i8*, i8** %8299, align 8, !tbaa !29
  call void @free(i8* %8300) #11
  br label %8301

; <label>:8301:                                   ; preds = %8295, %8297
  %8302 = load i32*, i32** %1724, align 8, !tbaa !44
  %8303 = icmp eq i32* %8302, null
  br i1 %8303, label %8308, label %8304

; <label>:8304:                                   ; preds = %8301
  %8305 = getelementptr inbounds i32, i32* %8302, i64 -2
  %8306 = bitcast i32* %8305 to i8**
  %8307 = load i8*, i8** %8306, align 8, !tbaa !29
  call void @free(i8* %8307) #11
  br label %8308

; <label>:8308:                                   ; preds = %8301, %8304
  call void @llvm.lifetime.end(i64 16, i8* nonnull %1722) #11
  call void @llvm.lifetime.end(i64 24, i8* nonnull %1681) #11
  call void @llvm.lifetime.end(i64 24, i8* nonnull %1662) #11
  call void @llvm.lifetime.end(i64 24, i8* nonnull %1637) #11
  call void @llvm.lifetime.end(i64 188, i8* nonnull %1628) #11
  call void @llvm.lifetime.end(i64 188, i8* nonnull %1619) #11
  call void @llvm.lifetime.end(i64 188, i8* nonnull %1563) #11
  call void @llvm.lifetime.end(i64 188, i8* nonnull %1554) #11
  call void @llvm.lifetime.end(i64 188, i8* nonnull %1545) #11
  call void @llvm.lifetime.end(i64 24, i8* nonnull %1526) #11
  call void @llvm.lifetime.end(i64 24, i8* nonnull %1507) #11
  call void @llvm.lifetime.end(i64 24, i8* nonnull %1488) #11
  call void @llvm.lifetime.end(i64 24, i8* nonnull %1463) #11
  %8309 = load i32*, i32** %1392, align 8, !tbaa !44
  %8310 = icmp eq i32* %8309, null
  br i1 %8310, label %8315, label %8311

; <label>:8311:                                   ; preds = %8308
  %8312 = getelementptr inbounds i32, i32* %8309, i64 -2
  %8313 = bitcast i32* %8312 to i8**
  %8314 = load i8*, i8** %8313, align 8, !tbaa !29
  call void @free(i8* %8314) #11
  br label %8315

; <label>:8315:                                   ; preds = %8308, %8311
  call void @llvm.lifetime.end(i64 16, i8* nonnull %1390) #11
  %8316 = load i32*, i32** %1325, align 8, !tbaa !44
  %8317 = icmp eq i32* %8316, null
  br i1 %8317, label %8322, label %8318

; <label>:8318:                                   ; preds = %8315
  %8319 = getelementptr inbounds i32, i32* %8316, i64 -2
  %8320 = bitcast i32* %8319 to i8**
  %8321 = load i8*, i8** %8320, align 8, !tbaa !29
  call void @free(i8* %8321) #11
  br label %8322

; <label>:8322:                                   ; preds = %8315, %8318
  call void @llvm.lifetime.end(i64 16, i8* nonnull %1323) #11
  %8323 = load i32*, i32** %1258, align 8, !tbaa !44
  %8324 = icmp eq i32* %8323, null
  br i1 %8324, label %8329, label %8325

; <label>:8325:                                   ; preds = %8322
  %8326 = getelementptr inbounds i32, i32* %8323, i64 -2
  %8327 = bitcast i32* %8326 to i8**
  %8328 = load i8*, i8** %8327, align 8, !tbaa !29
  call void @free(i8* %8328) #11
  br label %8329

; <label>:8329:                                   ; preds = %8322, %8325
  call void @llvm.lifetime.end(i64 16, i8* nonnull %1256) #11
  %8330 = load i32*, i32** %1191, align 8, !tbaa !44
  %8331 = icmp eq i32* %8330, null
  br i1 %8331, label %8336, label %8332

; <label>:8332:                                   ; preds = %8329
  %8333 = getelementptr inbounds i32, i32* %8330, i64 -2
  %8334 = bitcast i32* %8333 to i8**
  %8335 = load i8*, i8** %8334, align 8, !tbaa !29
  call void @free(i8* %8335) #11
  br label %8336

; <label>:8336:                                   ; preds = %8329, %8332
  call void @llvm.lifetime.end(i64 16, i8* nonnull %1189) #11
  %8337 = icmp eq i32* %1135, null
  br i1 %8337, label %8342, label %8338

; <label>:8338:                                   ; preds = %8336
  %8339 = getelementptr inbounds i32, i32* %1135, i64 -2
  %8340 = bitcast i32* %8339 to i8**
  %8341 = load i8*, i8** %8340, align 8, !tbaa !29
  call void @free(i8* %8341) #11
  br label %8342

; <label>:8342:                                   ; preds = %8336, %8338
  %8343 = load i32*, i32** %1060, align 8, !tbaa !44
  %8344 = icmp eq i32* %8343, null
  br i1 %8344, label %8349, label %8345

; <label>:8345:                                   ; preds = %8342
  %8346 = getelementptr inbounds i32, i32* %8343, i64 -2
  %8347 = bitcast i32* %8346 to i8**
  %8348 = load i8*, i8** %8347, align 8, !tbaa !29
  call void @free(i8* %8348) #11
  br label %8349

; <label>:8349:                                   ; preds = %8342, %8345
  call void @llvm.lifetime.end(i64 16, i8* nonnull %1058) #11
  call void @llvm.lifetime.end(i64 188, i8* nonnull %1049) #11
  call void @llvm.lifetime.end(i64 188, i8* nonnull %1040) #11
  call void @llvm.lifetime.end(i64 188, i8* nonnull %1031) #11
  call void @llvm.lifetime.end(i64 188, i8* nonnull %1022) #11
  call void @llvm.lifetime.end(i64 188, i8* nonnull %1013) #11
  call void @llvm.lifetime.end(i64 188, i8* nonnull %1004) #11
  %8350 = icmp eq i32* %995, null
  br i1 %8350, label %8355, label %8351

; <label>:8351:                                   ; preds = %8349
  %8352 = getelementptr inbounds i32, i32* %995, i64 -2
  %8353 = bitcast i32* %8352 to i8**
  %8354 = load i8*, i8** %8353, align 8, !tbaa !29
  call void @free(i8* %8354) #11
  br label %8355

; <label>:8355:                                   ; preds = %8349, %8351
  %8356 = icmp eq i32* %976, null
  br i1 %8356, label %8361, label %8357

; <label>:8357:                                   ; preds = %8355
  %8358 = getelementptr inbounds i32, i32* %976, i64 -2
  %8359 = bitcast i32* %8358 to i8**
  %8360 = load i8*, i8** %8359, align 8, !tbaa !29
  call void @free(i8* %8360) #11
  br label %8361

; <label>:8361:                                   ; preds = %8355, %8357
  %8362 = icmp eq i32* %957, null
  br i1 %8362, label %8367, label %8363

; <label>:8363:                                   ; preds = %8361
  %8364 = getelementptr inbounds i32, i32* %957, i64 -2
  %8365 = bitcast i32* %8364 to i8**
  %8366 = load i8*, i8** %8365, align 8, !tbaa !29
  call void @free(i8* %8366) #11
  br label %8367

; <label>:8367:                                   ; preds = %8361, %8363
  %8368 = icmp eq i32* %938, null
  br i1 %8368, label %8373, label %8369

; <label>:8369:                                   ; preds = %8367
  %8370 = getelementptr inbounds i32, i32* %938, i64 -2
  %8371 = bitcast i32* %8370 to i8**
  %8372 = load i8*, i8** %8371, align 8, !tbaa !29
  call void @free(i8* %8372) #11
  br label %8373

; <label>:8373:                                   ; preds = %8367, %8369
  %8374 = icmp eq i32* %919, null
  br i1 %8374, label %8379, label %8375

; <label>:8375:                                   ; preds = %8373
  %8376 = getelementptr inbounds i32, i32* %919, i64 -2
  %8377 = bitcast i32* %8376 to i8**
  %8378 = load i8*, i8** %8377, align 8, !tbaa !29
  call void @free(i8* %8378) #11
  br label %8379

; <label>:8379:                                   ; preds = %8373, %8375
  %8380 = icmp eq i32* %900, null
  br i1 %8380, label %8385, label %8381

; <label>:8381:                                   ; preds = %8379
  %8382 = getelementptr inbounds i32, i32* %900, i64 -2
  %8383 = bitcast i32* %8382 to i8**
  %8384 = load i8*, i8** %8383, align 8, !tbaa !29
  call void @free(i8* %8384) #11
  br label %8385

; <label>:8385:                                   ; preds = %8379, %8381
  %8386 = load i32*, i32** %870, align 8, !tbaa !41
  %8387 = icmp eq i32* %8386, null
  br i1 %8387, label %8392, label %8388

; <label>:8388:                                   ; preds = %8385
  %8389 = getelementptr inbounds i32, i32* %8386, i64 -2
  %8390 = bitcast i32* %8389 to i8**
  %8391 = load i8*, i8** %8390, align 8, !tbaa !29
  call void @free(i8* %8391) #11
  br label %8392

; <label>:8392:                                   ; preds = %8385, %8388
  call void @llvm.lifetime.end(i64 16, i8* nonnull %868) #11
  %8393 = load i32*, i32** %848, align 8, !tbaa !41
  %8394 = icmp eq i32* %8393, null
  br i1 %8394, label %8399, label %8395

; <label>:8395:                                   ; preds = %8392
  %8396 = getelementptr inbounds i32, i32* %8393, i64 -2
  %8397 = bitcast i32* %8396 to i8**
  %8398 = load i8*, i8** %8397, align 8, !tbaa !29
  call void @free(i8* %8398) #11
  br label %8399

; <label>:8399:                                   ; preds = %8392, %8395
  call void @llvm.lifetime.end(i64 16, i8* nonnull %846) #11
  %8400 = load i32*, i32** %826, align 8, !tbaa !41
  %8401 = icmp eq i32* %8400, null
  br i1 %8401, label %8406, label %8402

; <label>:8402:                                   ; preds = %8399
  %8403 = getelementptr inbounds i32, i32* %8400, i64 -2
  %8404 = bitcast i32* %8403 to i8**
  %8405 = load i8*, i8** %8404, align 8, !tbaa !29
  call void @free(i8* %8405) #11
  br label %8406

; <label>:8406:                                   ; preds = %8399, %8402
  call void @llvm.lifetime.end(i64 16, i8* nonnull %824) #11
  %8407 = load i32*, i32** %804, align 8, !tbaa !41
  %8408 = icmp eq i32* %8407, null
  br i1 %8408, label %8413, label %8409

; <label>:8409:                                   ; preds = %8406
  %8410 = getelementptr inbounds i32, i32* %8407, i64 -2
  %8411 = bitcast i32* %8410 to i8**
  %8412 = load i8*, i8** %8411, align 8, !tbaa !29
  call void @free(i8* %8412) #11
  br label %8413

; <label>:8413:                                   ; preds = %8406, %8409
  call void @llvm.lifetime.end(i64 16, i8* nonnull %802) #11
  %8414 = load i32*, i32** %782, align 8, !tbaa !41
  %8415 = icmp eq i32* %8414, null
  br i1 %8415, label %8420, label %8416

; <label>:8416:                                   ; preds = %8413
  %8417 = getelementptr inbounds i32, i32* %8414, i64 -2
  %8418 = bitcast i32* %8417 to i8**
  %8419 = load i8*, i8** %8418, align 8, !tbaa !29
  call void @free(i8* %8419) #11
  br label %8420

; <label>:8420:                                   ; preds = %8413, %8416
  call void @llvm.lifetime.end(i64 16, i8* nonnull %780) #11
  %8421 = load i32*, i32** %760, align 8, !tbaa !41
  %8422 = icmp eq i32* %8421, null
  br i1 %8422, label %8427, label %8423

; <label>:8423:                                   ; preds = %8420
  %8424 = getelementptr inbounds i32, i32* %8421, i64 -2
  %8425 = bitcast i32* %8424 to i8**
  %8426 = load i8*, i8** %8425, align 8, !tbaa !29
  call void @free(i8* %8426) #11
  br label %8427

; <label>:8427:                                   ; preds = %8420, %8423
  call void @llvm.lifetime.end(i64 16, i8* nonnull %758) #11
  call void @llvm.lifetime.end(i64 144, i8* nonnull %755) #11
  call void @llvm.lifetime.end(i64 144, i8* nonnull %752) #11
  call void @llvm.lifetime.end(i64 144, i8* nonnull %749) #11
  call void @llvm.lifetime.end(i64 144, i8* nonnull %746) #11
  call void @llvm.lifetime.end(i64 144, i8* nonnull %743) #11
  call void @llvm.lifetime.end(i64 144, i8* nonnull %740) #11
  call void @llvm.lifetime.end(i64 1128, i8* nonnull %695) #11
  call void @llvm.lifetime.end(i64 1128, i8* nonnull %686) #11
  call void @llvm.lifetime.end(i64 1128, i8* nonnull %677) #11
  call void @llvm.lifetime.end(i64 1128, i8* nonnull %668) #11
  call void @llvm.lifetime.end(i64 1128, i8* nonnull %659) #11
  call void @llvm.lifetime.end(i64 1128, i8* nonnull %650) #11
  call void @llvm.lifetime.end(i64 8836, i8* nonnull %635) #11
  call void @llvm.lifetime.end(i64 8836, i8* nonnull %620) #11
  call void @llvm.lifetime.end(i64 8836, i8* nonnull %611) #11
  %8428 = load i32*, i32** %585, align 8, !tbaa !38
  %8429 = icmp eq i32* %8428, null
  br i1 %8429, label %8434, label %8430

; <label>:8430:                                   ; preds = %8427
  %8431 = getelementptr inbounds i32, i32* %8428, i64 -2
  %8432 = bitcast i32* %8431 to i8**
  %8433 = load i8*, i8** %8432, align 8, !tbaa !29
  call void @free(i8* %8433) #11
  br label %8434

; <label>:8434:                                   ; preds = %8427, %8430
  call void @llvm.lifetime.end(i64 16, i8* nonnull %583) #11
  %8435 = icmp eq i32* %574, null
  br i1 %8435, label %8440, label %8436

; <label>:8436:                                   ; preds = %8434
  %8437 = getelementptr inbounds i32, i32* %574, i64 -2
  %8438 = bitcast i32* %8437 to i8**
  %8439 = load i8*, i8** %8438, align 8, !tbaa !29
  call void @free(i8* %8439) #11
  br label %8440

; <label>:8440:                                   ; preds = %8434, %8436
  %8441 = load i32*, i32** %544, align 8, !tbaa !38
  %8442 = icmp eq i32* %8441, null
  br i1 %8442, label %8447, label %8443

; <label>:8443:                                   ; preds = %8440
  %8444 = getelementptr inbounds i32, i32* %8441, i64 -2
  %8445 = bitcast i32* %8444 to i8**
  %8446 = load i8*, i8** %8445, align 8, !tbaa !29
  call void @free(i8* %8446) #11
  br label %8447

; <label>:8447:                                   ; preds = %8440, %8443
  call void @llvm.lifetime.end(i64 16, i8* nonnull %542) #11
  %8448 = load i32*, i32** %522, align 8, !tbaa !38
  %8449 = icmp eq i32* %8448, null
  br i1 %8449, label %8454, label %8450

; <label>:8450:                                   ; preds = %8447
  %8451 = getelementptr inbounds i32, i32* %8448, i64 -2
  %8452 = bitcast i32* %8451 to i8**
  %8453 = load i8*, i8** %8452, align 8, !tbaa !29
  call void @free(i8* %8453) #11
  br label %8454

; <label>:8454:                                   ; preds = %8447, %8450
  call void @llvm.lifetime.end(i64 16, i8* nonnull %520) #11
  %8455 = load i32*, i32** %500, align 8, !tbaa !38
  %8456 = icmp eq i32* %8455, null
  br i1 %8456, label %8461, label %8457

; <label>:8457:                                   ; preds = %8454
  %8458 = getelementptr inbounds i32, i32* %8455, i64 -2
  %8459 = bitcast i32* %8458 to i8**
  %8460 = load i8*, i8** %8459, align 8, !tbaa !29
  call void @free(i8* %8460) #11
  br label %8461

; <label>:8461:                                   ; preds = %8454, %8457
  call void @llvm.lifetime.end(i64 16, i8* nonnull %498) #11
  %8462 = load i32*, i32** %478, align 8, !tbaa !38
  %8463 = icmp eq i32* %8462, null
  br i1 %8463, label %8468, label %8464

; <label>:8464:                                   ; preds = %8461
  %8465 = getelementptr inbounds i32, i32* %8462, i64 -2
  %8466 = bitcast i32* %8465 to i8**
  %8467 = load i8*, i8** %8466, align 8, !tbaa !29
  call void @free(i8* %8467) #11
  br label %8468

; <label>:8468:                                   ; preds = %8461, %8464
  call void @llvm.lifetime.end(i64 16, i8* nonnull %476) #11
  %8469 = load i32*, i32** %456, align 8, !tbaa !35
  %8470 = icmp eq i32* %8469, null
  br i1 %8470, label %8475, label %8471

; <label>:8471:                                   ; preds = %8468
  %8472 = getelementptr inbounds i32, i32* %8469, i64 -2
  %8473 = bitcast i32* %8472 to i8**
  %8474 = load i8*, i8** %8473, align 8, !tbaa !29
  call void @free(i8* %8474) #11
  br label %8475

; <label>:8475:                                   ; preds = %8468, %8471
  call void @llvm.lifetime.end(i64 16, i8* nonnull %454) #11
  %8476 = load i32*, i32** %434, align 8, !tbaa !35
  %8477 = icmp eq i32* %8476, null
  br i1 %8477, label %8482, label %8478

; <label>:8478:                                   ; preds = %8475
  %8479 = getelementptr inbounds i32, i32* %8476, i64 -2
  %8480 = bitcast i32* %8479 to i8**
  %8481 = load i8*, i8** %8480, align 8, !tbaa !29
  call void @free(i8* %8481) #11
  br label %8482

; <label>:8482:                                   ; preds = %8475, %8478
  call void @llvm.lifetime.end(i64 16, i8* nonnull %432) #11
  %8483 = load i32*, i32** %412, align 8, !tbaa !35
  %8484 = icmp eq i32* %8483, null
  br i1 %8484, label %8489, label %8485

; <label>:8485:                                   ; preds = %8482
  %8486 = getelementptr inbounds i32, i32* %8483, i64 -2
  %8487 = bitcast i32* %8486 to i8**
  %8488 = load i8*, i8** %8487, align 8, !tbaa !29
  call void @free(i8* %8488) #11
  br label %8489

; <label>:8489:                                   ; preds = %8482, %8485
  call void @llvm.lifetime.end(i64 16, i8* nonnull %410) #11
  %8490 = load i32*, i32** %390, align 8, !tbaa !35
  %8491 = icmp eq i32* %8490, null
  br i1 %8491, label %8496, label %8492

; <label>:8492:                                   ; preds = %8489
  %8493 = getelementptr inbounds i32, i32* %8490, i64 -2
  %8494 = bitcast i32* %8493 to i8**
  %8495 = load i8*, i8** %8494, align 8, !tbaa !29
  call void @free(i8* %8495) #11
  br label %8496

; <label>:8496:                                   ; preds = %8489, %8492
  call void @llvm.lifetime.end(i64 16, i8* nonnull %388) #11
  %8497 = load i32*, i32** %368, align 8, !tbaa !35
  %8498 = icmp eq i32* %8497, null
  br i1 %8498, label %8503, label %8499

; <label>:8499:                                   ; preds = %8496
  %8500 = getelementptr inbounds i32, i32* %8497, i64 -2
  %8501 = bitcast i32* %8500 to i8**
  %8502 = load i8*, i8** %8501, align 8, !tbaa !29
  call void @free(i8* %8502) #11
  br label %8503

; <label>:8503:                                   ; preds = %8496, %8499
  call void @llvm.lifetime.end(i64 16, i8* nonnull %366) #11
  %8504 = load i32*, i32** %346, align 8, !tbaa !35
  %8505 = icmp eq i32* %8504, null
  br i1 %8505, label %8510, label %8506

; <label>:8506:                                   ; preds = %8503
  %8507 = getelementptr inbounds i32, i32* %8504, i64 -2
  %8508 = bitcast i32* %8507 to i8**
  %8509 = load i8*, i8** %8508, align 8, !tbaa !29
  call void @free(i8* %8509) #11
  br label %8510

; <label>:8510:                                   ; preds = %8503, %8506
  call void @llvm.lifetime.end(i64 16, i8* nonnull %344) #11
  %8511 = load i32*, i32** %323, align 8, !tbaa !30
  %8512 = icmp eq i32* %8511, null
  br i1 %8512, label %8517, label %8513

; <label>:8513:                                   ; preds = %8510
  %8514 = getelementptr inbounds i32, i32* %8511, i64 -2
  %8515 = bitcast i32* %8514 to i8**
  %8516 = load i8*, i8** %8515, align 8, !tbaa !29
  call void @free(i8* %8516) #11
  br label %8517

; <label>:8517:                                   ; preds = %8510, %8513
  call void @llvm.lifetime.end(i64 24, i8* nonnull %321) #11
  %8518 = load i32*, i32** %300, align 8, !tbaa !30
  %8519 = icmp eq i32* %8518, null
  br i1 %8519, label %8524, label %8520

; <label>:8520:                                   ; preds = %8517
  %8521 = getelementptr inbounds i32, i32* %8518, i64 -2
  %8522 = bitcast i32* %8521 to i8**
  %8523 = load i8*, i8** %8522, align 8, !tbaa !29
  call void @free(i8* %8523) #11
  br label %8524

; <label>:8524:                                   ; preds = %8517, %8520
  call void @llvm.lifetime.end(i64 24, i8* nonnull %298) #11
  %8525 = load i32*, i32** %277, align 8, !tbaa !30
  %8526 = icmp eq i32* %8525, null
  br i1 %8526, label %8531, label %8527

; <label>:8527:                                   ; preds = %8524
  %8528 = getelementptr inbounds i32, i32* %8525, i64 -2
  %8529 = bitcast i32* %8528 to i8**
  %8530 = load i8*, i8** %8529, align 8, !tbaa !29
  call void @free(i8* %8530) #11
  br label %8531

; <label>:8531:                                   ; preds = %8524, %8527
  call void @llvm.lifetime.end(i64 24, i8* nonnull %275) #11
  %8532 = icmp eq i32* %266, null
  br i1 %8532, label %8537, label %8533

; <label>:8533:                                   ; preds = %8531
  %8534 = getelementptr inbounds i32, i32* %266, i64 -2
  %8535 = bitcast i32* %8534 to i8**
  %8536 = load i8*, i8** %8535, align 8, !tbaa !29
  call void @free(i8* %8536) #11
  br label %8537

; <label>:8537:                                   ; preds = %8531, %8533
  %8538 = load i32*, i32** %235, align 8, !tbaa !30
  %8539 = icmp eq i32* %8538, null
  br i1 %8539, label %8544, label %8540

; <label>:8540:                                   ; preds = %8537
  %8541 = getelementptr inbounds i32, i32* %8538, i64 -2
  %8542 = bitcast i32* %8541 to i8**
  %8543 = load i8*, i8** %8542, align 8, !tbaa !29
  call void @free(i8* %8543) #11
  br label %8544

; <label>:8544:                                   ; preds = %8537, %8540
  call void @llvm.lifetime.end(i64 24, i8* nonnull %233) #11
  %8545 = load i32*, i32** %212, align 8, !tbaa !30
  %8546 = icmp eq i32* %8545, null
  br i1 %8546, label %8551, label %8547

; <label>:8547:                                   ; preds = %8544
  %8548 = getelementptr inbounds i32, i32* %8545, i64 -2
  %8549 = bitcast i32* %8548 to i8**
  %8550 = load i8*, i8** %8549, align 8, !tbaa !29
  call void @free(i8* %8550) #11
  br label %8551

; <label>:8551:                                   ; preds = %8544, %8547
  call void @llvm.lifetime.end(i64 24, i8* nonnull %210) #11
  ret i32 0

; <label>:8552:                                   ; preds = %8237
  %8553 = getelementptr inbounds i32, i32* %8217, i64 %8268
  %8554 = getelementptr inbounds i32, i32* %574, i64 %8268
  %8555 = bitcast i32* %8554 to <4 x i32>*
  %8556 = load <4 x i32>, <4 x i32>* %8555, align 16, !tbaa !11
  %8557 = shl <4 x i32> %8556, <i32 1, i32 1, i32 1, i32 1>
  %8558 = mul <4 x i32> %8557, %8219
  %8559 = bitcast i32* %8553 to <4 x i32>*
  %8560 = load <4 x i32>, <4 x i32>* %8559, align 16, !tbaa !11
  %8561 = add <4 x i32> %8558, %8560
  store <4 x i32> %8561, <4 x i32>* %8559, align 16, !tbaa !11
  %8562 = add nsw i64 %8238, 16
  br label %8237

; <label>:8563:                                   ; preds = %7861
  %8564 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %119, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %8565 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %8566 = load i32, i32* %8565, align 4, !tbaa !33
  %8567 = load i32, i32* %8564, align 4, !tbaa !33
  %8568 = add nsw i32 %8567, %8566
  store i32 %8568, i32* %8564, align 4, !tbaa !33
  %8569 = icmp eq i64 %7827, 2
  br i1 %8569, label %7833, label %8570

; <label>:8570:                                   ; preds = %8563
  %8571 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %119, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %8572 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %8573 = load i32, i32* %8572, align 4, !tbaa !33
  %8574 = load i32, i32* %8571, align 4, !tbaa !33
  %8575 = add nsw i32 %8574, %8573
  store i32 %8575, i32* %8571, align 4, !tbaa !33
  br label %7833

; <label>:8576:                                   ; preds = %7427
  %8577 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %120, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %8578 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %8579 = load i32, i32* %8578, align 4, !tbaa !33
  %8580 = load i32, i32* %8577, align 4, !tbaa !33
  %8581 = sub nsw i32 %8580, %8579
  store i32 %8581, i32* %8577, align 4, !tbaa !33
  %8582 = icmp eq i64 %7393, 2
  br i1 %8582, label %7399, label %8583

; <label>:8583:                                   ; preds = %8576
  %8584 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %120, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %8585 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %8586 = load i32, i32* %8585, align 4, !tbaa !33
  %8587 = load i32, i32* %8584, align 4, !tbaa !33
  %8588 = sub nsw i32 %8587, %8586
  store i32 %8588, i32* %8584, align 4, !tbaa !33
  br label %7399

; <label>:8589:                                   ; preds = %7103
  %8590 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %8591 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %8592 = load i32, i32* %8591, align 4, !tbaa !33
  %8593 = load i32, i32* %8590, align 4, !tbaa !33
  %8594 = add nsw i32 %8593, %8592
  store i32 %8594, i32* %8590, align 4, !tbaa !33
  %8595 = icmp eq i64 %3343, 2
  br i1 %8595, label %7075, label %8596

; <label>:8596:                                   ; preds = %8589
  %8597 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %8598 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %8599 = load i32, i32* %8598, align 4, !tbaa !33
  %8600 = load i32, i32* %8597, align 4, !tbaa !33
  %8601 = add nsw i32 %8600, %8599
  store i32 %8601, i32* %8597, align 4, !tbaa !33
  br label %7075

; <label>:8602:                                   ; preds = %6849
  %8603 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %8604 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %8605 = load i32, i32* %8604, align 4, !tbaa !33
  %8606 = load i32, i32* %8603, align 4, !tbaa !33
  %8607 = sub nsw i32 %8606, %8605
  store i32 %8607, i32* %8603, align 4, !tbaa !33
  %8608 = icmp eq i64 %3075, 2
  br i1 %8608, label %6821, label %8609

; <label>:8609:                                   ; preds = %8602
  %8610 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %8611 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %8612 = load i32, i32* %8611, align 4, !tbaa !33
  %8613 = load i32, i32* %8610, align 4, !tbaa !33
  %8614 = sub nsw i32 %8613, %8612
  store i32 %8614, i32* %8610, align 4, !tbaa !33
  br label %6821

; <label>:8615:                                   ; preds = %6067
  %8616 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %122, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %8617 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %8618 = load i32, i32* %8617, align 4, !tbaa !33
  %8619 = load i32, i32* %8616, align 4, !tbaa !33
  %8620 = add nsw i32 %8619, %8618
  store i32 %8620, i32* %8616, align 4, !tbaa !33
  %8621 = icmp eq i64 %6033, 2
  br i1 %8621, label %6039, label %8622

; <label>:8622:                                   ; preds = %8615
  %8623 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %122, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %8624 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %8625 = load i32, i32* %8624, align 4, !tbaa !33
  %8626 = load i32, i32* %8623, align 4, !tbaa !33
  %8627 = add nsw i32 %8626, %8625
  store i32 %8627, i32* %8623, align 4, !tbaa !33
  br label %6039

; <label>:8628:                                   ; preds = %5063
  %8629 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %8630 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %53, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %8631 = load i32, i32* %8630, align 4, !tbaa !33
  %8632 = load i32, i32* %8629, align 4, !tbaa !33
  %8633 = add nsw i32 %8632, %8631
  store i32 %8633, i32* %8629, align 4, !tbaa !33
  %8634 = icmp eq i64 %3075, 2
  br i1 %8634, label %5035, label %8635

; <label>:8635:                                   ; preds = %8628
  %8636 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %8637 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %53, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %8638 = load i32, i32* %8637, align 4, !tbaa !33
  %8639 = load i32, i32* %8636, align 4, !tbaa !33
  %8640 = add nsw i32 %8639, %8638
  store i32 %8640, i32* %8636, align 4, !tbaa !33
  br label %5035

; <label>:8641:                                   ; preds = %3877
  %8642 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %8643 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %65, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %8644 = load i32, i32* %8643, align 4, !tbaa !33
  %8645 = load i32, i32* %8642, align 4, !tbaa !33
  %8646 = sub nsw i32 %8645, %8644
  store i32 %8646, i32* %8642, align 4, !tbaa !33
  %8647 = icmp eq i64 %3343, 2
  br i1 %8647, label %3849, label %8648

; <label>:8648:                                   ; preds = %8641
  %8649 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %8650 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %65, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %8651 = load i32, i32* %8650, align 4, !tbaa !33
  %8652 = load i32, i32* %8649, align 4, !tbaa !33
  %8653 = sub nsw i32 %8652, %8651
  store i32 %8653, i32* %8649, align 4, !tbaa !33
  br label %3849

; <label>:8654:                                   ; preds = %3377
  %8655 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %8656 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %80, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %8657 = load i32, i32* %8656, align 4, !tbaa !33
  %8658 = load i32, i32* %8655, align 4, !tbaa !33
  %8659 = add nsw i32 %8658, %8657
  store i32 %8659, i32* %8655, align 4, !tbaa !33
  %8660 = icmp eq i64 %3343, 2
  br i1 %8660, label %3349, label %8661

; <label>:8661:                                   ; preds = %8654
  %8662 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %126, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %8663 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %80, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %8664 = load i32, i32* %8663, align 4, !tbaa !33
  %8665 = load i32, i32* %8662, align 4, !tbaa !33
  %8666 = add nsw i32 %8665, %8664
  store i32 %8666, i32* %8662, align 4, !tbaa !33
  br label %3349

; <label>:8667:                                   ; preds = %3109
  %8668 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %8669 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %83, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %8670 = load i32, i32* %8669, align 4, !tbaa !33
  %8671 = load i32, i32* %8668, align 4, !tbaa !33
  %8672 = sub nsw i32 %8671, %8670
  store i32 %8672, i32* %8668, align 4, !tbaa !33
  %8673 = icmp eq i64 %3075, 2
  br i1 %8673, label %3081, label %8674

; <label>:8674:                                   ; preds = %8667
  %8675 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %121, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %8676 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %83, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %8677 = load i32, i32* %8676, align 4, !tbaa !33
  %8678 = load i32, i32* %8675, align 4, !tbaa !33
  %8679 = sub nsw i32 %8678, %8677
  store i32 %8679, i32* %8675, align 4, !tbaa !33
  br label %3081
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @__assert_rtn(i8*, i8*, i32, i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: nounwind readnone
declare <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double>) #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS3_IdLin1ELi1ELi0ELin1ELi1EEELi0EEELi7ENS_10DenseShapeES7_ddEC2ERKS6_(%"struct.Eigen::internal::product_evaluator"*, %"class.Eigen::Product"* dereferenceable(16)) unnamed_addr #6 align 2 {
  %3 = alloca %"class.Eigen::internal::const_blas_data_mapper", align 8
  %4 = alloca %"class.Eigen::internal::const_blas_data_mapper.498", align 8
  %5 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator", %"struct.Eigen::internal::product_evaluator"* %0, i64 0, i32 0, i32 0, i32 0
  store double* null, double** %5, align 8, !tbaa !23
  %6 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator", %"struct.Eigen::internal::product_evaluator"* %0, i64 0, i32 1
  %7 = bitcast %"class.Eigen::Product"* %1 to %"class.Eigen::PlainObjectBase"**
  %8 = load %"class.Eigen::PlainObjectBase"*, %"class.Eigen::PlainObjectBase"** %7, align 8, !tbaa !11
  %9 = getelementptr inbounds %"class.Eigen::PlainObjectBase", %"class.Eigen::PlainObjectBase"* %8, i64 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !32
  %11 = bitcast %"class.Eigen::Matrix.2"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %11, i8 0, i64 16, i32 8, i1 false) #11
  %12 = icmp sgt i64 %10, -1
  br i1 %12, label %14, label %13, !prof !10

; <label>:13:                                     ; preds = %2
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:14:                                     ; preds = %2
  %15 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator", %"struct.Eigen::internal::product_evaluator"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %16 = icmp eq i64 %10, 0
  br i1 %16, label %33, label %17

; <label>:17:                                     ; preds = %14
  %18 = getelementptr inbounds %"class.Eigen::Matrix.2", %"class.Eigen::Matrix.2"* %6, i64 0, i32 0, i32 0, i32 0
  %19 = shl i64 %10, 3
  %20 = add i64 %19, 32
  %21 = tail call i8* @malloc(i64 %20) #14
  %22 = icmp eq i8* %21, null
  br i1 %22, label %30, label %23

; <label>:23:                                     ; preds = %17
  %24 = ptrtoint i8* %21 to i64
  %25 = add i64 %24, 32
  %26 = and i64 %25, -32
  %27 = inttoptr i64 %26 to i8**
  %28 = getelementptr inbounds i8*, i8** %27, i64 -1
  store i8* %21, i8** %28, align 8, !tbaa !29
  %29 = inttoptr i64 %26 to double*
  br label %30

; <label>:30:                                     ; preds = %23, %17
  %31 = phi double* [ %29, %23 ], [ null, %17 ]
  store double* %31, double** %18, align 8, !tbaa !16
  %32 = ptrtoint double* %31 to i64
  br label %33

; <label>:33:                                     ; preds = %30, %14
  %34 = phi double* [ null, %14 ], [ %31, %30 ]
  %35 = phi i64 [ 0, %14 ], [ %32, %30 ]
  store i64 %10, i64* %15, align 8, !tbaa !8
  %36 = bitcast %"struct.Eigen::internal::product_evaluator"* %0 to i64*
  store i64 %35, i64* %36, align 8, !tbaa !23
  %37 = getelementptr inbounds %"class.Eigen::Product", %"class.Eigen::Product"* %1, i64 0, i32 0
  %38 = load %"class.Eigen::Matrix"*, %"class.Eigen::Matrix"** %37, align 8, !tbaa !11
  %39 = getelementptr inbounds %"class.Eigen::Product", %"class.Eigen::Product"* %1, i64 0, i32 1
  %40 = bitcast %"class.Eigen::Matrix.2"** %39 to i64**
  %41 = load i64*, i64** %40, align 8, !tbaa !11
  %42 = and i64 %10, -4
  %43 = icmp sgt i64 %10, 3
  br i1 %43, label %44, label %52

; <label>:44:                                     ; preds = %33
  %45 = bitcast double* %34 to i8*
  %46 = icmp sgt i64 %42, 4
  %47 = select i1 %46, i64 %42, i64 4
  %48 = add nuw i64 %47, 2305843009213693951
  %49 = lshr i64 %48, 2
  %50 = shl i64 %49, 5
  %51 = add i64 %50, 32
  call void @llvm.memset.p0i8.i64(i8* %45, i8 0, i64 %51, i32 16, i1 false)
  br label %52

; <label>:52:                                     ; preds = %44, %33
  %53 = icmp slt i64 %42, %10
  br i1 %53, label %54, label %61

; <label>:54:                                     ; preds = %52
  %55 = getelementptr double, double* %34, i64 %42
  %56 = bitcast double* %55 to i8*
  %57 = shl i64 %10, 3
  %58 = lshr i64 %10, 2
  %59 = shl i64 %58, 5
  %60 = sub i64 %57, %59
  call void @llvm.memset.p0i8.i64(i8* %56, i8 0, i64 %60, i32 8, i1 false)
  br label %61

; <label>:61:                                     ; preds = %54, %52
  %62 = getelementptr inbounds %"class.Eigen::Matrix", %"class.Eigen::Matrix"* %38, i64 0, i32 0, i32 0, i32 1
  %63 = load i64, i64* %62, align 8, !tbaa !15
  %64 = getelementptr inbounds %"class.Eigen::Matrix", %"class.Eigen::Matrix"* %38, i64 0, i32 0, i32 0, i32 2
  %65 = load i64, i64* %64, align 8, !tbaa !2
  %66 = bitcast %"class.Eigen::internal::const_blas_data_mapper"* %3 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %66) #11
  %67 = bitcast %"class.Eigen::Matrix"* %38 to i64*
  %68 = load i64, i64* %67, align 8, !tbaa !272
  %69 = bitcast %"class.Eigen::internal::const_blas_data_mapper"* %3 to i64*
  store i64 %68, i64* %69, align 8, !tbaa !273
  %70 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper", %"class.Eigen::internal::const_blas_data_mapper"* %3, i64 0, i32 0, i32 1
  store i64 %63, i64* %70, align 8, !tbaa !275
  %71 = bitcast %"class.Eigen::internal::const_blas_data_mapper.498"* %4 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %71) #11
  %72 = load i64, i64* %41, align 8, !tbaa !16
  %73 = bitcast %"class.Eigen::internal::const_blas_data_mapper.498"* %4 to i64*
  store i64 %72, i64* %73, align 8, !tbaa !276
  %74 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.498", %"class.Eigen::internal::const_blas_data_mapper.498"* %4, i64 0, i32 0, i32 1
  store i64 1, i64* %74, align 8, !tbaa !278
  %75 = getelementptr inbounds %"class.Eigen::Matrix.2", %"class.Eigen::Matrix.2"* %6, i64 0, i32 0, i32 0, i32 0
  %76 = load double*, double** %75, align 8, !tbaa !16
  call void @_ZN5Eigen8internal29general_matrix_vector_productIldNS0_22const_blas_data_mapperIdlLi0EEELi0ELb0EdNS2_IdlLi1EEELb0ELi0EE3runEllRKS3_RKS4_Pdld(i64 %63, i64 %65, %"class.Eigen::internal::const_blas_data_mapper"* nonnull dereferenceable(16) %3, %"class.Eigen::internal::const_blas_data_mapper.498"* nonnull dereferenceable(16) %4, double* %76, i64 1, double 1.000000e+00) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %71) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %66) #11
  ret void
}

; Function Attrs: nounwind allocsize(0)
declare noalias i8* @malloc(i64) local_unnamed_addr #7

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal29general_matrix_vector_productIldNS0_22const_blas_data_mapperIdlLi0EEELi0ELb0EdNS2_IdlLi1EEELb0ELi0EE3runEllRKS3_RKS4_Pdld(i64, i64, %"class.Eigen::internal::const_blas_data_mapper"* dereferenceable(16), %"class.Eigen::internal::const_blas_data_mapper.498"* dereferenceable(16), double*, i64, double) local_unnamed_addr #8 align 2 {
  %8 = bitcast double* %4 to i8*
  %9 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper", %"class.Eigen::internal::const_blas_data_mapper"* %2, i64 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !275
  %11 = ptrtoint double* %4 to i64
  %12 = and i64 %11, 7
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %14, label %20

; <label>:14:                                     ; preds = %7
  %15 = lshr i64 %11, 3
  %16 = sub nsw i64 0, %15
  %17 = and i64 %16, 3
  %18 = icmp slt i64 %17, %0
  %19 = select i1 %18, i64 %17, i64 %0
  br label %20

; <label>:20:                                     ; preds = %7, %14
  %21 = phi i64 [ %19, %14 ], [ %0, %7 ]
  %22 = sub nsw i64 %0, %21
  %23 = and i64 %22, -4
  %24 = add i64 %23, %21
  %25 = add nsw i64 %24, -11
  %26 = sub i64 0, %10
  %27 = and i64 %26, 3
  %28 = icmp eq i64 %27, 0
  %29 = icmp eq i64 %27, 2
  %30 = select i1 %29, i64 1, i64 2
  %31 = select i1 %28, i64 0, i64 %30
  %32 = bitcast %"class.Eigen::internal::const_blas_data_mapper"* %2 to i64*
  %33 = load i64, i64* %32, align 8, !tbaa !273
  %34 = and i64 %33, 7
  %35 = icmp eq i64 %34, 0
  %36 = inttoptr i64 %33 to double*
  br i1 %35, label %37, label %58

; <label>:37:                                     ; preds = %20
  %38 = lshr i64 %33, 3
  %39 = sub nsw i64 0, %38
  %40 = and i64 %39, 3
  %41 = icmp slt i64 %40, %0
  %42 = select i1 %41, i64 %40, i64 %0
  %43 = icmp slt i64 %42, 0
  %44 = icmp sge i64 %40, %0
  %45 = or i1 %44, %43
  br i1 %45, label %58, label %46

; <label>:46:                                     ; preds = %37
  br i1 %13, label %47, label %58

; <label>:47:                                     ; preds = %46
  %48 = srem i64 %42, 4
  %49 = icmp eq i64 %21, %48
  br i1 %49, label %54, label %50

; <label>:50:                                     ; preds = %47
  %51 = add nsw i64 %27, %42
  %52 = srem i64 %51, 4
  %53 = icmp eq i64 %21, %52
  br i1 %53, label %54, label %2165

; <label>:54:                                     ; preds = %47, %50, %2165, %2170
  %55 = phi i64 [ 0, %47 ], [ 1, %50 ], [ 2, %2165 ], [ 3, %2170 ]
  %56 = icmp sgt i64 %55, %1
  %57 = select i1 %56, i64 %1, i64 %55
  br label %58

; <label>:58:                                     ; preds = %2170, %20, %37, %46, %54
  %59 = phi i64 [ 0, %37 ], [ %57, %54 ], [ 0, %46 ], [ 0, %20 ], [ 0, %2170 ]
  %60 = phi i64 [ 3, %37 ], [ %31, %54 ], [ 3, %46 ], [ 3, %20 ], [ 3, %2170 ]
  %61 = phi i64 [ 0, %37 ], [ %24, %54 ], [ 0, %46 ], [ 0, %20 ], [ %24, %2170 ]
  %62 = phi i64 [ 0, %37 ], [ %21, %54 ], [ 0, %46 ], [ 0, %20 ], [ %21, %2170 ]
  %63 = icmp eq i64 %27, 1
  %64 = select i1 %63, i64 3, i64 1
  %65 = select i1 %63, i64 1, i64 3
  %66 = sub nsw i64 %1, %59
  %67 = sdiv i64 %66, 4
  %68 = shl nsw i64 %67, 2
  %69 = add nsw i64 %68, %59
  %70 = icmp sgt i64 %66, 3
  %71 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.498", %"class.Eigen::internal::const_blas_data_mapper.498"* %3, i64 0, i32 0, i32 0
  %72 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.498", %"class.Eigen::internal::const_blas_data_mapper.498"* %3, i64 0, i32 0, i32 1
  %73 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper", %"class.Eigen::internal::const_blas_data_mapper"* %2, i64 0, i32 0, i32 0
  br i1 %70, label %74, label %160

; <label>:74:                                     ; preds = %58
  %75 = icmp sgt i64 %62, 0
  %76 = icmp sgt i64 %61, %62
  %77 = add nsw i64 %62, -1
  %78 = add nsw i64 %62, -2
  %79 = add nsw i64 %62, -3
  %80 = icmp slt i64 %62, %25
  %81 = icmp slt i64 %61, %0
  %82 = add i64 %24, -12
  %83 = sub i64 %82, %62
  %84 = and i64 %83, -8
  %85 = add i64 %62, %84
  %86 = add i64 %85, 8
  %87 = sub i64 %0, %61
  %88 = getelementptr double, double* %4, i64 %61
  %89 = bitcast double* %88 to i8*
  %90 = getelementptr double, double* %4, i64 %0
  %91 = bitcast double* %90 to i8*
  %92 = add i64 %65, %59
  %93 = shl i64 %92, 3
  %94 = shl i64 %59, 3
  %95 = add i64 %94, 16
  %96 = add i64 %64, %59
  %97 = shl i64 %96, 3
  %98 = getelementptr double, double* %4, i64 %62
  %99 = add i64 %65, %59
  %100 = shl i64 %99, 3
  %101 = shl i64 %59, 3
  %102 = add i64 %101, 16
  %103 = add i64 %64, %59
  %104 = shl i64 %103, 3
  %105 = add i64 %62, -4
  %106 = lshr i64 %105, 2
  %107 = add i64 %62, -1
  %108 = add i64 %61, -1
  %109 = sub i64 %108, %62
  %110 = lshr i64 %109, 2
  %111 = add nuw nsw i64 %110, 1
  %112 = add i64 %87, -4
  %113 = lshr i64 %112, 2
  %114 = add i64 %0, -1
  %115 = icmp ult i64 %62, 4
  %116 = and i64 %62, -4
  %117 = icmp eq i64 %116, 0
  %118 = and i64 %106, 1
  %119 = icmp eq i64 %118, 0
  %120 = bitcast double* %4 to <4 x double>*
  %121 = bitcast double* %4 to <4 x double>*
  %122 = bitcast double* %4 to <4 x double>*
  %123 = bitcast double* %4 to <4 x double>*
  %124 = bitcast double* %4 to <4 x double>*
  %125 = icmp eq i64 %106, 0
  %126 = icmp eq i64 %62, %116
  %127 = and i64 %111, 1
  %128 = icmp eq i64 %127, 0
  %129 = getelementptr inbounds double, double* %4, i64 %62
  %130 = bitcast double* %129 to <4 x double>*
  %131 = add nsw i64 %62, 4
  %132 = icmp eq i64 %110, 0
  %133 = and i64 %111, 1
  %134 = icmp eq i64 %133, 0
  %135 = getelementptr inbounds double, double* %4, i64 %62
  %136 = bitcast double* %135 to <4 x double>*
  %137 = add nsw i64 %62, 4
  %138 = icmp eq i64 %110, 0
  %139 = and i64 %111, 1
  %140 = icmp eq i64 %139, 0
  %141 = getelementptr inbounds double, double* %4, i64 %62
  %142 = bitcast double* %141 to <4 x double>*
  %143 = add nsw i64 %62, 4
  %144 = icmp eq i64 %110, 0
  %145 = icmp ult i64 %87, 4
  %146 = and i64 %87, -4
  %147 = icmp eq i64 %146, 0
  %148 = add i64 %61, %146
  %149 = and i64 %113, 1
  %150 = icmp eq i64 %149, 0
  %151 = getelementptr inbounds double, double* %4, i64 %61
  %152 = bitcast double* %151 to <4 x double>*
  %153 = bitcast double* %151 to <4 x double>*
  %154 = bitcast double* %151 to <4 x double>*
  %155 = bitcast double* %151 to <4 x double>*
  %156 = bitcast double* %151 to <4 x double>*
  %157 = icmp eq i64 %113, 0
  %158 = icmp eq i64 %87, %146
  br label %258

; <label>:159:                                    ; preds = %1071
  br label %160

; <label>:160:                                    ; preds = %159, %58
  %161 = icmp sgt i64 %62, 0
  %162 = icmp slt i64 %61, %0
  %163 = icmp slt i64 %62, %61
  %164 = sub i64 %0, %61
  %165 = getelementptr double, double* %4, i64 %61
  %166 = bitcast double* %165 to i8*
  %167 = getelementptr double, double* %4, i64 %0
  %168 = bitcast double* %167 to i8*
  %169 = getelementptr double, double* %4, i64 %62
  %170 = sub i64 %0, %61
  %171 = getelementptr double, double* %4, i64 %61
  %172 = bitcast double* %171 to i8*
  %173 = getelementptr double, double* %4, i64 %0
  %174 = bitcast double* %173 to i8*
  %175 = add i64 %61, -1
  %176 = sub i64 %175, %62
  %177 = lshr i64 %176, 2
  %178 = add nuw nsw i64 %177, 1
  %179 = add i64 %170, -16
  %180 = lshr i64 %179, 4
  %181 = add nuw nsw i64 %180, 1
  %182 = add i64 %0, -1
  %183 = add i64 %62, -16
  %184 = lshr i64 %183, 4
  %185 = add i64 %62, -1
  %186 = add nuw nsw i64 %177, 1
  %187 = add i64 %0, -1
  %188 = icmp ult i64 %62, 16
  %189 = and i64 %186, 7
  %190 = icmp eq i64 %189, 0
  %191 = icmp ult i64 %176, 28
  %192 = icmp ult i64 %164, 16
  %193 = and i64 %164, -16
  %194 = icmp eq i64 %193, 0
  %195 = add i64 %61, %193
  %196 = and i64 %181, 1
  %197 = icmp eq i64 %196, 0
  %198 = getelementptr inbounds double, double* %4, i64 %61
  %199 = bitcast double* %198 to <4 x double>*
  %200 = getelementptr double, double* %198, i64 4
  %201 = bitcast double* %200 to <4 x double>*
  %202 = getelementptr double, double* %198, i64 8
  %203 = bitcast double* %202 to <4 x double>*
  %204 = getelementptr double, double* %198, i64 12
  %205 = bitcast double* %204 to <4 x double>*
  %206 = bitcast double* %198 to <4 x double>*
  %207 = bitcast double* %200 to <4 x double>*
  %208 = bitcast double* %202 to <4 x double>*
  %209 = bitcast double* %204 to <4 x double>*
  %210 = icmp eq i64 %180, 0
  %211 = icmp eq i64 %164, %193
  %212 = and i64 %186, 7
  %213 = icmp eq i64 %212, 0
  %214 = icmp ult i64 %176, 28
  %215 = and i64 %62, -16
  %216 = icmp eq i64 %215, 0
  %217 = and i64 %184, 1
  %218 = icmp eq i64 %217, 0
  %219 = bitcast double* %4 to <4 x double>*
  %220 = getelementptr double, double* %4, i64 4
  %221 = bitcast double* %220 to <4 x double>*
  %222 = getelementptr double, double* %4, i64 8
  %223 = bitcast double* %222 to <4 x double>*
  %224 = getelementptr double, double* %4, i64 12
  %225 = bitcast double* %224 to <4 x double>*
  %226 = bitcast double* %4 to <4 x double>*
  %227 = bitcast double* %220 to <4 x double>*
  %228 = bitcast double* %222 to <4 x double>*
  %229 = bitcast double* %224 to <4 x double>*
  %230 = icmp eq i64 %184, 0
  %231 = icmp eq i64 %62, %215
  %232 = and i64 %178, 7
  %233 = icmp eq i64 %232, 0
  %234 = icmp ult i64 %176, 28
  %235 = icmp ult i64 %170, 16
  %236 = and i64 %170, -16
  %237 = icmp eq i64 %236, 0
  %238 = add i64 %61, %236
  %239 = and i64 %181, 1
  %240 = icmp eq i64 %239, 0
  %241 = getelementptr inbounds double, double* %4, i64 %61
  %242 = bitcast double* %241 to <4 x double>*
  %243 = getelementptr double, double* %241, i64 4
  %244 = bitcast double* %243 to <4 x double>*
  %245 = getelementptr double, double* %241, i64 8
  %246 = bitcast double* %245 to <4 x double>*
  %247 = getelementptr double, double* %241, i64 12
  %248 = bitcast double* %247 to <4 x double>*
  %249 = bitcast double* %241 to <4 x double>*
  %250 = bitcast double* %243 to <4 x double>*
  %251 = bitcast double* %245 to <4 x double>*
  %252 = bitcast double* %247 to <4 x double>*
  %253 = icmp eq i64 %180, 0
  %254 = icmp eq i64 %170, %236
  %255 = and i64 %178, 7
  %256 = icmp eq i64 %255, 0
  %257 = icmp ult i64 %176, 28
  br label %1111

; <label>:258:                                    ; preds = %1074, %74
  %259 = phi i64 [ %1077, %1074 ], [ 0, %74 ]
  %260 = phi i64 [ %1076, %1074 ], [ %10, %74 ]
  %261 = phi double* [ %1075, %1074 ], [ %36, %74 ]
  %262 = phi i64 [ %1072, %1074 ], [ %59, %74 ]
  %263 = shl i64 %259, 5
  %264 = add i64 %100, %263
  %265 = add i64 %102, %263
  %266 = add i64 %104, %263
  %267 = add i64 %101, %263
  %268 = shl i64 %259, 5
  %269 = add i64 %93, %268
  %270 = add i64 %95, %268
  %271 = add i64 %97, %268
  %272 = add i64 %94, %268
  %273 = load double*, double** %71, align 8, !tbaa !276
  %274 = load i64, i64* %72, align 8, !tbaa !278
  %275 = mul nsw i64 %274, %262
  %276 = getelementptr inbounds double, double* %273, i64 %275
  %277 = load double, double* %276, align 8, !tbaa !19
  %278 = fmul double %277, %6
  %279 = insertelement <4 x double> undef, double %278, i32 0
  %280 = shufflevector <4 x double> %279, <4 x double> undef, <4 x i32> zeroinitializer
  %281 = add nsw i64 %262, %64
  %282 = mul nsw i64 %274, %281
  %283 = getelementptr inbounds double, double* %273, i64 %282
  %284 = load double, double* %283, align 8, !tbaa !19
  %285 = fmul double %284, %6
  %286 = insertelement <4 x double> undef, double %285, i32 0
  %287 = shufflevector <4 x double> %286, <4 x double> undef, <4 x i32> zeroinitializer
  %288 = add nsw i64 %262, 2
  %289 = mul nsw i64 %274, %288
  %290 = getelementptr inbounds double, double* %273, i64 %289
  %291 = load double, double* %290, align 8, !tbaa !19
  %292 = fmul double %291, %6
  %293 = insertelement <4 x double> undef, double %292, i32 0
  %294 = shufflevector <4 x double> %293, <4 x double> undef, <4 x i32> zeroinitializer
  %295 = add nsw i64 %262, %65
  %296 = mul nsw i64 %274, %295
  %297 = getelementptr inbounds double, double* %273, i64 %296
  %298 = load double, double* %297, align 8, !tbaa !19
  %299 = fmul double %298, %6
  %300 = insertelement <4 x double> undef, double %299, i32 0
  %301 = shufflevector <4 x double> %300, <4 x double> undef, <4 x i32> zeroinitializer
  %302 = mul nsw i64 %260, %262
  %303 = getelementptr inbounds double, double* %261, i64 %302
  %304 = mul nsw i64 %260, %281
  %305 = getelementptr inbounds double, double* %261, i64 %304
  %306 = mul nsw i64 %260, %288
  %307 = getelementptr inbounds double, double* %261, i64 %306
  %308 = mul nsw i64 %260, %295
  %309 = getelementptr inbounds double, double* %261, i64 %308
  br i1 %75, label %310, label %454

; <label>:310:                                    ; preds = %258
  br i1 %115, label %311, label %338

; <label>:311:                                    ; preds = %451, %339, %338, %310
  %312 = phi i64 [ 0, %339 ], [ 0, %338 ], [ 0, %310 ], [ %116, %451 ]
  %313 = sub i64 %62, %312
  %314 = and i64 %313, 1
  %315 = icmp eq i64 %314, 0
  br i1 %315, label %333, label %316

; <label>:316:                                    ; preds = %311
  br label %317

; <label>:317:                                    ; preds = %316
  %318 = getelementptr inbounds double, double* %303, i64 %312
  %319 = load double, double* %318, align 8, !tbaa !19
  %320 = getelementptr inbounds double, double* %4, i64 %312
  %321 = load double, double* %320, align 8, !tbaa !19
  %322 = tail call double @llvm.fma.f64(double %319, double %278, double %321) #11
  store double %322, double* %320, align 8, !tbaa !19
  %323 = getelementptr inbounds double, double* %305, i64 %312
  %324 = load double, double* %323, align 8, !tbaa !19
  %325 = tail call double @llvm.fma.f64(double %324, double %285, double %322) #11
  store double %325, double* %320, align 8, !tbaa !19
  %326 = getelementptr inbounds double, double* %307, i64 %312
  %327 = load double, double* %326, align 8, !tbaa !19
  %328 = tail call double @llvm.fma.f64(double %327, double %292, double %325) #11
  store double %328, double* %320, align 8, !tbaa !19
  %329 = getelementptr inbounds double, double* %309, i64 %312
  %330 = load double, double* %329, align 8, !tbaa !19
  %331 = tail call double @llvm.fma.f64(double %330, double %299, double %328) #11
  store double %331, double* %320, align 8, !tbaa !19
  %332 = or i64 %312, 1
  br label %333

; <label>:333:                                    ; preds = %311, %317
  %334 = phi i64 [ %332, %317 ], [ %312, %311 ]
  br label %335

; <label>:335:                                    ; preds = %333
  %336 = icmp eq i64 %107, %312
  br i1 %336, label %453, label %337

; <label>:337:                                    ; preds = %335
  br label %624

; <label>:338:                                    ; preds = %310
  br i1 %117, label %311, label %339

; <label>:339:                                    ; preds = %338
  %340 = getelementptr double, double* %261, i64 %62
  %341 = bitcast double* %340 to i8*
  %342 = mul i64 %260, %264
  %343 = getelementptr i8, i8* %341, i64 %342
  %344 = getelementptr double, double* %261, i64 %62
  %345 = bitcast double* %344 to i8*
  %346 = mul i64 %260, %265
  %347 = getelementptr i8, i8* %345, i64 %346
  %348 = getelementptr double, double* %261, i64 %62
  %349 = bitcast double* %348 to i8*
  %350 = mul i64 %260, %266
  %351 = getelementptr i8, i8* %349, i64 %350
  %352 = getelementptr double, double* %261, i64 %62
  %353 = bitcast double* %352 to i8*
  %354 = mul i64 %260, %267
  %355 = getelementptr i8, i8* %353, i64 %354
  %356 = icmp ult i8* %8, %343
  %357 = icmp ult double* %309, %98
  %358 = and i1 %356, %357
  %359 = icmp ult i8* %8, %347
  %360 = icmp ult double* %307, %98
  %361 = and i1 %359, %360
  %362 = or i1 %358, %361
  %363 = icmp ult i8* %8, %351
  %364 = icmp ult double* %305, %98
  %365 = and i1 %363, %364
  %366 = or i1 %362, %365
  %367 = icmp ult i8* %8, %355
  %368 = icmp ult double* %303, %98
  %369 = and i1 %367, %368
  %370 = or i1 %366, %369
  br i1 %370, label %311, label %371

; <label>:371:                                    ; preds = %339
  %372 = insertelement <4 x double> undef, double %278, i32 0
  %373 = shufflevector <4 x double> %372, <4 x double> undef, <4 x i32> zeroinitializer
  %374 = insertelement <4 x double> undef, double %285, i32 0
  %375 = shufflevector <4 x double> %374, <4 x double> undef, <4 x i32> zeroinitializer
  %376 = insertelement <4 x double> undef, double %292, i32 0
  %377 = shufflevector <4 x double> %376, <4 x double> undef, <4 x i32> zeroinitializer
  %378 = insertelement <4 x double> undef, double %299, i32 0
  %379 = shufflevector <4 x double> %378, <4 x double> undef, <4 x i32> zeroinitializer
  br i1 %119, label %380, label %395

; <label>:380:                                    ; preds = %371
  br label %381

; <label>:381:                                    ; preds = %380
  %382 = bitcast double* %303 to <4 x double>*
  %383 = load <4 x double>, <4 x double>* %382, align 8, !tbaa !19, !alias.scope !279
  %384 = load <4 x double>, <4 x double>* %120, align 8, !tbaa !19, !alias.scope !282, !noalias !284
  %385 = call <4 x double> @llvm.fma.v4f64(<4 x double> %383, <4 x double> %373, <4 x double> %384)
  store <4 x double> %385, <4 x double>* %121, align 8, !tbaa !19, !alias.scope !282, !noalias !284
  %386 = bitcast double* %305 to <4 x double>*
  %387 = load <4 x double>, <4 x double>* %386, align 8, !tbaa !19, !alias.scope !288
  %388 = call <4 x double> @llvm.fma.v4f64(<4 x double> %387, <4 x double> %375, <4 x double> %385)
  store <4 x double> %388, <4 x double>* %122, align 8, !tbaa !19, !alias.scope !282, !noalias !284
  %389 = bitcast double* %307 to <4 x double>*
  %390 = load <4 x double>, <4 x double>* %389, align 8, !tbaa !19, !alias.scope !289
  %391 = call <4 x double> @llvm.fma.v4f64(<4 x double> %390, <4 x double> %377, <4 x double> %388)
  store <4 x double> %391, <4 x double>* %123, align 8, !tbaa !19, !alias.scope !282, !noalias !284
  %392 = bitcast double* %309 to <4 x double>*
  %393 = load <4 x double>, <4 x double>* %392, align 8, !tbaa !19, !alias.scope !290
  %394 = call <4 x double> @llvm.fma.v4f64(<4 x double> %393, <4 x double> %379, <4 x double> %391)
  store <4 x double> %394, <4 x double>* %124, align 8, !tbaa !19, !alias.scope !282, !noalias !284
  br label %395

; <label>:395:                                    ; preds = %371, %381
  %396 = phi i64 [ 4, %381 ], [ 0, %371 ]
  br label %397

; <label>:397:                                    ; preds = %395
  br i1 %125, label %451, label %398

; <label>:398:                                    ; preds = %397
  br label %399

; <label>:399:                                    ; preds = %399, %398
  %400 = phi i64 [ %396, %398 ], [ %448, %399 ]
  %401 = getelementptr inbounds double, double* %303, i64 %400
  %402 = bitcast double* %401 to <4 x double>*
  %403 = load <4 x double>, <4 x double>* %402, align 8, !tbaa !19, !alias.scope !279
  %404 = getelementptr inbounds double, double* %4, i64 %400
  %405 = bitcast double* %404 to <4 x double>*
  %406 = load <4 x double>, <4 x double>* %405, align 8, !tbaa !19, !alias.scope !282, !noalias !284
  %407 = call <4 x double> @llvm.fma.v4f64(<4 x double> %403, <4 x double> %373, <4 x double> %406)
  %408 = bitcast double* %404 to <4 x double>*
  store <4 x double> %407, <4 x double>* %408, align 8, !tbaa !19, !alias.scope !282, !noalias !284
  %409 = getelementptr inbounds double, double* %305, i64 %400
  %410 = bitcast double* %409 to <4 x double>*
  %411 = load <4 x double>, <4 x double>* %410, align 8, !tbaa !19, !alias.scope !288
  %412 = call <4 x double> @llvm.fma.v4f64(<4 x double> %411, <4 x double> %375, <4 x double> %407)
  %413 = bitcast double* %404 to <4 x double>*
  store <4 x double> %412, <4 x double>* %413, align 8, !tbaa !19, !alias.scope !282, !noalias !284
  %414 = getelementptr inbounds double, double* %307, i64 %400
  %415 = bitcast double* %414 to <4 x double>*
  %416 = load <4 x double>, <4 x double>* %415, align 8, !tbaa !19, !alias.scope !289
  %417 = call <4 x double> @llvm.fma.v4f64(<4 x double> %416, <4 x double> %377, <4 x double> %412)
  %418 = bitcast double* %404 to <4 x double>*
  store <4 x double> %417, <4 x double>* %418, align 8, !tbaa !19, !alias.scope !282, !noalias !284
  %419 = getelementptr inbounds double, double* %309, i64 %400
  %420 = bitcast double* %419 to <4 x double>*
  %421 = load <4 x double>, <4 x double>* %420, align 8, !tbaa !19, !alias.scope !290
  %422 = call <4 x double> @llvm.fma.v4f64(<4 x double> %421, <4 x double> %379, <4 x double> %417)
  %423 = bitcast double* %404 to <4 x double>*
  store <4 x double> %422, <4 x double>* %423, align 8, !tbaa !19, !alias.scope !282, !noalias !284
  %424 = add i64 %400, 4
  %425 = getelementptr inbounds double, double* %303, i64 %424
  %426 = bitcast double* %425 to <4 x double>*
  %427 = load <4 x double>, <4 x double>* %426, align 8, !tbaa !19, !alias.scope !279
  %428 = getelementptr inbounds double, double* %4, i64 %424
  %429 = bitcast double* %428 to <4 x double>*
  %430 = load <4 x double>, <4 x double>* %429, align 8, !tbaa !19, !alias.scope !282, !noalias !284
  %431 = call <4 x double> @llvm.fma.v4f64(<4 x double> %427, <4 x double> %373, <4 x double> %430)
  %432 = bitcast double* %428 to <4 x double>*
  store <4 x double> %431, <4 x double>* %432, align 8, !tbaa !19, !alias.scope !282, !noalias !284
  %433 = getelementptr inbounds double, double* %305, i64 %424
  %434 = bitcast double* %433 to <4 x double>*
  %435 = load <4 x double>, <4 x double>* %434, align 8, !tbaa !19, !alias.scope !288
  %436 = call <4 x double> @llvm.fma.v4f64(<4 x double> %435, <4 x double> %375, <4 x double> %431)
  %437 = bitcast double* %428 to <4 x double>*
  store <4 x double> %436, <4 x double>* %437, align 8, !tbaa !19, !alias.scope !282, !noalias !284
  %438 = getelementptr inbounds double, double* %307, i64 %424
  %439 = bitcast double* %438 to <4 x double>*
  %440 = load <4 x double>, <4 x double>* %439, align 8, !tbaa !19, !alias.scope !289
  %441 = call <4 x double> @llvm.fma.v4f64(<4 x double> %440, <4 x double> %377, <4 x double> %436)
  %442 = bitcast double* %428 to <4 x double>*
  store <4 x double> %441, <4 x double>* %442, align 8, !tbaa !19, !alias.scope !282, !noalias !284
  %443 = getelementptr inbounds double, double* %309, i64 %424
  %444 = bitcast double* %443 to <4 x double>*
  %445 = load <4 x double>, <4 x double>* %444, align 8, !tbaa !19, !alias.scope !290
  %446 = call <4 x double> @llvm.fma.v4f64(<4 x double> %445, <4 x double> %379, <4 x double> %441)
  %447 = bitcast double* %428 to <4 x double>*
  store <4 x double> %446, <4 x double>* %447, align 8, !tbaa !19, !alias.scope !282, !noalias !284
  %448 = add i64 %400, 8
  %449 = icmp eq i64 %448, %116
  br i1 %449, label %450, label %399, !llvm.loop !291

; <label>:450:                                    ; preds = %399
  br label %451

; <label>:451:                                    ; preds = %397, %450
  br i1 %126, label %454, label %311

; <label>:452:                                    ; preds = %624
  br label %453

; <label>:453:                                    ; preds = %335, %452
  br label %454

; <label>:454:                                    ; preds = %453, %451, %258
  br i1 %76, label %657, label %463

; <label>:455:                                    ; preds = %1018
  br label %456

; <label>:456:                                    ; preds = %740, %455
  br label %463

; <label>:457:                                    ; preds = %742
  br label %458

; <label>:458:                                    ; preds = %712, %457
  br label %463

; <label>:459:                                    ; preds = %793
  br label %460

; <label>:460:                                    ; preds = %684, %459
  br label %463

; <label>:461:                                    ; preds = %967
  br label %462

; <label>:462:                                    ; preds = %892, %461
  br label %463

; <label>:463:                                    ; preds = %462, %460, %458, %456, %856, %454
  br i1 %81, label %464, label %1071

; <label>:464:                                    ; preds = %463
  br i1 %145, label %465, label %492

; <label>:465:                                    ; preds = %623, %493, %492, %464
  %466 = phi i64 [ %61, %493 ], [ %61, %492 ], [ %61, %464 ], [ %148, %623 ]
  %467 = sub i64 %0, %466
  %468 = and i64 %467, 1
  %469 = icmp eq i64 %468, 0
  br i1 %469, label %487, label %470

; <label>:470:                                    ; preds = %465
  br label %471

; <label>:471:                                    ; preds = %470
  %472 = getelementptr inbounds double, double* %303, i64 %466
  %473 = load double, double* %472, align 8, !tbaa !19
  %474 = getelementptr inbounds double, double* %4, i64 %466
  %475 = load double, double* %474, align 8, !tbaa !19
  %476 = tail call double @llvm.fma.f64(double %473, double %278, double %475) #11
  store double %476, double* %474, align 8, !tbaa !19
  %477 = getelementptr inbounds double, double* %305, i64 %466
  %478 = load double, double* %477, align 8, !tbaa !19
  %479 = tail call double @llvm.fma.f64(double %478, double %285, double %476) #11
  store double %479, double* %474, align 8, !tbaa !19
  %480 = getelementptr inbounds double, double* %307, i64 %466
  %481 = load double, double* %480, align 8, !tbaa !19
  %482 = tail call double @llvm.fma.f64(double %481, double %292, double %479) #11
  store double %482, double* %474, align 8, !tbaa !19
  %483 = getelementptr inbounds double, double* %309, i64 %466
  %484 = load double, double* %483, align 8, !tbaa !19
  %485 = tail call double @llvm.fma.f64(double %484, double %299, double %482) #11
  store double %485, double* %474, align 8, !tbaa !19
  %486 = add nsw i64 %466, 1
  br label %487

; <label>:487:                                    ; preds = %465, %471
  %488 = phi i64 [ %486, %471 ], [ %466, %465 ]
  br label %489

; <label>:489:                                    ; preds = %487
  %490 = icmp eq i64 %114, %466
  br i1 %490, label %1070, label %491

; <label>:491:                                    ; preds = %489
  br label %1078

; <label>:492:                                    ; preds = %464
  br i1 %147, label %465, label %493

; <label>:493:                                    ; preds = %492
  %494 = getelementptr double, double* %261, i64 %61
  %495 = bitcast double* %494 to i8*
  %496 = mul i64 %260, %269
  %497 = getelementptr i8, i8* %495, i64 %496
  %498 = getelementptr double, double* %261, i64 %0
  %499 = bitcast double* %498 to i8*
  %500 = getelementptr i8, i8* %499, i64 %496
  %501 = getelementptr double, double* %261, i64 %61
  %502 = bitcast double* %501 to i8*
  %503 = mul i64 %260, %270
  %504 = getelementptr i8, i8* %502, i64 %503
  %505 = getelementptr double, double* %261, i64 %0
  %506 = bitcast double* %505 to i8*
  %507 = getelementptr i8, i8* %506, i64 %503
  %508 = getelementptr double, double* %261, i64 %61
  %509 = bitcast double* %508 to i8*
  %510 = mul i64 %260, %271
  %511 = getelementptr i8, i8* %509, i64 %510
  %512 = getelementptr double, double* %261, i64 %0
  %513 = bitcast double* %512 to i8*
  %514 = getelementptr i8, i8* %513, i64 %510
  %515 = getelementptr double, double* %261, i64 %61
  %516 = bitcast double* %515 to i8*
  %517 = mul i64 %260, %272
  %518 = getelementptr i8, i8* %516, i64 %517
  %519 = getelementptr double, double* %261, i64 %0
  %520 = bitcast double* %519 to i8*
  %521 = getelementptr i8, i8* %520, i64 %517
  %522 = icmp ult i8* %89, %500
  %523 = icmp ult i8* %497, %91
  %524 = and i1 %522, %523
  %525 = icmp ult i8* %89, %507
  %526 = icmp ult i8* %504, %91
  %527 = and i1 %525, %526
  %528 = or i1 %524, %527
  %529 = icmp ult i8* %89, %514
  %530 = icmp ult i8* %511, %91
  %531 = and i1 %529, %530
  %532 = or i1 %528, %531
  %533 = icmp ult i8* %89, %521
  %534 = icmp ult i8* %518, %91
  %535 = and i1 %533, %534
  %536 = or i1 %532, %535
  br i1 %536, label %465, label %537

; <label>:537:                                    ; preds = %493
  %538 = insertelement <4 x double> undef, double %278, i32 0
  %539 = shufflevector <4 x double> %538, <4 x double> undef, <4 x i32> zeroinitializer
  %540 = insertelement <4 x double> undef, double %285, i32 0
  %541 = shufflevector <4 x double> %540, <4 x double> undef, <4 x i32> zeroinitializer
  %542 = insertelement <4 x double> undef, double %292, i32 0
  %543 = shufflevector <4 x double> %542, <4 x double> undef, <4 x i32> zeroinitializer
  %544 = insertelement <4 x double> undef, double %299, i32 0
  %545 = shufflevector <4 x double> %544, <4 x double> undef, <4 x i32> zeroinitializer
  br i1 %150, label %546, label %565

; <label>:546:                                    ; preds = %537
  br label %547

; <label>:547:                                    ; preds = %546
  %548 = getelementptr inbounds double, double* %303, i64 %61
  %549 = bitcast double* %548 to <4 x double>*
  %550 = load <4 x double>, <4 x double>* %549, align 8, !tbaa !19, !alias.scope !292
  %551 = load <4 x double>, <4 x double>* %152, align 8, !tbaa !19, !alias.scope !295, !noalias !297
  %552 = call <4 x double> @llvm.fma.v4f64(<4 x double> %550, <4 x double> %539, <4 x double> %551)
  store <4 x double> %552, <4 x double>* %153, align 8, !tbaa !19, !alias.scope !295, !noalias !297
  %553 = getelementptr inbounds double, double* %305, i64 %61
  %554 = bitcast double* %553 to <4 x double>*
  %555 = load <4 x double>, <4 x double>* %554, align 8, !tbaa !19, !alias.scope !301
  %556 = call <4 x double> @llvm.fma.v4f64(<4 x double> %555, <4 x double> %541, <4 x double> %552)
  store <4 x double> %556, <4 x double>* %154, align 8, !tbaa !19, !alias.scope !295, !noalias !297
  %557 = getelementptr inbounds double, double* %307, i64 %61
  %558 = bitcast double* %557 to <4 x double>*
  %559 = load <4 x double>, <4 x double>* %558, align 8, !tbaa !19, !alias.scope !302
  %560 = call <4 x double> @llvm.fma.v4f64(<4 x double> %559, <4 x double> %543, <4 x double> %556)
  store <4 x double> %560, <4 x double>* %155, align 8, !tbaa !19, !alias.scope !295, !noalias !297
  %561 = getelementptr inbounds double, double* %309, i64 %61
  %562 = bitcast double* %561 to <4 x double>*
  %563 = load <4 x double>, <4 x double>* %562, align 8, !tbaa !19, !alias.scope !303
  %564 = call <4 x double> @llvm.fma.v4f64(<4 x double> %563, <4 x double> %545, <4 x double> %560)
  store <4 x double> %564, <4 x double>* %156, align 8, !tbaa !19, !alias.scope !295, !noalias !297
  br label %565

; <label>:565:                                    ; preds = %537, %547
  %566 = phi i64 [ 4, %547 ], [ 0, %537 ]
  br label %567

; <label>:567:                                    ; preds = %565
  br i1 %157, label %623, label %568

; <label>:568:                                    ; preds = %567
  br label %569

; <label>:569:                                    ; preds = %569, %568
  %570 = phi i64 [ %566, %568 ], [ %620, %569 ]
  %571 = add i64 %61, %570
  %572 = getelementptr inbounds double, double* %303, i64 %571
  %573 = bitcast double* %572 to <4 x double>*
  %574 = load <4 x double>, <4 x double>* %573, align 8, !tbaa !19, !alias.scope !292
  %575 = getelementptr inbounds double, double* %4, i64 %571
  %576 = bitcast double* %575 to <4 x double>*
  %577 = load <4 x double>, <4 x double>* %576, align 8, !tbaa !19, !alias.scope !295, !noalias !297
  %578 = call <4 x double> @llvm.fma.v4f64(<4 x double> %574, <4 x double> %539, <4 x double> %577)
  %579 = bitcast double* %575 to <4 x double>*
  store <4 x double> %578, <4 x double>* %579, align 8, !tbaa !19, !alias.scope !295, !noalias !297
  %580 = getelementptr inbounds double, double* %305, i64 %571
  %581 = bitcast double* %580 to <4 x double>*
  %582 = load <4 x double>, <4 x double>* %581, align 8, !tbaa !19, !alias.scope !301
  %583 = call <4 x double> @llvm.fma.v4f64(<4 x double> %582, <4 x double> %541, <4 x double> %578)
  %584 = bitcast double* %575 to <4 x double>*
  store <4 x double> %583, <4 x double>* %584, align 8, !tbaa !19, !alias.scope !295, !noalias !297
  %585 = getelementptr inbounds double, double* %307, i64 %571
  %586 = bitcast double* %585 to <4 x double>*
  %587 = load <4 x double>, <4 x double>* %586, align 8, !tbaa !19, !alias.scope !302
  %588 = call <4 x double> @llvm.fma.v4f64(<4 x double> %587, <4 x double> %543, <4 x double> %583)
  %589 = bitcast double* %575 to <4 x double>*
  store <4 x double> %588, <4 x double>* %589, align 8, !tbaa !19, !alias.scope !295, !noalias !297
  %590 = getelementptr inbounds double, double* %309, i64 %571
  %591 = bitcast double* %590 to <4 x double>*
  %592 = load <4 x double>, <4 x double>* %591, align 8, !tbaa !19, !alias.scope !303
  %593 = call <4 x double> @llvm.fma.v4f64(<4 x double> %592, <4 x double> %545, <4 x double> %588)
  %594 = bitcast double* %575 to <4 x double>*
  store <4 x double> %593, <4 x double>* %594, align 8, !tbaa !19, !alias.scope !295, !noalias !297
  %595 = add i64 %570, 4
  %596 = add i64 %61, %595
  %597 = getelementptr inbounds double, double* %303, i64 %596
  %598 = bitcast double* %597 to <4 x double>*
  %599 = load <4 x double>, <4 x double>* %598, align 8, !tbaa !19, !alias.scope !292
  %600 = getelementptr inbounds double, double* %4, i64 %596
  %601 = bitcast double* %600 to <4 x double>*
  %602 = load <4 x double>, <4 x double>* %601, align 8, !tbaa !19, !alias.scope !295, !noalias !297
  %603 = call <4 x double> @llvm.fma.v4f64(<4 x double> %599, <4 x double> %539, <4 x double> %602)
  %604 = bitcast double* %600 to <4 x double>*
  store <4 x double> %603, <4 x double>* %604, align 8, !tbaa !19, !alias.scope !295, !noalias !297
  %605 = getelementptr inbounds double, double* %305, i64 %596
  %606 = bitcast double* %605 to <4 x double>*
  %607 = load <4 x double>, <4 x double>* %606, align 8, !tbaa !19, !alias.scope !301
  %608 = call <4 x double> @llvm.fma.v4f64(<4 x double> %607, <4 x double> %541, <4 x double> %603)
  %609 = bitcast double* %600 to <4 x double>*
  store <4 x double> %608, <4 x double>* %609, align 8, !tbaa !19, !alias.scope !295, !noalias !297
  %610 = getelementptr inbounds double, double* %307, i64 %596
  %611 = bitcast double* %610 to <4 x double>*
  %612 = load <4 x double>, <4 x double>* %611, align 8, !tbaa !19, !alias.scope !302
  %613 = call <4 x double> @llvm.fma.v4f64(<4 x double> %612, <4 x double> %543, <4 x double> %608)
  %614 = bitcast double* %600 to <4 x double>*
  store <4 x double> %613, <4 x double>* %614, align 8, !tbaa !19, !alias.scope !295, !noalias !297
  %615 = getelementptr inbounds double, double* %309, i64 %596
  %616 = bitcast double* %615 to <4 x double>*
  %617 = load <4 x double>, <4 x double>* %616, align 8, !tbaa !19, !alias.scope !303
  %618 = call <4 x double> @llvm.fma.v4f64(<4 x double> %617, <4 x double> %545, <4 x double> %613)
  %619 = bitcast double* %600 to <4 x double>*
  store <4 x double> %618, <4 x double>* %619, align 8, !tbaa !19, !alias.scope !295, !noalias !297
  %620 = add i64 %570, 8
  %621 = icmp eq i64 %620, %146
  br i1 %621, label %622, label %569, !llvm.loop !304

; <label>:622:                                    ; preds = %569
  br label %623

; <label>:623:                                    ; preds = %567, %622
  br i1 %158, label %1071, label %465

; <label>:624:                                    ; preds = %624, %337
  %625 = phi i64 [ %334, %337 ], [ %655, %624 ]
  %626 = getelementptr inbounds double, double* %303, i64 %625
  %627 = load double, double* %626, align 8, !tbaa !19
  %628 = getelementptr inbounds double, double* %4, i64 %625
  %629 = load double, double* %628, align 8, !tbaa !19
  %630 = tail call double @llvm.fma.f64(double %627, double %278, double %629) #11
  store double %630, double* %628, align 8, !tbaa !19
  %631 = getelementptr inbounds double, double* %305, i64 %625
  %632 = load double, double* %631, align 8, !tbaa !19
  %633 = tail call double @llvm.fma.f64(double %632, double %285, double %630) #11
  store double %633, double* %628, align 8, !tbaa !19
  %634 = getelementptr inbounds double, double* %307, i64 %625
  %635 = load double, double* %634, align 8, !tbaa !19
  %636 = tail call double @llvm.fma.f64(double %635, double %292, double %633) #11
  store double %636, double* %628, align 8, !tbaa !19
  %637 = getelementptr inbounds double, double* %309, i64 %625
  %638 = load double, double* %637, align 8, !tbaa !19
  %639 = tail call double @llvm.fma.f64(double %638, double %299, double %636) #11
  store double %639, double* %628, align 8, !tbaa !19
  %640 = add nuw nsw i64 %625, 1
  %641 = getelementptr inbounds double, double* %303, i64 %640
  %642 = load double, double* %641, align 8, !tbaa !19
  %643 = getelementptr inbounds double, double* %4, i64 %640
  %644 = load double, double* %643, align 8, !tbaa !19
  %645 = tail call double @llvm.fma.f64(double %642, double %278, double %644) #11
  store double %645, double* %643, align 8, !tbaa !19
  %646 = getelementptr inbounds double, double* %305, i64 %640
  %647 = load double, double* %646, align 8, !tbaa !19
  %648 = tail call double @llvm.fma.f64(double %647, double %285, double %645) #11
  store double %648, double* %643, align 8, !tbaa !19
  %649 = getelementptr inbounds double, double* %307, i64 %640
  %650 = load double, double* %649, align 8, !tbaa !19
  %651 = tail call double @llvm.fma.f64(double %650, double %292, double %648) #11
  store double %651, double* %643, align 8, !tbaa !19
  %652 = getelementptr inbounds double, double* %309, i64 %640
  %653 = load double, double* %652, align 8, !tbaa !19
  %654 = tail call double @llvm.fma.f64(double %653, double %299, double %651) #11
  store double %654, double* %643, align 8, !tbaa !19
  %655 = add nsw i64 %625, 2
  %656 = icmp eq i64 %655, %62
  br i1 %656, label %452, label %624, !llvm.loop !305

; <label>:657:                                    ; preds = %454
  switch i64 %60, label %714 [
    i64 0, label %686
    i64 1, label %658
    i64 2, label %844
  ]

; <label>:658:                                    ; preds = %657
  br i1 %140, label %682, label %659

; <label>:659:                                    ; preds = %658
  br label %660

; <label>:660:                                    ; preds = %659
  %661 = load <4 x double>, <4 x double>* %142, align 16, !tbaa !11
  %662 = getelementptr inbounds double, double* %303, i64 %62
  %663 = bitcast double* %662 to <4 x double>*
  %664 = load <4 x double>, <4 x double>* %663, align 1, !tbaa !11
  %665 = fmul <4 x double> %280, %664
  %666 = getelementptr inbounds double, double* %305, i64 %62
  %667 = bitcast double* %666 to <4 x double>*
  %668 = load <4 x double>, <4 x double>* %667, align 1, !tbaa !11
  %669 = fmul <4 x double> %287, %668
  %670 = fadd <4 x double> %665, %669
  %671 = getelementptr inbounds double, double* %307, i64 %62
  %672 = bitcast double* %671 to <4 x double>*
  %673 = load <4 x double>, <4 x double>* %672, align 1, !tbaa !11
  %674 = fmul <4 x double> %294, %673
  %675 = getelementptr inbounds double, double* %309, i64 %62
  %676 = bitcast double* %675 to <4 x double>*
  %677 = load <4 x double>, <4 x double>* %676, align 1, !tbaa !11
  %678 = fmul <4 x double> %301, %677
  %679 = fadd <4 x double> %674, %678
  %680 = fadd <4 x double> %670, %679
  %681 = fadd <4 x double> %661, %680
  store <4 x double> %681, <4 x double>* %142, align 16, !tbaa !11
  br label %682

; <label>:682:                                    ; preds = %658, %660
  %683 = phi i64 [ %143, %660 ], [ %62, %658 ]
  br label %684

; <label>:684:                                    ; preds = %682
  br i1 %144, label %460, label %685

; <label>:685:                                    ; preds = %684
  br label %793

; <label>:686:                                    ; preds = %657
  br i1 %134, label %710, label %687

; <label>:687:                                    ; preds = %686
  br label %688

; <label>:688:                                    ; preds = %687
  %689 = load <4 x double>, <4 x double>* %136, align 16, !tbaa !11
  %690 = getelementptr inbounds double, double* %303, i64 %62
  %691 = bitcast double* %690 to <4 x double>*
  %692 = load <4 x double>, <4 x double>* %691, align 1, !tbaa !11
  %693 = fmul <4 x double> %280, %692
  %694 = getelementptr inbounds double, double* %305, i64 %62
  %695 = bitcast double* %694 to <4 x double>*
  %696 = load <4 x double>, <4 x double>* %695, align 1, !tbaa !11
  %697 = fmul <4 x double> %287, %696
  %698 = fadd <4 x double> %693, %697
  %699 = getelementptr inbounds double, double* %307, i64 %62
  %700 = bitcast double* %699 to <4 x double>*
  %701 = load <4 x double>, <4 x double>* %700, align 1, !tbaa !11
  %702 = fmul <4 x double> %294, %701
  %703 = getelementptr inbounds double, double* %309, i64 %62
  %704 = bitcast double* %703 to <4 x double>*
  %705 = load <4 x double>, <4 x double>* %704, align 1, !tbaa !11
  %706 = fmul <4 x double> %301, %705
  %707 = fadd <4 x double> %702, %706
  %708 = fadd <4 x double> %698, %707
  %709 = fadd <4 x double> %689, %708
  store <4 x double> %709, <4 x double>* %136, align 16, !tbaa !11
  br label %710

; <label>:710:                                    ; preds = %686, %688
  %711 = phi i64 [ %137, %688 ], [ %62, %686 ]
  br label %712

; <label>:712:                                    ; preds = %710
  br i1 %138, label %458, label %713

; <label>:713:                                    ; preds = %712
  br label %742

; <label>:714:                                    ; preds = %657
  br i1 %128, label %738, label %715

; <label>:715:                                    ; preds = %714
  br label %716

; <label>:716:                                    ; preds = %715
  %717 = load <4 x double>, <4 x double>* %130, align 16, !tbaa !11
  %718 = getelementptr inbounds double, double* %303, i64 %62
  %719 = bitcast double* %718 to <4 x double>*
  %720 = load <4 x double>, <4 x double>* %719, align 1, !tbaa !11
  %721 = fmul <4 x double> %280, %720
  %722 = getelementptr inbounds double, double* %305, i64 %62
  %723 = bitcast double* %722 to <4 x double>*
  %724 = load <4 x double>, <4 x double>* %723, align 1, !tbaa !11
  %725 = fmul <4 x double> %287, %724
  %726 = fadd <4 x double> %721, %725
  %727 = getelementptr inbounds double, double* %307, i64 %62
  %728 = bitcast double* %727 to <4 x double>*
  %729 = load <4 x double>, <4 x double>* %728, align 1, !tbaa !11
  %730 = fmul <4 x double> %294, %729
  %731 = getelementptr inbounds double, double* %309, i64 %62
  %732 = bitcast double* %731 to <4 x double>*
  %733 = load <4 x double>, <4 x double>* %732, align 1, !tbaa !11
  %734 = fmul <4 x double> %301, %733
  %735 = fadd <4 x double> %730, %734
  %736 = fadd <4 x double> %726, %735
  %737 = fadd <4 x double> %717, %736
  store <4 x double> %737, <4 x double>* %130, align 16, !tbaa !11
  br label %738

; <label>:738:                                    ; preds = %714, %716
  %739 = phi i64 [ %131, %716 ], [ %62, %714 ]
  br label %740

; <label>:740:                                    ; preds = %738
  br i1 %132, label %456, label %741

; <label>:741:                                    ; preds = %740
  br label %1018

; <label>:742:                                    ; preds = %742, %713
  %743 = phi i64 [ %711, %713 ], [ %791, %742 ]
  %744 = getelementptr inbounds double, double* %4, i64 %743
  %745 = bitcast double* %744 to <4 x double>*
  %746 = load <4 x double>, <4 x double>* %745, align 16, !tbaa !11
  %747 = getelementptr inbounds double, double* %303, i64 %743
  %748 = bitcast double* %747 to <4 x double>*
  %749 = load <4 x double>, <4 x double>* %748, align 1, !tbaa !11
  %750 = fmul <4 x double> %280, %749
  %751 = getelementptr inbounds double, double* %305, i64 %743
  %752 = bitcast double* %751 to <4 x double>*
  %753 = load <4 x double>, <4 x double>* %752, align 1, !tbaa !11
  %754 = fmul <4 x double> %287, %753
  %755 = fadd <4 x double> %750, %754
  %756 = getelementptr inbounds double, double* %307, i64 %743
  %757 = bitcast double* %756 to <4 x double>*
  %758 = load <4 x double>, <4 x double>* %757, align 1, !tbaa !11
  %759 = fmul <4 x double> %294, %758
  %760 = getelementptr inbounds double, double* %309, i64 %743
  %761 = bitcast double* %760 to <4 x double>*
  %762 = load <4 x double>, <4 x double>* %761, align 1, !tbaa !11
  %763 = fmul <4 x double> %301, %762
  %764 = fadd <4 x double> %759, %763
  %765 = fadd <4 x double> %755, %764
  %766 = fadd <4 x double> %746, %765
  store <4 x double> %766, <4 x double>* %745, align 16, !tbaa !11
  %767 = add nsw i64 %743, 4
  %768 = getelementptr inbounds double, double* %4, i64 %767
  %769 = bitcast double* %768 to <4 x double>*
  %770 = load <4 x double>, <4 x double>* %769, align 16, !tbaa !11
  %771 = getelementptr inbounds double, double* %303, i64 %767
  %772 = bitcast double* %771 to <4 x double>*
  %773 = load <4 x double>, <4 x double>* %772, align 1, !tbaa !11
  %774 = fmul <4 x double> %280, %773
  %775 = getelementptr inbounds double, double* %305, i64 %767
  %776 = bitcast double* %775 to <4 x double>*
  %777 = load <4 x double>, <4 x double>* %776, align 1, !tbaa !11
  %778 = fmul <4 x double> %287, %777
  %779 = fadd <4 x double> %774, %778
  %780 = getelementptr inbounds double, double* %307, i64 %767
  %781 = bitcast double* %780 to <4 x double>*
  %782 = load <4 x double>, <4 x double>* %781, align 1, !tbaa !11
  %783 = fmul <4 x double> %294, %782
  %784 = getelementptr inbounds double, double* %309, i64 %767
  %785 = bitcast double* %784 to <4 x double>*
  %786 = load <4 x double>, <4 x double>* %785, align 1, !tbaa !11
  %787 = fmul <4 x double> %301, %786
  %788 = fadd <4 x double> %783, %787
  %789 = fadd <4 x double> %779, %788
  %790 = fadd <4 x double> %770, %789
  store <4 x double> %790, <4 x double>* %769, align 16, !tbaa !11
  %791 = add nsw i64 %743, 8
  %792 = icmp slt i64 %791, %61
  br i1 %792, label %742, label %457

; <label>:793:                                    ; preds = %793, %685
  %794 = phi i64 [ %683, %685 ], [ %842, %793 ]
  %795 = getelementptr inbounds double, double* %4, i64 %794
  %796 = bitcast double* %795 to <4 x double>*
  %797 = load <4 x double>, <4 x double>* %796, align 16, !tbaa !11
  %798 = getelementptr inbounds double, double* %303, i64 %794
  %799 = bitcast double* %798 to <4 x double>*
  %800 = load <4 x double>, <4 x double>* %799, align 1, !tbaa !11
  %801 = fmul <4 x double> %280, %800
  %802 = getelementptr inbounds double, double* %305, i64 %794
  %803 = bitcast double* %802 to <4 x double>*
  %804 = load <4 x double>, <4 x double>* %803, align 1, !tbaa !11
  %805 = fmul <4 x double> %287, %804
  %806 = fadd <4 x double> %801, %805
  %807 = getelementptr inbounds double, double* %307, i64 %794
  %808 = bitcast double* %807 to <4 x double>*
  %809 = load <4 x double>, <4 x double>* %808, align 1, !tbaa !11
  %810 = fmul <4 x double> %294, %809
  %811 = getelementptr inbounds double, double* %309, i64 %794
  %812 = bitcast double* %811 to <4 x double>*
  %813 = load <4 x double>, <4 x double>* %812, align 1, !tbaa !11
  %814 = fmul <4 x double> %301, %813
  %815 = fadd <4 x double> %810, %814
  %816 = fadd <4 x double> %806, %815
  %817 = fadd <4 x double> %797, %816
  store <4 x double> %817, <4 x double>* %796, align 16, !tbaa !11
  %818 = add nsw i64 %794, 4
  %819 = getelementptr inbounds double, double* %4, i64 %818
  %820 = bitcast double* %819 to <4 x double>*
  %821 = load <4 x double>, <4 x double>* %820, align 16, !tbaa !11
  %822 = getelementptr inbounds double, double* %303, i64 %818
  %823 = bitcast double* %822 to <4 x double>*
  %824 = load <4 x double>, <4 x double>* %823, align 1, !tbaa !11
  %825 = fmul <4 x double> %280, %824
  %826 = getelementptr inbounds double, double* %305, i64 %818
  %827 = bitcast double* %826 to <4 x double>*
  %828 = load <4 x double>, <4 x double>* %827, align 1, !tbaa !11
  %829 = fmul <4 x double> %287, %828
  %830 = fadd <4 x double> %825, %829
  %831 = getelementptr inbounds double, double* %307, i64 %818
  %832 = bitcast double* %831 to <4 x double>*
  %833 = load <4 x double>, <4 x double>* %832, align 1, !tbaa !11
  %834 = fmul <4 x double> %294, %833
  %835 = getelementptr inbounds double, double* %309, i64 %818
  %836 = bitcast double* %835 to <4 x double>*
  %837 = load <4 x double>, <4 x double>* %836, align 1, !tbaa !11
  %838 = fmul <4 x double> %301, %837
  %839 = fadd <4 x double> %834, %838
  %840 = fadd <4 x double> %830, %839
  %841 = fadd <4 x double> %821, %840
  store <4 x double> %841, <4 x double>* %820, align 16, !tbaa !11
  %842 = add nsw i64 %794, 8
  %843 = icmp slt i64 %842, %61
  br i1 %843, label %793, label %459

; <label>:844:                                    ; preds = %657
  br i1 %80, label %845, label %856

; <label>:845:                                    ; preds = %844
  %846 = getelementptr inbounds double, double* %309, i64 %79
  %847 = bitcast double* %846 to <4 x double>*
  %848 = load <4 x double>, <4 x double>* %847, align 1, !tbaa !11
  %849 = getelementptr inbounds double, double* %307, i64 %78
  %850 = bitcast double* %849 to <4 x double>*
  %851 = load <4 x double>, <4 x double>* %850, align 1, !tbaa !11
  %852 = getelementptr inbounds double, double* %305, i64 %77
  %853 = bitcast double* %852 to <4 x double>*
  %854 = load <4 x double>, <4 x double>* %853, align 1, !tbaa !11
  br label %895

; <label>:855:                                    ; preds = %895
  br label %856

; <label>:856:                                    ; preds = %855, %844
  %857 = phi i64 [ %62, %844 ], [ %86, %855 ]
  %858 = icmp slt i64 %857, %61
  br i1 %858, label %859, label %463

; <label>:859:                                    ; preds = %856
  %860 = sub i64 %108, %857
  %861 = lshr i64 %860, 2
  %862 = and i64 %861, 1
  %863 = icmp eq i64 %862, 0
  br i1 %863, label %864, label %890

; <label>:864:                                    ; preds = %859
  br label %865

; <label>:865:                                    ; preds = %864
  %866 = getelementptr inbounds double, double* %4, i64 %857
  %867 = bitcast double* %866 to <4 x double>*
  %868 = load <4 x double>, <4 x double>* %867, align 16, !tbaa !11
  %869 = getelementptr inbounds double, double* %303, i64 %857
  %870 = bitcast double* %869 to <4 x double>*
  %871 = load <4 x double>, <4 x double>* %870, align 1, !tbaa !11
  %872 = fmul <4 x double> %280, %871
  %873 = getelementptr inbounds double, double* %305, i64 %857
  %874 = bitcast double* %873 to <4 x double>*
  %875 = load <4 x double>, <4 x double>* %874, align 1, !tbaa !11
  %876 = fmul <4 x double> %287, %875
  %877 = fadd <4 x double> %872, %876
  %878 = getelementptr inbounds double, double* %307, i64 %857
  %879 = bitcast double* %878 to <4 x double>*
  %880 = load <4 x double>, <4 x double>* %879, align 1, !tbaa !11
  %881 = fmul <4 x double> %294, %880
  %882 = getelementptr inbounds double, double* %309, i64 %857
  %883 = bitcast double* %882 to <4 x double>*
  %884 = load <4 x double>, <4 x double>* %883, align 1, !tbaa !11
  %885 = fmul <4 x double> %301, %884
  %886 = fadd <4 x double> %881, %885
  %887 = fadd <4 x double> %877, %886
  %888 = fadd <4 x double> %868, %887
  store <4 x double> %888, <4 x double>* %867, align 16, !tbaa !11
  %889 = add nsw i64 %857, 4
  br label %890

; <label>:890:                                    ; preds = %859, %865
  %891 = phi i64 [ %889, %865 ], [ %857, %859 ]
  br label %892

; <label>:892:                                    ; preds = %890
  %893 = icmp eq i64 %861, 0
  br i1 %893, label %462, label %894

; <label>:894:                                    ; preds = %892
  br label %967

; <label>:895:                                    ; preds = %845, %895
  %896 = phi i64 [ %965, %895 ], [ %62, %845 ]
  %897 = phi <4 x double> [ %941, %895 ], [ %854, %845 ]
  %898 = phi <4 x double> [ %950, %895 ], [ %851, %845 ]
  %899 = phi <4 x double> [ %957, %895 ], [ %848, %845 ]
  %900 = add nsw i64 %896, 3
  %901 = getelementptr inbounds double, double* %305, i64 %900
  %902 = bitcast double* %901 to <4 x double>*
  %903 = load <4 x double>, <4 x double>* %902, align 1, !tbaa !11
  %904 = shufflevector <4 x double> %897, <4 x double> %903, <4 x i32> <i32 4, i32 1, i32 2, i32 3>
  %905 = shufflevector <4 x double> %904, <4 x double> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %906 = shufflevector <4 x double> %905, <4 x double> undef, <4 x i32> <i32 undef, i32 3, i32 undef, i32 1>
  %907 = shufflevector <4 x double> %905, <4 x double> %906, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %908 = add nsw i64 %896, 2
  %909 = getelementptr inbounds double, double* %307, i64 %908
  %910 = bitcast double* %909 to <4 x double>*
  %911 = load <4 x double>, <4 x double>* %910, align 1, !tbaa !11
  %912 = shufflevector <4 x double> %898, <4 x double> %911, <4 x i32> <i32 4, i32 5, i32 2, i32 3>
  %913 = shufflevector <4 x double> %912, <4 x double> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %914 = add nsw i64 %896, 1
  %915 = getelementptr inbounds double, double* %309, i64 %914
  %916 = bitcast double* %915 to <4 x double>*
  %917 = load <4 x double>, <4 x double>* %916, align 1, !tbaa !11
  %918 = shufflevector <4 x double> %899, <4 x double> %917, <4 x i32> <i32 4, i32 5, i32 6, i32 3>
  %919 = shufflevector <4 x double> %918, <4 x double> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %920 = shufflevector <4 x double> %919, <4 x double> undef, <4 x i32> <i32 2, i32 undef, i32 0, i32 undef>
  %921 = shufflevector <4 x double> %919, <4 x double> %920, <4 x i32> <i32 4, i32 1, i32 6, i32 3>
  %922 = getelementptr inbounds double, double* %303, i64 %896
  %923 = bitcast double* %922 to <4 x double>*
  %924 = load <4 x double>, <4 x double>* %923, align 1, !tbaa !11
  %925 = add nsw i64 %896, 4
  %926 = getelementptr inbounds double, double* %303, i64 %925
  %927 = bitcast double* %926 to <4 x double>*
  %928 = load <4 x double>, <4 x double>* %927, align 1, !tbaa !11
  %929 = getelementptr inbounds double, double* %4, i64 %896
  %930 = bitcast double* %929 to <4 x double>*
  %931 = load <4 x double>, <4 x double>* %930, align 16, !tbaa !11
  %932 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %924, <4 x double> %280, <4 x double> %931) #11
  %933 = getelementptr inbounds double, double* %4, i64 %925
  %934 = bitcast double* %933 to <4 x double>*
  %935 = load <4 x double>, <4 x double>* %934, align 16, !tbaa !11
  %936 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %928, <4 x double> %280, <4 x double> %935) #11
  %937 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %907, <4 x double> %287, <4 x double> %932) #11
  %938 = add nsw i64 %896, 7
  %939 = getelementptr inbounds double, double* %305, i64 %938
  %940 = bitcast double* %939 to <4 x double>*
  %941 = load <4 x double>, <4 x double>* %940, align 1, !tbaa !11
  %942 = shufflevector <4 x double> %903, <4 x double> %941, <4 x i32> <i32 4, i32 1, i32 2, i32 3>
  %943 = shufflevector <4 x double> %942, <4 x double> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %944 = shufflevector <4 x double> %943, <4 x double> undef, <4 x i32> <i32 undef, i32 3, i32 undef, i32 1>
  %945 = shufflevector <4 x double> %943, <4 x double> %944, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %946 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %913, <4 x double> %294, <4 x double> %937) #11
  %947 = add nsw i64 %896, 6
  %948 = getelementptr inbounds double, double* %307, i64 %947
  %949 = bitcast double* %948 to <4 x double>*
  %950 = load <4 x double>, <4 x double>* %949, align 1, !tbaa !11
  %951 = shufflevector <4 x double> %911, <4 x double> %950, <4 x i32> <i32 4, i32 5, i32 2, i32 3>
  %952 = shufflevector <4 x double> %951, <4 x double> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %953 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %921, <4 x double> %301, <4 x double> %946) #11
  store <4 x double> %953, <4 x double>* %930, align 16, !tbaa !11
  %954 = add nsw i64 %896, 5
  %955 = getelementptr inbounds double, double* %309, i64 %954
  %956 = bitcast double* %955 to <4 x double>*
  %957 = load <4 x double>, <4 x double>* %956, align 1, !tbaa !11
  %958 = shufflevector <4 x double> %917, <4 x double> %957, <4 x i32> <i32 4, i32 5, i32 6, i32 3>
  %959 = shufflevector <4 x double> %958, <4 x double> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %960 = shufflevector <4 x double> %959, <4 x double> undef, <4 x i32> <i32 2, i32 undef, i32 0, i32 undef>
  %961 = shufflevector <4 x double> %959, <4 x double> %960, <4 x i32> <i32 4, i32 1, i32 6, i32 3>
  %962 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %945, <4 x double> %287, <4 x double> %936) #11
  %963 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %952, <4 x double> %294, <4 x double> %962) #11
  %964 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %961, <4 x double> %301, <4 x double> %963) #11
  store <4 x double> %964, <4 x double>* %934, align 16, !tbaa !11
  %965 = add nsw i64 %896, 8
  %966 = icmp slt i64 %965, %25
  br i1 %966, label %895, label %855

; <label>:967:                                    ; preds = %967, %894
  %968 = phi i64 [ %891, %894 ], [ %1016, %967 ]
  %969 = getelementptr inbounds double, double* %4, i64 %968
  %970 = bitcast double* %969 to <4 x double>*
  %971 = load <4 x double>, <4 x double>* %970, align 16, !tbaa !11
  %972 = getelementptr inbounds double, double* %303, i64 %968
  %973 = bitcast double* %972 to <4 x double>*
  %974 = load <4 x double>, <4 x double>* %973, align 1, !tbaa !11
  %975 = fmul <4 x double> %280, %974
  %976 = getelementptr inbounds double, double* %305, i64 %968
  %977 = bitcast double* %976 to <4 x double>*
  %978 = load <4 x double>, <4 x double>* %977, align 1, !tbaa !11
  %979 = fmul <4 x double> %287, %978
  %980 = fadd <4 x double> %975, %979
  %981 = getelementptr inbounds double, double* %307, i64 %968
  %982 = bitcast double* %981 to <4 x double>*
  %983 = load <4 x double>, <4 x double>* %982, align 1, !tbaa !11
  %984 = fmul <4 x double> %294, %983
  %985 = getelementptr inbounds double, double* %309, i64 %968
  %986 = bitcast double* %985 to <4 x double>*
  %987 = load <4 x double>, <4 x double>* %986, align 1, !tbaa !11
  %988 = fmul <4 x double> %301, %987
  %989 = fadd <4 x double> %984, %988
  %990 = fadd <4 x double> %980, %989
  %991 = fadd <4 x double> %971, %990
  store <4 x double> %991, <4 x double>* %970, align 16, !tbaa !11
  %992 = add nsw i64 %968, 4
  %993 = getelementptr inbounds double, double* %4, i64 %992
  %994 = bitcast double* %993 to <4 x double>*
  %995 = load <4 x double>, <4 x double>* %994, align 16, !tbaa !11
  %996 = getelementptr inbounds double, double* %303, i64 %992
  %997 = bitcast double* %996 to <4 x double>*
  %998 = load <4 x double>, <4 x double>* %997, align 1, !tbaa !11
  %999 = fmul <4 x double> %280, %998
  %1000 = getelementptr inbounds double, double* %305, i64 %992
  %1001 = bitcast double* %1000 to <4 x double>*
  %1002 = load <4 x double>, <4 x double>* %1001, align 1, !tbaa !11
  %1003 = fmul <4 x double> %287, %1002
  %1004 = fadd <4 x double> %999, %1003
  %1005 = getelementptr inbounds double, double* %307, i64 %992
  %1006 = bitcast double* %1005 to <4 x double>*
  %1007 = load <4 x double>, <4 x double>* %1006, align 1, !tbaa !11
  %1008 = fmul <4 x double> %294, %1007
  %1009 = getelementptr inbounds double, double* %309, i64 %992
  %1010 = bitcast double* %1009 to <4 x double>*
  %1011 = load <4 x double>, <4 x double>* %1010, align 1, !tbaa !11
  %1012 = fmul <4 x double> %301, %1011
  %1013 = fadd <4 x double> %1008, %1012
  %1014 = fadd <4 x double> %1004, %1013
  %1015 = fadd <4 x double> %995, %1014
  store <4 x double> %1015, <4 x double>* %994, align 16, !tbaa !11
  %1016 = add nsw i64 %968, 8
  %1017 = icmp slt i64 %1016, %61
  br i1 %1017, label %967, label %461

; <label>:1018:                                   ; preds = %1018, %741
  %1019 = phi i64 [ %739, %741 ], [ %1067, %1018 ]
  %1020 = getelementptr inbounds double, double* %4, i64 %1019
  %1021 = bitcast double* %1020 to <4 x double>*
  %1022 = load <4 x double>, <4 x double>* %1021, align 16, !tbaa !11
  %1023 = getelementptr inbounds double, double* %303, i64 %1019
  %1024 = bitcast double* %1023 to <4 x double>*
  %1025 = load <4 x double>, <4 x double>* %1024, align 1, !tbaa !11
  %1026 = fmul <4 x double> %280, %1025
  %1027 = getelementptr inbounds double, double* %305, i64 %1019
  %1028 = bitcast double* %1027 to <4 x double>*
  %1029 = load <4 x double>, <4 x double>* %1028, align 1, !tbaa !11
  %1030 = fmul <4 x double> %287, %1029
  %1031 = fadd <4 x double> %1026, %1030
  %1032 = getelementptr inbounds double, double* %307, i64 %1019
  %1033 = bitcast double* %1032 to <4 x double>*
  %1034 = load <4 x double>, <4 x double>* %1033, align 1, !tbaa !11
  %1035 = fmul <4 x double> %294, %1034
  %1036 = getelementptr inbounds double, double* %309, i64 %1019
  %1037 = bitcast double* %1036 to <4 x double>*
  %1038 = load <4 x double>, <4 x double>* %1037, align 1, !tbaa !11
  %1039 = fmul <4 x double> %301, %1038
  %1040 = fadd <4 x double> %1035, %1039
  %1041 = fadd <4 x double> %1031, %1040
  %1042 = fadd <4 x double> %1022, %1041
  store <4 x double> %1042, <4 x double>* %1021, align 16, !tbaa !11
  %1043 = add nsw i64 %1019, 4
  %1044 = getelementptr inbounds double, double* %4, i64 %1043
  %1045 = bitcast double* %1044 to <4 x double>*
  %1046 = load <4 x double>, <4 x double>* %1045, align 16, !tbaa !11
  %1047 = getelementptr inbounds double, double* %303, i64 %1043
  %1048 = bitcast double* %1047 to <4 x double>*
  %1049 = load <4 x double>, <4 x double>* %1048, align 1, !tbaa !11
  %1050 = fmul <4 x double> %280, %1049
  %1051 = getelementptr inbounds double, double* %305, i64 %1043
  %1052 = bitcast double* %1051 to <4 x double>*
  %1053 = load <4 x double>, <4 x double>* %1052, align 1, !tbaa !11
  %1054 = fmul <4 x double> %287, %1053
  %1055 = fadd <4 x double> %1050, %1054
  %1056 = getelementptr inbounds double, double* %307, i64 %1043
  %1057 = bitcast double* %1056 to <4 x double>*
  %1058 = load <4 x double>, <4 x double>* %1057, align 1, !tbaa !11
  %1059 = fmul <4 x double> %294, %1058
  %1060 = getelementptr inbounds double, double* %309, i64 %1043
  %1061 = bitcast double* %1060 to <4 x double>*
  %1062 = load <4 x double>, <4 x double>* %1061, align 1, !tbaa !11
  %1063 = fmul <4 x double> %301, %1062
  %1064 = fadd <4 x double> %1059, %1063
  %1065 = fadd <4 x double> %1055, %1064
  %1066 = fadd <4 x double> %1046, %1065
  store <4 x double> %1066, <4 x double>* %1045, align 16, !tbaa !11
  %1067 = add nsw i64 %1019, 8
  %1068 = icmp slt i64 %1067, %61
  br i1 %1068, label %1018, label %455

; <label>:1069:                                   ; preds = %1078
  br label %1070

; <label>:1070:                                   ; preds = %489, %1069
  br label %1071

; <label>:1071:                                   ; preds = %1070, %623, %463
  %1072 = add nsw i64 %262, 4
  %1073 = icmp slt i64 %1072, %69
  br i1 %1073, label %1074, label %159

; <label>:1074:                                   ; preds = %1071
  %1075 = load double*, double** %73, align 8, !tbaa !273
  %1076 = load i64, i64* %9, align 8, !tbaa !275
  %1077 = add i64 %259, 1
  br label %258

; <label>:1078:                                   ; preds = %1078, %491
  %1079 = phi i64 [ %488, %491 ], [ %1109, %1078 ]
  %1080 = getelementptr inbounds double, double* %303, i64 %1079
  %1081 = load double, double* %1080, align 8, !tbaa !19
  %1082 = getelementptr inbounds double, double* %4, i64 %1079
  %1083 = load double, double* %1082, align 8, !tbaa !19
  %1084 = tail call double @llvm.fma.f64(double %1081, double %278, double %1083) #11
  store double %1084, double* %1082, align 8, !tbaa !19
  %1085 = getelementptr inbounds double, double* %305, i64 %1079
  %1086 = load double, double* %1085, align 8, !tbaa !19
  %1087 = tail call double @llvm.fma.f64(double %1086, double %285, double %1084) #11
  store double %1087, double* %1082, align 8, !tbaa !19
  %1088 = getelementptr inbounds double, double* %307, i64 %1079
  %1089 = load double, double* %1088, align 8, !tbaa !19
  %1090 = tail call double @llvm.fma.f64(double %1089, double %292, double %1087) #11
  store double %1090, double* %1082, align 8, !tbaa !19
  %1091 = getelementptr inbounds double, double* %309, i64 %1079
  %1092 = load double, double* %1091, align 8, !tbaa !19
  %1093 = tail call double @llvm.fma.f64(double %1092, double %299, double %1090) #11
  store double %1093, double* %1082, align 8, !tbaa !19
  %1094 = add nsw i64 %1079, 1
  %1095 = getelementptr inbounds double, double* %303, i64 %1094
  %1096 = load double, double* %1095, align 8, !tbaa !19
  %1097 = getelementptr inbounds double, double* %4, i64 %1094
  %1098 = load double, double* %1097, align 8, !tbaa !19
  %1099 = tail call double @llvm.fma.f64(double %1096, double %278, double %1098) #11
  store double %1099, double* %1097, align 8, !tbaa !19
  %1100 = getelementptr inbounds double, double* %305, i64 %1094
  %1101 = load double, double* %1100, align 8, !tbaa !19
  %1102 = tail call double @llvm.fma.f64(double %1101, double %285, double %1099) #11
  store double %1102, double* %1097, align 8, !tbaa !19
  %1103 = getelementptr inbounds double, double* %307, i64 %1094
  %1104 = load double, double* %1103, align 8, !tbaa !19
  %1105 = tail call double @llvm.fma.f64(double %1104, double %292, double %1102) #11
  store double %1105, double* %1097, align 8, !tbaa !19
  %1106 = getelementptr inbounds double, double* %309, i64 %1094
  %1107 = load double, double* %1106, align 8, !tbaa !19
  %1108 = tail call double @llvm.fma.f64(double %1107, double %299, double %1105) #11
  store double %1108, double* %1097, align 8, !tbaa !19
  %1109 = add nsw i64 %1079, 2
  %1110 = icmp eq i64 %1109, %0
  br i1 %1110, label %1069, label %1078, !llvm.loop !306

; <label>:1111:                                   ; preds = %160, %1746
  %1112 = phi i64 [ 0, %1746 ], [ %59, %160 ]
  %1113 = phi i64 [ %1112, %1746 ], [ %1, %160 ]
  %1114 = phi i64 [ 0, %1746 ], [ %69, %160 ]
  %1115 = icmp slt i64 %1114, %1113
  br i1 %1115, label %1116, label %1746

; <label>:1116:                                   ; preds = %1111
  br i1 %161, label %1118, label %1117

; <label>:1117:                                   ; preds = %1116
  br label %1748

; <label>:1118:                                   ; preds = %1116
  %1119 = shl i64 %1114, 3
  br label %1120

; <label>:1120:                                   ; preds = %1118, %1351
  %1121 = phi i64 [ 0, %1118 ], [ %1354, %1351 ]
  %1122 = phi i64 [ %1114, %1118 ], [ %1352, %1351 ]
  %1123 = shl i64 %1121, 3
  %1124 = add i64 %1119, %1123
  %1125 = shl i64 %1121, 3
  %1126 = add i64 %1119, %1125
  %1127 = load double*, double** %71, align 8, !tbaa !276
  %1128 = load i64, i64* %72, align 8, !tbaa !278
  %1129 = mul nsw i64 %1128, %1122
  %1130 = getelementptr inbounds double, double* %1127, i64 %1129
  %1131 = load double, double* %1130, align 8, !tbaa !19
  %1132 = fmul double %1131, %6
  %1133 = insertelement <4 x double> undef, double %1132, i32 0
  %1134 = load double*, double** %73, align 8, !tbaa !273
  %1135 = load i64, i64* %9, align 8, !tbaa !275
  %1136 = mul nsw i64 %1135, %1122
  %1137 = getelementptr inbounds double, double* %1134, i64 %1136
  br i1 %188, label %1138, label %1162

; <label>:1138:                                   ; preds = %1281, %1163, %1162, %1120
  %1139 = phi i64 [ 0, %1163 ], [ 0, %1162 ], [ 0, %1120 ], [ %215, %1281 ]
  %1140 = sub i64 %62, %1139
  %1141 = sub i64 %185, %1139
  %1142 = and i64 %1140, 7
  %1143 = icmp eq i64 %1142, 0
  br i1 %1143, label %1158, label %1144

; <label>:1144:                                   ; preds = %1138
  br label %1145

; <label>:1145:                                   ; preds = %1145, %1144
  %1146 = phi i64 [ %1154, %1145 ], [ %1139, %1144 ]
  %1147 = phi i64 [ %1155, %1145 ], [ %1142, %1144 ]
  %1148 = getelementptr inbounds double, double* %1137, i64 %1146
  %1149 = load double, double* %1148, align 8, !tbaa !19
  %1150 = fmul double %1132, %1149
  %1151 = getelementptr inbounds double, double* %4, i64 %1146
  %1152 = load double, double* %1151, align 8, !tbaa !19
  %1153 = fadd double %1152, %1150
  store double %1153, double* %1151, align 8, !tbaa !19
  %1154 = add nuw nsw i64 %1146, 1
  %1155 = add i64 %1147, -1
  %1156 = icmp eq i64 %1155, 0
  br i1 %1156, label %1157, label %1145, !llvm.loop !307

; <label>:1157:                                   ; preds = %1145
  br label %1158

; <label>:1158:                                   ; preds = %1138, %1157
  %1159 = phi i64 [ %1139, %1138 ], [ %1154, %1157 ]
  %1160 = icmp ult i64 %1141, 7
  br i1 %1160, label %1737, label %1161

; <label>:1161:                                   ; preds = %1158
  br label %1481

; <label>:1162:                                   ; preds = %1120
  br i1 %216, label %1138, label %1163

; <label>:1163:                                   ; preds = %1162
  %1164 = getelementptr double, double* %1134, i64 %62
  %1165 = bitcast double* %1164 to i8*
  %1166 = mul i64 %1135, %1124
  %1167 = getelementptr i8, i8* %1165, i64 %1166
  %1168 = icmp ult i8* %8, %1167
  %1169 = icmp ult double* %1137, %169
  %1170 = and i1 %1168, %1169
  br i1 %1170, label %1138, label %1171

; <label>:1171:                                   ; preds = %1163
  %1172 = insertelement <4 x double> undef, double %1132, i32 0
  %1173 = shufflevector <4 x double> %1172, <4 x double> undef, <4 x i32> zeroinitializer
  br i1 %218, label %1174, label %1199

; <label>:1174:                                   ; preds = %1171
  br label %1175

; <label>:1175:                                   ; preds = %1174
  %1176 = bitcast double* %1137 to <4 x double>*
  %1177 = load <4 x double>, <4 x double>* %1176, align 8, !tbaa !19, !alias.scope !308
  %1178 = getelementptr double, double* %1137, i64 4
  %1179 = bitcast double* %1178 to <4 x double>*
  %1180 = load <4 x double>, <4 x double>* %1179, align 8, !tbaa !19, !alias.scope !308
  %1181 = getelementptr double, double* %1137, i64 8
  %1182 = bitcast double* %1181 to <4 x double>*
  %1183 = load <4 x double>, <4 x double>* %1182, align 8, !tbaa !19, !alias.scope !308
  %1184 = getelementptr double, double* %1137, i64 12
  %1185 = bitcast double* %1184 to <4 x double>*
  %1186 = load <4 x double>, <4 x double>* %1185, align 8, !tbaa !19, !alias.scope !308
  %1187 = fmul <4 x double> %1173, %1177
  %1188 = fmul <4 x double> %1173, %1180
  %1189 = fmul <4 x double> %1173, %1183
  %1190 = fmul <4 x double> %1173, %1186
  %1191 = load <4 x double>, <4 x double>* %219, align 8, !tbaa !19, !alias.scope !311, !noalias !308
  %1192 = load <4 x double>, <4 x double>* %221, align 8, !tbaa !19, !alias.scope !311, !noalias !308
  %1193 = load <4 x double>, <4 x double>* %223, align 8, !tbaa !19, !alias.scope !311, !noalias !308
  %1194 = load <4 x double>, <4 x double>* %225, align 8, !tbaa !19, !alias.scope !311, !noalias !308
  %1195 = fadd <4 x double> %1191, %1187
  %1196 = fadd <4 x double> %1192, %1188
  %1197 = fadd <4 x double> %1193, %1189
  %1198 = fadd <4 x double> %1194, %1190
  store <4 x double> %1195, <4 x double>* %226, align 8, !tbaa !19, !alias.scope !311, !noalias !308
  store <4 x double> %1196, <4 x double>* %227, align 8, !tbaa !19, !alias.scope !311, !noalias !308
  store <4 x double> %1197, <4 x double>* %228, align 8, !tbaa !19, !alias.scope !311, !noalias !308
  store <4 x double> %1198, <4 x double>* %229, align 8, !tbaa !19, !alias.scope !311, !noalias !308
  br label %1199

; <label>:1199:                                   ; preds = %1171, %1175
  %1200 = phi i64 [ 16, %1175 ], [ 0, %1171 ]
  br label %1201

; <label>:1201:                                   ; preds = %1199
  br i1 %230, label %1281, label %1202

; <label>:1202:                                   ; preds = %1201
  br label %1203

; <label>:1203:                                   ; preds = %1203, %1202
  %1204 = phi i64 [ %1200, %1202 ], [ %1278, %1203 ]
  %1205 = getelementptr inbounds double, double* %1137, i64 %1204
  %1206 = bitcast double* %1205 to <4 x double>*
  %1207 = load <4 x double>, <4 x double>* %1206, align 8, !tbaa !19, !alias.scope !308
  %1208 = getelementptr double, double* %1205, i64 4
  %1209 = bitcast double* %1208 to <4 x double>*
  %1210 = load <4 x double>, <4 x double>* %1209, align 8, !tbaa !19, !alias.scope !308
  %1211 = getelementptr double, double* %1205, i64 8
  %1212 = bitcast double* %1211 to <4 x double>*
  %1213 = load <4 x double>, <4 x double>* %1212, align 8, !tbaa !19, !alias.scope !308
  %1214 = getelementptr double, double* %1205, i64 12
  %1215 = bitcast double* %1214 to <4 x double>*
  %1216 = load <4 x double>, <4 x double>* %1215, align 8, !tbaa !19, !alias.scope !308
  %1217 = fmul <4 x double> %1173, %1207
  %1218 = fmul <4 x double> %1173, %1210
  %1219 = fmul <4 x double> %1173, %1213
  %1220 = fmul <4 x double> %1173, %1216
  %1221 = getelementptr inbounds double, double* %4, i64 %1204
  %1222 = bitcast double* %1221 to <4 x double>*
  %1223 = load <4 x double>, <4 x double>* %1222, align 8, !tbaa !19, !alias.scope !311, !noalias !308
  %1224 = getelementptr double, double* %1221, i64 4
  %1225 = bitcast double* %1224 to <4 x double>*
  %1226 = load <4 x double>, <4 x double>* %1225, align 8, !tbaa !19, !alias.scope !311, !noalias !308
  %1227 = getelementptr double, double* %1221, i64 8
  %1228 = bitcast double* %1227 to <4 x double>*
  %1229 = load <4 x double>, <4 x double>* %1228, align 8, !tbaa !19, !alias.scope !311, !noalias !308
  %1230 = getelementptr double, double* %1221, i64 12
  %1231 = bitcast double* %1230 to <4 x double>*
  %1232 = load <4 x double>, <4 x double>* %1231, align 8, !tbaa !19, !alias.scope !311, !noalias !308
  %1233 = fadd <4 x double> %1223, %1217
  %1234 = fadd <4 x double> %1226, %1218
  %1235 = fadd <4 x double> %1229, %1219
  %1236 = fadd <4 x double> %1232, %1220
  %1237 = bitcast double* %1221 to <4 x double>*
  store <4 x double> %1233, <4 x double>* %1237, align 8, !tbaa !19, !alias.scope !311, !noalias !308
  %1238 = bitcast double* %1224 to <4 x double>*
  store <4 x double> %1234, <4 x double>* %1238, align 8, !tbaa !19, !alias.scope !311, !noalias !308
  %1239 = bitcast double* %1227 to <4 x double>*
  store <4 x double> %1235, <4 x double>* %1239, align 8, !tbaa !19, !alias.scope !311, !noalias !308
  %1240 = bitcast double* %1230 to <4 x double>*
  store <4 x double> %1236, <4 x double>* %1240, align 8, !tbaa !19, !alias.scope !311, !noalias !308
  %1241 = add i64 %1204, 16
  %1242 = getelementptr inbounds double, double* %1137, i64 %1241
  %1243 = bitcast double* %1242 to <4 x double>*
  %1244 = load <4 x double>, <4 x double>* %1243, align 8, !tbaa !19, !alias.scope !308
  %1245 = getelementptr double, double* %1242, i64 4
  %1246 = bitcast double* %1245 to <4 x double>*
  %1247 = load <4 x double>, <4 x double>* %1246, align 8, !tbaa !19, !alias.scope !308
  %1248 = getelementptr double, double* %1242, i64 8
  %1249 = bitcast double* %1248 to <4 x double>*
  %1250 = load <4 x double>, <4 x double>* %1249, align 8, !tbaa !19, !alias.scope !308
  %1251 = getelementptr double, double* %1242, i64 12
  %1252 = bitcast double* %1251 to <4 x double>*
  %1253 = load <4 x double>, <4 x double>* %1252, align 8, !tbaa !19, !alias.scope !308
  %1254 = fmul <4 x double> %1173, %1244
  %1255 = fmul <4 x double> %1173, %1247
  %1256 = fmul <4 x double> %1173, %1250
  %1257 = fmul <4 x double> %1173, %1253
  %1258 = getelementptr inbounds double, double* %4, i64 %1241
  %1259 = bitcast double* %1258 to <4 x double>*
  %1260 = load <4 x double>, <4 x double>* %1259, align 8, !tbaa !19, !alias.scope !311, !noalias !308
  %1261 = getelementptr double, double* %1258, i64 4
  %1262 = bitcast double* %1261 to <4 x double>*
  %1263 = load <4 x double>, <4 x double>* %1262, align 8, !tbaa !19, !alias.scope !311, !noalias !308
  %1264 = getelementptr double, double* %1258, i64 8
  %1265 = bitcast double* %1264 to <4 x double>*
  %1266 = load <4 x double>, <4 x double>* %1265, align 8, !tbaa !19, !alias.scope !311, !noalias !308
  %1267 = getelementptr double, double* %1258, i64 12
  %1268 = bitcast double* %1267 to <4 x double>*
  %1269 = load <4 x double>, <4 x double>* %1268, align 8, !tbaa !19, !alias.scope !311, !noalias !308
  %1270 = fadd <4 x double> %1260, %1254
  %1271 = fadd <4 x double> %1263, %1255
  %1272 = fadd <4 x double> %1266, %1256
  %1273 = fadd <4 x double> %1269, %1257
  %1274 = bitcast double* %1258 to <4 x double>*
  store <4 x double> %1270, <4 x double>* %1274, align 8, !tbaa !19, !alias.scope !311, !noalias !308
  %1275 = bitcast double* %1261 to <4 x double>*
  store <4 x double> %1271, <4 x double>* %1275, align 8, !tbaa !19, !alias.scope !311, !noalias !308
  %1276 = bitcast double* %1264 to <4 x double>*
  store <4 x double> %1272, <4 x double>* %1276, align 8, !tbaa !19, !alias.scope !311, !noalias !308
  %1277 = bitcast double* %1267 to <4 x double>*
  store <4 x double> %1273, <4 x double>* %1277, align 8, !tbaa !19, !alias.scope !311, !noalias !308
  %1278 = add i64 %1204, 32
  %1279 = icmp eq i64 %1278, %215
  br i1 %1279, label %1280, label %1203, !llvm.loop !313

; <label>:1280:                                   ; preds = %1203
  br label %1281

; <label>:1281:                                   ; preds = %1201, %1280
  br i1 %231, label %1738, label %1138

; <label>:1282:                                   ; preds = %1282, %1735
  %1283 = phi i64 [ %1734, %1735 ], [ %1347, %1282 ]
  %1284 = getelementptr inbounds double, double* %4, i64 %1283
  %1285 = getelementptr inbounds double, double* %1137, i64 %1283
  %1286 = bitcast double* %1285 to <4 x double>*
  %1287 = load <4 x double>, <4 x double>* %1286, align 1, !tbaa !11
  %1288 = bitcast double* %1284 to <4 x double>*
  %1289 = load <4 x double>, <4 x double>* %1288, align 16, !tbaa !11
  %1290 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %1287, <4 x double> %1739, <4 x double> %1289) #11
  store <4 x double> %1290, <4 x double>* %1288, align 16, !tbaa !11
  %1291 = add nsw i64 %1283, 4
  %1292 = getelementptr inbounds double, double* %4, i64 %1291
  %1293 = getelementptr inbounds double, double* %1137, i64 %1291
  %1294 = bitcast double* %1293 to <4 x double>*
  %1295 = load <4 x double>, <4 x double>* %1294, align 1, !tbaa !11
  %1296 = bitcast double* %1292 to <4 x double>*
  %1297 = load <4 x double>, <4 x double>* %1296, align 16, !tbaa !11
  %1298 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %1295, <4 x double> %1739, <4 x double> %1297) #11
  store <4 x double> %1298, <4 x double>* %1296, align 16, !tbaa !11
  %1299 = add nsw i64 %1283, 8
  %1300 = getelementptr inbounds double, double* %4, i64 %1299
  %1301 = getelementptr inbounds double, double* %1137, i64 %1299
  %1302 = bitcast double* %1301 to <4 x double>*
  %1303 = load <4 x double>, <4 x double>* %1302, align 1, !tbaa !11
  %1304 = bitcast double* %1300 to <4 x double>*
  %1305 = load <4 x double>, <4 x double>* %1304, align 16, !tbaa !11
  %1306 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %1303, <4 x double> %1739, <4 x double> %1305) #11
  store <4 x double> %1306, <4 x double>* %1304, align 16, !tbaa !11
  %1307 = add nsw i64 %1283, 12
  %1308 = getelementptr inbounds double, double* %4, i64 %1307
  %1309 = getelementptr inbounds double, double* %1137, i64 %1307
  %1310 = bitcast double* %1309 to <4 x double>*
  %1311 = load <4 x double>, <4 x double>* %1310, align 1, !tbaa !11
  %1312 = bitcast double* %1308 to <4 x double>*
  %1313 = load <4 x double>, <4 x double>* %1312, align 16, !tbaa !11
  %1314 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %1311, <4 x double> %1739, <4 x double> %1313) #11
  store <4 x double> %1314, <4 x double>* %1312, align 16, !tbaa !11
  %1315 = add nsw i64 %1283, 16
  %1316 = getelementptr inbounds double, double* %4, i64 %1315
  %1317 = getelementptr inbounds double, double* %1137, i64 %1315
  %1318 = bitcast double* %1317 to <4 x double>*
  %1319 = load <4 x double>, <4 x double>* %1318, align 1, !tbaa !11
  %1320 = bitcast double* %1316 to <4 x double>*
  %1321 = load <4 x double>, <4 x double>* %1320, align 16, !tbaa !11
  %1322 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %1319, <4 x double> %1739, <4 x double> %1321) #11
  store <4 x double> %1322, <4 x double>* %1320, align 16, !tbaa !11
  %1323 = add nsw i64 %1283, 20
  %1324 = getelementptr inbounds double, double* %4, i64 %1323
  %1325 = getelementptr inbounds double, double* %1137, i64 %1323
  %1326 = bitcast double* %1325 to <4 x double>*
  %1327 = load <4 x double>, <4 x double>* %1326, align 1, !tbaa !11
  %1328 = bitcast double* %1324 to <4 x double>*
  %1329 = load <4 x double>, <4 x double>* %1328, align 16, !tbaa !11
  %1330 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %1327, <4 x double> %1739, <4 x double> %1329) #11
  store <4 x double> %1330, <4 x double>* %1328, align 16, !tbaa !11
  %1331 = add nsw i64 %1283, 24
  %1332 = getelementptr inbounds double, double* %4, i64 %1331
  %1333 = getelementptr inbounds double, double* %1137, i64 %1331
  %1334 = bitcast double* %1333 to <4 x double>*
  %1335 = load <4 x double>, <4 x double>* %1334, align 1, !tbaa !11
  %1336 = bitcast double* %1332 to <4 x double>*
  %1337 = load <4 x double>, <4 x double>* %1336, align 16, !tbaa !11
  %1338 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %1335, <4 x double> %1739, <4 x double> %1337) #11
  store <4 x double> %1338, <4 x double>* %1336, align 16, !tbaa !11
  %1339 = add nsw i64 %1283, 28
  %1340 = getelementptr inbounds double, double* %4, i64 %1339
  %1341 = getelementptr inbounds double, double* %1137, i64 %1339
  %1342 = bitcast double* %1341 to <4 x double>*
  %1343 = load <4 x double>, <4 x double>* %1342, align 1, !tbaa !11
  %1344 = bitcast double* %1340 to <4 x double>*
  %1345 = load <4 x double>, <4 x double>* %1344, align 16, !tbaa !11
  %1346 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %1343, <4 x double> %1739, <4 x double> %1345) #11
  store <4 x double> %1346, <4 x double>* %1344, align 16, !tbaa !11
  %1347 = add nsw i64 %1283, 32
  %1348 = icmp slt i64 %1347, %61
  br i1 %1348, label %1282, label %1542

; <label>:1349:                                   ; preds = %1355
  br label %1350

; <label>:1350:                                   ; preds = %1566, %1349
  br label %1351

; <label>:1351:                                   ; preds = %1350, %1695, %1544
  %1352 = add nsw i64 %1122, 1
  %1353 = icmp eq i64 %1352, %1113
  %1354 = add i64 %1121, 1
  br i1 %1353, label %1744, label %1120

; <label>:1355:                                   ; preds = %1355, %1569
  %1356 = phi i64 [ %1567, %1569 ], [ %1412, %1355 ]
  %1357 = getelementptr inbounds double, double* %1137, i64 %1356
  %1358 = load double, double* %1357, align 8, !tbaa !19
  %1359 = fmul double %1132, %1358
  %1360 = getelementptr inbounds double, double* %4, i64 %1356
  %1361 = load double, double* %1360, align 8, !tbaa !19
  %1362 = fadd double %1361, %1359
  store double %1362, double* %1360, align 8, !tbaa !19
  %1363 = add nsw i64 %1356, 1
  %1364 = getelementptr inbounds double, double* %1137, i64 %1363
  %1365 = load double, double* %1364, align 8, !tbaa !19
  %1366 = fmul double %1132, %1365
  %1367 = getelementptr inbounds double, double* %4, i64 %1363
  %1368 = load double, double* %1367, align 8, !tbaa !19
  %1369 = fadd double %1368, %1366
  store double %1369, double* %1367, align 8, !tbaa !19
  %1370 = add nsw i64 %1356, 2
  %1371 = getelementptr inbounds double, double* %1137, i64 %1370
  %1372 = load double, double* %1371, align 8, !tbaa !19
  %1373 = fmul double %1132, %1372
  %1374 = getelementptr inbounds double, double* %4, i64 %1370
  %1375 = load double, double* %1374, align 8, !tbaa !19
  %1376 = fadd double %1375, %1373
  store double %1376, double* %1374, align 8, !tbaa !19
  %1377 = add nsw i64 %1356, 3
  %1378 = getelementptr inbounds double, double* %1137, i64 %1377
  %1379 = load double, double* %1378, align 8, !tbaa !19
  %1380 = fmul double %1132, %1379
  %1381 = getelementptr inbounds double, double* %4, i64 %1377
  %1382 = load double, double* %1381, align 8, !tbaa !19
  %1383 = fadd double %1382, %1380
  store double %1383, double* %1381, align 8, !tbaa !19
  %1384 = add nsw i64 %1356, 4
  %1385 = getelementptr inbounds double, double* %1137, i64 %1384
  %1386 = load double, double* %1385, align 8, !tbaa !19
  %1387 = fmul double %1132, %1386
  %1388 = getelementptr inbounds double, double* %4, i64 %1384
  %1389 = load double, double* %1388, align 8, !tbaa !19
  %1390 = fadd double %1389, %1387
  store double %1390, double* %1388, align 8, !tbaa !19
  %1391 = add nsw i64 %1356, 5
  %1392 = getelementptr inbounds double, double* %1137, i64 %1391
  %1393 = load double, double* %1392, align 8, !tbaa !19
  %1394 = fmul double %1132, %1393
  %1395 = getelementptr inbounds double, double* %4, i64 %1391
  %1396 = load double, double* %1395, align 8, !tbaa !19
  %1397 = fadd double %1396, %1394
  store double %1397, double* %1395, align 8, !tbaa !19
  %1398 = add nsw i64 %1356, 6
  %1399 = getelementptr inbounds double, double* %1137, i64 %1398
  %1400 = load double, double* %1399, align 8, !tbaa !19
  %1401 = fmul double %1132, %1400
  %1402 = getelementptr inbounds double, double* %4, i64 %1398
  %1403 = load double, double* %1402, align 8, !tbaa !19
  %1404 = fadd double %1403, %1401
  store double %1404, double* %1402, align 8, !tbaa !19
  %1405 = add nsw i64 %1356, 7
  %1406 = getelementptr inbounds double, double* %1137, i64 %1405
  %1407 = load double, double* %1406, align 8, !tbaa !19
  %1408 = fmul double %1132, %1407
  %1409 = getelementptr inbounds double, double* %4, i64 %1405
  %1410 = load double, double* %1409, align 8, !tbaa !19
  %1411 = fadd double %1410, %1408
  store double %1411, double* %1409, align 8, !tbaa !19
  %1412 = add nsw i64 %1356, 8
  %1413 = icmp eq i64 %1412, %0
  br i1 %1413, label %1349, label %1355, !llvm.loop !314

; <label>:1414:                                   ; preds = %1414, %1715
  %1415 = phi i64 [ %1714, %1715 ], [ %1479, %1414 ]
  %1416 = getelementptr inbounds double, double* %4, i64 %1415
  %1417 = getelementptr inbounds double, double* %1137, i64 %1415
  %1418 = bitcast double* %1417 to <4 x double>*
  %1419 = load <4 x double>, <4 x double>* %1418, align 1, !tbaa !11
  %1420 = bitcast double* %1416 to <4 x double>*
  %1421 = load <4 x double>, <4 x double>* %1420, align 16, !tbaa !11
  %1422 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %1419, <4 x double> %1739, <4 x double> %1421) #11
  store <4 x double> %1422, <4 x double>* %1420, align 16, !tbaa !11
  %1423 = add nsw i64 %1415, 4
  %1424 = getelementptr inbounds double, double* %4, i64 %1423
  %1425 = getelementptr inbounds double, double* %1137, i64 %1423
  %1426 = bitcast double* %1425 to <4 x double>*
  %1427 = load <4 x double>, <4 x double>* %1426, align 1, !tbaa !11
  %1428 = bitcast double* %1424 to <4 x double>*
  %1429 = load <4 x double>, <4 x double>* %1428, align 16, !tbaa !11
  %1430 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %1427, <4 x double> %1739, <4 x double> %1429) #11
  store <4 x double> %1430, <4 x double>* %1428, align 16, !tbaa !11
  %1431 = add nsw i64 %1415, 8
  %1432 = getelementptr inbounds double, double* %4, i64 %1431
  %1433 = getelementptr inbounds double, double* %1137, i64 %1431
  %1434 = bitcast double* %1433 to <4 x double>*
  %1435 = load <4 x double>, <4 x double>* %1434, align 1, !tbaa !11
  %1436 = bitcast double* %1432 to <4 x double>*
  %1437 = load <4 x double>, <4 x double>* %1436, align 16, !tbaa !11
  %1438 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %1435, <4 x double> %1739, <4 x double> %1437) #11
  store <4 x double> %1438, <4 x double>* %1436, align 16, !tbaa !11
  %1439 = add nsw i64 %1415, 12
  %1440 = getelementptr inbounds double, double* %4, i64 %1439
  %1441 = getelementptr inbounds double, double* %1137, i64 %1439
  %1442 = bitcast double* %1441 to <4 x double>*
  %1443 = load <4 x double>, <4 x double>* %1442, align 1, !tbaa !11
  %1444 = bitcast double* %1440 to <4 x double>*
  %1445 = load <4 x double>, <4 x double>* %1444, align 16, !tbaa !11
  %1446 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %1443, <4 x double> %1739, <4 x double> %1445) #11
  store <4 x double> %1446, <4 x double>* %1444, align 16, !tbaa !11
  %1447 = add nsw i64 %1415, 16
  %1448 = getelementptr inbounds double, double* %4, i64 %1447
  %1449 = getelementptr inbounds double, double* %1137, i64 %1447
  %1450 = bitcast double* %1449 to <4 x double>*
  %1451 = load <4 x double>, <4 x double>* %1450, align 1, !tbaa !11
  %1452 = bitcast double* %1448 to <4 x double>*
  %1453 = load <4 x double>, <4 x double>* %1452, align 16, !tbaa !11
  %1454 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %1451, <4 x double> %1739, <4 x double> %1453) #11
  store <4 x double> %1454, <4 x double>* %1452, align 16, !tbaa !11
  %1455 = add nsw i64 %1415, 20
  %1456 = getelementptr inbounds double, double* %4, i64 %1455
  %1457 = getelementptr inbounds double, double* %1137, i64 %1455
  %1458 = bitcast double* %1457 to <4 x double>*
  %1459 = load <4 x double>, <4 x double>* %1458, align 1, !tbaa !11
  %1460 = bitcast double* %1456 to <4 x double>*
  %1461 = load <4 x double>, <4 x double>* %1460, align 16, !tbaa !11
  %1462 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %1459, <4 x double> %1739, <4 x double> %1461) #11
  store <4 x double> %1462, <4 x double>* %1460, align 16, !tbaa !11
  %1463 = add nsw i64 %1415, 24
  %1464 = getelementptr inbounds double, double* %4, i64 %1463
  %1465 = getelementptr inbounds double, double* %1137, i64 %1463
  %1466 = bitcast double* %1465 to <4 x double>*
  %1467 = load <4 x double>, <4 x double>* %1466, align 1, !tbaa !11
  %1468 = bitcast double* %1464 to <4 x double>*
  %1469 = load <4 x double>, <4 x double>* %1468, align 16, !tbaa !11
  %1470 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %1467, <4 x double> %1739, <4 x double> %1469) #11
  store <4 x double> %1470, <4 x double>* %1468, align 16, !tbaa !11
  %1471 = add nsw i64 %1415, 28
  %1472 = getelementptr inbounds double, double* %4, i64 %1471
  %1473 = getelementptr inbounds double, double* %1137, i64 %1471
  %1474 = bitcast double* %1473 to <4 x double>*
  %1475 = load <4 x double>, <4 x double>* %1474, align 1, !tbaa !11
  %1476 = bitcast double* %1472 to <4 x double>*
  %1477 = load <4 x double>, <4 x double>* %1476, align 16, !tbaa !11
  %1478 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %1475, <4 x double> %1739, <4 x double> %1477) #11
  store <4 x double> %1478, <4 x double>* %1476, align 16, !tbaa !11
  %1479 = add nsw i64 %1415, 32
  %1480 = icmp slt i64 %1479, %61
  br i1 %1480, label %1414, label %1540

; <label>:1481:                                   ; preds = %1481, %1161
  %1482 = phi i64 [ %1159, %1161 ], [ %1538, %1481 ]
  %1483 = getelementptr inbounds double, double* %1137, i64 %1482
  %1484 = load double, double* %1483, align 8, !tbaa !19
  %1485 = fmul double %1132, %1484
  %1486 = getelementptr inbounds double, double* %4, i64 %1482
  %1487 = load double, double* %1486, align 8, !tbaa !19
  %1488 = fadd double %1487, %1485
  store double %1488, double* %1486, align 8, !tbaa !19
  %1489 = add nuw nsw i64 %1482, 1
  %1490 = getelementptr inbounds double, double* %1137, i64 %1489
  %1491 = load double, double* %1490, align 8, !tbaa !19
  %1492 = fmul double %1132, %1491
  %1493 = getelementptr inbounds double, double* %4, i64 %1489
  %1494 = load double, double* %1493, align 8, !tbaa !19
  %1495 = fadd double %1494, %1492
  store double %1495, double* %1493, align 8, !tbaa !19
  %1496 = add nsw i64 %1482, 2
  %1497 = getelementptr inbounds double, double* %1137, i64 %1496
  %1498 = load double, double* %1497, align 8, !tbaa !19
  %1499 = fmul double %1132, %1498
  %1500 = getelementptr inbounds double, double* %4, i64 %1496
  %1501 = load double, double* %1500, align 8, !tbaa !19
  %1502 = fadd double %1501, %1499
  store double %1502, double* %1500, align 8, !tbaa !19
  %1503 = add nsw i64 %1482, 3
  %1504 = getelementptr inbounds double, double* %1137, i64 %1503
  %1505 = load double, double* %1504, align 8, !tbaa !19
  %1506 = fmul double %1132, %1505
  %1507 = getelementptr inbounds double, double* %4, i64 %1503
  %1508 = load double, double* %1507, align 8, !tbaa !19
  %1509 = fadd double %1508, %1506
  store double %1509, double* %1507, align 8, !tbaa !19
  %1510 = add nsw i64 %1482, 4
  %1511 = getelementptr inbounds double, double* %1137, i64 %1510
  %1512 = load double, double* %1511, align 8, !tbaa !19
  %1513 = fmul double %1132, %1512
  %1514 = getelementptr inbounds double, double* %4, i64 %1510
  %1515 = load double, double* %1514, align 8, !tbaa !19
  %1516 = fadd double %1515, %1513
  store double %1516, double* %1514, align 8, !tbaa !19
  %1517 = add nsw i64 %1482, 5
  %1518 = getelementptr inbounds double, double* %1137, i64 %1517
  %1519 = load double, double* %1518, align 8, !tbaa !19
  %1520 = fmul double %1132, %1519
  %1521 = getelementptr inbounds double, double* %4, i64 %1517
  %1522 = load double, double* %1521, align 8, !tbaa !19
  %1523 = fadd double %1522, %1520
  store double %1523, double* %1521, align 8, !tbaa !19
  %1524 = add nsw i64 %1482, 6
  %1525 = getelementptr inbounds double, double* %1137, i64 %1524
  %1526 = load double, double* %1525, align 8, !tbaa !19
  %1527 = fmul double %1132, %1526
  %1528 = getelementptr inbounds double, double* %4, i64 %1524
  %1529 = load double, double* %1528, align 8, !tbaa !19
  %1530 = fadd double %1529, %1527
  store double %1530, double* %1528, align 8, !tbaa !19
  %1531 = add nsw i64 %1482, 7
  %1532 = getelementptr inbounds double, double* %1137, i64 %1531
  %1533 = load double, double* %1532, align 8, !tbaa !19
  %1534 = fmul double %1132, %1533
  %1535 = getelementptr inbounds double, double* %4, i64 %1531
  %1536 = load double, double* %1535, align 8, !tbaa !19
  %1537 = fadd double %1536, %1534
  store double %1537, double* %1535, align 8, !tbaa !19
  %1538 = add nsw i64 %1482, 8
  %1539 = icmp eq i64 %1538, %62
  br i1 %1539, label %1736, label %1481, !llvm.loop !315

; <label>:1540:                                   ; preds = %1414
  br label %1541

; <label>:1541:                                   ; preds = %1713, %1540
  br label %1544

; <label>:1542:                                   ; preds = %1282
  br label %1543

; <label>:1543:                                   ; preds = %1733, %1542
  br label %1544

; <label>:1544:                                   ; preds = %1543, %1541, %1716, %1696
  br i1 %162, label %1545, label %1351

; <label>:1545:                                   ; preds = %1544
  br i1 %192, label %1546, label %1570

; <label>:1546:                                   ; preds = %1695, %1571, %1570, %1545
  %1547 = phi i64 [ %61, %1571 ], [ %61, %1570 ], [ %61, %1545 ], [ %195, %1695 ]
  %1548 = sub i64 %0, %1547
  %1549 = sub i64 %187, %1547
  %1550 = and i64 %1548, 7
  %1551 = icmp eq i64 %1550, 0
  br i1 %1551, label %1566, label %1552

; <label>:1552:                                   ; preds = %1546
  br label %1553

; <label>:1553:                                   ; preds = %1553, %1552
  %1554 = phi i64 [ %1562, %1553 ], [ %1547, %1552 ]
  %1555 = phi i64 [ %1563, %1553 ], [ %1550, %1552 ]
  %1556 = getelementptr inbounds double, double* %1137, i64 %1554
  %1557 = load double, double* %1556, align 8, !tbaa !19
  %1558 = fmul double %1132, %1557
  %1559 = getelementptr inbounds double, double* %4, i64 %1554
  %1560 = load double, double* %1559, align 8, !tbaa !19
  %1561 = fadd double %1560, %1558
  store double %1561, double* %1559, align 8, !tbaa !19
  %1562 = add nsw i64 %1554, 1
  %1563 = add i64 %1555, -1
  %1564 = icmp eq i64 %1563, 0
  br i1 %1564, label %1565, label %1553, !llvm.loop !316

; <label>:1565:                                   ; preds = %1553
  br label %1566

; <label>:1566:                                   ; preds = %1546, %1565
  %1567 = phi i64 [ %1547, %1546 ], [ %1562, %1565 ]
  %1568 = icmp ult i64 %1549, 7
  br i1 %1568, label %1350, label %1569

; <label>:1569:                                   ; preds = %1566
  br label %1355

; <label>:1570:                                   ; preds = %1545
  br i1 %194, label %1546, label %1571

; <label>:1571:                                   ; preds = %1570
  %1572 = getelementptr double, double* %1134, i64 %61
  %1573 = bitcast double* %1572 to i8*
  %1574 = mul i64 %1135, %1126
  %1575 = getelementptr i8, i8* %1573, i64 %1574
  %1576 = getelementptr double, double* %1134, i64 %0
  %1577 = bitcast double* %1576 to i8*
  %1578 = getelementptr i8, i8* %1577, i64 %1574
  %1579 = icmp ult i8* %166, %1578
  %1580 = icmp ult i8* %1575, %168
  %1581 = and i1 %1579, %1580
  br i1 %1581, label %1546, label %1582

; <label>:1582:                                   ; preds = %1571
  %1583 = insertelement <4 x double> undef, double %1132, i32 0
  %1584 = shufflevector <4 x double> %1583, <4 x double> undef, <4 x i32> zeroinitializer
  br i1 %197, label %1611, label %1585

; <label>:1585:                                   ; preds = %1582
  br label %1586

; <label>:1586:                                   ; preds = %1585
  %1587 = getelementptr inbounds double, double* %1137, i64 %61
  %1588 = bitcast double* %1587 to <4 x double>*
  %1589 = load <4 x double>, <4 x double>* %1588, align 8, !tbaa !19, !alias.scope !317
  %1590 = getelementptr double, double* %1587, i64 4
  %1591 = bitcast double* %1590 to <4 x double>*
  %1592 = load <4 x double>, <4 x double>* %1591, align 8, !tbaa !19, !alias.scope !317
  %1593 = getelementptr double, double* %1587, i64 8
  %1594 = bitcast double* %1593 to <4 x double>*
  %1595 = load <4 x double>, <4 x double>* %1594, align 8, !tbaa !19, !alias.scope !317
  %1596 = getelementptr double, double* %1587, i64 12
  %1597 = bitcast double* %1596 to <4 x double>*
  %1598 = load <4 x double>, <4 x double>* %1597, align 8, !tbaa !19, !alias.scope !317
  %1599 = fmul <4 x double> %1584, %1589
  %1600 = fmul <4 x double> %1584, %1592
  %1601 = fmul <4 x double> %1584, %1595
  %1602 = fmul <4 x double> %1584, %1598
  %1603 = load <4 x double>, <4 x double>* %199, align 8, !tbaa !19, !alias.scope !320, !noalias !317
  %1604 = load <4 x double>, <4 x double>* %201, align 8, !tbaa !19, !alias.scope !320, !noalias !317
  %1605 = load <4 x double>, <4 x double>* %203, align 8, !tbaa !19, !alias.scope !320, !noalias !317
  %1606 = load <4 x double>, <4 x double>* %205, align 8, !tbaa !19, !alias.scope !320, !noalias !317
  %1607 = fadd <4 x double> %1603, %1599
  %1608 = fadd <4 x double> %1604, %1600
  %1609 = fadd <4 x double> %1605, %1601
  %1610 = fadd <4 x double> %1606, %1602
  store <4 x double> %1607, <4 x double>* %206, align 8, !tbaa !19, !alias.scope !320, !noalias !317
  store <4 x double> %1608, <4 x double>* %207, align 8, !tbaa !19, !alias.scope !320, !noalias !317
  store <4 x double> %1609, <4 x double>* %208, align 8, !tbaa !19, !alias.scope !320, !noalias !317
  store <4 x double> %1610, <4 x double>* %209, align 8, !tbaa !19, !alias.scope !320, !noalias !317
  br label %1611

; <label>:1611:                                   ; preds = %1582, %1586
  %1612 = phi i64 [ 16, %1586 ], [ 0, %1582 ]
  br label %1613

; <label>:1613:                                   ; preds = %1611
  br i1 %210, label %1695, label %1614

; <label>:1614:                                   ; preds = %1613
  br label %1615

; <label>:1615:                                   ; preds = %1615, %1614
  %1616 = phi i64 [ %1612, %1614 ], [ %1692, %1615 ]
  %1617 = add i64 %61, %1616
  %1618 = getelementptr inbounds double, double* %1137, i64 %1617
  %1619 = bitcast double* %1618 to <4 x double>*
  %1620 = load <4 x double>, <4 x double>* %1619, align 8, !tbaa !19, !alias.scope !317
  %1621 = getelementptr double, double* %1618, i64 4
  %1622 = bitcast double* %1621 to <4 x double>*
  %1623 = load <4 x double>, <4 x double>* %1622, align 8, !tbaa !19, !alias.scope !317
  %1624 = getelementptr double, double* %1618, i64 8
  %1625 = bitcast double* %1624 to <4 x double>*
  %1626 = load <4 x double>, <4 x double>* %1625, align 8, !tbaa !19, !alias.scope !317
  %1627 = getelementptr double, double* %1618, i64 12
  %1628 = bitcast double* %1627 to <4 x double>*
  %1629 = load <4 x double>, <4 x double>* %1628, align 8, !tbaa !19, !alias.scope !317
  %1630 = fmul <4 x double> %1584, %1620
  %1631 = fmul <4 x double> %1584, %1623
  %1632 = fmul <4 x double> %1584, %1626
  %1633 = fmul <4 x double> %1584, %1629
  %1634 = getelementptr inbounds double, double* %4, i64 %1617
  %1635 = bitcast double* %1634 to <4 x double>*
  %1636 = load <4 x double>, <4 x double>* %1635, align 8, !tbaa !19, !alias.scope !320, !noalias !317
  %1637 = getelementptr double, double* %1634, i64 4
  %1638 = bitcast double* %1637 to <4 x double>*
  %1639 = load <4 x double>, <4 x double>* %1638, align 8, !tbaa !19, !alias.scope !320, !noalias !317
  %1640 = getelementptr double, double* %1634, i64 8
  %1641 = bitcast double* %1640 to <4 x double>*
  %1642 = load <4 x double>, <4 x double>* %1641, align 8, !tbaa !19, !alias.scope !320, !noalias !317
  %1643 = getelementptr double, double* %1634, i64 12
  %1644 = bitcast double* %1643 to <4 x double>*
  %1645 = load <4 x double>, <4 x double>* %1644, align 8, !tbaa !19, !alias.scope !320, !noalias !317
  %1646 = fadd <4 x double> %1636, %1630
  %1647 = fadd <4 x double> %1639, %1631
  %1648 = fadd <4 x double> %1642, %1632
  %1649 = fadd <4 x double> %1645, %1633
  %1650 = bitcast double* %1634 to <4 x double>*
  store <4 x double> %1646, <4 x double>* %1650, align 8, !tbaa !19, !alias.scope !320, !noalias !317
  %1651 = bitcast double* %1637 to <4 x double>*
  store <4 x double> %1647, <4 x double>* %1651, align 8, !tbaa !19, !alias.scope !320, !noalias !317
  %1652 = bitcast double* %1640 to <4 x double>*
  store <4 x double> %1648, <4 x double>* %1652, align 8, !tbaa !19, !alias.scope !320, !noalias !317
  %1653 = bitcast double* %1643 to <4 x double>*
  store <4 x double> %1649, <4 x double>* %1653, align 8, !tbaa !19, !alias.scope !320, !noalias !317
  %1654 = add i64 %1616, 16
  %1655 = add i64 %61, %1654
  %1656 = getelementptr inbounds double, double* %1137, i64 %1655
  %1657 = bitcast double* %1656 to <4 x double>*
  %1658 = load <4 x double>, <4 x double>* %1657, align 8, !tbaa !19, !alias.scope !317
  %1659 = getelementptr double, double* %1656, i64 4
  %1660 = bitcast double* %1659 to <4 x double>*
  %1661 = load <4 x double>, <4 x double>* %1660, align 8, !tbaa !19, !alias.scope !317
  %1662 = getelementptr double, double* %1656, i64 8
  %1663 = bitcast double* %1662 to <4 x double>*
  %1664 = load <4 x double>, <4 x double>* %1663, align 8, !tbaa !19, !alias.scope !317
  %1665 = getelementptr double, double* %1656, i64 12
  %1666 = bitcast double* %1665 to <4 x double>*
  %1667 = load <4 x double>, <4 x double>* %1666, align 8, !tbaa !19, !alias.scope !317
  %1668 = fmul <4 x double> %1584, %1658
  %1669 = fmul <4 x double> %1584, %1661
  %1670 = fmul <4 x double> %1584, %1664
  %1671 = fmul <4 x double> %1584, %1667
  %1672 = getelementptr inbounds double, double* %4, i64 %1655
  %1673 = bitcast double* %1672 to <4 x double>*
  %1674 = load <4 x double>, <4 x double>* %1673, align 8, !tbaa !19, !alias.scope !320, !noalias !317
  %1675 = getelementptr double, double* %1672, i64 4
  %1676 = bitcast double* %1675 to <4 x double>*
  %1677 = load <4 x double>, <4 x double>* %1676, align 8, !tbaa !19, !alias.scope !320, !noalias !317
  %1678 = getelementptr double, double* %1672, i64 8
  %1679 = bitcast double* %1678 to <4 x double>*
  %1680 = load <4 x double>, <4 x double>* %1679, align 8, !tbaa !19, !alias.scope !320, !noalias !317
  %1681 = getelementptr double, double* %1672, i64 12
  %1682 = bitcast double* %1681 to <4 x double>*
  %1683 = load <4 x double>, <4 x double>* %1682, align 8, !tbaa !19, !alias.scope !320, !noalias !317
  %1684 = fadd <4 x double> %1674, %1668
  %1685 = fadd <4 x double> %1677, %1669
  %1686 = fadd <4 x double> %1680, %1670
  %1687 = fadd <4 x double> %1683, %1671
  %1688 = bitcast double* %1672 to <4 x double>*
  store <4 x double> %1684, <4 x double>* %1688, align 8, !tbaa !19, !alias.scope !320, !noalias !317
  %1689 = bitcast double* %1675 to <4 x double>*
  store <4 x double> %1685, <4 x double>* %1689, align 8, !tbaa !19, !alias.scope !320, !noalias !317
  %1690 = bitcast double* %1678 to <4 x double>*
  store <4 x double> %1686, <4 x double>* %1690, align 8, !tbaa !19, !alias.scope !320, !noalias !317
  %1691 = bitcast double* %1681 to <4 x double>*
  store <4 x double> %1687, <4 x double>* %1691, align 8, !tbaa !19, !alias.scope !320, !noalias !317
  %1692 = add i64 %1616, 32
  %1693 = icmp eq i64 %1692, %193
  br i1 %1693, label %1694, label %1615, !llvm.loop !322

; <label>:1694:                                   ; preds = %1615
  br label %1695

; <label>:1695:                                   ; preds = %1613, %1694
  br i1 %211, label %1351, label %1546

; <label>:1696:                                   ; preds = %1738
  br i1 %163, label %1697, label %1544

; <label>:1697:                                   ; preds = %1696
  br i1 %190, label %1713, label %1698

; <label>:1698:                                   ; preds = %1697
  br label %1699

; <label>:1699:                                   ; preds = %1699, %1698
  %1700 = phi i64 [ %1709, %1699 ], [ %62, %1698 ]
  %1701 = phi i64 [ %1710, %1699 ], [ %189, %1698 ]
  %1702 = getelementptr inbounds double, double* %4, i64 %1700
  %1703 = getelementptr inbounds double, double* %1137, i64 %1700
  %1704 = bitcast double* %1703 to <4 x double>*
  %1705 = load <4 x double>, <4 x double>* %1704, align 1, !tbaa !11
  %1706 = bitcast double* %1702 to <4 x double>*
  %1707 = load <4 x double>, <4 x double>* %1706, align 16, !tbaa !11
  %1708 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %1705, <4 x double> %1739, <4 x double> %1707) #11
  store <4 x double> %1708, <4 x double>* %1706, align 16, !tbaa !11
  %1709 = add nsw i64 %1700, 4
  %1710 = add i64 %1701, -1
  %1711 = icmp eq i64 %1710, 0
  br i1 %1711, label %1712, label %1699, !llvm.loop !323

; <label>:1712:                                   ; preds = %1699
  br label %1713

; <label>:1713:                                   ; preds = %1697, %1712
  %1714 = phi i64 [ %62, %1697 ], [ %1709, %1712 ]
  br i1 %191, label %1541, label %1715

; <label>:1715:                                   ; preds = %1713
  br label %1414

; <label>:1716:                                   ; preds = %1738
  br i1 %163, label %1717, label %1544

; <label>:1717:                                   ; preds = %1716
  br i1 %213, label %1733, label %1718

; <label>:1718:                                   ; preds = %1717
  br label %1719

; <label>:1719:                                   ; preds = %1719, %1718
  %1720 = phi i64 [ %1729, %1719 ], [ %62, %1718 ]
  %1721 = phi i64 [ %1730, %1719 ], [ %212, %1718 ]
  %1722 = getelementptr inbounds double, double* %4, i64 %1720
  %1723 = getelementptr inbounds double, double* %1137, i64 %1720
  %1724 = bitcast double* %1723 to <4 x double>*
  %1725 = load <4 x double>, <4 x double>* %1724, align 1, !tbaa !11
  %1726 = bitcast double* %1722 to <4 x double>*
  %1727 = load <4 x double>, <4 x double>* %1726, align 16, !tbaa !11
  %1728 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %1725, <4 x double> %1739, <4 x double> %1727) #11
  store <4 x double> %1728, <4 x double>* %1726, align 16, !tbaa !11
  %1729 = add nsw i64 %1720, 4
  %1730 = add i64 %1721, -1
  %1731 = icmp eq i64 %1730, 0
  br i1 %1731, label %1732, label %1719, !llvm.loop !324

; <label>:1732:                                   ; preds = %1719
  br label %1733

; <label>:1733:                                   ; preds = %1717, %1732
  %1734 = phi i64 [ %62, %1717 ], [ %1729, %1732 ]
  br i1 %214, label %1543, label %1735

; <label>:1735:                                   ; preds = %1733
  br label %1282

; <label>:1736:                                   ; preds = %1481
  br label %1737

; <label>:1737:                                   ; preds = %1158, %1736
  br label %1738

; <label>:1738:                                   ; preds = %1737, %1281
  %1739 = shufflevector <4 x double> %1133, <4 x double> undef, <4 x i32> zeroinitializer
  %1740 = getelementptr inbounds double, double* %1137, i64 %62
  %1741 = ptrtoint double* %1740 to i64
  %1742 = and i64 %1741, 31
  %1743 = icmp eq i64 %1742, 0
  br i1 %1743, label %1696, label %1716

; <label>:1744:                                   ; preds = %1351
  br label %1746

; <label>:1745:                                   ; preds = %2101
  br label %1746

; <label>:1746:                                   ; preds = %1745, %1744, %1111
  %1747 = icmp eq i64 %1112, 0
  br i1 %1747, label %2164, label %1111

; <label>:1748:                                   ; preds = %1117, %2101
  %1749 = phi i64 [ %2104, %2101 ], [ 0, %1117 ]
  %1750 = phi i64 [ %2102, %2101 ], [ %1114, %1117 ]
  %1751 = add i64 %1114, %1749
  %1752 = shl i64 %1751, 3
  %1753 = load double*, double** %71, align 8, !tbaa !276
  %1754 = load i64, i64* %72, align 8, !tbaa !278
  %1755 = mul nsw i64 %1754, %1750
  %1756 = getelementptr inbounds double, double* %1753, i64 %1755
  %1757 = load double, double* %1756, align 8, !tbaa !19
  %1758 = fmul double %1757, %6
  %1759 = insertelement <4 x double> undef, double %1758, i32 0
  %1760 = shufflevector <4 x double> %1759, <4 x double> undef, <4 x i32> zeroinitializer
  %1761 = load double*, double** %73, align 8, !tbaa !273
  %1762 = load i64, i64* %9, align 8, !tbaa !275
  %1763 = mul nsw i64 %1762, %1750
  %1764 = getelementptr inbounds double, double* %1761, i64 %1763
  %1765 = getelementptr inbounds double, double* %1764, i64 %62
  %1766 = ptrtoint double* %1765 to i64
  %1767 = and i64 %1766, 31
  %1768 = icmp eq i64 %1767, 0
  br i1 %1768, label %1789, label %1769

; <label>:1769:                                   ; preds = %1748
  br i1 %163, label %1770, label %1813

; <label>:1770:                                   ; preds = %1769
  br i1 %256, label %1786, label %1771

; <label>:1771:                                   ; preds = %1770
  br label %1772

; <label>:1772:                                   ; preds = %1772, %1771
  %1773 = phi i64 [ %1782, %1772 ], [ %62, %1771 ]
  %1774 = phi i64 [ %1783, %1772 ], [ %255, %1771 ]
  %1775 = getelementptr inbounds double, double* %4, i64 %1773
  %1776 = getelementptr inbounds double, double* %1764, i64 %1773
  %1777 = bitcast double* %1776 to <4 x double>*
  %1778 = load <4 x double>, <4 x double>* %1777, align 1, !tbaa !11
  %1779 = bitcast double* %1775 to <4 x double>*
  %1780 = load <4 x double>, <4 x double>* %1779, align 16, !tbaa !11
  %1781 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %1778, <4 x double> %1760, <4 x double> %1780) #11
  store <4 x double> %1781, <4 x double>* %1779, align 16, !tbaa !11
  %1782 = add nsw i64 %1773, 4
  %1783 = add i64 %1774, -1
  %1784 = icmp eq i64 %1783, 0
  br i1 %1784, label %1785, label %1772, !llvm.loop !325

; <label>:1785:                                   ; preds = %1772
  br label %1786

; <label>:1786:                                   ; preds = %1770, %1785
  %1787 = phi i64 [ %62, %1770 ], [ %1782, %1785 ]
  br i1 %257, label %1812, label %1788

; <label>:1788:                                   ; preds = %1786
  br label %2032

; <label>:1789:                                   ; preds = %1748
  br i1 %163, label %1790, label %1813

; <label>:1790:                                   ; preds = %1789
  br i1 %233, label %1806, label %1791

; <label>:1791:                                   ; preds = %1790
  br label %1792

; <label>:1792:                                   ; preds = %1792, %1791
  %1793 = phi i64 [ %1802, %1792 ], [ %62, %1791 ]
  %1794 = phi i64 [ %1803, %1792 ], [ %232, %1791 ]
  %1795 = getelementptr inbounds double, double* %4, i64 %1793
  %1796 = getelementptr inbounds double, double* %1764, i64 %1793
  %1797 = bitcast double* %1796 to <4 x double>*
  %1798 = load <4 x double>, <4 x double>* %1797, align 1, !tbaa !11
  %1799 = bitcast double* %1795 to <4 x double>*
  %1800 = load <4 x double>, <4 x double>* %1799, align 16, !tbaa !11
  %1801 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %1798, <4 x double> %1760, <4 x double> %1800) #11
  store <4 x double> %1801, <4 x double>* %1799, align 16, !tbaa !11
  %1802 = add nsw i64 %1793, 4
  %1803 = add i64 %1794, -1
  %1804 = icmp eq i64 %1803, 0
  br i1 %1804, label %1805, label %1792, !llvm.loop !326

; <label>:1805:                                   ; preds = %1792
  br label %1806

; <label>:1806:                                   ; preds = %1790, %1805
  %1807 = phi i64 [ %62, %1790 ], [ %1802, %1805 ]
  br i1 %234, label %1810, label %1808

; <label>:1808:                                   ; preds = %1806
  br label %1965

; <label>:1809:                                   ; preds = %1965
  br label %1810

; <label>:1810:                                   ; preds = %1806, %1809
  br label %1813

; <label>:1811:                                   ; preds = %2032
  br label %1812

; <label>:1812:                                   ; preds = %1786, %1811
  br label %1813

; <label>:1813:                                   ; preds = %1812, %1810, %1769, %1789
  br i1 %162, label %1814, label %2101

; <label>:1814:                                   ; preds = %1813
  br i1 %235, label %1815, label %1839

; <label>:1815:                                   ; preds = %1964, %1840, %1839, %1814
  %1816 = phi i64 [ %61, %1840 ], [ %61, %1839 ], [ %61, %1814 ], [ %238, %1964 ]
  %1817 = sub i64 %0, %1816
  %1818 = sub i64 %182, %1816
  %1819 = and i64 %1817, 7
  %1820 = icmp eq i64 %1819, 0
  br i1 %1820, label %1835, label %1821

; <label>:1821:                                   ; preds = %1815
  br label %1822

; <label>:1822:                                   ; preds = %1822, %1821
  %1823 = phi i64 [ %1831, %1822 ], [ %1816, %1821 ]
  %1824 = phi i64 [ %1832, %1822 ], [ %1819, %1821 ]
  %1825 = getelementptr inbounds double, double* %1764, i64 %1823
  %1826 = load double, double* %1825, align 8, !tbaa !19
  %1827 = fmul double %1758, %1826
  %1828 = getelementptr inbounds double, double* %4, i64 %1823
  %1829 = load double, double* %1828, align 8, !tbaa !19
  %1830 = fadd double %1829, %1827
  store double %1830, double* %1828, align 8, !tbaa !19
  %1831 = add nsw i64 %1823, 1
  %1832 = add i64 %1824, -1
  %1833 = icmp eq i64 %1832, 0
  br i1 %1833, label %1834, label %1822, !llvm.loop !327

; <label>:1834:                                   ; preds = %1822
  br label %1835

; <label>:1835:                                   ; preds = %1815, %1834
  %1836 = phi i64 [ %1816, %1815 ], [ %1831, %1834 ]
  %1837 = icmp ult i64 %1818, 7
  br i1 %1837, label %2100, label %1838

; <label>:1838:                                   ; preds = %1835
  br label %2105

; <label>:1839:                                   ; preds = %1814
  br i1 %237, label %1815, label %1840

; <label>:1840:                                   ; preds = %1839
  %1841 = getelementptr double, double* %1761, i64 %61
  %1842 = bitcast double* %1841 to i8*
  %1843 = mul i64 %1762, %1752
  %1844 = getelementptr i8, i8* %1842, i64 %1843
  %1845 = getelementptr double, double* %1761, i64 %0
  %1846 = bitcast double* %1845 to i8*
  %1847 = getelementptr i8, i8* %1846, i64 %1843
  %1848 = icmp ult i8* %172, %1847
  %1849 = icmp ult i8* %1844, %174
  %1850 = and i1 %1848, %1849
  br i1 %1850, label %1815, label %1851

; <label>:1851:                                   ; preds = %1840
  %1852 = insertelement <4 x double> undef, double %1758, i32 0
  %1853 = shufflevector <4 x double> %1852, <4 x double> undef, <4 x i32> zeroinitializer
  br i1 %240, label %1880, label %1854

; <label>:1854:                                   ; preds = %1851
  br label %1855

; <label>:1855:                                   ; preds = %1854
  %1856 = getelementptr inbounds double, double* %1764, i64 %61
  %1857 = bitcast double* %1856 to <4 x double>*
  %1858 = load <4 x double>, <4 x double>* %1857, align 8, !tbaa !19, !alias.scope !328
  %1859 = getelementptr double, double* %1856, i64 4
  %1860 = bitcast double* %1859 to <4 x double>*
  %1861 = load <4 x double>, <4 x double>* %1860, align 8, !tbaa !19, !alias.scope !328
  %1862 = getelementptr double, double* %1856, i64 8
  %1863 = bitcast double* %1862 to <4 x double>*
  %1864 = load <4 x double>, <4 x double>* %1863, align 8, !tbaa !19, !alias.scope !328
  %1865 = getelementptr double, double* %1856, i64 12
  %1866 = bitcast double* %1865 to <4 x double>*
  %1867 = load <4 x double>, <4 x double>* %1866, align 8, !tbaa !19, !alias.scope !328
  %1868 = fmul <4 x double> %1853, %1858
  %1869 = fmul <4 x double> %1853, %1861
  %1870 = fmul <4 x double> %1853, %1864
  %1871 = fmul <4 x double> %1853, %1867
  %1872 = load <4 x double>, <4 x double>* %242, align 8, !tbaa !19, !alias.scope !331, !noalias !328
  %1873 = load <4 x double>, <4 x double>* %244, align 8, !tbaa !19, !alias.scope !331, !noalias !328
  %1874 = load <4 x double>, <4 x double>* %246, align 8, !tbaa !19, !alias.scope !331, !noalias !328
  %1875 = load <4 x double>, <4 x double>* %248, align 8, !tbaa !19, !alias.scope !331, !noalias !328
  %1876 = fadd <4 x double> %1872, %1868
  %1877 = fadd <4 x double> %1873, %1869
  %1878 = fadd <4 x double> %1874, %1870
  %1879 = fadd <4 x double> %1875, %1871
  store <4 x double> %1876, <4 x double>* %249, align 8, !tbaa !19, !alias.scope !331, !noalias !328
  store <4 x double> %1877, <4 x double>* %250, align 8, !tbaa !19, !alias.scope !331, !noalias !328
  store <4 x double> %1878, <4 x double>* %251, align 8, !tbaa !19, !alias.scope !331, !noalias !328
  store <4 x double> %1879, <4 x double>* %252, align 8, !tbaa !19, !alias.scope !331, !noalias !328
  br label %1880

; <label>:1880:                                   ; preds = %1851, %1855
  %1881 = phi i64 [ 16, %1855 ], [ 0, %1851 ]
  br label %1882

; <label>:1882:                                   ; preds = %1880
  br i1 %253, label %1964, label %1883

; <label>:1883:                                   ; preds = %1882
  br label %1884

; <label>:1884:                                   ; preds = %1884, %1883
  %1885 = phi i64 [ %1881, %1883 ], [ %1961, %1884 ]
  %1886 = add i64 %61, %1885
  %1887 = getelementptr inbounds double, double* %1764, i64 %1886
  %1888 = bitcast double* %1887 to <4 x double>*
  %1889 = load <4 x double>, <4 x double>* %1888, align 8, !tbaa !19, !alias.scope !328
  %1890 = getelementptr double, double* %1887, i64 4
  %1891 = bitcast double* %1890 to <4 x double>*
  %1892 = load <4 x double>, <4 x double>* %1891, align 8, !tbaa !19, !alias.scope !328
  %1893 = getelementptr double, double* %1887, i64 8
  %1894 = bitcast double* %1893 to <4 x double>*
  %1895 = load <4 x double>, <4 x double>* %1894, align 8, !tbaa !19, !alias.scope !328
  %1896 = getelementptr double, double* %1887, i64 12
  %1897 = bitcast double* %1896 to <4 x double>*
  %1898 = load <4 x double>, <4 x double>* %1897, align 8, !tbaa !19, !alias.scope !328
  %1899 = fmul <4 x double> %1853, %1889
  %1900 = fmul <4 x double> %1853, %1892
  %1901 = fmul <4 x double> %1853, %1895
  %1902 = fmul <4 x double> %1853, %1898
  %1903 = getelementptr inbounds double, double* %4, i64 %1886
  %1904 = bitcast double* %1903 to <4 x double>*
  %1905 = load <4 x double>, <4 x double>* %1904, align 8, !tbaa !19, !alias.scope !331, !noalias !328
  %1906 = getelementptr double, double* %1903, i64 4
  %1907 = bitcast double* %1906 to <4 x double>*
  %1908 = load <4 x double>, <4 x double>* %1907, align 8, !tbaa !19, !alias.scope !331, !noalias !328
  %1909 = getelementptr double, double* %1903, i64 8
  %1910 = bitcast double* %1909 to <4 x double>*
  %1911 = load <4 x double>, <4 x double>* %1910, align 8, !tbaa !19, !alias.scope !331, !noalias !328
  %1912 = getelementptr double, double* %1903, i64 12
  %1913 = bitcast double* %1912 to <4 x double>*
  %1914 = load <4 x double>, <4 x double>* %1913, align 8, !tbaa !19, !alias.scope !331, !noalias !328
  %1915 = fadd <4 x double> %1905, %1899
  %1916 = fadd <4 x double> %1908, %1900
  %1917 = fadd <4 x double> %1911, %1901
  %1918 = fadd <4 x double> %1914, %1902
  %1919 = bitcast double* %1903 to <4 x double>*
  store <4 x double> %1915, <4 x double>* %1919, align 8, !tbaa !19, !alias.scope !331, !noalias !328
  %1920 = bitcast double* %1906 to <4 x double>*
  store <4 x double> %1916, <4 x double>* %1920, align 8, !tbaa !19, !alias.scope !331, !noalias !328
  %1921 = bitcast double* %1909 to <4 x double>*
  store <4 x double> %1917, <4 x double>* %1921, align 8, !tbaa !19, !alias.scope !331, !noalias !328
  %1922 = bitcast double* %1912 to <4 x double>*
  store <4 x double> %1918, <4 x double>* %1922, align 8, !tbaa !19, !alias.scope !331, !noalias !328
  %1923 = add i64 %1885, 16
  %1924 = add i64 %61, %1923
  %1925 = getelementptr inbounds double, double* %1764, i64 %1924
  %1926 = bitcast double* %1925 to <4 x double>*
  %1927 = load <4 x double>, <4 x double>* %1926, align 8, !tbaa !19, !alias.scope !328
  %1928 = getelementptr double, double* %1925, i64 4
  %1929 = bitcast double* %1928 to <4 x double>*
  %1930 = load <4 x double>, <4 x double>* %1929, align 8, !tbaa !19, !alias.scope !328
  %1931 = getelementptr double, double* %1925, i64 8
  %1932 = bitcast double* %1931 to <4 x double>*
  %1933 = load <4 x double>, <4 x double>* %1932, align 8, !tbaa !19, !alias.scope !328
  %1934 = getelementptr double, double* %1925, i64 12
  %1935 = bitcast double* %1934 to <4 x double>*
  %1936 = load <4 x double>, <4 x double>* %1935, align 8, !tbaa !19, !alias.scope !328
  %1937 = fmul <4 x double> %1853, %1927
  %1938 = fmul <4 x double> %1853, %1930
  %1939 = fmul <4 x double> %1853, %1933
  %1940 = fmul <4 x double> %1853, %1936
  %1941 = getelementptr inbounds double, double* %4, i64 %1924
  %1942 = bitcast double* %1941 to <4 x double>*
  %1943 = load <4 x double>, <4 x double>* %1942, align 8, !tbaa !19, !alias.scope !331, !noalias !328
  %1944 = getelementptr double, double* %1941, i64 4
  %1945 = bitcast double* %1944 to <4 x double>*
  %1946 = load <4 x double>, <4 x double>* %1945, align 8, !tbaa !19, !alias.scope !331, !noalias !328
  %1947 = getelementptr double, double* %1941, i64 8
  %1948 = bitcast double* %1947 to <4 x double>*
  %1949 = load <4 x double>, <4 x double>* %1948, align 8, !tbaa !19, !alias.scope !331, !noalias !328
  %1950 = getelementptr double, double* %1941, i64 12
  %1951 = bitcast double* %1950 to <4 x double>*
  %1952 = load <4 x double>, <4 x double>* %1951, align 8, !tbaa !19, !alias.scope !331, !noalias !328
  %1953 = fadd <4 x double> %1943, %1937
  %1954 = fadd <4 x double> %1946, %1938
  %1955 = fadd <4 x double> %1949, %1939
  %1956 = fadd <4 x double> %1952, %1940
  %1957 = bitcast double* %1941 to <4 x double>*
  store <4 x double> %1953, <4 x double>* %1957, align 8, !tbaa !19, !alias.scope !331, !noalias !328
  %1958 = bitcast double* %1944 to <4 x double>*
  store <4 x double> %1954, <4 x double>* %1958, align 8, !tbaa !19, !alias.scope !331, !noalias !328
  %1959 = bitcast double* %1947 to <4 x double>*
  store <4 x double> %1955, <4 x double>* %1959, align 8, !tbaa !19, !alias.scope !331, !noalias !328
  %1960 = bitcast double* %1950 to <4 x double>*
  store <4 x double> %1956, <4 x double>* %1960, align 8, !tbaa !19, !alias.scope !331, !noalias !328
  %1961 = add i64 %1885, 32
  %1962 = icmp eq i64 %1961, %236
  br i1 %1962, label %1963, label %1884, !llvm.loop !333

; <label>:1963:                                   ; preds = %1884
  br label %1964

; <label>:1964:                                   ; preds = %1882, %1963
  br i1 %254, label %2101, label %1815

; <label>:1965:                                   ; preds = %1965, %1808
  %1966 = phi i64 [ %1807, %1808 ], [ %2030, %1965 ]
  %1967 = getelementptr inbounds double, double* %4, i64 %1966
  %1968 = getelementptr inbounds double, double* %1764, i64 %1966
  %1969 = bitcast double* %1968 to <4 x double>*
  %1970 = load <4 x double>, <4 x double>* %1969, align 1, !tbaa !11
  %1971 = bitcast double* %1967 to <4 x double>*
  %1972 = load <4 x double>, <4 x double>* %1971, align 16, !tbaa !11
  %1973 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %1970, <4 x double> %1760, <4 x double> %1972) #11
  store <4 x double> %1973, <4 x double>* %1971, align 16, !tbaa !11
  %1974 = add nsw i64 %1966, 4
  %1975 = getelementptr inbounds double, double* %4, i64 %1974
  %1976 = getelementptr inbounds double, double* %1764, i64 %1974
  %1977 = bitcast double* %1976 to <4 x double>*
  %1978 = load <4 x double>, <4 x double>* %1977, align 1, !tbaa !11
  %1979 = bitcast double* %1975 to <4 x double>*
  %1980 = load <4 x double>, <4 x double>* %1979, align 16, !tbaa !11
  %1981 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %1978, <4 x double> %1760, <4 x double> %1980) #11
  store <4 x double> %1981, <4 x double>* %1979, align 16, !tbaa !11
  %1982 = add nsw i64 %1966, 8
  %1983 = getelementptr inbounds double, double* %4, i64 %1982
  %1984 = getelementptr inbounds double, double* %1764, i64 %1982
  %1985 = bitcast double* %1984 to <4 x double>*
  %1986 = load <4 x double>, <4 x double>* %1985, align 1, !tbaa !11
  %1987 = bitcast double* %1983 to <4 x double>*
  %1988 = load <4 x double>, <4 x double>* %1987, align 16, !tbaa !11
  %1989 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %1986, <4 x double> %1760, <4 x double> %1988) #11
  store <4 x double> %1989, <4 x double>* %1987, align 16, !tbaa !11
  %1990 = add nsw i64 %1966, 12
  %1991 = getelementptr inbounds double, double* %4, i64 %1990
  %1992 = getelementptr inbounds double, double* %1764, i64 %1990
  %1993 = bitcast double* %1992 to <4 x double>*
  %1994 = load <4 x double>, <4 x double>* %1993, align 1, !tbaa !11
  %1995 = bitcast double* %1991 to <4 x double>*
  %1996 = load <4 x double>, <4 x double>* %1995, align 16, !tbaa !11
  %1997 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %1994, <4 x double> %1760, <4 x double> %1996) #11
  store <4 x double> %1997, <4 x double>* %1995, align 16, !tbaa !11
  %1998 = add nsw i64 %1966, 16
  %1999 = getelementptr inbounds double, double* %4, i64 %1998
  %2000 = getelementptr inbounds double, double* %1764, i64 %1998
  %2001 = bitcast double* %2000 to <4 x double>*
  %2002 = load <4 x double>, <4 x double>* %2001, align 1, !tbaa !11
  %2003 = bitcast double* %1999 to <4 x double>*
  %2004 = load <4 x double>, <4 x double>* %2003, align 16, !tbaa !11
  %2005 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %2002, <4 x double> %1760, <4 x double> %2004) #11
  store <4 x double> %2005, <4 x double>* %2003, align 16, !tbaa !11
  %2006 = add nsw i64 %1966, 20
  %2007 = getelementptr inbounds double, double* %4, i64 %2006
  %2008 = getelementptr inbounds double, double* %1764, i64 %2006
  %2009 = bitcast double* %2008 to <4 x double>*
  %2010 = load <4 x double>, <4 x double>* %2009, align 1, !tbaa !11
  %2011 = bitcast double* %2007 to <4 x double>*
  %2012 = load <4 x double>, <4 x double>* %2011, align 16, !tbaa !11
  %2013 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %2010, <4 x double> %1760, <4 x double> %2012) #11
  store <4 x double> %2013, <4 x double>* %2011, align 16, !tbaa !11
  %2014 = add nsw i64 %1966, 24
  %2015 = getelementptr inbounds double, double* %4, i64 %2014
  %2016 = getelementptr inbounds double, double* %1764, i64 %2014
  %2017 = bitcast double* %2016 to <4 x double>*
  %2018 = load <4 x double>, <4 x double>* %2017, align 1, !tbaa !11
  %2019 = bitcast double* %2015 to <4 x double>*
  %2020 = load <4 x double>, <4 x double>* %2019, align 16, !tbaa !11
  %2021 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %2018, <4 x double> %1760, <4 x double> %2020) #11
  store <4 x double> %2021, <4 x double>* %2019, align 16, !tbaa !11
  %2022 = add nsw i64 %1966, 28
  %2023 = getelementptr inbounds double, double* %4, i64 %2022
  %2024 = getelementptr inbounds double, double* %1764, i64 %2022
  %2025 = bitcast double* %2024 to <4 x double>*
  %2026 = load <4 x double>, <4 x double>* %2025, align 1, !tbaa !11
  %2027 = bitcast double* %2023 to <4 x double>*
  %2028 = load <4 x double>, <4 x double>* %2027, align 16, !tbaa !11
  %2029 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %2026, <4 x double> %1760, <4 x double> %2028) #11
  store <4 x double> %2029, <4 x double>* %2027, align 16, !tbaa !11
  %2030 = add nsw i64 %1966, 32
  %2031 = icmp slt i64 %2030, %61
  br i1 %2031, label %1965, label %1809

; <label>:2032:                                   ; preds = %2032, %1788
  %2033 = phi i64 [ %1787, %1788 ], [ %2097, %2032 ]
  %2034 = getelementptr inbounds double, double* %4, i64 %2033
  %2035 = getelementptr inbounds double, double* %1764, i64 %2033
  %2036 = bitcast double* %2035 to <4 x double>*
  %2037 = load <4 x double>, <4 x double>* %2036, align 1, !tbaa !11
  %2038 = bitcast double* %2034 to <4 x double>*
  %2039 = load <4 x double>, <4 x double>* %2038, align 16, !tbaa !11
  %2040 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %2037, <4 x double> %1760, <4 x double> %2039) #11
  store <4 x double> %2040, <4 x double>* %2038, align 16, !tbaa !11
  %2041 = add nsw i64 %2033, 4
  %2042 = getelementptr inbounds double, double* %4, i64 %2041
  %2043 = getelementptr inbounds double, double* %1764, i64 %2041
  %2044 = bitcast double* %2043 to <4 x double>*
  %2045 = load <4 x double>, <4 x double>* %2044, align 1, !tbaa !11
  %2046 = bitcast double* %2042 to <4 x double>*
  %2047 = load <4 x double>, <4 x double>* %2046, align 16, !tbaa !11
  %2048 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %2045, <4 x double> %1760, <4 x double> %2047) #11
  store <4 x double> %2048, <4 x double>* %2046, align 16, !tbaa !11
  %2049 = add nsw i64 %2033, 8
  %2050 = getelementptr inbounds double, double* %4, i64 %2049
  %2051 = getelementptr inbounds double, double* %1764, i64 %2049
  %2052 = bitcast double* %2051 to <4 x double>*
  %2053 = load <4 x double>, <4 x double>* %2052, align 1, !tbaa !11
  %2054 = bitcast double* %2050 to <4 x double>*
  %2055 = load <4 x double>, <4 x double>* %2054, align 16, !tbaa !11
  %2056 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %2053, <4 x double> %1760, <4 x double> %2055) #11
  store <4 x double> %2056, <4 x double>* %2054, align 16, !tbaa !11
  %2057 = add nsw i64 %2033, 12
  %2058 = getelementptr inbounds double, double* %4, i64 %2057
  %2059 = getelementptr inbounds double, double* %1764, i64 %2057
  %2060 = bitcast double* %2059 to <4 x double>*
  %2061 = load <4 x double>, <4 x double>* %2060, align 1, !tbaa !11
  %2062 = bitcast double* %2058 to <4 x double>*
  %2063 = load <4 x double>, <4 x double>* %2062, align 16, !tbaa !11
  %2064 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %2061, <4 x double> %1760, <4 x double> %2063) #11
  store <4 x double> %2064, <4 x double>* %2062, align 16, !tbaa !11
  %2065 = add nsw i64 %2033, 16
  %2066 = getelementptr inbounds double, double* %4, i64 %2065
  %2067 = getelementptr inbounds double, double* %1764, i64 %2065
  %2068 = bitcast double* %2067 to <4 x double>*
  %2069 = load <4 x double>, <4 x double>* %2068, align 1, !tbaa !11
  %2070 = bitcast double* %2066 to <4 x double>*
  %2071 = load <4 x double>, <4 x double>* %2070, align 16, !tbaa !11
  %2072 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %2069, <4 x double> %1760, <4 x double> %2071) #11
  store <4 x double> %2072, <4 x double>* %2070, align 16, !tbaa !11
  %2073 = add nsw i64 %2033, 20
  %2074 = getelementptr inbounds double, double* %4, i64 %2073
  %2075 = getelementptr inbounds double, double* %1764, i64 %2073
  %2076 = bitcast double* %2075 to <4 x double>*
  %2077 = load <4 x double>, <4 x double>* %2076, align 1, !tbaa !11
  %2078 = bitcast double* %2074 to <4 x double>*
  %2079 = load <4 x double>, <4 x double>* %2078, align 16, !tbaa !11
  %2080 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %2077, <4 x double> %1760, <4 x double> %2079) #11
  store <4 x double> %2080, <4 x double>* %2078, align 16, !tbaa !11
  %2081 = add nsw i64 %2033, 24
  %2082 = getelementptr inbounds double, double* %4, i64 %2081
  %2083 = getelementptr inbounds double, double* %1764, i64 %2081
  %2084 = bitcast double* %2083 to <4 x double>*
  %2085 = load <4 x double>, <4 x double>* %2084, align 1, !tbaa !11
  %2086 = bitcast double* %2082 to <4 x double>*
  %2087 = load <4 x double>, <4 x double>* %2086, align 16, !tbaa !11
  %2088 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %2085, <4 x double> %1760, <4 x double> %2087) #11
  store <4 x double> %2088, <4 x double>* %2086, align 16, !tbaa !11
  %2089 = add nsw i64 %2033, 28
  %2090 = getelementptr inbounds double, double* %4, i64 %2089
  %2091 = getelementptr inbounds double, double* %1764, i64 %2089
  %2092 = bitcast double* %2091 to <4 x double>*
  %2093 = load <4 x double>, <4 x double>* %2092, align 1, !tbaa !11
  %2094 = bitcast double* %2090 to <4 x double>*
  %2095 = load <4 x double>, <4 x double>* %2094, align 16, !tbaa !11
  %2096 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %2093, <4 x double> %1760, <4 x double> %2095) #11
  store <4 x double> %2096, <4 x double>* %2094, align 16, !tbaa !11
  %2097 = add nsw i64 %2033, 32
  %2098 = icmp slt i64 %2097, %61
  br i1 %2098, label %2032, label %1811

; <label>:2099:                                   ; preds = %2105
  br label %2100

; <label>:2100:                                   ; preds = %1835, %2099
  br label %2101

; <label>:2101:                                   ; preds = %2100, %1964, %1813
  %2102 = add nsw i64 %1750, 1
  %2103 = icmp eq i64 %2102, %1113
  %2104 = add i64 %1749, 1
  br i1 %2103, label %1745, label %1748

; <label>:2105:                                   ; preds = %2105, %1838
  %2106 = phi i64 [ %1836, %1838 ], [ %2162, %2105 ]
  %2107 = getelementptr inbounds double, double* %1764, i64 %2106
  %2108 = load double, double* %2107, align 8, !tbaa !19
  %2109 = fmul double %1758, %2108
  %2110 = getelementptr inbounds double, double* %4, i64 %2106
  %2111 = load double, double* %2110, align 8, !tbaa !19
  %2112 = fadd double %2111, %2109
  store double %2112, double* %2110, align 8, !tbaa !19
  %2113 = add nsw i64 %2106, 1
  %2114 = getelementptr inbounds double, double* %1764, i64 %2113
  %2115 = load double, double* %2114, align 8, !tbaa !19
  %2116 = fmul double %1758, %2115
  %2117 = getelementptr inbounds double, double* %4, i64 %2113
  %2118 = load double, double* %2117, align 8, !tbaa !19
  %2119 = fadd double %2118, %2116
  store double %2119, double* %2117, align 8, !tbaa !19
  %2120 = add nsw i64 %2106, 2
  %2121 = getelementptr inbounds double, double* %1764, i64 %2120
  %2122 = load double, double* %2121, align 8, !tbaa !19
  %2123 = fmul double %1758, %2122
  %2124 = getelementptr inbounds double, double* %4, i64 %2120
  %2125 = load double, double* %2124, align 8, !tbaa !19
  %2126 = fadd double %2125, %2123
  store double %2126, double* %2124, align 8, !tbaa !19
  %2127 = add nsw i64 %2106, 3
  %2128 = getelementptr inbounds double, double* %1764, i64 %2127
  %2129 = load double, double* %2128, align 8, !tbaa !19
  %2130 = fmul double %1758, %2129
  %2131 = getelementptr inbounds double, double* %4, i64 %2127
  %2132 = load double, double* %2131, align 8, !tbaa !19
  %2133 = fadd double %2132, %2130
  store double %2133, double* %2131, align 8, !tbaa !19
  %2134 = add nsw i64 %2106, 4
  %2135 = getelementptr inbounds double, double* %1764, i64 %2134
  %2136 = load double, double* %2135, align 8, !tbaa !19
  %2137 = fmul double %1758, %2136
  %2138 = getelementptr inbounds double, double* %4, i64 %2134
  %2139 = load double, double* %2138, align 8, !tbaa !19
  %2140 = fadd double %2139, %2137
  store double %2140, double* %2138, align 8, !tbaa !19
  %2141 = add nsw i64 %2106, 5
  %2142 = getelementptr inbounds double, double* %1764, i64 %2141
  %2143 = load double, double* %2142, align 8, !tbaa !19
  %2144 = fmul double %1758, %2143
  %2145 = getelementptr inbounds double, double* %4, i64 %2141
  %2146 = load double, double* %2145, align 8, !tbaa !19
  %2147 = fadd double %2146, %2144
  store double %2147, double* %2145, align 8, !tbaa !19
  %2148 = add nsw i64 %2106, 6
  %2149 = getelementptr inbounds double, double* %1764, i64 %2148
  %2150 = load double, double* %2149, align 8, !tbaa !19
  %2151 = fmul double %1758, %2150
  %2152 = getelementptr inbounds double, double* %4, i64 %2148
  %2153 = load double, double* %2152, align 8, !tbaa !19
  %2154 = fadd double %2153, %2151
  store double %2154, double* %2152, align 8, !tbaa !19
  %2155 = add nsw i64 %2106, 7
  %2156 = getelementptr inbounds double, double* %1764, i64 %2155
  %2157 = load double, double* %2156, align 8, !tbaa !19
  %2158 = fmul double %1758, %2157
  %2159 = getelementptr inbounds double, double* %4, i64 %2155
  %2160 = load double, double* %2159, align 8, !tbaa !19
  %2161 = fadd double %2160, %2158
  store double %2161, double* %2159, align 8, !tbaa !19
  %2162 = add nsw i64 %2106, 8
  %2163 = icmp eq i64 %2162, %0
  br i1 %2163, label %2099, label %2105, !llvm.loop !334

; <label>:2164:                                   ; preds = %1746
  ret void

; <label>:2165:                                   ; preds = %50
  %2166 = shl nuw nsw i64 %27, 1
  %2167 = add nsw i64 %2166, %42
  %2168 = srem i64 %2167, 4
  %2169 = icmp eq i64 %21, %2168
  br i1 %2169, label %54, label %2170

; <label>:2170:                                   ; preds = %2165
  %2171 = mul nuw nsw i64 %27, 3
  %2172 = add nsw i64 %2171, %42
  %2173 = srem i64 %2172, 4
  %2174 = icmp eq i64 %21, %2173
  br i1 %2174, label %54, label %58
}

; Function Attrs: nounwind readnone
declare double @llvm.fma.f64(double, double, double) #5

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double>, <4 x double>, <4 x double>) #5

declare i32 @rand() local_unnamed_addr #9

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLi6ELi6ELi0ELi6ELi6EEENS_14CwiseNullaryOpINS0_16scalar_random_opIiEES3_EENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.108"* dereferenceable(144), %"class.Eigen::CwiseNullaryOp.118"* dereferenceable(3), %"struct.Eigen::internal::assign_op.512"* dereferenceable(1)) local_unnamed_addr #6 {
  %4 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %5 = tail call i32 @rand() #11
  %6 = add nsw i32 %5, -1073741824
  store i32 %6, i32* %4, align 4, !tbaa !33
  %7 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %8 = tail call i32 @rand() #11
  %9 = add nsw i32 %8, -1073741824
  store i32 %9, i32* %7, align 4, !tbaa !33
  %10 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %11 = tail call i32 @rand() #11
  %12 = add nsw i32 %11, -1073741824
  store i32 %12, i32* %10, align 4, !tbaa !33
  %13 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 3
  %14 = tail call i32 @rand() #11
  %15 = add nsw i32 %14, -1073741824
  store i32 %15, i32* %13, align 4, !tbaa !33
  %16 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %17 = tail call i32 @rand() #11
  %18 = add nsw i32 %17, -1073741824
  store i32 %18, i32* %16, align 4, !tbaa !33
  %19 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 5
  %20 = tail call i32 @rand() #11
  %21 = add nsw i32 %20, -1073741824
  store i32 %21, i32* %19, align 4, !tbaa !33
  %22 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 6
  %23 = tail call i32 @rand() #11
  %24 = add nsw i32 %23, -1073741824
  store i32 %24, i32* %22, align 4, !tbaa !33
  %25 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 7
  %26 = tail call i32 @rand() #11
  %27 = add nsw i32 %26, -1073741824
  store i32 %27, i32* %25, align 4, !tbaa !33
  %28 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 8
  %29 = tail call i32 @rand() #11
  %30 = add nsw i32 %29, -1073741824
  store i32 %30, i32* %28, align 4, !tbaa !33
  %31 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 9
  %32 = tail call i32 @rand() #11
  %33 = add nsw i32 %32, -1073741824
  store i32 %33, i32* %31, align 4, !tbaa !33
  %34 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 10
  %35 = tail call i32 @rand() #11
  %36 = add nsw i32 %35, -1073741824
  store i32 %36, i32* %34, align 4, !tbaa !33
  %37 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 11
  %38 = tail call i32 @rand() #11
  %39 = add nsw i32 %38, -1073741824
  store i32 %39, i32* %37, align 4, !tbaa !33
  %40 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 12
  %41 = tail call i32 @rand() #11
  %42 = add nsw i32 %41, -1073741824
  store i32 %42, i32* %40, align 4, !tbaa !33
  %43 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 13
  %44 = tail call i32 @rand() #11
  %45 = add nsw i32 %44, -1073741824
  store i32 %45, i32* %43, align 4, !tbaa !33
  %46 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 14
  %47 = tail call i32 @rand() #11
  %48 = add nsw i32 %47, -1073741824
  store i32 %48, i32* %46, align 4, !tbaa !33
  %49 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 15
  %50 = tail call i32 @rand() #11
  %51 = add nsw i32 %50, -1073741824
  store i32 %51, i32* %49, align 4, !tbaa !33
  %52 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 16
  %53 = tail call i32 @rand() #11
  %54 = add nsw i32 %53, -1073741824
  store i32 %54, i32* %52, align 4, !tbaa !33
  %55 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 17
  %56 = tail call i32 @rand() #11
  %57 = add nsw i32 %56, -1073741824
  store i32 %57, i32* %55, align 4, !tbaa !33
  %58 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 18
  %59 = tail call i32 @rand() #11
  %60 = add nsw i32 %59, -1073741824
  store i32 %60, i32* %58, align 4, !tbaa !33
  %61 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 19
  %62 = tail call i32 @rand() #11
  %63 = add nsw i32 %62, -1073741824
  store i32 %63, i32* %61, align 4, !tbaa !33
  %64 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 20
  %65 = tail call i32 @rand() #11
  %66 = add nsw i32 %65, -1073741824
  store i32 %66, i32* %64, align 4, !tbaa !33
  %67 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 21
  %68 = tail call i32 @rand() #11
  %69 = add nsw i32 %68, -1073741824
  store i32 %69, i32* %67, align 4, !tbaa !33
  %70 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 22
  %71 = tail call i32 @rand() #11
  %72 = add nsw i32 %71, -1073741824
  store i32 %72, i32* %70, align 4, !tbaa !33
  %73 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 23
  %74 = tail call i32 @rand() #11
  %75 = add nsw i32 %74, -1073741824
  store i32 %75, i32* %73, align 4, !tbaa !33
  %76 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 24
  %77 = tail call i32 @rand() #11
  %78 = add nsw i32 %77, -1073741824
  store i32 %78, i32* %76, align 4, !tbaa !33
  %79 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 25
  %80 = tail call i32 @rand() #11
  %81 = add nsw i32 %80, -1073741824
  store i32 %81, i32* %79, align 4, !tbaa !33
  %82 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 26
  %83 = tail call i32 @rand() #11
  %84 = add nsw i32 %83, -1073741824
  store i32 %84, i32* %82, align 4, !tbaa !33
  %85 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 27
  %86 = tail call i32 @rand() #11
  %87 = add nsw i32 %86, -1073741824
  store i32 %87, i32* %85, align 4, !tbaa !33
  %88 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 28
  %89 = tail call i32 @rand() #11
  %90 = add nsw i32 %89, -1073741824
  store i32 %90, i32* %88, align 4, !tbaa !33
  %91 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 29
  %92 = tail call i32 @rand() #11
  %93 = add nsw i32 %92, -1073741824
  store i32 %93, i32* %91, align 4, !tbaa !33
  %94 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 30
  %95 = tail call i32 @rand() #11
  %96 = add nsw i32 %95, -1073741824
  store i32 %96, i32* %94, align 4, !tbaa !33
  %97 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 31
  %98 = tail call i32 @rand() #11
  %99 = add nsw i32 %98, -1073741824
  store i32 %99, i32* %97, align 4, !tbaa !33
  %100 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 32
  %101 = tail call i32 @rand() #11
  %102 = add nsw i32 %101, -1073741824
  store i32 %102, i32* %100, align 4, !tbaa !33
  %103 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 33
  %104 = tail call i32 @rand() #11
  %105 = add nsw i32 %104, -1073741824
  store i32 %105, i32* %103, align 4, !tbaa !33
  %106 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 34
  %107 = tail call i32 @rand() #11
  %108 = add nsw i32 %107, -1073741824
  store i32 %108, i32* %106, align 4, !tbaa !33
  %109 = getelementptr inbounds %"class.Eigen::Matrix.108", %"class.Eigen::Matrix.108"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 35
  %110 = tail call i32 @rand() #11
  %111 = add nsw i32 %110, -1073741824
  store i32 %111, i32* %109, align 4, !tbaa !33
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEENS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_7ProductINS2_IiLin1ELi6ELi0ELin1ELi6EEENS2_IiLi6ELi1ELi0ELi6ELi1EEELi0EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKS3_EEEENS0_13add_assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.170"* dereferenceable(16), %"class.Eigen::CwiseBinaryOp.200"* dereferenceable(40), %"struct.Eigen::internal::add_assign_op"* dereferenceable(1)) local_unnamed_addr #6 {
  %4 = alloca %"class.Eigen::Product.619", align 8
  %5 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %6 = alloca %"struct.Eigen::internal::evaluator.606", align 8
  %7 = getelementptr inbounds %"struct.Eigen::internal::evaluator.606", %"struct.Eigen::internal::evaluator.606"* %6, i64 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start(i64 48, i8* nonnull %7) #11
  %8 = getelementptr inbounds %"struct.Eigen::internal::evaluator.606", %"struct.Eigen::internal::evaluator.606"* %6, i64 0, i32 0, i32 1
  %9 = getelementptr inbounds %"struct.Eigen::internal::evaluator.609", %"struct.Eigen::internal::evaluator.609"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32* null, i32** %9, align 8, !tbaa !61
  %10 = getelementptr inbounds %"struct.Eigen::internal::evaluator.606", %"struct.Eigen::internal::evaluator.606"* %6, i64 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %11 = bitcast %"class.Eigen::CwiseBinaryOp.200"* %1 to %"class.Eigen::PlainObjectBase.124"**
  %12 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %11, align 8, !tbaa !11
  %13 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %12, i64 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8, !tbaa !43
  %15 = bitcast %"class.Eigen::Matrix.170"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* %15, i8 0, i64 16, i32 8, i1 false) #11
  %16 = icmp sgt i64 %14, -1
  %17 = ptrtoint %"class.Eigen::PlainObjectBase.124"* %12 to i64
  br i1 %16, label %19, label %18, !prof !10

; <label>:18:                                     ; preds = %3
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:19:                                     ; preds = %3
  %20 = getelementptr inbounds %"struct.Eigen::internal::evaluator.606", %"struct.Eigen::internal::evaluator.606"* %6, i64 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %21 = icmp eq i64 %14, 0
  br i1 %21, label %41, label %22

; <label>:22:                                     ; preds = %19
  %23 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %10, i64 0, i32 0, i32 0, i32 0
  %24 = shl i64 %14, 2
  %25 = add i64 %24, 32
  %26 = tail call i8* @malloc(i64 %25) #14
  %27 = icmp eq i8* %26, null
  br i1 %27, label %37, label %28

; <label>:28:                                     ; preds = %22
  %29 = ptrtoint i8* %26 to i64
  %30 = add i64 %29, 32
  %31 = and i64 %30, -32
  %32 = inttoptr i64 %31 to i8**
  %33 = getelementptr inbounds i8*, i8** %32, i64 -1
  store i8* %26, i8** %33, align 8, !tbaa !29
  %34 = inttoptr i64 %31 to i32*
  %35 = bitcast %"class.Eigen::CwiseBinaryOp.200"* %1 to i64*
  %36 = load i64, i64* %35, align 8, !tbaa !11
  br label %37

; <label>:37:                                     ; preds = %22, %28
  %38 = phi i64 [ %36, %28 ], [ %17, %22 ]
  %39 = phi i32* [ %34, %28 ], [ null, %22 ]
  store i32* %39, i32** %23, align 8, !tbaa !44
  %40 = ptrtoint i32* %39 to i64
  br label %41

; <label>:41:                                     ; preds = %19, %37
  %42 = phi i64 [ %38, %37 ], [ %17, %19 ]
  %43 = phi i64 [ %40, %37 ], [ 0, %19 ]
  store i64 %14, i64* %20, align 8, !tbaa !46
  %44 = bitcast %"struct.Eigen::internal::evaluator.609"* %8 to i64*
  store i64 %43, i64* %44, align 8, !tbaa !61
  %45 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %1, i64 0, i32 0, i32 1
  %46 = bitcast %"class.Eigen::Matrix.185"** %45 to i64*
  %47 = load i64, i64* %46, align 8, !tbaa !11
  %48 = bitcast %"class.Eigen::Product.619"* %4 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %48) #11
  %49 = bitcast %"class.Eigen::Product.619"* %4 to i64*
  store i64 %42, i64* %49, align 8
  %50 = getelementptr inbounds %"class.Eigen::Product.619", %"class.Eigen::Product.619"* %4, i64 0, i32 1
  %51 = bitcast %"class.Eigen::Matrix.185"** %50 to i64*
  store i64 %47, i64* %51, align 8
  %52 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %5, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %52) #11
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEENS_7ProductINS2_IiLin1ELi6ELi0ELin1ELi6EEENS2_IiLi6ELi1ELi0ELi6ELi1EEELi1EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.170"* nonnull dereferenceable(16) %10, %"class.Eigen::Product.619"* nonnull dereferenceable(16) %4, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %5) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %52) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %48) #11
  %53 = getelementptr inbounds %"struct.Eigen::internal::evaluator.606", %"struct.Eigen::internal::evaluator.606"* %6, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %54 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %1, i64 0, i32 1, i32 2, i32 0
  %55 = load i32, i32* %54, align 4, !tbaa !51
  store i32 %55, i32* %53, align 8, !tbaa !51
  %56 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %0, i64 0, i32 0, i32 0, i32 1
  %57 = load i64, i64* %56, align 8, !tbaa !46
  %58 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %1, i64 0, i32 1, i32 0, i32 0
  %59 = load i64, i64* %58, align 8, !tbaa !59
  %60 = icmp eq i64 %57, %59
  br i1 %60, label %62, label %61

; <label>:61:                                     ; preds = %41
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__._ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEENS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES3_EEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.15, i64 0, i64 0), i32 710, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.29, i64 0, i64 0)) #13
  unreachable

; <label>:62:                                     ; preds = %41
  %63 = bitcast %"class.Eigen::Matrix.170"* %0 to i64*
  %64 = load i64, i64* %63, align 8, !tbaa !44
  %65 = sdiv i64 %57, 4
  %66 = shl nsw i64 %65, 2
  %67 = icmp sgt i64 %57, 3
  br i1 %67, label %68, label %113

; <label>:68:                                     ; preds = %62
  %69 = inttoptr i64 %64 to i32*
  %70 = getelementptr inbounds %"struct.Eigen::internal::evaluator.606", %"struct.Eigen::internal::evaluator.606"* %6, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %71 = bitcast i32** %70 to <4 x i32>**
  %72 = load <4 x i32>*, <4 x i32>** %71, align 8, !tbaa !61
  %73 = load <4 x i32>, <4 x i32>* %72, align 16, !tbaa !11
  %74 = insertelement <4 x i32> undef, i32 %55, i32 0
  %75 = shufflevector <4 x i32> %74, <4 x i32> undef, <4 x i32> zeroinitializer
  %76 = mul <4 x i32> %75, %73
  %77 = inttoptr i64 %64 to <4 x i32>*
  %78 = load <4 x i32>, <4 x i32>* %77, align 16, !tbaa !11
  %79 = add <4 x i32> %76, %78
  store <4 x i32> %79, <4 x i32>* %77, align 16, !tbaa !11
  %80 = icmp sgt i64 %66, 4
  br i1 %80, label %81, label %113

; <label>:81:                                     ; preds = %68
  %82 = add i64 %66, -5
  %83 = lshr i64 %82, 2
  %84 = add nuw nsw i64 %83, 1
  %85 = and i64 %84, 3
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %107, label %87

; <label>:87:                                     ; preds = %81
  br label %88

; <label>:88:                                     ; preds = %88, %87
  %89 = phi i64 [ %103, %88 ], [ 4, %87 ]
  %90 = phi i64 [ %104, %88 ], [ %85, %87 ]
  %91 = load i32, i32* %53, align 8, !tbaa !33
  %92 = getelementptr inbounds i32, i32* %69, i64 %89
  %93 = load i32*, i32** %70, align 8, !tbaa !61
  %94 = getelementptr inbounds i32, i32* %93, i64 %89
  %95 = bitcast i32* %94 to <4 x i32>*
  %96 = load <4 x i32>, <4 x i32>* %95, align 16, !tbaa !11
  %97 = insertelement <4 x i32> undef, i32 %91, i32 0
  %98 = shufflevector <4 x i32> %97, <4 x i32> undef, <4 x i32> zeroinitializer
  %99 = mul <4 x i32> %98, %96
  %100 = bitcast i32* %92 to <4 x i32>*
  %101 = load <4 x i32>, <4 x i32>* %100, align 16, !tbaa !11
  %102 = add <4 x i32> %99, %101
  store <4 x i32> %102, <4 x i32>* %100, align 16, !tbaa !11
  %103 = add nuw nsw i64 %89, 4
  %104 = add i64 %90, -1
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %106, label %88, !llvm.loop !335

; <label>:106:                                    ; preds = %88
  br label %107

; <label>:107:                                    ; preds = %81, %106
  %108 = phi i64 [ 4, %81 ], [ %103, %106 ]
  %109 = icmp ult i64 %82, 12
  br i1 %109, label %112, label %110

; <label>:110:                                    ; preds = %107
  br label %251

; <label>:111:                                    ; preds = %251
  br label %112

; <label>:112:                                    ; preds = %107, %111
  br label %113

; <label>:113:                                    ; preds = %112, %68, %62
  %114 = icmp sgt i64 %57, %66
  br i1 %114, label %115, label %308

; <label>:115:                                    ; preds = %113
  %116 = inttoptr i64 %64 to i32*
  %117 = getelementptr inbounds %"struct.Eigen::internal::evaluator.606", %"struct.Eigen::internal::evaluator.606"* %6, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %118 = load i32*, i32** %117, align 8, !tbaa !61
  %119 = sub i64 %57, %66
  %120 = icmp ult i64 %119, 32
  br i1 %120, label %190, label %121

; <label>:121:                                    ; preds = %115
  %122 = and i64 %119, -32
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %190, label %124

; <label>:124:                                    ; preds = %121
  %125 = getelementptr i32, i32* %116, i64 %66
  %126 = getelementptr i32, i32* %116, i64 %57
  %127 = getelementptr i32, i32* %118, i64 %66
  %128 = getelementptr i32, i32* %118, i64 %57
  %129 = icmp ult i32* %125, %53
  %130 = icmp ult i32* %53, %126
  %131 = and i1 %129, %130
  %132 = icmp ult i32* %125, %128
  %133 = icmp ult i32* %127, %126
  %134 = and i1 %132, %133
  %135 = or i1 %131, %134
  %136 = add i64 %66, %122
  br i1 %135, label %190, label %137

; <label>:137:                                    ; preds = %124
  %138 = load i32, i32* %53, align 8, !tbaa !51, !alias.scope !336
  %139 = insertelement <8 x i32> undef, i32 %138, i32 0
  %140 = shufflevector <8 x i32> %139, <8 x i32> undef, <8 x i32> zeroinitializer
  %141 = insertelement <8 x i32> undef, i32 %138, i32 0
  %142 = shufflevector <8 x i32> %141, <8 x i32> undef, <8 x i32> zeroinitializer
  %143 = insertelement <8 x i32> undef, i32 %138, i32 0
  %144 = shufflevector <8 x i32> %143, <8 x i32> undef, <8 x i32> zeroinitializer
  %145 = insertelement <8 x i32> undef, i32 %138, i32 0
  %146 = shufflevector <8 x i32> %145, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %147

; <label>:147:                                    ; preds = %137, %147
  %148 = phi i64 [ %186, %147 ], [ 0, %137 ]
  %149 = add i64 %66, %148
  %150 = getelementptr inbounds i32, i32* %116, i64 %149
  %151 = getelementptr inbounds i32, i32* %118, i64 %149
  %152 = bitcast i32* %151 to <8 x i32>*
  %153 = load <8 x i32>, <8 x i32>* %152, align 4, !tbaa !33, !alias.scope !339
  %154 = getelementptr i32, i32* %151, i64 8
  %155 = bitcast i32* %154 to <8 x i32>*
  %156 = load <8 x i32>, <8 x i32>* %155, align 4, !tbaa !33, !alias.scope !339
  %157 = getelementptr i32, i32* %151, i64 16
  %158 = bitcast i32* %157 to <8 x i32>*
  %159 = load <8 x i32>, <8 x i32>* %158, align 4, !tbaa !33, !alias.scope !339
  %160 = getelementptr i32, i32* %151, i64 24
  %161 = bitcast i32* %160 to <8 x i32>*
  %162 = load <8 x i32>, <8 x i32>* %161, align 4, !tbaa !33, !alias.scope !339
  %163 = mul nsw <8 x i32> %153, %140
  %164 = mul nsw <8 x i32> %156, %142
  %165 = mul nsw <8 x i32> %159, %144
  %166 = mul nsw <8 x i32> %162, %146
  %167 = bitcast i32* %150 to <8 x i32>*
  %168 = load <8 x i32>, <8 x i32>* %167, align 4, !tbaa !33, !alias.scope !341, !noalias !343
  %169 = getelementptr i32, i32* %150, i64 8
  %170 = bitcast i32* %169 to <8 x i32>*
  %171 = load <8 x i32>, <8 x i32>* %170, align 4, !tbaa !33, !alias.scope !341, !noalias !343
  %172 = getelementptr i32, i32* %150, i64 16
  %173 = bitcast i32* %172 to <8 x i32>*
  %174 = load <8 x i32>, <8 x i32>* %173, align 4, !tbaa !33, !alias.scope !341, !noalias !343
  %175 = getelementptr i32, i32* %150, i64 24
  %176 = bitcast i32* %175 to <8 x i32>*
  %177 = load <8 x i32>, <8 x i32>* %176, align 4, !tbaa !33, !alias.scope !341, !noalias !343
  %178 = add nsw <8 x i32> %168, %163
  %179 = add nsw <8 x i32> %171, %164
  %180 = add nsw <8 x i32> %174, %165
  %181 = add nsw <8 x i32> %177, %166
  %182 = bitcast i32* %150 to <8 x i32>*
  store <8 x i32> %178, <8 x i32>* %182, align 4, !tbaa !33, !alias.scope !341, !noalias !343
  %183 = bitcast i32* %169 to <8 x i32>*
  store <8 x i32> %179, <8 x i32>* %183, align 4, !tbaa !33, !alias.scope !341, !noalias !343
  %184 = bitcast i32* %172 to <8 x i32>*
  store <8 x i32> %180, <8 x i32>* %184, align 4, !tbaa !33, !alias.scope !341, !noalias !343
  %185 = bitcast i32* %175 to <8 x i32>*
  store <8 x i32> %181, <8 x i32>* %185, align 4, !tbaa !33, !alias.scope !341, !noalias !343
  %186 = add i64 %148, 32
  %187 = icmp eq i64 %186, %122
  br i1 %187, label %188, label %147, !llvm.loop !344

; <label>:188:                                    ; preds = %147
  %189 = icmp eq i64 %119, %122
  br i1 %189, label %308, label %190

; <label>:190:                                    ; preds = %188, %124, %121, %115
  %191 = phi i64 [ %66, %124 ], [ %66, %121 ], [ %66, %115 ], [ %136, %188 ]
  %192 = sub i64 %57, %191
  %193 = add i64 %57, -1
  %194 = sub i64 %193, %191
  %195 = and i64 %192, 3
  %196 = icmp eq i64 %195, 0
  br i1 %196, label %212, label %197

; <label>:197:                                    ; preds = %190
  br label %198

; <label>:198:                                    ; preds = %198, %197
  %199 = phi i64 [ %208, %198 ], [ %191, %197 ]
  %200 = phi i64 [ %209, %198 ], [ %195, %197 ]
  %201 = getelementptr inbounds i32, i32* %116, i64 %199
  %202 = getelementptr inbounds i32, i32* %118, i64 %199
  %203 = load i32, i32* %53, align 8, !tbaa !51
  %204 = load i32, i32* %202, align 4, !tbaa !33
  %205 = mul nsw i32 %204, %203
  %206 = load i32, i32* %201, align 4, !tbaa !33
  %207 = add nsw i32 %206, %205
  store i32 %207, i32* %201, align 4, !tbaa !33
  %208 = add nsw i64 %199, 1
  %209 = add i64 %200, -1
  %210 = icmp eq i64 %209, 0
  br i1 %210, label %211, label %198, !llvm.loop !345

; <label>:211:                                    ; preds = %198
  br label %212

; <label>:212:                                    ; preds = %190, %211
  %213 = phi i64 [ %191, %190 ], [ %208, %211 ]
  %214 = icmp ult i64 %194, 3
  br i1 %214, label %307, label %215

; <label>:215:                                    ; preds = %212
  br label %216

; <label>:216:                                    ; preds = %216, %215
  %217 = phi i64 [ %213, %215 ], [ %249, %216 ]
  %218 = getelementptr inbounds i32, i32* %116, i64 %217
  %219 = getelementptr inbounds i32, i32* %118, i64 %217
  %220 = load i32, i32* %53, align 8, !tbaa !51
  %221 = load i32, i32* %219, align 4, !tbaa !33
  %222 = mul nsw i32 %221, %220
  %223 = load i32, i32* %218, align 4, !tbaa !33
  %224 = add nsw i32 %223, %222
  store i32 %224, i32* %218, align 4, !tbaa !33
  %225 = add nsw i64 %217, 1
  %226 = getelementptr inbounds i32, i32* %116, i64 %225
  %227 = getelementptr inbounds i32, i32* %118, i64 %225
  %228 = load i32, i32* %53, align 8, !tbaa !51
  %229 = load i32, i32* %227, align 4, !tbaa !33
  %230 = mul nsw i32 %229, %228
  %231 = load i32, i32* %226, align 4, !tbaa !33
  %232 = add nsw i32 %231, %230
  store i32 %232, i32* %226, align 4, !tbaa !33
  %233 = add nsw i64 %217, 2
  %234 = getelementptr inbounds i32, i32* %116, i64 %233
  %235 = getelementptr inbounds i32, i32* %118, i64 %233
  %236 = load i32, i32* %53, align 8, !tbaa !51
  %237 = load i32, i32* %235, align 4, !tbaa !33
  %238 = mul nsw i32 %237, %236
  %239 = load i32, i32* %234, align 4, !tbaa !33
  %240 = add nsw i32 %239, %238
  store i32 %240, i32* %234, align 4, !tbaa !33
  %241 = add nsw i64 %217, 3
  %242 = getelementptr inbounds i32, i32* %116, i64 %241
  %243 = getelementptr inbounds i32, i32* %118, i64 %241
  %244 = load i32, i32* %53, align 8, !tbaa !51
  %245 = load i32, i32* %243, align 4, !tbaa !33
  %246 = mul nsw i32 %245, %244
  %247 = load i32, i32* %242, align 4, !tbaa !33
  %248 = add nsw i32 %247, %246
  store i32 %248, i32* %242, align 4, !tbaa !33
  %249 = add nsw i64 %217, 4
  %250 = icmp eq i64 %249, %57
  br i1 %250, label %306, label %216, !llvm.loop !346

; <label>:251:                                    ; preds = %251, %110
  %252 = phi i64 [ %108, %110 ], [ %304, %251 ]
  %253 = load i32, i32* %53, align 8, !tbaa !33
  %254 = getelementptr inbounds i32, i32* %69, i64 %252
  %255 = load i32*, i32** %70, align 8, !tbaa !61
  %256 = getelementptr inbounds i32, i32* %255, i64 %252
  %257 = bitcast i32* %256 to <4 x i32>*
  %258 = load <4 x i32>, <4 x i32>* %257, align 16, !tbaa !11
  %259 = insertelement <4 x i32> undef, i32 %253, i32 0
  %260 = shufflevector <4 x i32> %259, <4 x i32> undef, <4 x i32> zeroinitializer
  %261 = mul <4 x i32> %260, %258
  %262 = bitcast i32* %254 to <4 x i32>*
  %263 = load <4 x i32>, <4 x i32>* %262, align 16, !tbaa !11
  %264 = add <4 x i32> %261, %263
  store <4 x i32> %264, <4 x i32>* %262, align 16, !tbaa !11
  %265 = add nuw nsw i64 %252, 4
  %266 = load i32, i32* %53, align 8, !tbaa !33
  %267 = getelementptr inbounds i32, i32* %69, i64 %265
  %268 = load i32*, i32** %70, align 8, !tbaa !61
  %269 = getelementptr inbounds i32, i32* %268, i64 %265
  %270 = bitcast i32* %269 to <4 x i32>*
  %271 = load <4 x i32>, <4 x i32>* %270, align 16, !tbaa !11
  %272 = insertelement <4 x i32> undef, i32 %266, i32 0
  %273 = shufflevector <4 x i32> %272, <4 x i32> undef, <4 x i32> zeroinitializer
  %274 = mul <4 x i32> %273, %271
  %275 = bitcast i32* %267 to <4 x i32>*
  %276 = load <4 x i32>, <4 x i32>* %275, align 16, !tbaa !11
  %277 = add <4 x i32> %274, %276
  store <4 x i32> %277, <4 x i32>* %275, align 16, !tbaa !11
  %278 = add nsw i64 %252, 8
  %279 = load i32, i32* %53, align 8, !tbaa !33
  %280 = getelementptr inbounds i32, i32* %69, i64 %278
  %281 = load i32*, i32** %70, align 8, !tbaa !61
  %282 = getelementptr inbounds i32, i32* %281, i64 %278
  %283 = bitcast i32* %282 to <4 x i32>*
  %284 = load <4 x i32>, <4 x i32>* %283, align 16, !tbaa !11
  %285 = insertelement <4 x i32> undef, i32 %279, i32 0
  %286 = shufflevector <4 x i32> %285, <4 x i32> undef, <4 x i32> zeroinitializer
  %287 = mul <4 x i32> %286, %284
  %288 = bitcast i32* %280 to <4 x i32>*
  %289 = load <4 x i32>, <4 x i32>* %288, align 16, !tbaa !11
  %290 = add <4 x i32> %287, %289
  store <4 x i32> %290, <4 x i32>* %288, align 16, !tbaa !11
  %291 = add nsw i64 %252, 12
  %292 = load i32, i32* %53, align 8, !tbaa !33
  %293 = getelementptr inbounds i32, i32* %69, i64 %291
  %294 = load i32*, i32** %70, align 8, !tbaa !61
  %295 = getelementptr inbounds i32, i32* %294, i64 %291
  %296 = bitcast i32* %295 to <4 x i32>*
  %297 = load <4 x i32>, <4 x i32>* %296, align 16, !tbaa !11
  %298 = insertelement <4 x i32> undef, i32 %292, i32 0
  %299 = shufflevector <4 x i32> %298, <4 x i32> undef, <4 x i32> zeroinitializer
  %300 = mul <4 x i32> %299, %297
  %301 = bitcast i32* %293 to <4 x i32>*
  %302 = load <4 x i32>, <4 x i32>* %301, align 16, !tbaa !11
  %303 = add <4 x i32> %300, %302
  store <4 x i32> %303, <4 x i32>* %301, align 16, !tbaa !11
  %304 = add nsw i64 %252, 16
  %305 = icmp slt i64 %304, %66
  br i1 %305, label %251, label %111

; <label>:306:                                    ; preds = %216
  br label %307

; <label>:307:                                    ; preds = %212, %306
  br label %308

; <label>:308:                                    ; preds = %307, %188, %113
  %309 = getelementptr inbounds %"struct.Eigen::internal::evaluator.606", %"struct.Eigen::internal::evaluator.606"* %6, i64 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %310 = load i32*, i32** %309, align 8, !tbaa !44
  %311 = icmp eq i32* %310, null
  br i1 %311, label %316, label %312

; <label>:312:                                    ; preds = %308
  %313 = getelementptr inbounds i32, i32* %310, i64 -2
  %314 = bitcast i32* %313 to i8**
  %315 = load i8*, i8** %314, align 8, !tbaa !29
  call void @free(i8* %315) #11
  br label %316

; <label>:316:                                    ; preds = %308, %312
  call void @llvm.lifetime.end(i64 48, i8* nonnull %7) #11
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEENS_7ProductINS2_IiLin1ELi6ELi0ELin1ELi6EEENS2_IiLi6ELi1ELi0ELi6ELi1EEELi1EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.170"* dereferenceable(16), %"class.Eigen::Product.619"* dereferenceable(16), %"struct.Eigen::internal::assign_op.512"* dereferenceable(1)) local_unnamed_addr #6 {
  %4 = alloca %"struct.Eigen::internal::scalar_sum_op", align 1
  %5 = alloca %"class.Eigen::CwiseBinaryOp.652", align 8
  %6 = bitcast %"class.Eigen::Product.619"* %1 to i64*
  %7 = load i64, i64* %6, align 8, !tbaa !11
  %8 = getelementptr inbounds %"class.Eigen::Product.619", %"class.Eigen::Product.619"* %1, i64 0, i32 1
  %9 = bitcast %"class.Eigen::Matrix.185"** %8 to i64*
  %10 = load i64, i64* %9, align 8, !tbaa !11
  %11 = inttoptr i64 %7 to %"class.Eigen::Matrix.123"*
  %12 = inttoptr i64 %7 to i32**
  %13 = load i32*, i32** %12, align 8, !tbaa !41
  %14 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %11, i64 0, i32 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8, !tbaa !43
  %16 = inttoptr i64 %10 to %"class.Eigen::Matrix.185"*
  %17 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %18 = inttoptr i64 %7 to %"class.Eigen::PlainObjectBase.124"*
  %19 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %18, i64 0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8, !tbaa !43
  %21 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %0, i64 0, i32 0, i32 0, i32 1
  %22 = load i64, i64* %21, align 8, !tbaa !46
  %23 = icmp eq i64 %22, %20
  br i1 %23, label %24, label %27

; <label>:24:                                     ; preds = %3
  %25 = bitcast %"class.Eigen::Matrix.170"* %0 to i64*
  %26 = load i64, i64* %25, align 8, !tbaa !44
  br label %55

; <label>:27:                                     ; preds = %3
  %28 = icmp sgt i64 %20, -1
  br i1 %28, label %30, label %29, !prof !10

; <label>:29:                                     ; preds = %27
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:30:                                     ; preds = %27
  %31 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i32*, i32** %31, align 8, !tbaa !44
  %33 = icmp eq i32* %32, null
  br i1 %33, label %38, label %34

; <label>:34:                                     ; preds = %30
  %35 = getelementptr inbounds i32, i32* %32, i64 -2
  %36 = bitcast i32* %35 to i8**
  %37 = load i8*, i8** %36, align 8, !tbaa !29
  tail call void @free(i8* %37) #11
  br label %38

; <label>:38:                                     ; preds = %34, %30
  %39 = icmp eq i64 %20, 0
  br i1 %39, label %52, label %40

; <label>:40:                                     ; preds = %38
  %41 = shl i64 %20, 2
  %42 = add i64 %41, 32
  %43 = tail call i8* @malloc(i64 %42) #14
  %44 = icmp eq i8* %43, null
  br i1 %44, label %52, label %45

; <label>:45:                                     ; preds = %40
  %46 = ptrtoint i8* %43 to i64
  %47 = add i64 %46, 32
  %48 = and i64 %47, -32
  %49 = inttoptr i64 %48 to i8**
  %50 = getelementptr inbounds i8*, i8** %49, i64 -1
  store i8* %43, i8** %50, align 8, !tbaa !29
  %51 = inttoptr i64 %48 to i32*
  br label %52

; <label>:52:                                     ; preds = %38, %40, %45
  %53 = phi i32* [ %51, %45 ], [ null, %40 ], [ null, %38 ]
  store i32* %53, i32** %31, align 8, !tbaa !44
  store i64 %20, i64* %21, align 8, !tbaa !46
  %54 = ptrtoint i32* %53 to i64
  br label %55

; <label>:55:                                     ; preds = %24, %52
  %56 = phi i64 [ %26, %24 ], [ %54, %52 ]
  %57 = sdiv i64 %20, 4
  %58 = shl nsw i64 %57, 2
  %59 = icmp sgt i64 %20, 3
  br i1 %59, label %60, label %72

; <label>:60:                                     ; preds = %55
  %61 = inttoptr i64 %56 to i32*
  %62 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %63 = shl nsw i64 %15, 1
  %64 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %65 = mul nsw i64 %15, 3
  %66 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i64 3
  %67 = shl nsw i64 %15, 2
  %68 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %69 = mul nsw i64 %15, 5
  %70 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i64 5
  br label %112

; <label>:71:                                     ; preds = %112
  br label %72

; <label>:72:                                     ; preds = %71, %55
  %73 = icmp slt i64 %58, %20
  br i1 %73, label %74, label %166

; <label>:74:                                     ; preds = %72
  %75 = bitcast %"class.Eigen::CwiseBinaryOp.652"* %5 to i8*
  %76 = bitcast %"class.Eigen::CwiseBinaryOp.652"* %5 to i64*
  %77 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.652", %"class.Eigen::CwiseBinaryOp.652"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %78 = bitcast %"class.Eigen::Matrix.123"** %77 to %"class.Eigen::DenseBase.126"**
  %79 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.652", %"class.Eigen::CwiseBinaryOp.652"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  %80 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.652", %"class.Eigen::CwiseBinaryOp.652"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 0
  %81 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.652", %"class.Eigen::CwiseBinaryOp.652"* %5, i64 0, i32 1
  %82 = bitcast %"class.Eigen::Block.658"* %81 to i64*
  %83 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.652", %"class.Eigen::CwiseBinaryOp.652"* %5, i64 0, i32 1, i32 0, i32 0, i32 1
  %84 = bitcast %"class.Eigen::Matrix.185"** %83 to %"class.Eigen::DenseBase.188"**
  %85 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.652", %"class.Eigen::CwiseBinaryOp.652"* %5, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0
  %86 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.652", %"class.Eigen::CwiseBinaryOp.652"* %5, i64 0, i32 1, i32 0, i32 0, i32 4
  %87 = bitcast %"class.Eigen::CwiseBinaryOp.652"* %5 to %"class.Eigen::DenseBase.655"*
  %88 = getelementptr inbounds %"struct.Eigen::internal::scalar_sum_op", %"struct.Eigen::internal::scalar_sum_op"* %4, i64 0, i32 0
  %89 = icmp sgt i64 %20, -4
  br i1 %89, label %90, label %109

; <label>:90:                                     ; preds = %74
  %91 = inttoptr i64 %7 to %"class.Eigen::DenseBase.126"*
  %92 = getelementptr inbounds %"class.Eigen::DenseBase.126", %"class.Eigen::DenseBase.126"* %91, i64 8
  %93 = bitcast %"class.Eigen::DenseBase.126"* %92 to i64*
  %94 = inttoptr i64 %56 to i32*
  %95 = inttoptr i64 %10 to %"class.Eigen::DenseBase.188"*
  %96 = bitcast i64* %80 to <2 x i64>*
  br label %97

; <label>:97:                                     ; preds = %90, %101
  %98 = phi i64 [ %107, %101 ], [ %58, %90 ]
  call void @llvm.lifetime.start(i64 104, i8* nonnull %75) #11
  %99 = load i64, i64* %93, align 8, !tbaa !43, !noalias !347
  %100 = icmp sgt i64 %99, %98
  br i1 %100, label %101, label %110, !prof !10

; <label>:101:                                    ; preds = %97
  %102 = load i32*, i32** %12, align 8, !tbaa !41, !noalias !347
  %103 = getelementptr inbounds i32, i32* %102, i64 %98
  %104 = ptrtoint i32* %103 to i64
  %105 = getelementptr inbounds i32, i32* %94, i64 %98
  store i64 %104, i64* %76, align 8, !tbaa !350, !alias.scope !353
  store %"class.Eigen::DenseBase.126"* %91, %"class.Eigen::DenseBase.126"** %78, align 8
  store i64 %98, i64* %79, align 8
  store <2 x i64> <i64 0, i64 1>, <2 x i64>* %96, align 8
  store i64 %10, i64* %82, align 8, !tbaa !356, !alias.scope !353
  store %"class.Eigen::DenseBase.188"* %95, %"class.Eigen::DenseBase.188"** %84, align 8
  store i64 0, i64* %85, align 8
  store i64 6, i64* %86, align 8, !tbaa !358, !alias.scope !353
  call void @llvm.lifetime.start(i64 1, i8* nonnull %88) #11
  %106 = call i32 @_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEEEEKNS6_IKNS7_IiLi6ELi1ELi0ELi6ELi1EEELi6ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIiiEEEEiRKT_(%"class.Eigen::DenseBase.655"* nonnull %87, %"struct.Eigen::internal::scalar_sum_op"* nonnull dereferenceable(1) %4) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %88) #11
  call void @llvm.lifetime.end(i64 104, i8* nonnull %75) #11
  store i32 %106, i32* %105, align 4, !tbaa !33
  %107 = add nsw i64 %98, 1
  %108 = icmp slt i64 %107, %20
  br i1 %108, label %97, label %165

; <label>:109:                                    ; preds = %74
  call void @llvm.lifetime.start(i64 104, i8* nonnull %75) #11
  br label %111

; <label>:110:                                    ; preds = %97
  br label %111

; <label>:111:                                    ; preds = %110, %109
  call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !347
  unreachable

; <label>:112:                                    ; preds = %60, %112
  %113 = phi i64 [ %163, %112 ], [ 0, %60 ]
  %114 = getelementptr inbounds i32, i32* %61, i64 %113
  %115 = getelementptr inbounds i32, i32* %13, i64 %113
  %116 = bitcast i32* %115 to <4 x i32>*
  %117 = load <4 x i32>, <4 x i32>* %116, align 1, !tbaa !11
  %118 = load i32, i32* %17, align 4, !tbaa !33
  %119 = insertelement <4 x i32> undef, i32 %118, i32 0
  %120 = shufflevector <4 x i32> %119, <4 x i32> undef, <4 x i32> zeroinitializer
  %121 = mul <4 x i32> %120, %117
  %122 = getelementptr inbounds i32, i32* %115, i64 %15
  %123 = bitcast i32* %122 to <4 x i32>*
  %124 = load <4 x i32>, <4 x i32>* %123, align 1, !tbaa !11
  %125 = load i32, i32* %62, align 4, !tbaa !33
  %126 = insertelement <4 x i32> undef, i32 %125, i32 0
  %127 = shufflevector <4 x i32> %126, <4 x i32> undef, <4 x i32> zeroinitializer
  %128 = mul <4 x i32> %127, %124
  %129 = add <4 x i32> %128, %121
  %130 = getelementptr inbounds i32, i32* %115, i64 %63
  %131 = bitcast i32* %130 to <4 x i32>*
  %132 = load <4 x i32>, <4 x i32>* %131, align 1, !tbaa !11
  %133 = load i32, i32* %64, align 4, !tbaa !33
  %134 = insertelement <4 x i32> undef, i32 %133, i32 0
  %135 = shufflevector <4 x i32> %134, <4 x i32> undef, <4 x i32> zeroinitializer
  %136 = mul <4 x i32> %135, %132
  %137 = add <4 x i32> %129, %136
  %138 = getelementptr inbounds i32, i32* %115, i64 %65
  %139 = bitcast i32* %138 to <4 x i32>*
  %140 = load <4 x i32>, <4 x i32>* %139, align 1, !tbaa !11
  %141 = load i32, i32* %66, align 4, !tbaa !33
  %142 = insertelement <4 x i32> undef, i32 %141, i32 0
  %143 = shufflevector <4 x i32> %142, <4 x i32> undef, <4 x i32> zeroinitializer
  %144 = mul <4 x i32> %143, %140
  %145 = add <4 x i32> %137, %144
  %146 = getelementptr inbounds i32, i32* %115, i64 %67
  %147 = bitcast i32* %146 to <4 x i32>*
  %148 = load <4 x i32>, <4 x i32>* %147, align 1, !tbaa !11
  %149 = load i32, i32* %68, align 4, !tbaa !33
  %150 = insertelement <4 x i32> undef, i32 %149, i32 0
  %151 = shufflevector <4 x i32> %150, <4 x i32> undef, <4 x i32> zeroinitializer
  %152 = mul <4 x i32> %151, %148
  %153 = add <4 x i32> %145, %152
  %154 = getelementptr inbounds i32, i32* %115, i64 %69
  %155 = bitcast i32* %154 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 1, !tbaa !11
  %157 = load i32, i32* %70, align 4, !tbaa !33
  %158 = insertelement <4 x i32> undef, i32 %157, i32 0
  %159 = shufflevector <4 x i32> %158, <4 x i32> undef, <4 x i32> zeroinitializer
  %160 = mul <4 x i32> %159, %156
  %161 = add <4 x i32> %153, %160
  %162 = bitcast i32* %114 to <4 x i32>*
  store <4 x i32> %161, <4 x i32>* %162, align 16, !tbaa !11
  %163 = add nuw nsw i64 %113, 4
  %164 = icmp slt i64 %163, %58
  br i1 %164, label %112, label %71

; <label>:165:                                    ; preds = %101
  br label %166

; <label>:166:                                    ; preds = %165, %72
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr i32 @_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEEEEKNS6_IKNS7_IiLi6ELi1ELi0ELi6ELi1EEELi6ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIiiEEEEiRKT_(%"class.Eigen::DenseBase.655"*, %"struct.Eigen::internal::scalar_sum_op"* dereferenceable(1)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.Eigen::DenseBase.655"* %0 to i32**
  %4 = load i32*, i32** %3, align 8, !tbaa !350
  %5 = getelementptr inbounds %"class.Eigen::DenseBase.655", %"class.Eigen::DenseBase.655"* %0, i64 16
  %6 = bitcast %"class.Eigen::DenseBase.655"* %5 to %"class.Eigen::Matrix.123"**
  %7 = load %"class.Eigen::Matrix.123"*, %"class.Eigen::Matrix.123"** %6, align 8, !tbaa !11
  %8 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %7, i64 0, i32 0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8, !tbaa !43
  %10 = getelementptr inbounds %"class.Eigen::DenseBase.655", %"class.Eigen::DenseBase.655"* %0, i64 40
  %11 = bitcast %"class.Eigen::DenseBase.655"* %10 to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !360
  %13 = icmp eq i64 %12, 1
  br i1 %13, label %15, label %14, !prof !10

; <label>:14:                                     ; preds = %2
  tail call void @__assert_rtn(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__func__._ZN5Eigen8internal19variable_if_dynamicIlLi0EEC2El, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.8, i64 0, i64 0), i32 110, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0)) #13
  unreachable

; <label>:15:                                     ; preds = %2
  %16 = getelementptr inbounds %"class.Eigen::DenseBase.655", %"class.Eigen::DenseBase.655"* %0, i64 88
  %17 = bitcast %"class.Eigen::DenseBase.655"* %16 to i64*
  %18 = load i64, i64* %17, align 8, !tbaa !358
  %19 = icmp eq i64 %18, 6
  br i1 %19, label %21, label %20, !prof !10

; <label>:20:                                     ; preds = %15
  tail call void @__assert_rtn(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__func__._ZN5Eigen8internal19variable_if_dynamicIlLi0EEC2El, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.8, i64 0, i64 0), i32 110, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0)) #13
  unreachable

; <label>:21:                                     ; preds = %15
  %22 = getelementptr inbounds %"class.Eigen::DenseBase.655", %"class.Eigen::DenseBase.655"* %0, i64 48
  %23 = bitcast %"class.Eigen::DenseBase.655"* %22 to i32**
  %24 = load i32*, i32** %23, align 8, !tbaa !356
  %25 = load i32, i32* %4, align 4, !tbaa !33
  %26 = load i32, i32* %24, align 4, !tbaa !33
  %27 = mul nsw i32 %26, %25
  %28 = getelementptr inbounds i32, i32* %4, i64 %9
  %29 = load i32, i32* %28, align 4, !tbaa !33
  %30 = getelementptr inbounds i32, i32* %24, i64 1
  %31 = load i32, i32* %30, align 4, !tbaa !33
  %32 = mul nsw i32 %31, %29
  %33 = shl nsw i64 %9, 1
  %34 = getelementptr inbounds i32, i32* %4, i64 %33
  %35 = load i32, i32* %34, align 4, !tbaa !33
  %36 = getelementptr inbounds i32, i32* %24, i64 2
  %37 = load i32, i32* %36, align 4, !tbaa !33
  %38 = mul nsw i32 %37, %35
  %39 = mul nsw i64 %9, 3
  %40 = getelementptr inbounds i32, i32* %4, i64 %39
  %41 = load i32, i32* %40, align 4, !tbaa !33
  %42 = getelementptr inbounds i32, i32* %24, i64 3
  %43 = load i32, i32* %42, align 4, !tbaa !33
  %44 = mul nsw i32 %43, %41
  %45 = shl nsw i64 %9, 2
  %46 = getelementptr inbounds i32, i32* %4, i64 %45
  %47 = load i32, i32* %46, align 4, !tbaa !33
  %48 = getelementptr inbounds i32, i32* %24, i64 4
  %49 = load i32, i32* %48, align 4, !tbaa !33
  %50 = mul nsw i32 %49, %47
  %51 = mul nsw i64 %9, 5
  %52 = getelementptr inbounds i32, i32* %4, i64 %51
  %53 = load i32, i32* %52, align 4, !tbaa !33
  %54 = getelementptr inbounds i32, i32* %24, i64 5
  %55 = load i32, i32* %54, align 4, !tbaa !33
  %56 = mul nsw i32 %55, %53
  %57 = add i32 %32, %27
  %58 = add i32 %57, %38
  %59 = add i32 %58, %44
  %60 = add i32 %59, %50
  %61 = add i32 %60, %56
  ret i32 %61
}

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #10

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32>, <4 x i32>) #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS3_IiLi47ELi1ELi0ELi47ELi1EEELi0EEELi7ENS_10DenseShapeES7_iiEC2ERKS6_(%"struct.Eigen::internal::product_evaluator.706"*, %"class.Eigen::Product.226"* dereferenceable(16)) unnamed_addr #6 align 2 {
  %3 = alloca %"class.Eigen::internal::const_blas_data_mapper.717", align 8
  %4 = alloca %"class.Eigen::internal::const_blas_data_mapper.719", align 8
  %5 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.706", %"struct.Eigen::internal::product_evaluator.706"* %0, i64 0, i32 0, i32 0, i32 0
  store i32* null, i32** %5, align 8, !tbaa !61
  %6 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.706", %"struct.Eigen::internal::product_evaluator.706"* %0, i64 0, i32 1
  %7 = bitcast %"class.Eigen::Product.226"* %1 to %"class.Eigen::PlainObjectBase.33"**
  %8 = load %"class.Eigen::PlainObjectBase.33"*, %"class.Eigen::PlainObjectBase.33"** %7, align 8, !tbaa !11
  %9 = getelementptr inbounds %"class.Eigen::PlainObjectBase.33", %"class.Eigen::PlainObjectBase.33"* %8, i64 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !32
  %11 = bitcast %"class.Eigen::Matrix.170"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %11, i8 0, i64 16, i32 8, i1 false) #11
  %12 = icmp sgt i64 %10, -1
  br i1 %12, label %14, label %13, !prof !10

; <label>:13:                                     ; preds = %2
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:14:                                     ; preds = %2
  %15 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.706", %"struct.Eigen::internal::product_evaluator.706"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %16 = icmp eq i64 %10, 0
  br i1 %16, label %33, label %17

; <label>:17:                                     ; preds = %14
  %18 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %6, i64 0, i32 0, i32 0, i32 0
  %19 = shl i64 %10, 2
  %20 = add i64 %19, 32
  %21 = tail call i8* @malloc(i64 %20) #14
  %22 = icmp eq i8* %21, null
  br i1 %22, label %30, label %23

; <label>:23:                                     ; preds = %17
  %24 = ptrtoint i8* %21 to i64
  %25 = add i64 %24, 32
  %26 = and i64 %25, -32
  %27 = inttoptr i64 %26 to i8**
  %28 = getelementptr inbounds i8*, i8** %27, i64 -1
  store i8* %21, i8** %28, align 8, !tbaa !29
  %29 = inttoptr i64 %26 to i32*
  br label %30

; <label>:30:                                     ; preds = %23, %17
  %31 = phi i32* [ %29, %23 ], [ null, %17 ]
  store i32* %31, i32** %18, align 8, !tbaa !44
  %32 = ptrtoint i32* %31 to i64
  br label %33

; <label>:33:                                     ; preds = %30, %14
  %34 = phi i32* [ null, %14 ], [ %31, %30 ]
  %35 = phi i64 [ 0, %14 ], [ %32, %30 ]
  store i64 %10, i64* %15, align 8, !tbaa !46
  %36 = bitcast %"struct.Eigen::internal::product_evaluator.706"* %0 to i64*
  store i64 %35, i64* %36, align 8, !tbaa !61
  %37 = getelementptr inbounds %"class.Eigen::Product.226", %"class.Eigen::Product.226"* %1, i64 0, i32 0
  %38 = load %"class.Eigen::Matrix.32"*, %"class.Eigen::Matrix.32"** %37, align 8, !tbaa !11
  %39 = getelementptr inbounds %"class.Eigen::Product.226", %"class.Eigen::Product.226"* %1, i64 0, i32 1
  %40 = load %"class.Eigen::Matrix.153"*, %"class.Eigen::Matrix.153"** %39, align 8, !tbaa !11
  %41 = and i64 %10, -4
  %42 = icmp sgt i64 %10, 3
  br i1 %42, label %43, label %51

; <label>:43:                                     ; preds = %33
  %44 = bitcast i32* %34 to i8*
  %45 = icmp sgt i64 %41, 4
  %46 = select i1 %45, i64 %41, i64 4
  %47 = add nuw i64 %46, 4611686018427387903
  %48 = lshr i64 %47, 2
  %49 = shl i64 %48, 4
  %50 = add i64 %49, 16
  call void @llvm.memset.p0i8.i64(i8* %44, i8 0, i64 %50, i32 16, i1 false)
  br label %51

; <label>:51:                                     ; preds = %43, %33
  %52 = icmp slt i64 %41, %10
  br i1 %52, label %53, label %60

; <label>:53:                                     ; preds = %51
  %54 = getelementptr i32, i32* %34, i64 %41
  %55 = bitcast i32* %54 to i8*
  %56 = shl i64 %10, 2
  %57 = lshr i64 %10, 2
  %58 = shl i64 %57, 4
  %59 = sub i64 %56, %58
  call void @llvm.memset.p0i8.i64(i8* %55, i8 0, i64 %59, i32 4, i1 false)
  br label %60

; <label>:60:                                     ; preds = %53, %51
  %61 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %38, i64 0, i32 0, i32 0, i32 1
  %62 = load i64, i64* %61, align 8, !tbaa !37
  %63 = bitcast %"class.Eigen::internal::const_blas_data_mapper.717"* %3 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %63) #11
  %64 = bitcast %"class.Eigen::Matrix.32"* %38 to i64*
  %65 = load i64, i64* %64, align 8, !tbaa !35
  %66 = bitcast %"class.Eigen::internal::const_blas_data_mapper.717"* %3 to i64*
  store i64 %65, i64* %66, align 8, !tbaa !362
  %67 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.717", %"class.Eigen::internal::const_blas_data_mapper.717"* %3, i64 0, i32 0, i32 1
  store i64 %62, i64* %67, align 8, !tbaa !364
  %68 = bitcast %"class.Eigen::internal::const_blas_data_mapper.719"* %4 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %68) #11
  %69 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %40, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %70 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.719", %"class.Eigen::internal::const_blas_data_mapper.719"* %4, i64 0, i32 0, i32 0
  store i32* %69, i32** %70, align 8, !tbaa !365
  %71 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.719", %"class.Eigen::internal::const_blas_data_mapper.719"* %4, i64 0, i32 0, i32 1
  store i64 1, i64* %71, align 8, !tbaa !367
  %72 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %6, i64 0, i32 0, i32 0, i32 0
  %73 = load i32*, i32** %72, align 8, !tbaa !44
  call void @_ZN5Eigen8internal29general_matrix_vector_productIliNS0_22const_blas_data_mapperIilLi0EEELi0ELb0EiNS2_IilLi1EEELb0ELi0EE3runEllRKS3_RKS4_Pili(i64 %62, i64 47, %"class.Eigen::internal::const_blas_data_mapper.717"* nonnull dereferenceable(16) %3, %"class.Eigen::internal::const_blas_data_mapper.719"* nonnull dereferenceable(16) %4, i32* %73, i64 1, i32 1) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %68) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %63) #11
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal29general_matrix_vector_productIliNS0_22const_blas_data_mapperIilLi0EEELi0ELb0EiNS2_IilLi1EEELb0ELi0EE3runEllRKS3_RKS4_Pili(i64, i64, %"class.Eigen::internal::const_blas_data_mapper.717"* dereferenceable(16), %"class.Eigen::internal::const_blas_data_mapper.719"* dereferenceable(16), i32*, i64, i32) local_unnamed_addr #8 align 2 {
  %8 = bitcast i32* %4 to i8*
  %9 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.717", %"class.Eigen::internal::const_blas_data_mapper.717"* %2, i64 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !364
  %11 = ptrtoint i32* %4 to i64
  %12 = and i64 %11, 3
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %14, label %20

; <label>:14:                                     ; preds = %7
  %15 = lshr i64 %11, 2
  %16 = sub nsw i64 0, %15
  %17 = and i64 %16, 3
  %18 = icmp slt i64 %17, %0
  %19 = select i1 %18, i64 %17, i64 %0
  br label %20

; <label>:20:                                     ; preds = %7, %14
  %21 = phi i64 [ %19, %14 ], [ %0, %7 ]
  %22 = sub nsw i64 %0, %21
  %23 = and i64 %22, -4
  %24 = add i64 %23, %21
  %25 = add nsw i64 %24, -11
  %26 = sub i64 0, %10
  %27 = and i64 %26, 3
  %28 = icmp eq i64 %27, 0
  %29 = icmp eq i64 %27, 2
  %30 = select i1 %29, i64 1, i64 2
  %31 = select i1 %28, i64 0, i64 %30
  %32 = bitcast %"class.Eigen::internal::const_blas_data_mapper.717"* %2 to i64*
  %33 = load i64, i64* %32, align 8, !tbaa !362
  %34 = and i64 %33, 3
  %35 = icmp eq i64 %34, 0
  %36 = inttoptr i64 %33 to i32*
  br i1 %35, label %37, label %58

; <label>:37:                                     ; preds = %20
  %38 = lshr i64 %33, 2
  %39 = sub nsw i64 0, %38
  %40 = and i64 %39, 3
  %41 = icmp slt i64 %40, %0
  %42 = select i1 %41, i64 %40, i64 %0
  %43 = icmp slt i64 %42, 0
  %44 = icmp sge i64 %40, %0
  %45 = or i1 %44, %43
  br i1 %45, label %58, label %46

; <label>:46:                                     ; preds = %37
  br i1 %13, label %47, label %58

; <label>:47:                                     ; preds = %46
  %48 = srem i64 %42, 4
  %49 = icmp eq i64 %21, %48
  br i1 %49, label %54, label %50

; <label>:50:                                     ; preds = %47
  %51 = add nsw i64 %27, %42
  %52 = srem i64 %51, 4
  %53 = icmp eq i64 %21, %52
  br i1 %53, label %54, label %2255

; <label>:54:                                     ; preds = %47, %50, %2255, %2260
  %55 = phi i64 [ 0, %47 ], [ 1, %50 ], [ 2, %2255 ], [ 3, %2260 ]
  %56 = icmp sgt i64 %55, %1
  %57 = select i1 %56, i64 %1, i64 %55
  br label %58

; <label>:58:                                     ; preds = %2260, %20, %37, %46, %54
  %59 = phi i64 [ 0, %37 ], [ %57, %54 ], [ 0, %46 ], [ 0, %20 ], [ 0, %2260 ]
  %60 = phi i64 [ 3, %37 ], [ %31, %54 ], [ 3, %46 ], [ 3, %20 ], [ 3, %2260 ]
  %61 = phi i64 [ 0, %37 ], [ %24, %54 ], [ 0, %46 ], [ 0, %20 ], [ %24, %2260 ]
  %62 = phi i64 [ 0, %37 ], [ %21, %54 ], [ 0, %46 ], [ 0, %20 ], [ %21, %2260 ]
  %63 = icmp eq i64 %27, 1
  %64 = select i1 %63, i64 3, i64 1
  %65 = select i1 %63, i64 1, i64 3
  %66 = sub nsw i64 %1, %59
  %67 = sdiv i64 %66, 4
  %68 = shl nsw i64 %67, 2
  %69 = add nsw i64 %68, %59
  %70 = icmp sgt i64 %66, 3
  %71 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.719", %"class.Eigen::internal::const_blas_data_mapper.719"* %3, i64 0, i32 0, i32 0
  %72 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.719", %"class.Eigen::internal::const_blas_data_mapper.719"* %3, i64 0, i32 0, i32 1
  %73 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.717", %"class.Eigen::internal::const_blas_data_mapper.717"* %2, i64 0, i32 0, i32 0
  br i1 %70, label %74, label %160

; <label>:74:                                     ; preds = %58
  %75 = icmp sgt i64 %62, 0
  %76 = icmp sgt i64 %61, %62
  %77 = add nsw i64 %62, -1
  %78 = add nsw i64 %62, -2
  %79 = add nsw i64 %62, -3
  %80 = icmp slt i64 %62, %25
  %81 = icmp slt i64 %61, %0
  %82 = add i64 %24, -12
  %83 = sub i64 %82, %62
  %84 = and i64 %83, -8
  %85 = add i64 %62, %84
  %86 = add i64 %85, 8
  %87 = sub i64 %0, %61
  %88 = getelementptr i32, i32* %4, i64 %61
  %89 = bitcast i32* %88 to i8*
  %90 = getelementptr i32, i32* %4, i64 %0
  %91 = bitcast i32* %90 to i8*
  %92 = add i64 %65, %59
  %93 = shl i64 %92, 2
  %94 = shl i64 %59, 2
  %95 = add i64 %94, 8
  %96 = add i64 %64, %59
  %97 = shl i64 %96, 2
  %98 = getelementptr i32, i32* %4, i64 %62
  %99 = add i64 %65, %59
  %100 = shl i64 %99, 2
  %101 = shl i64 %59, 2
  %102 = add i64 %101, 8
  %103 = add i64 %64, %59
  %104 = shl i64 %103, 2
  %105 = add i64 %62, -8
  %106 = lshr i64 %105, 3
  %107 = add i64 %62, -1
  %108 = add i64 %61, -1
  %109 = sub i64 %108, %62
  %110 = lshr i64 %109, 2
  %111 = add nuw nsw i64 %110, 1
  %112 = add i64 %87, -8
  %113 = lshr i64 %112, 3
  %114 = add i64 %0, -1
  %115 = icmp ult i64 %62, 8
  %116 = and i64 %62, -8
  %117 = icmp eq i64 %116, 0
  %118 = and i64 %106, 1
  %119 = icmp eq i64 %118, 0
  %120 = bitcast i32* %4 to <8 x i32>*
  %121 = bitcast i32* %4 to <8 x i32>*
  %122 = bitcast i32* %4 to <8 x i32>*
  %123 = bitcast i32* %4 to <8 x i32>*
  %124 = bitcast i32* %4 to <8 x i32>*
  %125 = icmp eq i64 %106, 0
  %126 = icmp eq i64 %62, %116
  %127 = and i64 %111, 1
  %128 = icmp eq i64 %127, 0
  %129 = getelementptr inbounds i32, i32* %4, i64 %62
  %130 = bitcast i32* %129 to <4 x i32>*
  %131 = add nsw i64 %62, 4
  %132 = icmp eq i64 %110, 0
  %133 = and i64 %111, 1
  %134 = icmp eq i64 %133, 0
  %135 = getelementptr inbounds i32, i32* %4, i64 %62
  %136 = bitcast i32* %135 to <4 x i32>*
  %137 = add nsw i64 %62, 4
  %138 = icmp eq i64 %110, 0
  %139 = and i64 %111, 1
  %140 = icmp eq i64 %139, 0
  %141 = getelementptr inbounds i32, i32* %4, i64 %62
  %142 = bitcast i32* %141 to <4 x i32>*
  %143 = add nsw i64 %62, 4
  %144 = icmp eq i64 %110, 0
  %145 = icmp ult i64 %87, 8
  %146 = and i64 %87, -8
  %147 = icmp eq i64 %146, 0
  %148 = add i64 %61, %146
  %149 = and i64 %113, 1
  %150 = icmp eq i64 %149, 0
  %151 = getelementptr inbounds i32, i32* %4, i64 %61
  %152 = bitcast i32* %151 to <8 x i32>*
  %153 = bitcast i32* %151 to <8 x i32>*
  %154 = bitcast i32* %151 to <8 x i32>*
  %155 = bitcast i32* %151 to <8 x i32>*
  %156 = bitcast i32* %151 to <8 x i32>*
  %157 = icmp eq i64 %113, 0
  %158 = icmp eq i64 %87, %146
  br label %258

; <label>:159:                                    ; preds = %1117
  br label %160

; <label>:160:                                    ; preds = %159, %58
  %161 = icmp sgt i64 %62, 0
  %162 = icmp slt i64 %61, %0
  %163 = icmp slt i64 %62, %61
  %164 = sub i64 %0, %61
  %165 = getelementptr i32, i32* %4, i64 %61
  %166 = bitcast i32* %165 to i8*
  %167 = getelementptr i32, i32* %4, i64 %0
  %168 = bitcast i32* %167 to i8*
  %169 = getelementptr i32, i32* %4, i64 %62
  %170 = sub i64 %0, %61
  %171 = getelementptr i32, i32* %4, i64 %61
  %172 = bitcast i32* %171 to i8*
  %173 = getelementptr i32, i32* %4, i64 %0
  %174 = bitcast i32* %173 to i8*
  %175 = add i64 %61, -1
  %176 = sub i64 %175, %62
  %177 = lshr i64 %176, 2
  %178 = add nuw nsw i64 %177, 1
  %179 = add i64 %170, -32
  %180 = lshr i64 %179, 5
  %181 = add nuw nsw i64 %180, 1
  %182 = add i64 %0, -1
  %183 = add i64 %62, -32
  %184 = lshr i64 %183, 5
  %185 = add i64 %62, -1
  %186 = add nuw nsw i64 %177, 1
  %187 = add i64 %0, -1
  %188 = icmp ult i64 %62, 32
  %189 = and i64 %186, 7
  %190 = icmp eq i64 %189, 0
  %191 = icmp ult i64 %176, 28
  %192 = icmp ult i64 %164, 32
  %193 = and i64 %164, -32
  %194 = icmp eq i64 %193, 0
  %195 = add i64 %61, %193
  %196 = and i64 %181, 1
  %197 = icmp eq i64 %196, 0
  %198 = getelementptr inbounds i32, i32* %4, i64 %61
  %199 = bitcast i32* %198 to <8 x i32>*
  %200 = getelementptr i32, i32* %198, i64 8
  %201 = bitcast i32* %200 to <8 x i32>*
  %202 = getelementptr i32, i32* %198, i64 16
  %203 = bitcast i32* %202 to <8 x i32>*
  %204 = getelementptr i32, i32* %198, i64 24
  %205 = bitcast i32* %204 to <8 x i32>*
  %206 = bitcast i32* %198 to <8 x i32>*
  %207 = bitcast i32* %200 to <8 x i32>*
  %208 = bitcast i32* %202 to <8 x i32>*
  %209 = bitcast i32* %204 to <8 x i32>*
  %210 = icmp eq i64 %180, 0
  %211 = icmp eq i64 %164, %193
  %212 = and i64 %186, 7
  %213 = icmp eq i64 %212, 0
  %214 = icmp ult i64 %176, 28
  %215 = and i64 %62, -32
  %216 = icmp eq i64 %215, 0
  %217 = and i64 %184, 1
  %218 = icmp eq i64 %217, 0
  %219 = bitcast i32* %4 to <8 x i32>*
  %220 = getelementptr i32, i32* %4, i64 8
  %221 = bitcast i32* %220 to <8 x i32>*
  %222 = getelementptr i32, i32* %4, i64 16
  %223 = bitcast i32* %222 to <8 x i32>*
  %224 = getelementptr i32, i32* %4, i64 24
  %225 = bitcast i32* %224 to <8 x i32>*
  %226 = bitcast i32* %4 to <8 x i32>*
  %227 = bitcast i32* %220 to <8 x i32>*
  %228 = bitcast i32* %222 to <8 x i32>*
  %229 = bitcast i32* %224 to <8 x i32>*
  %230 = icmp eq i64 %184, 0
  %231 = icmp eq i64 %62, %215
  %232 = and i64 %178, 7
  %233 = icmp eq i64 %232, 0
  %234 = icmp ult i64 %176, 28
  %235 = icmp ult i64 %170, 32
  %236 = and i64 %170, -32
  %237 = icmp eq i64 %236, 0
  %238 = add i64 %61, %236
  %239 = and i64 %181, 1
  %240 = icmp eq i64 %239, 0
  %241 = getelementptr inbounds i32, i32* %4, i64 %61
  %242 = bitcast i32* %241 to <8 x i32>*
  %243 = getelementptr i32, i32* %241, i64 8
  %244 = bitcast i32* %243 to <8 x i32>*
  %245 = getelementptr i32, i32* %241, i64 16
  %246 = bitcast i32* %245 to <8 x i32>*
  %247 = getelementptr i32, i32* %241, i64 24
  %248 = bitcast i32* %247 to <8 x i32>*
  %249 = bitcast i32* %241 to <8 x i32>*
  %250 = bitcast i32* %243 to <8 x i32>*
  %251 = bitcast i32* %245 to <8 x i32>*
  %252 = bitcast i32* %247 to <8 x i32>*
  %253 = icmp eq i64 %180, 0
  %254 = icmp eq i64 %170, %236
  %255 = and i64 %178, 7
  %256 = icmp eq i64 %255, 0
  %257 = icmp ult i64 %176, 28
  br label %1165

; <label>:258:                                    ; preds = %1120, %74
  %259 = phi i64 [ %1123, %1120 ], [ 0, %74 ]
  %260 = phi i64 [ %1122, %1120 ], [ %10, %74 ]
  %261 = phi i32* [ %1121, %1120 ], [ %36, %74 ]
  %262 = phi i64 [ %1118, %1120 ], [ %59, %74 ]
  %263 = shl i64 %259, 4
  %264 = add i64 %100, %263
  %265 = add i64 %102, %263
  %266 = add i64 %104, %263
  %267 = add i64 %101, %263
  %268 = shl i64 %259, 4
  %269 = add i64 %93, %268
  %270 = add i64 %95, %268
  %271 = add i64 %97, %268
  %272 = add i64 %94, %268
  %273 = load i32*, i32** %71, align 8, !tbaa !365
  %274 = load i64, i64* %72, align 8, !tbaa !367
  %275 = mul nsw i64 %274, %262
  %276 = getelementptr inbounds i32, i32* %273, i64 %275
  %277 = load i32, i32* %276, align 4, !tbaa !33
  %278 = mul nsw i32 %277, %6
  %279 = insertelement <4 x i32> undef, i32 %278, i32 0
  %280 = shufflevector <4 x i32> %279, <4 x i32> undef, <4 x i32> zeroinitializer
  %281 = add nsw i64 %262, %64
  %282 = mul nsw i64 %274, %281
  %283 = getelementptr inbounds i32, i32* %273, i64 %282
  %284 = load i32, i32* %283, align 4, !tbaa !33
  %285 = mul nsw i32 %284, %6
  %286 = insertelement <4 x i32> undef, i32 %285, i32 0
  %287 = shufflevector <4 x i32> %286, <4 x i32> undef, <4 x i32> zeroinitializer
  %288 = add nsw i64 %262, 2
  %289 = mul nsw i64 %274, %288
  %290 = getelementptr inbounds i32, i32* %273, i64 %289
  %291 = load i32, i32* %290, align 4, !tbaa !33
  %292 = mul nsw i32 %291, %6
  %293 = insertelement <4 x i32> undef, i32 %292, i32 0
  %294 = shufflevector <4 x i32> %293, <4 x i32> undef, <4 x i32> zeroinitializer
  %295 = add nsw i64 %262, %65
  %296 = mul nsw i64 %274, %295
  %297 = getelementptr inbounds i32, i32* %273, i64 %296
  %298 = load i32, i32* %297, align 4, !tbaa !33
  %299 = mul nsw i32 %298, %6
  %300 = insertelement <4 x i32> undef, i32 %299, i32 0
  %301 = shufflevector <4 x i32> %300, <4 x i32> undef, <4 x i32> zeroinitializer
  %302 = mul nsw i64 %260, %262
  %303 = getelementptr inbounds i32, i32* %261, i64 %302
  %304 = mul nsw i64 %260, %281
  %305 = getelementptr inbounds i32, i32* %261, i64 %304
  %306 = mul nsw i64 %260, %288
  %307 = getelementptr inbounds i32, i32* %261, i64 %306
  %308 = mul nsw i64 %260, %295
  %309 = getelementptr inbounds i32, i32* %261, i64 %308
  br i1 %75, label %310, label %470

; <label>:310:                                    ; preds = %258
  br i1 %115, label %311, label %342

; <label>:311:                                    ; preds = %467, %343, %342, %310
  %312 = phi i64 [ 0, %343 ], [ 0, %342 ], [ 0, %310 ], [ %116, %467 ]
  %313 = sub i64 %62, %312
  %314 = and i64 %313, 1
  %315 = icmp eq i64 %314, 0
  br i1 %315, label %337, label %316

; <label>:316:                                    ; preds = %311
  br label %317

; <label>:317:                                    ; preds = %316
  %318 = getelementptr inbounds i32, i32* %303, i64 %312
  %319 = load i32, i32* %318, align 4, !tbaa !33
  %320 = getelementptr inbounds i32, i32* %4, i64 %312
  %321 = mul nsw i32 %319, %278
  %322 = load i32, i32* %320, align 4, !tbaa !33
  %323 = add nsw i32 %322, %321
  store i32 %323, i32* %320, align 4, !tbaa !33
  %324 = getelementptr inbounds i32, i32* %305, i64 %312
  %325 = load i32, i32* %324, align 4, !tbaa !33
  %326 = mul nsw i32 %325, %285
  %327 = add nsw i32 %326, %323
  store i32 %327, i32* %320, align 4, !tbaa !33
  %328 = getelementptr inbounds i32, i32* %307, i64 %312
  %329 = load i32, i32* %328, align 4, !tbaa !33
  %330 = mul nsw i32 %329, %292
  %331 = add nsw i32 %330, %327
  store i32 %331, i32* %320, align 4, !tbaa !33
  %332 = getelementptr inbounds i32, i32* %309, i64 %312
  %333 = load i32, i32* %332, align 4, !tbaa !33
  %334 = mul nsw i32 %333, %299
  %335 = add nsw i32 %334, %331
  store i32 %335, i32* %320, align 4, !tbaa !33
  %336 = or i64 %312, 1
  br label %337

; <label>:337:                                    ; preds = %311, %317
  %338 = phi i64 [ %336, %317 ], [ %312, %311 ]
  br label %339

; <label>:339:                                    ; preds = %337
  %340 = icmp eq i64 %107, %312
  br i1 %340, label %469, label %341

; <label>:341:                                    ; preds = %339
  br label %656

; <label>:342:                                    ; preds = %310
  br i1 %117, label %311, label %343

; <label>:343:                                    ; preds = %342
  %344 = getelementptr i32, i32* %261, i64 %62
  %345 = bitcast i32* %344 to i8*
  %346 = mul i64 %260, %264
  %347 = getelementptr i8, i8* %345, i64 %346
  %348 = getelementptr i32, i32* %261, i64 %62
  %349 = bitcast i32* %348 to i8*
  %350 = mul i64 %260, %265
  %351 = getelementptr i8, i8* %349, i64 %350
  %352 = getelementptr i32, i32* %261, i64 %62
  %353 = bitcast i32* %352 to i8*
  %354 = mul i64 %260, %266
  %355 = getelementptr i8, i8* %353, i64 %354
  %356 = getelementptr i32, i32* %261, i64 %62
  %357 = bitcast i32* %356 to i8*
  %358 = mul i64 %260, %267
  %359 = getelementptr i8, i8* %357, i64 %358
  %360 = icmp ult i8* %8, %347
  %361 = icmp ult i32* %309, %98
  %362 = and i1 %360, %361
  %363 = icmp ult i8* %8, %351
  %364 = icmp ult i32* %307, %98
  %365 = and i1 %363, %364
  %366 = or i1 %362, %365
  %367 = icmp ult i8* %8, %355
  %368 = icmp ult i32* %305, %98
  %369 = and i1 %367, %368
  %370 = or i1 %366, %369
  %371 = icmp ult i8* %8, %359
  %372 = icmp ult i32* %303, %98
  %373 = and i1 %371, %372
  %374 = or i1 %370, %373
  br i1 %374, label %311, label %375

; <label>:375:                                    ; preds = %343
  %376 = insertelement <8 x i32> undef, i32 %278, i32 0
  %377 = shufflevector <8 x i32> %376, <8 x i32> undef, <8 x i32> zeroinitializer
  %378 = insertelement <8 x i32> undef, i32 %285, i32 0
  %379 = shufflevector <8 x i32> %378, <8 x i32> undef, <8 x i32> zeroinitializer
  %380 = insertelement <8 x i32> undef, i32 %292, i32 0
  %381 = shufflevector <8 x i32> %380, <8 x i32> undef, <8 x i32> zeroinitializer
  %382 = insertelement <8 x i32> undef, i32 %299, i32 0
  %383 = shufflevector <8 x i32> %382, <8 x i32> undef, <8 x i32> zeroinitializer
  br i1 %119, label %384, label %403

; <label>:384:                                    ; preds = %375
  br label %385

; <label>:385:                                    ; preds = %384
  %386 = bitcast i32* %303 to <8 x i32>*
  %387 = load <8 x i32>, <8 x i32>* %386, align 4, !tbaa !33, !alias.scope !368
  %388 = mul nsw <8 x i32> %387, %377
  %389 = load <8 x i32>, <8 x i32>* %120, align 4, !tbaa !33, !alias.scope !371, !noalias !373
  %390 = add nsw <8 x i32> %389, %388
  store <8 x i32> %390, <8 x i32>* %121, align 4, !tbaa !33, !alias.scope !371, !noalias !373
  %391 = bitcast i32* %305 to <8 x i32>*
  %392 = load <8 x i32>, <8 x i32>* %391, align 4, !tbaa !33, !alias.scope !377
  %393 = mul nsw <8 x i32> %392, %379
  %394 = add nsw <8 x i32> %393, %390
  store <8 x i32> %394, <8 x i32>* %122, align 4, !tbaa !33, !alias.scope !371, !noalias !373
  %395 = bitcast i32* %307 to <8 x i32>*
  %396 = load <8 x i32>, <8 x i32>* %395, align 4, !tbaa !33, !alias.scope !378
  %397 = mul nsw <8 x i32> %396, %381
  %398 = add nsw <8 x i32> %397, %394
  store <8 x i32> %398, <8 x i32>* %123, align 4, !tbaa !33, !alias.scope !371, !noalias !373
  %399 = bitcast i32* %309 to <8 x i32>*
  %400 = load <8 x i32>, <8 x i32>* %399, align 4, !tbaa !33, !alias.scope !379
  %401 = mul nsw <8 x i32> %400, %383
  %402 = add nsw <8 x i32> %401, %398
  store <8 x i32> %402, <8 x i32>* %124, align 4, !tbaa !33, !alias.scope !371, !noalias !373
  br label %403

; <label>:403:                                    ; preds = %375, %385
  %404 = phi i64 [ 8, %385 ], [ 0, %375 ]
  br label %405

; <label>:405:                                    ; preds = %403
  br i1 %125, label %467, label %406

; <label>:406:                                    ; preds = %405
  br label %407

; <label>:407:                                    ; preds = %407, %406
  %408 = phi i64 [ %404, %406 ], [ %464, %407 ]
  %409 = getelementptr inbounds i32, i32* %303, i64 %408
  %410 = bitcast i32* %409 to <8 x i32>*
  %411 = load <8 x i32>, <8 x i32>* %410, align 4, !tbaa !33, !alias.scope !368
  %412 = getelementptr inbounds i32, i32* %4, i64 %408
  %413 = mul nsw <8 x i32> %411, %377
  %414 = bitcast i32* %412 to <8 x i32>*
  %415 = load <8 x i32>, <8 x i32>* %414, align 4, !tbaa !33, !alias.scope !371, !noalias !373
  %416 = add nsw <8 x i32> %415, %413
  %417 = bitcast i32* %412 to <8 x i32>*
  store <8 x i32> %416, <8 x i32>* %417, align 4, !tbaa !33, !alias.scope !371, !noalias !373
  %418 = getelementptr inbounds i32, i32* %305, i64 %408
  %419 = bitcast i32* %418 to <8 x i32>*
  %420 = load <8 x i32>, <8 x i32>* %419, align 4, !tbaa !33, !alias.scope !377
  %421 = mul nsw <8 x i32> %420, %379
  %422 = add nsw <8 x i32> %421, %416
  %423 = bitcast i32* %412 to <8 x i32>*
  store <8 x i32> %422, <8 x i32>* %423, align 4, !tbaa !33, !alias.scope !371, !noalias !373
  %424 = getelementptr inbounds i32, i32* %307, i64 %408
  %425 = bitcast i32* %424 to <8 x i32>*
  %426 = load <8 x i32>, <8 x i32>* %425, align 4, !tbaa !33, !alias.scope !378
  %427 = mul nsw <8 x i32> %426, %381
  %428 = add nsw <8 x i32> %427, %422
  %429 = bitcast i32* %412 to <8 x i32>*
  store <8 x i32> %428, <8 x i32>* %429, align 4, !tbaa !33, !alias.scope !371, !noalias !373
  %430 = getelementptr inbounds i32, i32* %309, i64 %408
  %431 = bitcast i32* %430 to <8 x i32>*
  %432 = load <8 x i32>, <8 x i32>* %431, align 4, !tbaa !33, !alias.scope !379
  %433 = mul nsw <8 x i32> %432, %383
  %434 = add nsw <8 x i32> %433, %428
  %435 = bitcast i32* %412 to <8 x i32>*
  store <8 x i32> %434, <8 x i32>* %435, align 4, !tbaa !33, !alias.scope !371, !noalias !373
  %436 = add i64 %408, 8
  %437 = getelementptr inbounds i32, i32* %303, i64 %436
  %438 = bitcast i32* %437 to <8 x i32>*
  %439 = load <8 x i32>, <8 x i32>* %438, align 4, !tbaa !33, !alias.scope !368
  %440 = getelementptr inbounds i32, i32* %4, i64 %436
  %441 = mul nsw <8 x i32> %439, %377
  %442 = bitcast i32* %440 to <8 x i32>*
  %443 = load <8 x i32>, <8 x i32>* %442, align 4, !tbaa !33, !alias.scope !371, !noalias !373
  %444 = add nsw <8 x i32> %443, %441
  %445 = bitcast i32* %440 to <8 x i32>*
  store <8 x i32> %444, <8 x i32>* %445, align 4, !tbaa !33, !alias.scope !371, !noalias !373
  %446 = getelementptr inbounds i32, i32* %305, i64 %436
  %447 = bitcast i32* %446 to <8 x i32>*
  %448 = load <8 x i32>, <8 x i32>* %447, align 4, !tbaa !33, !alias.scope !377
  %449 = mul nsw <8 x i32> %448, %379
  %450 = add nsw <8 x i32> %449, %444
  %451 = bitcast i32* %440 to <8 x i32>*
  store <8 x i32> %450, <8 x i32>* %451, align 4, !tbaa !33, !alias.scope !371, !noalias !373
  %452 = getelementptr inbounds i32, i32* %307, i64 %436
  %453 = bitcast i32* %452 to <8 x i32>*
  %454 = load <8 x i32>, <8 x i32>* %453, align 4, !tbaa !33, !alias.scope !378
  %455 = mul nsw <8 x i32> %454, %381
  %456 = add nsw <8 x i32> %455, %450
  %457 = bitcast i32* %440 to <8 x i32>*
  store <8 x i32> %456, <8 x i32>* %457, align 4, !tbaa !33, !alias.scope !371, !noalias !373
  %458 = getelementptr inbounds i32, i32* %309, i64 %436
  %459 = bitcast i32* %458 to <8 x i32>*
  %460 = load <8 x i32>, <8 x i32>* %459, align 4, !tbaa !33, !alias.scope !379
  %461 = mul nsw <8 x i32> %460, %383
  %462 = add nsw <8 x i32> %461, %456
  %463 = bitcast i32* %440 to <8 x i32>*
  store <8 x i32> %462, <8 x i32>* %463, align 4, !tbaa !33, !alias.scope !371, !noalias !373
  %464 = add i64 %408, 16
  %465 = icmp eq i64 %464, %116
  br i1 %465, label %466, label %407, !llvm.loop !380

; <label>:466:                                    ; preds = %407
  br label %467

; <label>:467:                                    ; preds = %405, %466
  br i1 %126, label %470, label %311

; <label>:468:                                    ; preds = %656
  br label %469

; <label>:469:                                    ; preds = %339, %468
  br label %470

; <label>:470:                                    ; preds = %469, %467, %258
  br i1 %76, label %697, label %479

; <label>:471:                                    ; preds = %1064
  br label %472

; <label>:472:                                    ; preds = %780, %471
  br label %479

; <label>:473:                                    ; preds = %782
  br label %474

; <label>:474:                                    ; preds = %752, %473
  br label %479

; <label>:475:                                    ; preds = %833
  br label %476

; <label>:476:                                    ; preds = %724, %475
  br label %479

; <label>:477:                                    ; preds = %1013
  br label %478

; <label>:478:                                    ; preds = %932, %477
  br label %479

; <label>:479:                                    ; preds = %478, %476, %474, %472, %896, %470
  br i1 %81, label %480, label %1117

; <label>:480:                                    ; preds = %479
  br i1 %145, label %481, label %512

; <label>:481:                                    ; preds = %655, %513, %512, %480
  %482 = phi i64 [ %61, %513 ], [ %61, %512 ], [ %61, %480 ], [ %148, %655 ]
  %483 = sub i64 %0, %482
  %484 = and i64 %483, 1
  %485 = icmp eq i64 %484, 0
  br i1 %485, label %507, label %486

; <label>:486:                                    ; preds = %481
  br label %487

; <label>:487:                                    ; preds = %486
  %488 = getelementptr inbounds i32, i32* %303, i64 %482
  %489 = load i32, i32* %488, align 4, !tbaa !33
  %490 = getelementptr inbounds i32, i32* %4, i64 %482
  %491 = mul nsw i32 %489, %278
  %492 = load i32, i32* %490, align 4, !tbaa !33
  %493 = add nsw i32 %492, %491
  store i32 %493, i32* %490, align 4, !tbaa !33
  %494 = getelementptr inbounds i32, i32* %305, i64 %482
  %495 = load i32, i32* %494, align 4, !tbaa !33
  %496 = mul nsw i32 %495, %285
  %497 = add nsw i32 %496, %493
  store i32 %497, i32* %490, align 4, !tbaa !33
  %498 = getelementptr inbounds i32, i32* %307, i64 %482
  %499 = load i32, i32* %498, align 4, !tbaa !33
  %500 = mul nsw i32 %499, %292
  %501 = add nsw i32 %500, %497
  store i32 %501, i32* %490, align 4, !tbaa !33
  %502 = getelementptr inbounds i32, i32* %309, i64 %482
  %503 = load i32, i32* %502, align 4, !tbaa !33
  %504 = mul nsw i32 %503, %299
  %505 = add nsw i32 %504, %501
  store i32 %505, i32* %490, align 4, !tbaa !33
  %506 = add nsw i64 %482, 1
  br label %507

; <label>:507:                                    ; preds = %481, %487
  %508 = phi i64 [ %506, %487 ], [ %482, %481 ]
  br label %509

; <label>:509:                                    ; preds = %507
  %510 = icmp eq i64 %114, %482
  br i1 %510, label %1116, label %511

; <label>:511:                                    ; preds = %509
  br label %1124

; <label>:512:                                    ; preds = %480
  br i1 %147, label %481, label %513

; <label>:513:                                    ; preds = %512
  %514 = getelementptr i32, i32* %261, i64 %61
  %515 = bitcast i32* %514 to i8*
  %516 = mul i64 %260, %269
  %517 = getelementptr i8, i8* %515, i64 %516
  %518 = getelementptr i32, i32* %261, i64 %0
  %519 = bitcast i32* %518 to i8*
  %520 = getelementptr i8, i8* %519, i64 %516
  %521 = getelementptr i32, i32* %261, i64 %61
  %522 = bitcast i32* %521 to i8*
  %523 = mul i64 %260, %270
  %524 = getelementptr i8, i8* %522, i64 %523
  %525 = getelementptr i32, i32* %261, i64 %0
  %526 = bitcast i32* %525 to i8*
  %527 = getelementptr i8, i8* %526, i64 %523
  %528 = getelementptr i32, i32* %261, i64 %61
  %529 = bitcast i32* %528 to i8*
  %530 = mul i64 %260, %271
  %531 = getelementptr i8, i8* %529, i64 %530
  %532 = getelementptr i32, i32* %261, i64 %0
  %533 = bitcast i32* %532 to i8*
  %534 = getelementptr i8, i8* %533, i64 %530
  %535 = getelementptr i32, i32* %261, i64 %61
  %536 = bitcast i32* %535 to i8*
  %537 = mul i64 %260, %272
  %538 = getelementptr i8, i8* %536, i64 %537
  %539 = getelementptr i32, i32* %261, i64 %0
  %540 = bitcast i32* %539 to i8*
  %541 = getelementptr i8, i8* %540, i64 %537
  %542 = icmp ult i8* %89, %520
  %543 = icmp ult i8* %517, %91
  %544 = and i1 %542, %543
  %545 = icmp ult i8* %89, %527
  %546 = icmp ult i8* %524, %91
  %547 = and i1 %545, %546
  %548 = or i1 %544, %547
  %549 = icmp ult i8* %89, %534
  %550 = icmp ult i8* %531, %91
  %551 = and i1 %549, %550
  %552 = or i1 %548, %551
  %553 = icmp ult i8* %89, %541
  %554 = icmp ult i8* %538, %91
  %555 = and i1 %553, %554
  %556 = or i1 %552, %555
  br i1 %556, label %481, label %557

; <label>:557:                                    ; preds = %513
  %558 = insertelement <8 x i32> undef, i32 %278, i32 0
  %559 = shufflevector <8 x i32> %558, <8 x i32> undef, <8 x i32> zeroinitializer
  %560 = insertelement <8 x i32> undef, i32 %285, i32 0
  %561 = shufflevector <8 x i32> %560, <8 x i32> undef, <8 x i32> zeroinitializer
  %562 = insertelement <8 x i32> undef, i32 %292, i32 0
  %563 = shufflevector <8 x i32> %562, <8 x i32> undef, <8 x i32> zeroinitializer
  %564 = insertelement <8 x i32> undef, i32 %299, i32 0
  %565 = shufflevector <8 x i32> %564, <8 x i32> undef, <8 x i32> zeroinitializer
  br i1 %150, label %566, label %589

; <label>:566:                                    ; preds = %557
  br label %567

; <label>:567:                                    ; preds = %566
  %568 = getelementptr inbounds i32, i32* %303, i64 %61
  %569 = bitcast i32* %568 to <8 x i32>*
  %570 = load <8 x i32>, <8 x i32>* %569, align 4, !tbaa !33, !alias.scope !381
  %571 = mul nsw <8 x i32> %570, %559
  %572 = load <8 x i32>, <8 x i32>* %152, align 4, !tbaa !33, !alias.scope !384, !noalias !386
  %573 = add nsw <8 x i32> %572, %571
  store <8 x i32> %573, <8 x i32>* %153, align 4, !tbaa !33, !alias.scope !384, !noalias !386
  %574 = getelementptr inbounds i32, i32* %305, i64 %61
  %575 = bitcast i32* %574 to <8 x i32>*
  %576 = load <8 x i32>, <8 x i32>* %575, align 4, !tbaa !33, !alias.scope !390
  %577 = mul nsw <8 x i32> %576, %561
  %578 = add nsw <8 x i32> %577, %573
  store <8 x i32> %578, <8 x i32>* %154, align 4, !tbaa !33, !alias.scope !384, !noalias !386
  %579 = getelementptr inbounds i32, i32* %307, i64 %61
  %580 = bitcast i32* %579 to <8 x i32>*
  %581 = load <8 x i32>, <8 x i32>* %580, align 4, !tbaa !33, !alias.scope !391
  %582 = mul nsw <8 x i32> %581, %563
  %583 = add nsw <8 x i32> %582, %578
  store <8 x i32> %583, <8 x i32>* %155, align 4, !tbaa !33, !alias.scope !384, !noalias !386
  %584 = getelementptr inbounds i32, i32* %309, i64 %61
  %585 = bitcast i32* %584 to <8 x i32>*
  %586 = load <8 x i32>, <8 x i32>* %585, align 4, !tbaa !33, !alias.scope !392
  %587 = mul nsw <8 x i32> %586, %565
  %588 = add nsw <8 x i32> %587, %583
  store <8 x i32> %588, <8 x i32>* %156, align 4, !tbaa !33, !alias.scope !384, !noalias !386
  br label %589

; <label>:589:                                    ; preds = %557, %567
  %590 = phi i64 [ 8, %567 ], [ 0, %557 ]
  br label %591

; <label>:591:                                    ; preds = %589
  br i1 %157, label %655, label %592

; <label>:592:                                    ; preds = %591
  br label %593

; <label>:593:                                    ; preds = %593, %592
  %594 = phi i64 [ %590, %592 ], [ %652, %593 ]
  %595 = add i64 %61, %594
  %596 = getelementptr inbounds i32, i32* %303, i64 %595
  %597 = bitcast i32* %596 to <8 x i32>*
  %598 = load <8 x i32>, <8 x i32>* %597, align 4, !tbaa !33, !alias.scope !381
  %599 = getelementptr inbounds i32, i32* %4, i64 %595
  %600 = mul nsw <8 x i32> %598, %559
  %601 = bitcast i32* %599 to <8 x i32>*
  %602 = load <8 x i32>, <8 x i32>* %601, align 4, !tbaa !33, !alias.scope !384, !noalias !386
  %603 = add nsw <8 x i32> %602, %600
  %604 = bitcast i32* %599 to <8 x i32>*
  store <8 x i32> %603, <8 x i32>* %604, align 4, !tbaa !33, !alias.scope !384, !noalias !386
  %605 = getelementptr inbounds i32, i32* %305, i64 %595
  %606 = bitcast i32* %605 to <8 x i32>*
  %607 = load <8 x i32>, <8 x i32>* %606, align 4, !tbaa !33, !alias.scope !390
  %608 = mul nsw <8 x i32> %607, %561
  %609 = add nsw <8 x i32> %608, %603
  %610 = bitcast i32* %599 to <8 x i32>*
  store <8 x i32> %609, <8 x i32>* %610, align 4, !tbaa !33, !alias.scope !384, !noalias !386
  %611 = getelementptr inbounds i32, i32* %307, i64 %595
  %612 = bitcast i32* %611 to <8 x i32>*
  %613 = load <8 x i32>, <8 x i32>* %612, align 4, !tbaa !33, !alias.scope !391
  %614 = mul nsw <8 x i32> %613, %563
  %615 = add nsw <8 x i32> %614, %609
  %616 = bitcast i32* %599 to <8 x i32>*
  store <8 x i32> %615, <8 x i32>* %616, align 4, !tbaa !33, !alias.scope !384, !noalias !386
  %617 = getelementptr inbounds i32, i32* %309, i64 %595
  %618 = bitcast i32* %617 to <8 x i32>*
  %619 = load <8 x i32>, <8 x i32>* %618, align 4, !tbaa !33, !alias.scope !392
  %620 = mul nsw <8 x i32> %619, %565
  %621 = add nsw <8 x i32> %620, %615
  %622 = bitcast i32* %599 to <8 x i32>*
  store <8 x i32> %621, <8 x i32>* %622, align 4, !tbaa !33, !alias.scope !384, !noalias !386
  %623 = add i64 %594, 8
  %624 = add i64 %61, %623
  %625 = getelementptr inbounds i32, i32* %303, i64 %624
  %626 = bitcast i32* %625 to <8 x i32>*
  %627 = load <8 x i32>, <8 x i32>* %626, align 4, !tbaa !33, !alias.scope !381
  %628 = getelementptr inbounds i32, i32* %4, i64 %624
  %629 = mul nsw <8 x i32> %627, %559
  %630 = bitcast i32* %628 to <8 x i32>*
  %631 = load <8 x i32>, <8 x i32>* %630, align 4, !tbaa !33, !alias.scope !384, !noalias !386
  %632 = add nsw <8 x i32> %631, %629
  %633 = bitcast i32* %628 to <8 x i32>*
  store <8 x i32> %632, <8 x i32>* %633, align 4, !tbaa !33, !alias.scope !384, !noalias !386
  %634 = getelementptr inbounds i32, i32* %305, i64 %624
  %635 = bitcast i32* %634 to <8 x i32>*
  %636 = load <8 x i32>, <8 x i32>* %635, align 4, !tbaa !33, !alias.scope !390
  %637 = mul nsw <8 x i32> %636, %561
  %638 = add nsw <8 x i32> %637, %632
  %639 = bitcast i32* %628 to <8 x i32>*
  store <8 x i32> %638, <8 x i32>* %639, align 4, !tbaa !33, !alias.scope !384, !noalias !386
  %640 = getelementptr inbounds i32, i32* %307, i64 %624
  %641 = bitcast i32* %640 to <8 x i32>*
  %642 = load <8 x i32>, <8 x i32>* %641, align 4, !tbaa !33, !alias.scope !391
  %643 = mul nsw <8 x i32> %642, %563
  %644 = add nsw <8 x i32> %643, %638
  %645 = bitcast i32* %628 to <8 x i32>*
  store <8 x i32> %644, <8 x i32>* %645, align 4, !tbaa !33, !alias.scope !384, !noalias !386
  %646 = getelementptr inbounds i32, i32* %309, i64 %624
  %647 = bitcast i32* %646 to <8 x i32>*
  %648 = load <8 x i32>, <8 x i32>* %647, align 4, !tbaa !33, !alias.scope !392
  %649 = mul nsw <8 x i32> %648, %565
  %650 = add nsw <8 x i32> %649, %644
  %651 = bitcast i32* %628 to <8 x i32>*
  store <8 x i32> %650, <8 x i32>* %651, align 4, !tbaa !33, !alias.scope !384, !noalias !386
  %652 = add i64 %594, 16
  %653 = icmp eq i64 %652, %146
  br i1 %653, label %654, label %593, !llvm.loop !393

; <label>:654:                                    ; preds = %593
  br label %655

; <label>:655:                                    ; preds = %591, %654
  br i1 %158, label %1117, label %481

; <label>:656:                                    ; preds = %656, %341
  %657 = phi i64 [ %338, %341 ], [ %695, %656 ]
  %658 = getelementptr inbounds i32, i32* %303, i64 %657
  %659 = load i32, i32* %658, align 4, !tbaa !33
  %660 = getelementptr inbounds i32, i32* %4, i64 %657
  %661 = mul nsw i32 %659, %278
  %662 = load i32, i32* %660, align 4, !tbaa !33
  %663 = add nsw i32 %662, %661
  store i32 %663, i32* %660, align 4, !tbaa !33
  %664 = getelementptr inbounds i32, i32* %305, i64 %657
  %665 = load i32, i32* %664, align 4, !tbaa !33
  %666 = mul nsw i32 %665, %285
  %667 = add nsw i32 %666, %663
  store i32 %667, i32* %660, align 4, !tbaa !33
  %668 = getelementptr inbounds i32, i32* %307, i64 %657
  %669 = load i32, i32* %668, align 4, !tbaa !33
  %670 = mul nsw i32 %669, %292
  %671 = add nsw i32 %670, %667
  store i32 %671, i32* %660, align 4, !tbaa !33
  %672 = getelementptr inbounds i32, i32* %309, i64 %657
  %673 = load i32, i32* %672, align 4, !tbaa !33
  %674 = mul nsw i32 %673, %299
  %675 = add nsw i32 %674, %671
  store i32 %675, i32* %660, align 4, !tbaa !33
  %676 = add nuw nsw i64 %657, 1
  %677 = getelementptr inbounds i32, i32* %303, i64 %676
  %678 = load i32, i32* %677, align 4, !tbaa !33
  %679 = getelementptr inbounds i32, i32* %4, i64 %676
  %680 = mul nsw i32 %678, %278
  %681 = load i32, i32* %679, align 4, !tbaa !33
  %682 = add nsw i32 %681, %680
  store i32 %682, i32* %679, align 4, !tbaa !33
  %683 = getelementptr inbounds i32, i32* %305, i64 %676
  %684 = load i32, i32* %683, align 4, !tbaa !33
  %685 = mul nsw i32 %684, %285
  %686 = add nsw i32 %685, %682
  store i32 %686, i32* %679, align 4, !tbaa !33
  %687 = getelementptr inbounds i32, i32* %307, i64 %676
  %688 = load i32, i32* %687, align 4, !tbaa !33
  %689 = mul nsw i32 %688, %292
  %690 = add nsw i32 %689, %686
  store i32 %690, i32* %679, align 4, !tbaa !33
  %691 = getelementptr inbounds i32, i32* %309, i64 %676
  %692 = load i32, i32* %691, align 4, !tbaa !33
  %693 = mul nsw i32 %692, %299
  %694 = add nsw i32 %693, %690
  store i32 %694, i32* %679, align 4, !tbaa !33
  %695 = add nsw i64 %657, 2
  %696 = icmp eq i64 %695, %62
  br i1 %696, label %468, label %656, !llvm.loop !394

; <label>:697:                                    ; preds = %470
  switch i64 %60, label %754 [
    i64 0, label %726
    i64 1, label %698
    i64 2, label %884
  ]

; <label>:698:                                    ; preds = %697
  br i1 %140, label %722, label %699

; <label>:699:                                    ; preds = %698
  br label %700

; <label>:700:                                    ; preds = %699
  %701 = load <4 x i32>, <4 x i32>* %142, align 16, !tbaa !11
  %702 = getelementptr inbounds i32, i32* %303, i64 %62
  %703 = bitcast i32* %702 to <4 x i32>*
  %704 = load <4 x i32>, <4 x i32>* %703, align 16, !tbaa !11
  %705 = mul <4 x i32> %704, %280
  %706 = getelementptr inbounds i32, i32* %305, i64 %62
  %707 = bitcast i32* %706 to <4 x i32>*
  %708 = load <4 x i32>, <4 x i32>* %707, align 1, !tbaa !11
  %709 = mul <4 x i32> %708, %287
  %710 = getelementptr inbounds i32, i32* %307, i64 %62
  %711 = bitcast i32* %710 to <4 x i32>*
  %712 = load <4 x i32>, <4 x i32>* %711, align 16, !tbaa !11
  %713 = mul <4 x i32> %712, %294
  %714 = getelementptr inbounds i32, i32* %309, i64 %62
  %715 = bitcast i32* %714 to <4 x i32>*
  %716 = load <4 x i32>, <4 x i32>* %715, align 1, !tbaa !11
  %717 = mul <4 x i32> %716, %301
  %718 = add <4 x i32> %705, %701
  %719 = add <4 x i32> %718, %709
  %720 = add <4 x i32> %719, %713
  %721 = add <4 x i32> %720, %717
  store <4 x i32> %721, <4 x i32>* %142, align 16, !tbaa !11
  br label %722

; <label>:722:                                    ; preds = %698, %700
  %723 = phi i64 [ %143, %700 ], [ %62, %698 ]
  br label %724

; <label>:724:                                    ; preds = %722
  br i1 %144, label %476, label %725

; <label>:725:                                    ; preds = %724
  br label %833

; <label>:726:                                    ; preds = %697
  br i1 %134, label %750, label %727

; <label>:727:                                    ; preds = %726
  br label %728

; <label>:728:                                    ; preds = %727
  %729 = load <4 x i32>, <4 x i32>* %136, align 16, !tbaa !11
  %730 = getelementptr inbounds i32, i32* %303, i64 %62
  %731 = bitcast i32* %730 to <4 x i32>*
  %732 = load <4 x i32>, <4 x i32>* %731, align 16, !tbaa !11
  %733 = mul <4 x i32> %732, %280
  %734 = getelementptr inbounds i32, i32* %305, i64 %62
  %735 = bitcast i32* %734 to <4 x i32>*
  %736 = load <4 x i32>, <4 x i32>* %735, align 16, !tbaa !11
  %737 = mul <4 x i32> %736, %287
  %738 = getelementptr inbounds i32, i32* %307, i64 %62
  %739 = bitcast i32* %738 to <4 x i32>*
  %740 = load <4 x i32>, <4 x i32>* %739, align 16, !tbaa !11
  %741 = mul <4 x i32> %740, %294
  %742 = getelementptr inbounds i32, i32* %309, i64 %62
  %743 = bitcast i32* %742 to <4 x i32>*
  %744 = load <4 x i32>, <4 x i32>* %743, align 16, !tbaa !11
  %745 = mul <4 x i32> %744, %301
  %746 = add <4 x i32> %733, %729
  %747 = add <4 x i32> %746, %737
  %748 = add <4 x i32> %747, %741
  %749 = add <4 x i32> %748, %745
  store <4 x i32> %749, <4 x i32>* %136, align 16, !tbaa !11
  br label %750

; <label>:750:                                    ; preds = %726, %728
  %751 = phi i64 [ %137, %728 ], [ %62, %726 ]
  br label %752

; <label>:752:                                    ; preds = %750
  br i1 %138, label %474, label %753

; <label>:753:                                    ; preds = %752
  br label %782

; <label>:754:                                    ; preds = %697
  br i1 %128, label %778, label %755

; <label>:755:                                    ; preds = %754
  br label %756

; <label>:756:                                    ; preds = %755
  %757 = load <4 x i32>, <4 x i32>* %130, align 16, !tbaa !11
  %758 = getelementptr inbounds i32, i32* %303, i64 %62
  %759 = bitcast i32* %758 to <4 x i32>*
  %760 = load <4 x i32>, <4 x i32>* %759, align 1, !tbaa !11
  %761 = mul <4 x i32> %760, %280
  %762 = getelementptr inbounds i32, i32* %305, i64 %62
  %763 = bitcast i32* %762 to <4 x i32>*
  %764 = load <4 x i32>, <4 x i32>* %763, align 1, !tbaa !11
  %765 = mul <4 x i32> %764, %287
  %766 = getelementptr inbounds i32, i32* %307, i64 %62
  %767 = bitcast i32* %766 to <4 x i32>*
  %768 = load <4 x i32>, <4 x i32>* %767, align 1, !tbaa !11
  %769 = mul <4 x i32> %768, %294
  %770 = getelementptr inbounds i32, i32* %309, i64 %62
  %771 = bitcast i32* %770 to <4 x i32>*
  %772 = load <4 x i32>, <4 x i32>* %771, align 1, !tbaa !11
  %773 = mul <4 x i32> %772, %301
  %774 = add <4 x i32> %761, %757
  %775 = add <4 x i32> %774, %765
  %776 = add <4 x i32> %775, %769
  %777 = add <4 x i32> %776, %773
  store <4 x i32> %777, <4 x i32>* %130, align 16, !tbaa !11
  br label %778

; <label>:778:                                    ; preds = %754, %756
  %779 = phi i64 [ %131, %756 ], [ %62, %754 ]
  br label %780

; <label>:780:                                    ; preds = %778
  br i1 %132, label %472, label %781

; <label>:781:                                    ; preds = %780
  br label %1064

; <label>:782:                                    ; preds = %782, %753
  %783 = phi i64 [ %751, %753 ], [ %831, %782 ]
  %784 = getelementptr inbounds i32, i32* %4, i64 %783
  %785 = bitcast i32* %784 to <4 x i32>*
  %786 = load <4 x i32>, <4 x i32>* %785, align 16, !tbaa !11
  %787 = getelementptr inbounds i32, i32* %303, i64 %783
  %788 = bitcast i32* %787 to <4 x i32>*
  %789 = load <4 x i32>, <4 x i32>* %788, align 16, !tbaa !11
  %790 = mul <4 x i32> %789, %280
  %791 = getelementptr inbounds i32, i32* %305, i64 %783
  %792 = bitcast i32* %791 to <4 x i32>*
  %793 = load <4 x i32>, <4 x i32>* %792, align 16, !tbaa !11
  %794 = mul <4 x i32> %793, %287
  %795 = getelementptr inbounds i32, i32* %307, i64 %783
  %796 = bitcast i32* %795 to <4 x i32>*
  %797 = load <4 x i32>, <4 x i32>* %796, align 16, !tbaa !11
  %798 = mul <4 x i32> %797, %294
  %799 = getelementptr inbounds i32, i32* %309, i64 %783
  %800 = bitcast i32* %799 to <4 x i32>*
  %801 = load <4 x i32>, <4 x i32>* %800, align 16, !tbaa !11
  %802 = mul <4 x i32> %801, %301
  %803 = add <4 x i32> %790, %786
  %804 = add <4 x i32> %803, %794
  %805 = add <4 x i32> %804, %798
  %806 = add <4 x i32> %805, %802
  store <4 x i32> %806, <4 x i32>* %785, align 16, !tbaa !11
  %807 = add nsw i64 %783, 4
  %808 = getelementptr inbounds i32, i32* %4, i64 %807
  %809 = bitcast i32* %808 to <4 x i32>*
  %810 = load <4 x i32>, <4 x i32>* %809, align 16, !tbaa !11
  %811 = getelementptr inbounds i32, i32* %303, i64 %807
  %812 = bitcast i32* %811 to <4 x i32>*
  %813 = load <4 x i32>, <4 x i32>* %812, align 16, !tbaa !11
  %814 = mul <4 x i32> %813, %280
  %815 = getelementptr inbounds i32, i32* %305, i64 %807
  %816 = bitcast i32* %815 to <4 x i32>*
  %817 = load <4 x i32>, <4 x i32>* %816, align 16, !tbaa !11
  %818 = mul <4 x i32> %817, %287
  %819 = getelementptr inbounds i32, i32* %307, i64 %807
  %820 = bitcast i32* %819 to <4 x i32>*
  %821 = load <4 x i32>, <4 x i32>* %820, align 16, !tbaa !11
  %822 = mul <4 x i32> %821, %294
  %823 = getelementptr inbounds i32, i32* %309, i64 %807
  %824 = bitcast i32* %823 to <4 x i32>*
  %825 = load <4 x i32>, <4 x i32>* %824, align 16, !tbaa !11
  %826 = mul <4 x i32> %825, %301
  %827 = add <4 x i32> %814, %810
  %828 = add <4 x i32> %827, %818
  %829 = add <4 x i32> %828, %822
  %830 = add <4 x i32> %829, %826
  store <4 x i32> %830, <4 x i32>* %809, align 16, !tbaa !11
  %831 = add nsw i64 %783, 8
  %832 = icmp slt i64 %831, %61
  br i1 %832, label %782, label %473

; <label>:833:                                    ; preds = %833, %725
  %834 = phi i64 [ %723, %725 ], [ %882, %833 ]
  %835 = getelementptr inbounds i32, i32* %4, i64 %834
  %836 = bitcast i32* %835 to <4 x i32>*
  %837 = load <4 x i32>, <4 x i32>* %836, align 16, !tbaa !11
  %838 = getelementptr inbounds i32, i32* %303, i64 %834
  %839 = bitcast i32* %838 to <4 x i32>*
  %840 = load <4 x i32>, <4 x i32>* %839, align 16, !tbaa !11
  %841 = mul <4 x i32> %840, %280
  %842 = getelementptr inbounds i32, i32* %305, i64 %834
  %843 = bitcast i32* %842 to <4 x i32>*
  %844 = load <4 x i32>, <4 x i32>* %843, align 1, !tbaa !11
  %845 = mul <4 x i32> %844, %287
  %846 = getelementptr inbounds i32, i32* %307, i64 %834
  %847 = bitcast i32* %846 to <4 x i32>*
  %848 = load <4 x i32>, <4 x i32>* %847, align 16, !tbaa !11
  %849 = mul <4 x i32> %848, %294
  %850 = getelementptr inbounds i32, i32* %309, i64 %834
  %851 = bitcast i32* %850 to <4 x i32>*
  %852 = load <4 x i32>, <4 x i32>* %851, align 1, !tbaa !11
  %853 = mul <4 x i32> %852, %301
  %854 = add <4 x i32> %841, %837
  %855 = add <4 x i32> %854, %845
  %856 = add <4 x i32> %855, %849
  %857 = add <4 x i32> %856, %853
  store <4 x i32> %857, <4 x i32>* %836, align 16, !tbaa !11
  %858 = add nsw i64 %834, 4
  %859 = getelementptr inbounds i32, i32* %4, i64 %858
  %860 = bitcast i32* %859 to <4 x i32>*
  %861 = load <4 x i32>, <4 x i32>* %860, align 16, !tbaa !11
  %862 = getelementptr inbounds i32, i32* %303, i64 %858
  %863 = bitcast i32* %862 to <4 x i32>*
  %864 = load <4 x i32>, <4 x i32>* %863, align 16, !tbaa !11
  %865 = mul <4 x i32> %864, %280
  %866 = getelementptr inbounds i32, i32* %305, i64 %858
  %867 = bitcast i32* %866 to <4 x i32>*
  %868 = load <4 x i32>, <4 x i32>* %867, align 1, !tbaa !11
  %869 = mul <4 x i32> %868, %287
  %870 = getelementptr inbounds i32, i32* %307, i64 %858
  %871 = bitcast i32* %870 to <4 x i32>*
  %872 = load <4 x i32>, <4 x i32>* %871, align 16, !tbaa !11
  %873 = mul <4 x i32> %872, %294
  %874 = getelementptr inbounds i32, i32* %309, i64 %858
  %875 = bitcast i32* %874 to <4 x i32>*
  %876 = load <4 x i32>, <4 x i32>* %875, align 1, !tbaa !11
  %877 = mul <4 x i32> %876, %301
  %878 = add <4 x i32> %865, %861
  %879 = add <4 x i32> %878, %869
  %880 = add <4 x i32> %879, %873
  %881 = add <4 x i32> %880, %877
  store <4 x i32> %881, <4 x i32>* %860, align 16, !tbaa !11
  %882 = add nsw i64 %834, 8
  %883 = icmp slt i64 %882, %61
  br i1 %883, label %833, label %475

; <label>:884:                                    ; preds = %697
  br i1 %80, label %885, label %896

; <label>:885:                                    ; preds = %884
  %886 = getelementptr inbounds i32, i32* %309, i64 %79
  %887 = bitcast i32* %886 to <2 x i64>*
  %888 = load <2 x i64>, <2 x i64>* %887, align 16, !tbaa !11
  %889 = getelementptr inbounds i32, i32* %307, i64 %78
  %890 = bitcast i32* %889 to <2 x i64>*
  %891 = load <2 x i64>, <2 x i64>* %890, align 16, !tbaa !11
  %892 = getelementptr inbounds i32, i32* %305, i64 %77
  %893 = bitcast i32* %892 to <2 x i64>*
  %894 = load <2 x i64>, <2 x i64>* %893, align 16, !tbaa !11
  br label %935

; <label>:895:                                    ; preds = %935
  br label %896

; <label>:896:                                    ; preds = %895, %884
  %897 = phi i64 [ %62, %884 ], [ %86, %895 ]
  %898 = icmp slt i64 %897, %61
  br i1 %898, label %899, label %479

; <label>:899:                                    ; preds = %896
  %900 = sub i64 %108, %897
  %901 = lshr i64 %900, 2
  %902 = and i64 %901, 1
  %903 = icmp eq i64 %902, 0
  br i1 %903, label %904, label %930

; <label>:904:                                    ; preds = %899
  br label %905

; <label>:905:                                    ; preds = %904
  %906 = getelementptr inbounds i32, i32* %4, i64 %897
  %907 = bitcast i32* %906 to <4 x i32>*
  %908 = load <4 x i32>, <4 x i32>* %907, align 16, !tbaa !11
  %909 = getelementptr inbounds i32, i32* %303, i64 %897
  %910 = bitcast i32* %909 to <4 x i32>*
  %911 = load <4 x i32>, <4 x i32>* %910, align 16, !tbaa !11
  %912 = mul <4 x i32> %911, %280
  %913 = getelementptr inbounds i32, i32* %305, i64 %897
  %914 = bitcast i32* %913 to <4 x i32>*
  %915 = load <4 x i32>, <4 x i32>* %914, align 1, !tbaa !11
  %916 = mul <4 x i32> %915, %287
  %917 = getelementptr inbounds i32, i32* %307, i64 %897
  %918 = bitcast i32* %917 to <4 x i32>*
  %919 = load <4 x i32>, <4 x i32>* %918, align 1, !tbaa !11
  %920 = mul <4 x i32> %919, %294
  %921 = getelementptr inbounds i32, i32* %309, i64 %897
  %922 = bitcast i32* %921 to <4 x i32>*
  %923 = load <4 x i32>, <4 x i32>* %922, align 1, !tbaa !11
  %924 = mul <4 x i32> %923, %301
  %925 = add <4 x i32> %912, %908
  %926 = add <4 x i32> %925, %916
  %927 = add <4 x i32> %926, %920
  %928 = add <4 x i32> %927, %924
  store <4 x i32> %928, <4 x i32>* %907, align 16, !tbaa !11
  %929 = add nsw i64 %897, 4
  br label %930

; <label>:930:                                    ; preds = %899, %905
  %931 = phi i64 [ %929, %905 ], [ %897, %899 ]
  br label %932

; <label>:932:                                    ; preds = %930
  %933 = icmp eq i64 %901, 0
  br i1 %933, label %478, label %934

; <label>:934:                                    ; preds = %932
  br label %1013

; <label>:935:                                    ; preds = %885, %935
  %936 = phi i64 [ %1011, %935 ], [ %62, %885 ]
  %937 = phi <2 x i64> [ %979, %935 ], [ %894, %885 ]
  %938 = phi <2 x i64> [ %987, %935 ], [ %891, %885 ]
  %939 = phi <2 x i64> [ %999, %935 ], [ %888, %885 ]
  %940 = add nsw i64 %936, 3
  %941 = getelementptr inbounds i32, i32* %305, i64 %940
  %942 = bitcast i32* %941 to <16 x i8>*
  %943 = load <16 x i8>, <16 x i8>* %942, align 16, !tbaa !11
  %944 = bitcast <2 x i64> %937 to <16 x i8>
  %945 = shufflevector <16 x i8> %944, <16 x i8> %943, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %946 = add nsw i64 %936, 2
  %947 = getelementptr inbounds i32, i32* %307, i64 %946
  %948 = bitcast i32* %947 to <16 x i8>*
  %949 = load <16 x i8>, <16 x i8>* %948, align 16, !tbaa !11
  %950 = bitcast <2 x i64> %938 to <16 x i8>
  %951 = shufflevector <16 x i8> %950, <16 x i8> %949, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %952 = add nsw i64 %936, 1
  %953 = getelementptr inbounds i32, i32* %309, i64 %952
  %954 = bitcast i32* %953 to <16 x i8>*
  %955 = load <16 x i8>, <16 x i8>* %954, align 16, !tbaa !11
  %956 = bitcast <2 x i64> %939 to <16 x i8>
  %957 = shufflevector <16 x i8> %956, <16 x i8> %955, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %958 = getelementptr inbounds i32, i32* %303, i64 %936
  %959 = bitcast i32* %958 to <4 x i32>*
  %960 = load <4 x i32>, <4 x i32>* %959, align 16, !tbaa !11
  %961 = add nsw i64 %936, 4
  %962 = getelementptr inbounds i32, i32* %303, i64 %961
  %963 = bitcast i32* %962 to <4 x i32>*
  %964 = load <4 x i32>, <4 x i32>* %963, align 16, !tbaa !11
  %965 = getelementptr inbounds i32, i32* %4, i64 %936
  %966 = bitcast i32* %965 to <4 x i32>*
  %967 = load <4 x i32>, <4 x i32>* %966, align 16, !tbaa !11
  %968 = mul <4 x i32> %960, %280
  %969 = getelementptr inbounds i32, i32* %4, i64 %961
  %970 = bitcast i32* %969 to <4 x i32>*
  %971 = load <4 x i32>, <4 x i32>* %970, align 16, !tbaa !11
  %972 = mul <4 x i32> %964, %280
  %973 = add <4 x i32> %971, %972
  %974 = bitcast <16 x i8> %945 to <4 x i32>
  %975 = mul <4 x i32> %974, %287
  %976 = add nsw i64 %936, 7
  %977 = getelementptr inbounds i32, i32* %305, i64 %976
  %978 = bitcast i32* %977 to <2 x i64>*
  %979 = load <2 x i64>, <2 x i64>* %978, align 16, !tbaa !11
  %980 = bitcast <2 x i64> %979 to <16 x i8>
  %981 = shufflevector <16 x i8> %943, <16 x i8> %980, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %982 = bitcast <16 x i8> %951 to <4 x i32>
  %983 = mul <4 x i32> %982, %294
  %984 = add nsw i64 %936, 6
  %985 = getelementptr inbounds i32, i32* %307, i64 %984
  %986 = bitcast i32* %985 to <2 x i64>*
  %987 = load <2 x i64>, <2 x i64>* %986, align 16, !tbaa !11
  %988 = bitcast <2 x i64> %987 to <16 x i8>
  %989 = shufflevector <16 x i8> %949, <16 x i8> %988, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %990 = bitcast <16 x i8> %957 to <4 x i32>
  %991 = mul <4 x i32> %990, %301
  %992 = add <4 x i32> %968, %975
  %993 = add <4 x i32> %992, %983
  %994 = add <4 x i32> %993, %967
  %995 = add <4 x i32> %994, %991
  store <4 x i32> %995, <4 x i32>* %966, align 16, !tbaa !11
  %996 = add nsw i64 %936, 5
  %997 = getelementptr inbounds i32, i32* %309, i64 %996
  %998 = bitcast i32* %997 to <2 x i64>*
  %999 = load <2 x i64>, <2 x i64>* %998, align 16, !tbaa !11
  %1000 = bitcast <2 x i64> %999 to <16 x i8>
  %1001 = shufflevector <16 x i8> %955, <16 x i8> %1000, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %1002 = bitcast <16 x i8> %981 to <4 x i32>
  %1003 = mul <4 x i32> %1002, %287
  %1004 = add <4 x i32> %973, %1003
  %1005 = bitcast <16 x i8> %989 to <4 x i32>
  %1006 = mul <4 x i32> %1005, %294
  %1007 = add <4 x i32> %1004, %1006
  %1008 = bitcast <16 x i8> %1001 to <4 x i32>
  %1009 = mul <4 x i32> %1008, %301
  %1010 = add <4 x i32> %1007, %1009
  store <4 x i32> %1010, <4 x i32>* %970, align 16, !tbaa !11
  %1011 = add nsw i64 %936, 8
  %1012 = icmp slt i64 %1011, %25
  br i1 %1012, label %935, label %895

; <label>:1013:                                   ; preds = %1013, %934
  %1014 = phi i64 [ %931, %934 ], [ %1062, %1013 ]
  %1015 = getelementptr inbounds i32, i32* %4, i64 %1014
  %1016 = bitcast i32* %1015 to <4 x i32>*
  %1017 = load <4 x i32>, <4 x i32>* %1016, align 16, !tbaa !11
  %1018 = getelementptr inbounds i32, i32* %303, i64 %1014
  %1019 = bitcast i32* %1018 to <4 x i32>*
  %1020 = load <4 x i32>, <4 x i32>* %1019, align 16, !tbaa !11
  %1021 = mul <4 x i32> %1020, %280
  %1022 = getelementptr inbounds i32, i32* %305, i64 %1014
  %1023 = bitcast i32* %1022 to <4 x i32>*
  %1024 = load <4 x i32>, <4 x i32>* %1023, align 1, !tbaa !11
  %1025 = mul <4 x i32> %1024, %287
  %1026 = getelementptr inbounds i32, i32* %307, i64 %1014
  %1027 = bitcast i32* %1026 to <4 x i32>*
  %1028 = load <4 x i32>, <4 x i32>* %1027, align 1, !tbaa !11
  %1029 = mul <4 x i32> %1028, %294
  %1030 = getelementptr inbounds i32, i32* %309, i64 %1014
  %1031 = bitcast i32* %1030 to <4 x i32>*
  %1032 = load <4 x i32>, <4 x i32>* %1031, align 1, !tbaa !11
  %1033 = mul <4 x i32> %1032, %301
  %1034 = add <4 x i32> %1021, %1017
  %1035 = add <4 x i32> %1034, %1025
  %1036 = add <4 x i32> %1035, %1029
  %1037 = add <4 x i32> %1036, %1033
  store <4 x i32> %1037, <4 x i32>* %1016, align 16, !tbaa !11
  %1038 = add nsw i64 %1014, 4
  %1039 = getelementptr inbounds i32, i32* %4, i64 %1038
  %1040 = bitcast i32* %1039 to <4 x i32>*
  %1041 = load <4 x i32>, <4 x i32>* %1040, align 16, !tbaa !11
  %1042 = getelementptr inbounds i32, i32* %303, i64 %1038
  %1043 = bitcast i32* %1042 to <4 x i32>*
  %1044 = load <4 x i32>, <4 x i32>* %1043, align 16, !tbaa !11
  %1045 = mul <4 x i32> %1044, %280
  %1046 = getelementptr inbounds i32, i32* %305, i64 %1038
  %1047 = bitcast i32* %1046 to <4 x i32>*
  %1048 = load <4 x i32>, <4 x i32>* %1047, align 1, !tbaa !11
  %1049 = mul <4 x i32> %1048, %287
  %1050 = getelementptr inbounds i32, i32* %307, i64 %1038
  %1051 = bitcast i32* %1050 to <4 x i32>*
  %1052 = load <4 x i32>, <4 x i32>* %1051, align 1, !tbaa !11
  %1053 = mul <4 x i32> %1052, %294
  %1054 = getelementptr inbounds i32, i32* %309, i64 %1038
  %1055 = bitcast i32* %1054 to <4 x i32>*
  %1056 = load <4 x i32>, <4 x i32>* %1055, align 1, !tbaa !11
  %1057 = mul <4 x i32> %1056, %301
  %1058 = add <4 x i32> %1045, %1041
  %1059 = add <4 x i32> %1058, %1049
  %1060 = add <4 x i32> %1059, %1053
  %1061 = add <4 x i32> %1060, %1057
  store <4 x i32> %1061, <4 x i32>* %1040, align 16, !tbaa !11
  %1062 = add nsw i64 %1014, 8
  %1063 = icmp slt i64 %1062, %61
  br i1 %1063, label %1013, label %477

; <label>:1064:                                   ; preds = %1064, %781
  %1065 = phi i64 [ %779, %781 ], [ %1113, %1064 ]
  %1066 = getelementptr inbounds i32, i32* %4, i64 %1065
  %1067 = bitcast i32* %1066 to <4 x i32>*
  %1068 = load <4 x i32>, <4 x i32>* %1067, align 16, !tbaa !11
  %1069 = getelementptr inbounds i32, i32* %303, i64 %1065
  %1070 = bitcast i32* %1069 to <4 x i32>*
  %1071 = load <4 x i32>, <4 x i32>* %1070, align 1, !tbaa !11
  %1072 = mul <4 x i32> %1071, %280
  %1073 = getelementptr inbounds i32, i32* %305, i64 %1065
  %1074 = bitcast i32* %1073 to <4 x i32>*
  %1075 = load <4 x i32>, <4 x i32>* %1074, align 1, !tbaa !11
  %1076 = mul <4 x i32> %1075, %287
  %1077 = getelementptr inbounds i32, i32* %307, i64 %1065
  %1078 = bitcast i32* %1077 to <4 x i32>*
  %1079 = load <4 x i32>, <4 x i32>* %1078, align 1, !tbaa !11
  %1080 = mul <4 x i32> %1079, %294
  %1081 = getelementptr inbounds i32, i32* %309, i64 %1065
  %1082 = bitcast i32* %1081 to <4 x i32>*
  %1083 = load <4 x i32>, <4 x i32>* %1082, align 1, !tbaa !11
  %1084 = mul <4 x i32> %1083, %301
  %1085 = add <4 x i32> %1072, %1068
  %1086 = add <4 x i32> %1085, %1076
  %1087 = add <4 x i32> %1086, %1080
  %1088 = add <4 x i32> %1087, %1084
  store <4 x i32> %1088, <4 x i32>* %1067, align 16, !tbaa !11
  %1089 = add nsw i64 %1065, 4
  %1090 = getelementptr inbounds i32, i32* %4, i64 %1089
  %1091 = bitcast i32* %1090 to <4 x i32>*
  %1092 = load <4 x i32>, <4 x i32>* %1091, align 16, !tbaa !11
  %1093 = getelementptr inbounds i32, i32* %303, i64 %1089
  %1094 = bitcast i32* %1093 to <4 x i32>*
  %1095 = load <4 x i32>, <4 x i32>* %1094, align 1, !tbaa !11
  %1096 = mul <4 x i32> %1095, %280
  %1097 = getelementptr inbounds i32, i32* %305, i64 %1089
  %1098 = bitcast i32* %1097 to <4 x i32>*
  %1099 = load <4 x i32>, <4 x i32>* %1098, align 1, !tbaa !11
  %1100 = mul <4 x i32> %1099, %287
  %1101 = getelementptr inbounds i32, i32* %307, i64 %1089
  %1102 = bitcast i32* %1101 to <4 x i32>*
  %1103 = load <4 x i32>, <4 x i32>* %1102, align 1, !tbaa !11
  %1104 = mul <4 x i32> %1103, %294
  %1105 = getelementptr inbounds i32, i32* %309, i64 %1089
  %1106 = bitcast i32* %1105 to <4 x i32>*
  %1107 = load <4 x i32>, <4 x i32>* %1106, align 1, !tbaa !11
  %1108 = mul <4 x i32> %1107, %301
  %1109 = add <4 x i32> %1096, %1092
  %1110 = add <4 x i32> %1109, %1100
  %1111 = add <4 x i32> %1110, %1104
  %1112 = add <4 x i32> %1111, %1108
  store <4 x i32> %1112, <4 x i32>* %1091, align 16, !tbaa !11
  %1113 = add nsw i64 %1065, 8
  %1114 = icmp slt i64 %1113, %61
  br i1 %1114, label %1064, label %471

; <label>:1115:                                   ; preds = %1124
  br label %1116

; <label>:1116:                                   ; preds = %509, %1115
  br label %1117

; <label>:1117:                                   ; preds = %1116, %655, %479
  %1118 = add nsw i64 %262, 4
  %1119 = icmp slt i64 %1118, %69
  br i1 %1119, label %1120, label %159

; <label>:1120:                                   ; preds = %1117
  %1121 = load i32*, i32** %73, align 8, !tbaa !362
  %1122 = load i64, i64* %9, align 8, !tbaa !364
  %1123 = add i64 %259, 1
  br label %258

; <label>:1124:                                   ; preds = %1124, %511
  %1125 = phi i64 [ %508, %511 ], [ %1163, %1124 ]
  %1126 = getelementptr inbounds i32, i32* %303, i64 %1125
  %1127 = load i32, i32* %1126, align 4, !tbaa !33
  %1128 = getelementptr inbounds i32, i32* %4, i64 %1125
  %1129 = mul nsw i32 %1127, %278
  %1130 = load i32, i32* %1128, align 4, !tbaa !33
  %1131 = add nsw i32 %1130, %1129
  store i32 %1131, i32* %1128, align 4, !tbaa !33
  %1132 = getelementptr inbounds i32, i32* %305, i64 %1125
  %1133 = load i32, i32* %1132, align 4, !tbaa !33
  %1134 = mul nsw i32 %1133, %285
  %1135 = add nsw i32 %1134, %1131
  store i32 %1135, i32* %1128, align 4, !tbaa !33
  %1136 = getelementptr inbounds i32, i32* %307, i64 %1125
  %1137 = load i32, i32* %1136, align 4, !tbaa !33
  %1138 = mul nsw i32 %1137, %292
  %1139 = add nsw i32 %1138, %1135
  store i32 %1139, i32* %1128, align 4, !tbaa !33
  %1140 = getelementptr inbounds i32, i32* %309, i64 %1125
  %1141 = load i32, i32* %1140, align 4, !tbaa !33
  %1142 = mul nsw i32 %1141, %299
  %1143 = add nsw i32 %1142, %1139
  store i32 %1143, i32* %1128, align 4, !tbaa !33
  %1144 = add nsw i64 %1125, 1
  %1145 = getelementptr inbounds i32, i32* %303, i64 %1144
  %1146 = load i32, i32* %1145, align 4, !tbaa !33
  %1147 = getelementptr inbounds i32, i32* %4, i64 %1144
  %1148 = mul nsw i32 %1146, %278
  %1149 = load i32, i32* %1147, align 4, !tbaa !33
  %1150 = add nsw i32 %1149, %1148
  store i32 %1150, i32* %1147, align 4, !tbaa !33
  %1151 = getelementptr inbounds i32, i32* %305, i64 %1144
  %1152 = load i32, i32* %1151, align 4, !tbaa !33
  %1153 = mul nsw i32 %1152, %285
  %1154 = add nsw i32 %1153, %1150
  store i32 %1154, i32* %1147, align 4, !tbaa !33
  %1155 = getelementptr inbounds i32, i32* %307, i64 %1144
  %1156 = load i32, i32* %1155, align 4, !tbaa !33
  %1157 = mul nsw i32 %1156, %292
  %1158 = add nsw i32 %1157, %1154
  store i32 %1158, i32* %1147, align 4, !tbaa !33
  %1159 = getelementptr inbounds i32, i32* %309, i64 %1144
  %1160 = load i32, i32* %1159, align 4, !tbaa !33
  %1161 = mul nsw i32 %1160, %299
  %1162 = add nsw i32 %1161, %1158
  store i32 %1162, i32* %1147, align 4, !tbaa !33
  %1163 = add nsw i64 %1125, 2
  %1164 = icmp eq i64 %1163, %0
  br i1 %1164, label %1115, label %1124, !llvm.loop !395

; <label>:1165:                                   ; preds = %160, %1818
  %1166 = phi i64 [ 0, %1818 ], [ %59, %160 ]
  %1167 = phi i64 [ %1166, %1818 ], [ %1, %160 ]
  %1168 = phi i64 [ 0, %1818 ], [ %69, %160 ]
  %1169 = icmp slt i64 %1168, %1167
  br i1 %1169, label %1170, label %1818

; <label>:1170:                                   ; preds = %1165
  br i1 %161, label %1172, label %1171

; <label>:1171:                                   ; preds = %1170
  br label %1820

; <label>:1172:                                   ; preds = %1170
  %1173 = shl i64 %1168, 2
  br label %1174

; <label>:1174:                                   ; preds = %1172, %1413
  %1175 = phi i64 [ 0, %1172 ], [ %1416, %1413 ]
  %1176 = phi i64 [ %1168, %1172 ], [ %1414, %1413 ]
  %1177 = shl i64 %1175, 2
  %1178 = add i64 %1173, %1177
  %1179 = shl i64 %1175, 2
  %1180 = add i64 %1173, %1179
  %1181 = load i32*, i32** %71, align 8, !tbaa !365
  %1182 = load i64, i64* %72, align 8, !tbaa !367
  %1183 = mul nsw i64 %1182, %1176
  %1184 = getelementptr inbounds i32, i32* %1181, i64 %1183
  %1185 = load i32, i32* %1184, align 4, !tbaa !33
  %1186 = mul nsw i32 %1185, %6
  %1187 = insertelement <4 x i32> undef, i32 %1186, i32 0
  %1188 = load i32*, i32** %73, align 8, !tbaa !362
  %1189 = load i64, i64* %9, align 8, !tbaa !364
  %1190 = mul nsw i64 %1189, %1176
  %1191 = getelementptr inbounds i32, i32* %1188, i64 %1190
  br i1 %188, label %1192, label %1216

; <label>:1192:                                   ; preds = %1335, %1217, %1216, %1174
  %1193 = phi i64 [ 0, %1217 ], [ 0, %1216 ], [ 0, %1174 ], [ %215, %1335 ]
  %1194 = sub i64 %62, %1193
  %1195 = sub i64 %185, %1193
  %1196 = and i64 %1194, 7
  %1197 = icmp eq i64 %1196, 0
  br i1 %1197, label %1212, label %1198

; <label>:1198:                                   ; preds = %1192
  br label %1199

; <label>:1199:                                   ; preds = %1199, %1198
  %1200 = phi i64 [ %1208, %1199 ], [ %1193, %1198 ]
  %1201 = phi i64 [ %1209, %1199 ], [ %1196, %1198 ]
  %1202 = getelementptr inbounds i32, i32* %1191, i64 %1200
  %1203 = load i32, i32* %1202, align 4, !tbaa !33
  %1204 = mul nsw i32 %1203, %1186
  %1205 = getelementptr inbounds i32, i32* %4, i64 %1200
  %1206 = load i32, i32* %1205, align 4, !tbaa !33
  %1207 = add nsw i32 %1206, %1204
  store i32 %1207, i32* %1205, align 4, !tbaa !33
  %1208 = add nuw nsw i64 %1200, 1
  %1209 = add i64 %1201, -1
  %1210 = icmp eq i64 %1209, 0
  br i1 %1210, label %1211, label %1199, !llvm.loop !396

; <label>:1211:                                   ; preds = %1199
  br label %1212

; <label>:1212:                                   ; preds = %1192, %1211
  %1213 = phi i64 [ %1193, %1192 ], [ %1208, %1211 ]
  %1214 = icmp ult i64 %1195, 7
  br i1 %1214, label %1809, label %1215

; <label>:1215:                                   ; preds = %1212
  br label %1551

; <label>:1216:                                   ; preds = %1174
  br i1 %216, label %1192, label %1217

; <label>:1217:                                   ; preds = %1216
  %1218 = getelementptr i32, i32* %1188, i64 %62
  %1219 = bitcast i32* %1218 to i8*
  %1220 = mul i64 %1189, %1178
  %1221 = getelementptr i8, i8* %1219, i64 %1220
  %1222 = icmp ult i8* %8, %1221
  %1223 = icmp ult i32* %1191, %169
  %1224 = and i1 %1222, %1223
  br i1 %1224, label %1192, label %1225

; <label>:1225:                                   ; preds = %1217
  %1226 = insertelement <8 x i32> undef, i32 %1186, i32 0
  %1227 = shufflevector <8 x i32> %1226, <8 x i32> undef, <8 x i32> zeroinitializer
  br i1 %218, label %1228, label %1253

; <label>:1228:                                   ; preds = %1225
  br label %1229

; <label>:1229:                                   ; preds = %1228
  %1230 = bitcast i32* %1191 to <8 x i32>*
  %1231 = load <8 x i32>, <8 x i32>* %1230, align 4, !tbaa !33, !alias.scope !397
  %1232 = getelementptr i32, i32* %1191, i64 8
  %1233 = bitcast i32* %1232 to <8 x i32>*
  %1234 = load <8 x i32>, <8 x i32>* %1233, align 4, !tbaa !33, !alias.scope !397
  %1235 = getelementptr i32, i32* %1191, i64 16
  %1236 = bitcast i32* %1235 to <8 x i32>*
  %1237 = load <8 x i32>, <8 x i32>* %1236, align 4, !tbaa !33, !alias.scope !397
  %1238 = getelementptr i32, i32* %1191, i64 24
  %1239 = bitcast i32* %1238 to <8 x i32>*
  %1240 = load <8 x i32>, <8 x i32>* %1239, align 4, !tbaa !33, !alias.scope !397
  %1241 = mul nsw <8 x i32> %1231, %1227
  %1242 = mul nsw <8 x i32> %1234, %1227
  %1243 = mul nsw <8 x i32> %1237, %1227
  %1244 = mul nsw <8 x i32> %1240, %1227
  %1245 = load <8 x i32>, <8 x i32>* %219, align 4, !tbaa !33, !alias.scope !400, !noalias !397
  %1246 = load <8 x i32>, <8 x i32>* %221, align 4, !tbaa !33, !alias.scope !400, !noalias !397
  %1247 = load <8 x i32>, <8 x i32>* %223, align 4, !tbaa !33, !alias.scope !400, !noalias !397
  %1248 = load <8 x i32>, <8 x i32>* %225, align 4, !tbaa !33, !alias.scope !400, !noalias !397
  %1249 = add nsw <8 x i32> %1245, %1241
  %1250 = add nsw <8 x i32> %1246, %1242
  %1251 = add nsw <8 x i32> %1247, %1243
  %1252 = add nsw <8 x i32> %1248, %1244
  store <8 x i32> %1249, <8 x i32>* %226, align 4, !tbaa !33, !alias.scope !400, !noalias !397
  store <8 x i32> %1250, <8 x i32>* %227, align 4, !tbaa !33, !alias.scope !400, !noalias !397
  store <8 x i32> %1251, <8 x i32>* %228, align 4, !tbaa !33, !alias.scope !400, !noalias !397
  store <8 x i32> %1252, <8 x i32>* %229, align 4, !tbaa !33, !alias.scope !400, !noalias !397
  br label %1253

; <label>:1253:                                   ; preds = %1225, %1229
  %1254 = phi i64 [ 32, %1229 ], [ 0, %1225 ]
  br label %1255

; <label>:1255:                                   ; preds = %1253
  br i1 %230, label %1335, label %1256

; <label>:1256:                                   ; preds = %1255
  br label %1257

; <label>:1257:                                   ; preds = %1257, %1256
  %1258 = phi i64 [ %1254, %1256 ], [ %1332, %1257 ]
  %1259 = getelementptr inbounds i32, i32* %1191, i64 %1258
  %1260 = bitcast i32* %1259 to <8 x i32>*
  %1261 = load <8 x i32>, <8 x i32>* %1260, align 4, !tbaa !33, !alias.scope !397
  %1262 = getelementptr i32, i32* %1259, i64 8
  %1263 = bitcast i32* %1262 to <8 x i32>*
  %1264 = load <8 x i32>, <8 x i32>* %1263, align 4, !tbaa !33, !alias.scope !397
  %1265 = getelementptr i32, i32* %1259, i64 16
  %1266 = bitcast i32* %1265 to <8 x i32>*
  %1267 = load <8 x i32>, <8 x i32>* %1266, align 4, !tbaa !33, !alias.scope !397
  %1268 = getelementptr i32, i32* %1259, i64 24
  %1269 = bitcast i32* %1268 to <8 x i32>*
  %1270 = load <8 x i32>, <8 x i32>* %1269, align 4, !tbaa !33, !alias.scope !397
  %1271 = mul nsw <8 x i32> %1261, %1227
  %1272 = mul nsw <8 x i32> %1264, %1227
  %1273 = mul nsw <8 x i32> %1267, %1227
  %1274 = mul nsw <8 x i32> %1270, %1227
  %1275 = getelementptr inbounds i32, i32* %4, i64 %1258
  %1276 = bitcast i32* %1275 to <8 x i32>*
  %1277 = load <8 x i32>, <8 x i32>* %1276, align 4, !tbaa !33, !alias.scope !400, !noalias !397
  %1278 = getelementptr i32, i32* %1275, i64 8
  %1279 = bitcast i32* %1278 to <8 x i32>*
  %1280 = load <8 x i32>, <8 x i32>* %1279, align 4, !tbaa !33, !alias.scope !400, !noalias !397
  %1281 = getelementptr i32, i32* %1275, i64 16
  %1282 = bitcast i32* %1281 to <8 x i32>*
  %1283 = load <8 x i32>, <8 x i32>* %1282, align 4, !tbaa !33, !alias.scope !400, !noalias !397
  %1284 = getelementptr i32, i32* %1275, i64 24
  %1285 = bitcast i32* %1284 to <8 x i32>*
  %1286 = load <8 x i32>, <8 x i32>* %1285, align 4, !tbaa !33, !alias.scope !400, !noalias !397
  %1287 = add nsw <8 x i32> %1277, %1271
  %1288 = add nsw <8 x i32> %1280, %1272
  %1289 = add nsw <8 x i32> %1283, %1273
  %1290 = add nsw <8 x i32> %1286, %1274
  %1291 = bitcast i32* %1275 to <8 x i32>*
  store <8 x i32> %1287, <8 x i32>* %1291, align 4, !tbaa !33, !alias.scope !400, !noalias !397
  %1292 = bitcast i32* %1278 to <8 x i32>*
  store <8 x i32> %1288, <8 x i32>* %1292, align 4, !tbaa !33, !alias.scope !400, !noalias !397
  %1293 = bitcast i32* %1281 to <8 x i32>*
  store <8 x i32> %1289, <8 x i32>* %1293, align 4, !tbaa !33, !alias.scope !400, !noalias !397
  %1294 = bitcast i32* %1284 to <8 x i32>*
  store <8 x i32> %1290, <8 x i32>* %1294, align 4, !tbaa !33, !alias.scope !400, !noalias !397
  %1295 = add i64 %1258, 32
  %1296 = getelementptr inbounds i32, i32* %1191, i64 %1295
  %1297 = bitcast i32* %1296 to <8 x i32>*
  %1298 = load <8 x i32>, <8 x i32>* %1297, align 4, !tbaa !33, !alias.scope !397
  %1299 = getelementptr i32, i32* %1296, i64 8
  %1300 = bitcast i32* %1299 to <8 x i32>*
  %1301 = load <8 x i32>, <8 x i32>* %1300, align 4, !tbaa !33, !alias.scope !397
  %1302 = getelementptr i32, i32* %1296, i64 16
  %1303 = bitcast i32* %1302 to <8 x i32>*
  %1304 = load <8 x i32>, <8 x i32>* %1303, align 4, !tbaa !33, !alias.scope !397
  %1305 = getelementptr i32, i32* %1296, i64 24
  %1306 = bitcast i32* %1305 to <8 x i32>*
  %1307 = load <8 x i32>, <8 x i32>* %1306, align 4, !tbaa !33, !alias.scope !397
  %1308 = mul nsw <8 x i32> %1298, %1227
  %1309 = mul nsw <8 x i32> %1301, %1227
  %1310 = mul nsw <8 x i32> %1304, %1227
  %1311 = mul nsw <8 x i32> %1307, %1227
  %1312 = getelementptr inbounds i32, i32* %4, i64 %1295
  %1313 = bitcast i32* %1312 to <8 x i32>*
  %1314 = load <8 x i32>, <8 x i32>* %1313, align 4, !tbaa !33, !alias.scope !400, !noalias !397
  %1315 = getelementptr i32, i32* %1312, i64 8
  %1316 = bitcast i32* %1315 to <8 x i32>*
  %1317 = load <8 x i32>, <8 x i32>* %1316, align 4, !tbaa !33, !alias.scope !400, !noalias !397
  %1318 = getelementptr i32, i32* %1312, i64 16
  %1319 = bitcast i32* %1318 to <8 x i32>*
  %1320 = load <8 x i32>, <8 x i32>* %1319, align 4, !tbaa !33, !alias.scope !400, !noalias !397
  %1321 = getelementptr i32, i32* %1312, i64 24
  %1322 = bitcast i32* %1321 to <8 x i32>*
  %1323 = load <8 x i32>, <8 x i32>* %1322, align 4, !tbaa !33, !alias.scope !400, !noalias !397
  %1324 = add nsw <8 x i32> %1314, %1308
  %1325 = add nsw <8 x i32> %1317, %1309
  %1326 = add nsw <8 x i32> %1320, %1310
  %1327 = add nsw <8 x i32> %1323, %1311
  %1328 = bitcast i32* %1312 to <8 x i32>*
  store <8 x i32> %1324, <8 x i32>* %1328, align 4, !tbaa !33, !alias.scope !400, !noalias !397
  %1329 = bitcast i32* %1315 to <8 x i32>*
  store <8 x i32> %1325, <8 x i32>* %1329, align 4, !tbaa !33, !alias.scope !400, !noalias !397
  %1330 = bitcast i32* %1318 to <8 x i32>*
  store <8 x i32> %1326, <8 x i32>* %1330, align 4, !tbaa !33, !alias.scope !400, !noalias !397
  %1331 = bitcast i32* %1321 to <8 x i32>*
  store <8 x i32> %1327, <8 x i32>* %1331, align 4, !tbaa !33, !alias.scope !400, !noalias !397
  %1332 = add i64 %1258, 64
  %1333 = icmp eq i64 %1332, %215
  br i1 %1333, label %1334, label %1257, !llvm.loop !402

; <label>:1334:                                   ; preds = %1257
  br label %1335

; <label>:1335:                                   ; preds = %1255, %1334
  br i1 %231, label %1810, label %1192

; <label>:1336:                                   ; preds = %1336, %1807
  %1337 = phi i64 [ %1806, %1807 ], [ %1409, %1336 ]
  %1338 = getelementptr inbounds i32, i32* %4, i64 %1337
  %1339 = getelementptr inbounds i32, i32* %1191, i64 %1337
  %1340 = bitcast i32* %1339 to <4 x i32>*
  %1341 = load <4 x i32>, <4 x i32>* %1340, align 1, !tbaa !11
  %1342 = bitcast i32* %1338 to <4 x i32>*
  %1343 = load <4 x i32>, <4 x i32>* %1342, align 16, !tbaa !11
  %1344 = mul <4 x i32> %1341, %1811
  %1345 = add <4 x i32> %1343, %1344
  store <4 x i32> %1345, <4 x i32>* %1342, align 16, !tbaa !11
  %1346 = add nsw i64 %1337, 4
  %1347 = getelementptr inbounds i32, i32* %4, i64 %1346
  %1348 = getelementptr inbounds i32, i32* %1191, i64 %1346
  %1349 = bitcast i32* %1348 to <4 x i32>*
  %1350 = load <4 x i32>, <4 x i32>* %1349, align 1, !tbaa !11
  %1351 = bitcast i32* %1347 to <4 x i32>*
  %1352 = load <4 x i32>, <4 x i32>* %1351, align 16, !tbaa !11
  %1353 = mul <4 x i32> %1350, %1811
  %1354 = add <4 x i32> %1352, %1353
  store <4 x i32> %1354, <4 x i32>* %1351, align 16, !tbaa !11
  %1355 = add nsw i64 %1337, 8
  %1356 = getelementptr inbounds i32, i32* %4, i64 %1355
  %1357 = getelementptr inbounds i32, i32* %1191, i64 %1355
  %1358 = bitcast i32* %1357 to <4 x i32>*
  %1359 = load <4 x i32>, <4 x i32>* %1358, align 1, !tbaa !11
  %1360 = bitcast i32* %1356 to <4 x i32>*
  %1361 = load <4 x i32>, <4 x i32>* %1360, align 16, !tbaa !11
  %1362 = mul <4 x i32> %1359, %1811
  %1363 = add <4 x i32> %1361, %1362
  store <4 x i32> %1363, <4 x i32>* %1360, align 16, !tbaa !11
  %1364 = add nsw i64 %1337, 12
  %1365 = getelementptr inbounds i32, i32* %4, i64 %1364
  %1366 = getelementptr inbounds i32, i32* %1191, i64 %1364
  %1367 = bitcast i32* %1366 to <4 x i32>*
  %1368 = load <4 x i32>, <4 x i32>* %1367, align 1, !tbaa !11
  %1369 = bitcast i32* %1365 to <4 x i32>*
  %1370 = load <4 x i32>, <4 x i32>* %1369, align 16, !tbaa !11
  %1371 = mul <4 x i32> %1368, %1811
  %1372 = add <4 x i32> %1370, %1371
  store <4 x i32> %1372, <4 x i32>* %1369, align 16, !tbaa !11
  %1373 = add nsw i64 %1337, 16
  %1374 = getelementptr inbounds i32, i32* %4, i64 %1373
  %1375 = getelementptr inbounds i32, i32* %1191, i64 %1373
  %1376 = bitcast i32* %1375 to <4 x i32>*
  %1377 = load <4 x i32>, <4 x i32>* %1376, align 1, !tbaa !11
  %1378 = bitcast i32* %1374 to <4 x i32>*
  %1379 = load <4 x i32>, <4 x i32>* %1378, align 16, !tbaa !11
  %1380 = mul <4 x i32> %1377, %1811
  %1381 = add <4 x i32> %1379, %1380
  store <4 x i32> %1381, <4 x i32>* %1378, align 16, !tbaa !11
  %1382 = add nsw i64 %1337, 20
  %1383 = getelementptr inbounds i32, i32* %4, i64 %1382
  %1384 = getelementptr inbounds i32, i32* %1191, i64 %1382
  %1385 = bitcast i32* %1384 to <4 x i32>*
  %1386 = load <4 x i32>, <4 x i32>* %1385, align 1, !tbaa !11
  %1387 = bitcast i32* %1383 to <4 x i32>*
  %1388 = load <4 x i32>, <4 x i32>* %1387, align 16, !tbaa !11
  %1389 = mul <4 x i32> %1386, %1811
  %1390 = add <4 x i32> %1388, %1389
  store <4 x i32> %1390, <4 x i32>* %1387, align 16, !tbaa !11
  %1391 = add nsw i64 %1337, 24
  %1392 = getelementptr inbounds i32, i32* %4, i64 %1391
  %1393 = getelementptr inbounds i32, i32* %1191, i64 %1391
  %1394 = bitcast i32* %1393 to <4 x i32>*
  %1395 = load <4 x i32>, <4 x i32>* %1394, align 1, !tbaa !11
  %1396 = bitcast i32* %1392 to <4 x i32>*
  %1397 = load <4 x i32>, <4 x i32>* %1396, align 16, !tbaa !11
  %1398 = mul <4 x i32> %1395, %1811
  %1399 = add <4 x i32> %1397, %1398
  store <4 x i32> %1399, <4 x i32>* %1396, align 16, !tbaa !11
  %1400 = add nsw i64 %1337, 28
  %1401 = getelementptr inbounds i32, i32* %4, i64 %1400
  %1402 = getelementptr inbounds i32, i32* %1191, i64 %1400
  %1403 = bitcast i32* %1402 to <4 x i32>*
  %1404 = load <4 x i32>, <4 x i32>* %1403, align 1, !tbaa !11
  %1405 = bitcast i32* %1401 to <4 x i32>*
  %1406 = load <4 x i32>, <4 x i32>* %1405, align 16, !tbaa !11
  %1407 = mul <4 x i32> %1404, %1811
  %1408 = add <4 x i32> %1406, %1407
  store <4 x i32> %1408, <4 x i32>* %1405, align 16, !tbaa !11
  %1409 = add nsw i64 %1337, 32
  %1410 = icmp slt i64 %1409, %61
  br i1 %1410, label %1336, label %1612

; <label>:1411:                                   ; preds = %1417
  br label %1412

; <label>:1412:                                   ; preds = %1636, %1411
  br label %1413

; <label>:1413:                                   ; preds = %1412, %1765, %1614
  %1414 = add nsw i64 %1176, 1
  %1415 = icmp eq i64 %1414, %1167
  %1416 = add i64 %1175, 1
  br i1 %1415, label %1816, label %1174

; <label>:1417:                                   ; preds = %1417, %1639
  %1418 = phi i64 [ %1637, %1639 ], [ %1474, %1417 ]
  %1419 = getelementptr inbounds i32, i32* %1191, i64 %1418
  %1420 = load i32, i32* %1419, align 4, !tbaa !33
  %1421 = mul nsw i32 %1420, %1186
  %1422 = getelementptr inbounds i32, i32* %4, i64 %1418
  %1423 = load i32, i32* %1422, align 4, !tbaa !33
  %1424 = add nsw i32 %1423, %1421
  store i32 %1424, i32* %1422, align 4, !tbaa !33
  %1425 = add nsw i64 %1418, 1
  %1426 = getelementptr inbounds i32, i32* %1191, i64 %1425
  %1427 = load i32, i32* %1426, align 4, !tbaa !33
  %1428 = mul nsw i32 %1427, %1186
  %1429 = getelementptr inbounds i32, i32* %4, i64 %1425
  %1430 = load i32, i32* %1429, align 4, !tbaa !33
  %1431 = add nsw i32 %1430, %1428
  store i32 %1431, i32* %1429, align 4, !tbaa !33
  %1432 = add nsw i64 %1418, 2
  %1433 = getelementptr inbounds i32, i32* %1191, i64 %1432
  %1434 = load i32, i32* %1433, align 4, !tbaa !33
  %1435 = mul nsw i32 %1434, %1186
  %1436 = getelementptr inbounds i32, i32* %4, i64 %1432
  %1437 = load i32, i32* %1436, align 4, !tbaa !33
  %1438 = add nsw i32 %1437, %1435
  store i32 %1438, i32* %1436, align 4, !tbaa !33
  %1439 = add nsw i64 %1418, 3
  %1440 = getelementptr inbounds i32, i32* %1191, i64 %1439
  %1441 = load i32, i32* %1440, align 4, !tbaa !33
  %1442 = mul nsw i32 %1441, %1186
  %1443 = getelementptr inbounds i32, i32* %4, i64 %1439
  %1444 = load i32, i32* %1443, align 4, !tbaa !33
  %1445 = add nsw i32 %1444, %1442
  store i32 %1445, i32* %1443, align 4, !tbaa !33
  %1446 = add nsw i64 %1418, 4
  %1447 = getelementptr inbounds i32, i32* %1191, i64 %1446
  %1448 = load i32, i32* %1447, align 4, !tbaa !33
  %1449 = mul nsw i32 %1448, %1186
  %1450 = getelementptr inbounds i32, i32* %4, i64 %1446
  %1451 = load i32, i32* %1450, align 4, !tbaa !33
  %1452 = add nsw i32 %1451, %1449
  store i32 %1452, i32* %1450, align 4, !tbaa !33
  %1453 = add nsw i64 %1418, 5
  %1454 = getelementptr inbounds i32, i32* %1191, i64 %1453
  %1455 = load i32, i32* %1454, align 4, !tbaa !33
  %1456 = mul nsw i32 %1455, %1186
  %1457 = getelementptr inbounds i32, i32* %4, i64 %1453
  %1458 = load i32, i32* %1457, align 4, !tbaa !33
  %1459 = add nsw i32 %1458, %1456
  store i32 %1459, i32* %1457, align 4, !tbaa !33
  %1460 = add nsw i64 %1418, 6
  %1461 = getelementptr inbounds i32, i32* %1191, i64 %1460
  %1462 = load i32, i32* %1461, align 4, !tbaa !33
  %1463 = mul nsw i32 %1462, %1186
  %1464 = getelementptr inbounds i32, i32* %4, i64 %1460
  %1465 = load i32, i32* %1464, align 4, !tbaa !33
  %1466 = add nsw i32 %1465, %1463
  store i32 %1466, i32* %1464, align 4, !tbaa !33
  %1467 = add nsw i64 %1418, 7
  %1468 = getelementptr inbounds i32, i32* %1191, i64 %1467
  %1469 = load i32, i32* %1468, align 4, !tbaa !33
  %1470 = mul nsw i32 %1469, %1186
  %1471 = getelementptr inbounds i32, i32* %4, i64 %1467
  %1472 = load i32, i32* %1471, align 4, !tbaa !33
  %1473 = add nsw i32 %1472, %1470
  store i32 %1473, i32* %1471, align 4, !tbaa !33
  %1474 = add nsw i64 %1418, 8
  %1475 = icmp eq i64 %1474, %0
  br i1 %1475, label %1411, label %1417, !llvm.loop !403

; <label>:1476:                                   ; preds = %1476, %1786
  %1477 = phi i64 [ %1785, %1786 ], [ %1549, %1476 ]
  %1478 = getelementptr inbounds i32, i32* %4, i64 %1477
  %1479 = getelementptr inbounds i32, i32* %1191, i64 %1477
  %1480 = bitcast i32* %1479 to <4 x i32>*
  %1481 = load <4 x i32>, <4 x i32>* %1480, align 16, !tbaa !11
  %1482 = bitcast i32* %1478 to <4 x i32>*
  %1483 = load <4 x i32>, <4 x i32>* %1482, align 16, !tbaa !11
  %1484 = mul <4 x i32> %1481, %1811
  %1485 = add <4 x i32> %1483, %1484
  store <4 x i32> %1485, <4 x i32>* %1482, align 16, !tbaa !11
  %1486 = add nsw i64 %1477, 4
  %1487 = getelementptr inbounds i32, i32* %4, i64 %1486
  %1488 = getelementptr inbounds i32, i32* %1191, i64 %1486
  %1489 = bitcast i32* %1488 to <4 x i32>*
  %1490 = load <4 x i32>, <4 x i32>* %1489, align 16, !tbaa !11
  %1491 = bitcast i32* %1487 to <4 x i32>*
  %1492 = load <4 x i32>, <4 x i32>* %1491, align 16, !tbaa !11
  %1493 = mul <4 x i32> %1490, %1811
  %1494 = add <4 x i32> %1492, %1493
  store <4 x i32> %1494, <4 x i32>* %1491, align 16, !tbaa !11
  %1495 = add nsw i64 %1477, 8
  %1496 = getelementptr inbounds i32, i32* %4, i64 %1495
  %1497 = getelementptr inbounds i32, i32* %1191, i64 %1495
  %1498 = bitcast i32* %1497 to <4 x i32>*
  %1499 = load <4 x i32>, <4 x i32>* %1498, align 16, !tbaa !11
  %1500 = bitcast i32* %1496 to <4 x i32>*
  %1501 = load <4 x i32>, <4 x i32>* %1500, align 16, !tbaa !11
  %1502 = mul <4 x i32> %1499, %1811
  %1503 = add <4 x i32> %1501, %1502
  store <4 x i32> %1503, <4 x i32>* %1500, align 16, !tbaa !11
  %1504 = add nsw i64 %1477, 12
  %1505 = getelementptr inbounds i32, i32* %4, i64 %1504
  %1506 = getelementptr inbounds i32, i32* %1191, i64 %1504
  %1507 = bitcast i32* %1506 to <4 x i32>*
  %1508 = load <4 x i32>, <4 x i32>* %1507, align 16, !tbaa !11
  %1509 = bitcast i32* %1505 to <4 x i32>*
  %1510 = load <4 x i32>, <4 x i32>* %1509, align 16, !tbaa !11
  %1511 = mul <4 x i32> %1508, %1811
  %1512 = add <4 x i32> %1510, %1511
  store <4 x i32> %1512, <4 x i32>* %1509, align 16, !tbaa !11
  %1513 = add nsw i64 %1477, 16
  %1514 = getelementptr inbounds i32, i32* %4, i64 %1513
  %1515 = getelementptr inbounds i32, i32* %1191, i64 %1513
  %1516 = bitcast i32* %1515 to <4 x i32>*
  %1517 = load <4 x i32>, <4 x i32>* %1516, align 16, !tbaa !11
  %1518 = bitcast i32* %1514 to <4 x i32>*
  %1519 = load <4 x i32>, <4 x i32>* %1518, align 16, !tbaa !11
  %1520 = mul <4 x i32> %1517, %1811
  %1521 = add <4 x i32> %1519, %1520
  store <4 x i32> %1521, <4 x i32>* %1518, align 16, !tbaa !11
  %1522 = add nsw i64 %1477, 20
  %1523 = getelementptr inbounds i32, i32* %4, i64 %1522
  %1524 = getelementptr inbounds i32, i32* %1191, i64 %1522
  %1525 = bitcast i32* %1524 to <4 x i32>*
  %1526 = load <4 x i32>, <4 x i32>* %1525, align 16, !tbaa !11
  %1527 = bitcast i32* %1523 to <4 x i32>*
  %1528 = load <4 x i32>, <4 x i32>* %1527, align 16, !tbaa !11
  %1529 = mul <4 x i32> %1526, %1811
  %1530 = add <4 x i32> %1528, %1529
  store <4 x i32> %1530, <4 x i32>* %1527, align 16, !tbaa !11
  %1531 = add nsw i64 %1477, 24
  %1532 = getelementptr inbounds i32, i32* %4, i64 %1531
  %1533 = getelementptr inbounds i32, i32* %1191, i64 %1531
  %1534 = bitcast i32* %1533 to <4 x i32>*
  %1535 = load <4 x i32>, <4 x i32>* %1534, align 16, !tbaa !11
  %1536 = bitcast i32* %1532 to <4 x i32>*
  %1537 = load <4 x i32>, <4 x i32>* %1536, align 16, !tbaa !11
  %1538 = mul <4 x i32> %1535, %1811
  %1539 = add <4 x i32> %1537, %1538
  store <4 x i32> %1539, <4 x i32>* %1536, align 16, !tbaa !11
  %1540 = add nsw i64 %1477, 28
  %1541 = getelementptr inbounds i32, i32* %4, i64 %1540
  %1542 = getelementptr inbounds i32, i32* %1191, i64 %1540
  %1543 = bitcast i32* %1542 to <4 x i32>*
  %1544 = load <4 x i32>, <4 x i32>* %1543, align 16, !tbaa !11
  %1545 = bitcast i32* %1541 to <4 x i32>*
  %1546 = load <4 x i32>, <4 x i32>* %1545, align 16, !tbaa !11
  %1547 = mul <4 x i32> %1544, %1811
  %1548 = add <4 x i32> %1546, %1547
  store <4 x i32> %1548, <4 x i32>* %1545, align 16, !tbaa !11
  %1549 = add nsw i64 %1477, 32
  %1550 = icmp slt i64 %1549, %61
  br i1 %1550, label %1476, label %1610

; <label>:1551:                                   ; preds = %1551, %1215
  %1552 = phi i64 [ %1213, %1215 ], [ %1608, %1551 ]
  %1553 = getelementptr inbounds i32, i32* %1191, i64 %1552
  %1554 = load i32, i32* %1553, align 4, !tbaa !33
  %1555 = mul nsw i32 %1554, %1186
  %1556 = getelementptr inbounds i32, i32* %4, i64 %1552
  %1557 = load i32, i32* %1556, align 4, !tbaa !33
  %1558 = add nsw i32 %1557, %1555
  store i32 %1558, i32* %1556, align 4, !tbaa !33
  %1559 = add nuw nsw i64 %1552, 1
  %1560 = getelementptr inbounds i32, i32* %1191, i64 %1559
  %1561 = load i32, i32* %1560, align 4, !tbaa !33
  %1562 = mul nsw i32 %1561, %1186
  %1563 = getelementptr inbounds i32, i32* %4, i64 %1559
  %1564 = load i32, i32* %1563, align 4, !tbaa !33
  %1565 = add nsw i32 %1564, %1562
  store i32 %1565, i32* %1563, align 4, !tbaa !33
  %1566 = add nsw i64 %1552, 2
  %1567 = getelementptr inbounds i32, i32* %1191, i64 %1566
  %1568 = load i32, i32* %1567, align 4, !tbaa !33
  %1569 = mul nsw i32 %1568, %1186
  %1570 = getelementptr inbounds i32, i32* %4, i64 %1566
  %1571 = load i32, i32* %1570, align 4, !tbaa !33
  %1572 = add nsw i32 %1571, %1569
  store i32 %1572, i32* %1570, align 4, !tbaa !33
  %1573 = add nsw i64 %1552, 3
  %1574 = getelementptr inbounds i32, i32* %1191, i64 %1573
  %1575 = load i32, i32* %1574, align 4, !tbaa !33
  %1576 = mul nsw i32 %1575, %1186
  %1577 = getelementptr inbounds i32, i32* %4, i64 %1573
  %1578 = load i32, i32* %1577, align 4, !tbaa !33
  %1579 = add nsw i32 %1578, %1576
  store i32 %1579, i32* %1577, align 4, !tbaa !33
  %1580 = add nsw i64 %1552, 4
  %1581 = getelementptr inbounds i32, i32* %1191, i64 %1580
  %1582 = load i32, i32* %1581, align 4, !tbaa !33
  %1583 = mul nsw i32 %1582, %1186
  %1584 = getelementptr inbounds i32, i32* %4, i64 %1580
  %1585 = load i32, i32* %1584, align 4, !tbaa !33
  %1586 = add nsw i32 %1585, %1583
  store i32 %1586, i32* %1584, align 4, !tbaa !33
  %1587 = add nsw i64 %1552, 5
  %1588 = getelementptr inbounds i32, i32* %1191, i64 %1587
  %1589 = load i32, i32* %1588, align 4, !tbaa !33
  %1590 = mul nsw i32 %1589, %1186
  %1591 = getelementptr inbounds i32, i32* %4, i64 %1587
  %1592 = load i32, i32* %1591, align 4, !tbaa !33
  %1593 = add nsw i32 %1592, %1590
  store i32 %1593, i32* %1591, align 4, !tbaa !33
  %1594 = add nsw i64 %1552, 6
  %1595 = getelementptr inbounds i32, i32* %1191, i64 %1594
  %1596 = load i32, i32* %1595, align 4, !tbaa !33
  %1597 = mul nsw i32 %1596, %1186
  %1598 = getelementptr inbounds i32, i32* %4, i64 %1594
  %1599 = load i32, i32* %1598, align 4, !tbaa !33
  %1600 = add nsw i32 %1599, %1597
  store i32 %1600, i32* %1598, align 4, !tbaa !33
  %1601 = add nsw i64 %1552, 7
  %1602 = getelementptr inbounds i32, i32* %1191, i64 %1601
  %1603 = load i32, i32* %1602, align 4, !tbaa !33
  %1604 = mul nsw i32 %1603, %1186
  %1605 = getelementptr inbounds i32, i32* %4, i64 %1601
  %1606 = load i32, i32* %1605, align 4, !tbaa !33
  %1607 = add nsw i32 %1606, %1604
  store i32 %1607, i32* %1605, align 4, !tbaa !33
  %1608 = add nsw i64 %1552, 8
  %1609 = icmp eq i64 %1608, %62
  br i1 %1609, label %1808, label %1551, !llvm.loop !404

; <label>:1610:                                   ; preds = %1476
  br label %1611

; <label>:1611:                                   ; preds = %1784, %1610
  br label %1614

; <label>:1612:                                   ; preds = %1336
  br label %1613

; <label>:1613:                                   ; preds = %1805, %1612
  br label %1614

; <label>:1614:                                   ; preds = %1613, %1611, %1787, %1766
  br i1 %162, label %1615, label %1413

; <label>:1615:                                   ; preds = %1614
  br i1 %192, label %1616, label %1640

; <label>:1616:                                   ; preds = %1765, %1641, %1640, %1615
  %1617 = phi i64 [ %61, %1641 ], [ %61, %1640 ], [ %61, %1615 ], [ %195, %1765 ]
  %1618 = sub i64 %0, %1617
  %1619 = sub i64 %187, %1617
  %1620 = and i64 %1618, 7
  %1621 = icmp eq i64 %1620, 0
  br i1 %1621, label %1636, label %1622

; <label>:1622:                                   ; preds = %1616
  br label %1623

; <label>:1623:                                   ; preds = %1623, %1622
  %1624 = phi i64 [ %1632, %1623 ], [ %1617, %1622 ]
  %1625 = phi i64 [ %1633, %1623 ], [ %1620, %1622 ]
  %1626 = getelementptr inbounds i32, i32* %1191, i64 %1624
  %1627 = load i32, i32* %1626, align 4, !tbaa !33
  %1628 = mul nsw i32 %1627, %1186
  %1629 = getelementptr inbounds i32, i32* %4, i64 %1624
  %1630 = load i32, i32* %1629, align 4, !tbaa !33
  %1631 = add nsw i32 %1630, %1628
  store i32 %1631, i32* %1629, align 4, !tbaa !33
  %1632 = add nsw i64 %1624, 1
  %1633 = add i64 %1625, -1
  %1634 = icmp eq i64 %1633, 0
  br i1 %1634, label %1635, label %1623, !llvm.loop !405

; <label>:1635:                                   ; preds = %1623
  br label %1636

; <label>:1636:                                   ; preds = %1616, %1635
  %1637 = phi i64 [ %1617, %1616 ], [ %1632, %1635 ]
  %1638 = icmp ult i64 %1619, 7
  br i1 %1638, label %1412, label %1639

; <label>:1639:                                   ; preds = %1636
  br label %1417

; <label>:1640:                                   ; preds = %1615
  br i1 %194, label %1616, label %1641

; <label>:1641:                                   ; preds = %1640
  %1642 = getelementptr i32, i32* %1188, i64 %61
  %1643 = bitcast i32* %1642 to i8*
  %1644 = mul i64 %1189, %1180
  %1645 = getelementptr i8, i8* %1643, i64 %1644
  %1646 = getelementptr i32, i32* %1188, i64 %0
  %1647 = bitcast i32* %1646 to i8*
  %1648 = getelementptr i8, i8* %1647, i64 %1644
  %1649 = icmp ult i8* %166, %1648
  %1650 = icmp ult i8* %1645, %168
  %1651 = and i1 %1649, %1650
  br i1 %1651, label %1616, label %1652

; <label>:1652:                                   ; preds = %1641
  %1653 = insertelement <8 x i32> undef, i32 %1186, i32 0
  %1654 = shufflevector <8 x i32> %1653, <8 x i32> undef, <8 x i32> zeroinitializer
  br i1 %197, label %1681, label %1655

; <label>:1655:                                   ; preds = %1652
  br label %1656

; <label>:1656:                                   ; preds = %1655
  %1657 = getelementptr inbounds i32, i32* %1191, i64 %61
  %1658 = bitcast i32* %1657 to <8 x i32>*
  %1659 = load <8 x i32>, <8 x i32>* %1658, align 4, !tbaa !33, !alias.scope !406
  %1660 = getelementptr i32, i32* %1657, i64 8
  %1661 = bitcast i32* %1660 to <8 x i32>*
  %1662 = load <8 x i32>, <8 x i32>* %1661, align 4, !tbaa !33, !alias.scope !406
  %1663 = getelementptr i32, i32* %1657, i64 16
  %1664 = bitcast i32* %1663 to <8 x i32>*
  %1665 = load <8 x i32>, <8 x i32>* %1664, align 4, !tbaa !33, !alias.scope !406
  %1666 = getelementptr i32, i32* %1657, i64 24
  %1667 = bitcast i32* %1666 to <8 x i32>*
  %1668 = load <8 x i32>, <8 x i32>* %1667, align 4, !tbaa !33, !alias.scope !406
  %1669 = mul nsw <8 x i32> %1659, %1654
  %1670 = mul nsw <8 x i32> %1662, %1654
  %1671 = mul nsw <8 x i32> %1665, %1654
  %1672 = mul nsw <8 x i32> %1668, %1654
  %1673 = load <8 x i32>, <8 x i32>* %199, align 4, !tbaa !33, !alias.scope !409, !noalias !406
  %1674 = load <8 x i32>, <8 x i32>* %201, align 4, !tbaa !33, !alias.scope !409, !noalias !406
  %1675 = load <8 x i32>, <8 x i32>* %203, align 4, !tbaa !33, !alias.scope !409, !noalias !406
  %1676 = load <8 x i32>, <8 x i32>* %205, align 4, !tbaa !33, !alias.scope !409, !noalias !406
  %1677 = add nsw <8 x i32> %1673, %1669
  %1678 = add nsw <8 x i32> %1674, %1670
  %1679 = add nsw <8 x i32> %1675, %1671
  %1680 = add nsw <8 x i32> %1676, %1672
  store <8 x i32> %1677, <8 x i32>* %206, align 4, !tbaa !33, !alias.scope !409, !noalias !406
  store <8 x i32> %1678, <8 x i32>* %207, align 4, !tbaa !33, !alias.scope !409, !noalias !406
  store <8 x i32> %1679, <8 x i32>* %208, align 4, !tbaa !33, !alias.scope !409, !noalias !406
  store <8 x i32> %1680, <8 x i32>* %209, align 4, !tbaa !33, !alias.scope !409, !noalias !406
  br label %1681

; <label>:1681:                                   ; preds = %1652, %1656
  %1682 = phi i64 [ 32, %1656 ], [ 0, %1652 ]
  br label %1683

; <label>:1683:                                   ; preds = %1681
  br i1 %210, label %1765, label %1684

; <label>:1684:                                   ; preds = %1683
  br label %1685

; <label>:1685:                                   ; preds = %1685, %1684
  %1686 = phi i64 [ %1682, %1684 ], [ %1762, %1685 ]
  %1687 = add i64 %61, %1686
  %1688 = getelementptr inbounds i32, i32* %1191, i64 %1687
  %1689 = bitcast i32* %1688 to <8 x i32>*
  %1690 = load <8 x i32>, <8 x i32>* %1689, align 4, !tbaa !33, !alias.scope !406
  %1691 = getelementptr i32, i32* %1688, i64 8
  %1692 = bitcast i32* %1691 to <8 x i32>*
  %1693 = load <8 x i32>, <8 x i32>* %1692, align 4, !tbaa !33, !alias.scope !406
  %1694 = getelementptr i32, i32* %1688, i64 16
  %1695 = bitcast i32* %1694 to <8 x i32>*
  %1696 = load <8 x i32>, <8 x i32>* %1695, align 4, !tbaa !33, !alias.scope !406
  %1697 = getelementptr i32, i32* %1688, i64 24
  %1698 = bitcast i32* %1697 to <8 x i32>*
  %1699 = load <8 x i32>, <8 x i32>* %1698, align 4, !tbaa !33, !alias.scope !406
  %1700 = mul nsw <8 x i32> %1690, %1654
  %1701 = mul nsw <8 x i32> %1693, %1654
  %1702 = mul nsw <8 x i32> %1696, %1654
  %1703 = mul nsw <8 x i32> %1699, %1654
  %1704 = getelementptr inbounds i32, i32* %4, i64 %1687
  %1705 = bitcast i32* %1704 to <8 x i32>*
  %1706 = load <8 x i32>, <8 x i32>* %1705, align 4, !tbaa !33, !alias.scope !409, !noalias !406
  %1707 = getelementptr i32, i32* %1704, i64 8
  %1708 = bitcast i32* %1707 to <8 x i32>*
  %1709 = load <8 x i32>, <8 x i32>* %1708, align 4, !tbaa !33, !alias.scope !409, !noalias !406
  %1710 = getelementptr i32, i32* %1704, i64 16
  %1711 = bitcast i32* %1710 to <8 x i32>*
  %1712 = load <8 x i32>, <8 x i32>* %1711, align 4, !tbaa !33, !alias.scope !409, !noalias !406
  %1713 = getelementptr i32, i32* %1704, i64 24
  %1714 = bitcast i32* %1713 to <8 x i32>*
  %1715 = load <8 x i32>, <8 x i32>* %1714, align 4, !tbaa !33, !alias.scope !409, !noalias !406
  %1716 = add nsw <8 x i32> %1706, %1700
  %1717 = add nsw <8 x i32> %1709, %1701
  %1718 = add nsw <8 x i32> %1712, %1702
  %1719 = add nsw <8 x i32> %1715, %1703
  %1720 = bitcast i32* %1704 to <8 x i32>*
  store <8 x i32> %1716, <8 x i32>* %1720, align 4, !tbaa !33, !alias.scope !409, !noalias !406
  %1721 = bitcast i32* %1707 to <8 x i32>*
  store <8 x i32> %1717, <8 x i32>* %1721, align 4, !tbaa !33, !alias.scope !409, !noalias !406
  %1722 = bitcast i32* %1710 to <8 x i32>*
  store <8 x i32> %1718, <8 x i32>* %1722, align 4, !tbaa !33, !alias.scope !409, !noalias !406
  %1723 = bitcast i32* %1713 to <8 x i32>*
  store <8 x i32> %1719, <8 x i32>* %1723, align 4, !tbaa !33, !alias.scope !409, !noalias !406
  %1724 = add i64 %1686, 32
  %1725 = add i64 %61, %1724
  %1726 = getelementptr inbounds i32, i32* %1191, i64 %1725
  %1727 = bitcast i32* %1726 to <8 x i32>*
  %1728 = load <8 x i32>, <8 x i32>* %1727, align 4, !tbaa !33, !alias.scope !406
  %1729 = getelementptr i32, i32* %1726, i64 8
  %1730 = bitcast i32* %1729 to <8 x i32>*
  %1731 = load <8 x i32>, <8 x i32>* %1730, align 4, !tbaa !33, !alias.scope !406
  %1732 = getelementptr i32, i32* %1726, i64 16
  %1733 = bitcast i32* %1732 to <8 x i32>*
  %1734 = load <8 x i32>, <8 x i32>* %1733, align 4, !tbaa !33, !alias.scope !406
  %1735 = getelementptr i32, i32* %1726, i64 24
  %1736 = bitcast i32* %1735 to <8 x i32>*
  %1737 = load <8 x i32>, <8 x i32>* %1736, align 4, !tbaa !33, !alias.scope !406
  %1738 = mul nsw <8 x i32> %1728, %1654
  %1739 = mul nsw <8 x i32> %1731, %1654
  %1740 = mul nsw <8 x i32> %1734, %1654
  %1741 = mul nsw <8 x i32> %1737, %1654
  %1742 = getelementptr inbounds i32, i32* %4, i64 %1725
  %1743 = bitcast i32* %1742 to <8 x i32>*
  %1744 = load <8 x i32>, <8 x i32>* %1743, align 4, !tbaa !33, !alias.scope !409, !noalias !406
  %1745 = getelementptr i32, i32* %1742, i64 8
  %1746 = bitcast i32* %1745 to <8 x i32>*
  %1747 = load <8 x i32>, <8 x i32>* %1746, align 4, !tbaa !33, !alias.scope !409, !noalias !406
  %1748 = getelementptr i32, i32* %1742, i64 16
  %1749 = bitcast i32* %1748 to <8 x i32>*
  %1750 = load <8 x i32>, <8 x i32>* %1749, align 4, !tbaa !33, !alias.scope !409, !noalias !406
  %1751 = getelementptr i32, i32* %1742, i64 24
  %1752 = bitcast i32* %1751 to <8 x i32>*
  %1753 = load <8 x i32>, <8 x i32>* %1752, align 4, !tbaa !33, !alias.scope !409, !noalias !406
  %1754 = add nsw <8 x i32> %1744, %1738
  %1755 = add nsw <8 x i32> %1747, %1739
  %1756 = add nsw <8 x i32> %1750, %1740
  %1757 = add nsw <8 x i32> %1753, %1741
  %1758 = bitcast i32* %1742 to <8 x i32>*
  store <8 x i32> %1754, <8 x i32>* %1758, align 4, !tbaa !33, !alias.scope !409, !noalias !406
  %1759 = bitcast i32* %1745 to <8 x i32>*
  store <8 x i32> %1755, <8 x i32>* %1759, align 4, !tbaa !33, !alias.scope !409, !noalias !406
  %1760 = bitcast i32* %1748 to <8 x i32>*
  store <8 x i32> %1756, <8 x i32>* %1760, align 4, !tbaa !33, !alias.scope !409, !noalias !406
  %1761 = bitcast i32* %1751 to <8 x i32>*
  store <8 x i32> %1757, <8 x i32>* %1761, align 4, !tbaa !33, !alias.scope !409, !noalias !406
  %1762 = add i64 %1686, 64
  %1763 = icmp eq i64 %1762, %193
  br i1 %1763, label %1764, label %1685, !llvm.loop !411

; <label>:1764:                                   ; preds = %1685
  br label %1765

; <label>:1765:                                   ; preds = %1683, %1764
  br i1 %211, label %1413, label %1616

; <label>:1766:                                   ; preds = %1810
  br i1 %163, label %1767, label %1614

; <label>:1767:                                   ; preds = %1766
  br i1 %190, label %1784, label %1768

; <label>:1768:                                   ; preds = %1767
  br label %1769

; <label>:1769:                                   ; preds = %1769, %1768
  %1770 = phi i64 [ %1780, %1769 ], [ %62, %1768 ]
  %1771 = phi i64 [ %1781, %1769 ], [ %189, %1768 ]
  %1772 = getelementptr inbounds i32, i32* %4, i64 %1770
  %1773 = getelementptr inbounds i32, i32* %1191, i64 %1770
  %1774 = bitcast i32* %1773 to <4 x i32>*
  %1775 = load <4 x i32>, <4 x i32>* %1774, align 16, !tbaa !11
  %1776 = bitcast i32* %1772 to <4 x i32>*
  %1777 = load <4 x i32>, <4 x i32>* %1776, align 16, !tbaa !11
  %1778 = mul <4 x i32> %1775, %1811
  %1779 = add <4 x i32> %1777, %1778
  store <4 x i32> %1779, <4 x i32>* %1776, align 16, !tbaa !11
  %1780 = add nsw i64 %1770, 4
  %1781 = add i64 %1771, -1
  %1782 = icmp eq i64 %1781, 0
  br i1 %1782, label %1783, label %1769, !llvm.loop !412

; <label>:1783:                                   ; preds = %1769
  br label %1784

; <label>:1784:                                   ; preds = %1767, %1783
  %1785 = phi i64 [ %62, %1767 ], [ %1780, %1783 ]
  br i1 %191, label %1611, label %1786

; <label>:1786:                                   ; preds = %1784
  br label %1476

; <label>:1787:                                   ; preds = %1810
  br i1 %163, label %1788, label %1614

; <label>:1788:                                   ; preds = %1787
  br i1 %213, label %1805, label %1789

; <label>:1789:                                   ; preds = %1788
  br label %1790

; <label>:1790:                                   ; preds = %1790, %1789
  %1791 = phi i64 [ %1801, %1790 ], [ %62, %1789 ]
  %1792 = phi i64 [ %1802, %1790 ], [ %212, %1789 ]
  %1793 = getelementptr inbounds i32, i32* %4, i64 %1791
  %1794 = getelementptr inbounds i32, i32* %1191, i64 %1791
  %1795 = bitcast i32* %1794 to <4 x i32>*
  %1796 = load <4 x i32>, <4 x i32>* %1795, align 1, !tbaa !11
  %1797 = bitcast i32* %1793 to <4 x i32>*
  %1798 = load <4 x i32>, <4 x i32>* %1797, align 16, !tbaa !11
  %1799 = mul <4 x i32> %1796, %1811
  %1800 = add <4 x i32> %1798, %1799
  store <4 x i32> %1800, <4 x i32>* %1797, align 16, !tbaa !11
  %1801 = add nsw i64 %1791, 4
  %1802 = add i64 %1792, -1
  %1803 = icmp eq i64 %1802, 0
  br i1 %1803, label %1804, label %1790, !llvm.loop !413

; <label>:1804:                                   ; preds = %1790
  br label %1805

; <label>:1805:                                   ; preds = %1788, %1804
  %1806 = phi i64 [ %62, %1788 ], [ %1801, %1804 ]
  br i1 %214, label %1613, label %1807

; <label>:1807:                                   ; preds = %1805
  br label %1336

; <label>:1808:                                   ; preds = %1551
  br label %1809

; <label>:1809:                                   ; preds = %1212, %1808
  br label %1810

; <label>:1810:                                   ; preds = %1809, %1335
  %1811 = shufflevector <4 x i32> %1187, <4 x i32> undef, <4 x i32> zeroinitializer
  %1812 = getelementptr inbounds i32, i32* %1191, i64 %62
  %1813 = ptrtoint i32* %1812 to i64
  %1814 = and i64 %1813, 15
  %1815 = icmp eq i64 %1814, 0
  br i1 %1815, label %1766, label %1787

; <label>:1816:                                   ; preds = %1413
  br label %1818

; <label>:1817:                                   ; preds = %2191
  br label %1818

; <label>:1818:                                   ; preds = %1817, %1816, %1165
  %1819 = icmp eq i64 %1166, 0
  br i1 %1819, label %2254, label %1165

; <label>:1820:                                   ; preds = %1171, %2191
  %1821 = phi i64 [ %2194, %2191 ], [ 0, %1171 ]
  %1822 = phi i64 [ %2192, %2191 ], [ %1168, %1171 ]
  %1823 = add i64 %1168, %1821
  %1824 = shl i64 %1823, 2
  %1825 = load i32*, i32** %71, align 8, !tbaa !365
  %1826 = load i64, i64* %72, align 8, !tbaa !367
  %1827 = mul nsw i64 %1826, %1822
  %1828 = getelementptr inbounds i32, i32* %1825, i64 %1827
  %1829 = load i32, i32* %1828, align 4, !tbaa !33
  %1830 = mul nsw i32 %1829, %6
  %1831 = insertelement <4 x i32> undef, i32 %1830, i32 0
  %1832 = shufflevector <4 x i32> %1831, <4 x i32> undef, <4 x i32> zeroinitializer
  %1833 = load i32*, i32** %73, align 8, !tbaa !362
  %1834 = load i64, i64* %9, align 8, !tbaa !364
  %1835 = mul nsw i64 %1834, %1822
  %1836 = getelementptr inbounds i32, i32* %1833, i64 %1835
  %1837 = getelementptr inbounds i32, i32* %1836, i64 %62
  %1838 = ptrtoint i32* %1837 to i64
  %1839 = and i64 %1838, 15
  %1840 = icmp eq i64 %1839, 0
  br i1 %1840, label %1862, label %1841

; <label>:1841:                                   ; preds = %1820
  br i1 %163, label %1842, label %1887

; <label>:1842:                                   ; preds = %1841
  br i1 %256, label %1859, label %1843

; <label>:1843:                                   ; preds = %1842
  br label %1844

; <label>:1844:                                   ; preds = %1844, %1843
  %1845 = phi i64 [ %1855, %1844 ], [ %62, %1843 ]
  %1846 = phi i64 [ %1856, %1844 ], [ %255, %1843 ]
  %1847 = getelementptr inbounds i32, i32* %4, i64 %1845
  %1848 = getelementptr inbounds i32, i32* %1836, i64 %1845
  %1849 = bitcast i32* %1848 to <4 x i32>*
  %1850 = load <4 x i32>, <4 x i32>* %1849, align 1, !tbaa !11
  %1851 = bitcast i32* %1847 to <4 x i32>*
  %1852 = load <4 x i32>, <4 x i32>* %1851, align 16, !tbaa !11
  %1853 = mul <4 x i32> %1850, %1832
  %1854 = add <4 x i32> %1852, %1853
  store <4 x i32> %1854, <4 x i32>* %1851, align 16, !tbaa !11
  %1855 = add nsw i64 %1845, 4
  %1856 = add i64 %1846, -1
  %1857 = icmp eq i64 %1856, 0
  br i1 %1857, label %1858, label %1844, !llvm.loop !414

; <label>:1858:                                   ; preds = %1844
  br label %1859

; <label>:1859:                                   ; preds = %1842, %1858
  %1860 = phi i64 [ %62, %1842 ], [ %1855, %1858 ]
  br i1 %257, label %1886, label %1861

; <label>:1861:                                   ; preds = %1859
  br label %2114

; <label>:1862:                                   ; preds = %1820
  br i1 %163, label %1863, label %1887

; <label>:1863:                                   ; preds = %1862
  br i1 %233, label %1880, label %1864

; <label>:1864:                                   ; preds = %1863
  br label %1865

; <label>:1865:                                   ; preds = %1865, %1864
  %1866 = phi i64 [ %1876, %1865 ], [ %62, %1864 ]
  %1867 = phi i64 [ %1877, %1865 ], [ %232, %1864 ]
  %1868 = getelementptr inbounds i32, i32* %4, i64 %1866
  %1869 = getelementptr inbounds i32, i32* %1836, i64 %1866
  %1870 = bitcast i32* %1869 to <4 x i32>*
  %1871 = load <4 x i32>, <4 x i32>* %1870, align 16, !tbaa !11
  %1872 = bitcast i32* %1868 to <4 x i32>*
  %1873 = load <4 x i32>, <4 x i32>* %1872, align 16, !tbaa !11
  %1874 = mul <4 x i32> %1871, %1832
  %1875 = add <4 x i32> %1873, %1874
  store <4 x i32> %1875, <4 x i32>* %1872, align 16, !tbaa !11
  %1876 = add nsw i64 %1866, 4
  %1877 = add i64 %1867, -1
  %1878 = icmp eq i64 %1877, 0
  br i1 %1878, label %1879, label %1865, !llvm.loop !415

; <label>:1879:                                   ; preds = %1865
  br label %1880

; <label>:1880:                                   ; preds = %1863, %1879
  %1881 = phi i64 [ %62, %1863 ], [ %1876, %1879 ]
  br i1 %234, label %1884, label %1882

; <label>:1882:                                   ; preds = %1880
  br label %2039

; <label>:1883:                                   ; preds = %2039
  br label %1884

; <label>:1884:                                   ; preds = %1880, %1883
  br label %1887

; <label>:1885:                                   ; preds = %2114
  br label %1886

; <label>:1886:                                   ; preds = %1859, %1885
  br label %1887

; <label>:1887:                                   ; preds = %1886, %1884, %1841, %1862
  br i1 %162, label %1888, label %2191

; <label>:1888:                                   ; preds = %1887
  br i1 %235, label %1889, label %1913

; <label>:1889:                                   ; preds = %2038, %1914, %1913, %1888
  %1890 = phi i64 [ %61, %1914 ], [ %61, %1913 ], [ %61, %1888 ], [ %238, %2038 ]
  %1891 = sub i64 %0, %1890
  %1892 = sub i64 %182, %1890
  %1893 = and i64 %1891, 7
  %1894 = icmp eq i64 %1893, 0
  br i1 %1894, label %1909, label %1895

; <label>:1895:                                   ; preds = %1889
  br label %1896

; <label>:1896:                                   ; preds = %1896, %1895
  %1897 = phi i64 [ %1905, %1896 ], [ %1890, %1895 ]
  %1898 = phi i64 [ %1906, %1896 ], [ %1893, %1895 ]
  %1899 = getelementptr inbounds i32, i32* %1836, i64 %1897
  %1900 = load i32, i32* %1899, align 4, !tbaa !33
  %1901 = mul nsw i32 %1900, %1830
  %1902 = getelementptr inbounds i32, i32* %4, i64 %1897
  %1903 = load i32, i32* %1902, align 4, !tbaa !33
  %1904 = add nsw i32 %1903, %1901
  store i32 %1904, i32* %1902, align 4, !tbaa !33
  %1905 = add nsw i64 %1897, 1
  %1906 = add i64 %1898, -1
  %1907 = icmp eq i64 %1906, 0
  br i1 %1907, label %1908, label %1896, !llvm.loop !416

; <label>:1908:                                   ; preds = %1896
  br label %1909

; <label>:1909:                                   ; preds = %1889, %1908
  %1910 = phi i64 [ %1890, %1889 ], [ %1905, %1908 ]
  %1911 = icmp ult i64 %1892, 7
  br i1 %1911, label %2190, label %1912

; <label>:1912:                                   ; preds = %1909
  br label %2195

; <label>:1913:                                   ; preds = %1888
  br i1 %237, label %1889, label %1914

; <label>:1914:                                   ; preds = %1913
  %1915 = getelementptr i32, i32* %1833, i64 %61
  %1916 = bitcast i32* %1915 to i8*
  %1917 = mul i64 %1834, %1824
  %1918 = getelementptr i8, i8* %1916, i64 %1917
  %1919 = getelementptr i32, i32* %1833, i64 %0
  %1920 = bitcast i32* %1919 to i8*
  %1921 = getelementptr i8, i8* %1920, i64 %1917
  %1922 = icmp ult i8* %172, %1921
  %1923 = icmp ult i8* %1918, %174
  %1924 = and i1 %1922, %1923
  br i1 %1924, label %1889, label %1925

; <label>:1925:                                   ; preds = %1914
  %1926 = insertelement <8 x i32> undef, i32 %1830, i32 0
  %1927 = shufflevector <8 x i32> %1926, <8 x i32> undef, <8 x i32> zeroinitializer
  br i1 %240, label %1954, label %1928

; <label>:1928:                                   ; preds = %1925
  br label %1929

; <label>:1929:                                   ; preds = %1928
  %1930 = getelementptr inbounds i32, i32* %1836, i64 %61
  %1931 = bitcast i32* %1930 to <8 x i32>*
  %1932 = load <8 x i32>, <8 x i32>* %1931, align 4, !tbaa !33, !alias.scope !417
  %1933 = getelementptr i32, i32* %1930, i64 8
  %1934 = bitcast i32* %1933 to <8 x i32>*
  %1935 = load <8 x i32>, <8 x i32>* %1934, align 4, !tbaa !33, !alias.scope !417
  %1936 = getelementptr i32, i32* %1930, i64 16
  %1937 = bitcast i32* %1936 to <8 x i32>*
  %1938 = load <8 x i32>, <8 x i32>* %1937, align 4, !tbaa !33, !alias.scope !417
  %1939 = getelementptr i32, i32* %1930, i64 24
  %1940 = bitcast i32* %1939 to <8 x i32>*
  %1941 = load <8 x i32>, <8 x i32>* %1940, align 4, !tbaa !33, !alias.scope !417
  %1942 = mul nsw <8 x i32> %1932, %1927
  %1943 = mul nsw <8 x i32> %1935, %1927
  %1944 = mul nsw <8 x i32> %1938, %1927
  %1945 = mul nsw <8 x i32> %1941, %1927
  %1946 = load <8 x i32>, <8 x i32>* %242, align 4, !tbaa !33, !alias.scope !420, !noalias !417
  %1947 = load <8 x i32>, <8 x i32>* %244, align 4, !tbaa !33, !alias.scope !420, !noalias !417
  %1948 = load <8 x i32>, <8 x i32>* %246, align 4, !tbaa !33, !alias.scope !420, !noalias !417
  %1949 = load <8 x i32>, <8 x i32>* %248, align 4, !tbaa !33, !alias.scope !420, !noalias !417
  %1950 = add nsw <8 x i32> %1946, %1942
  %1951 = add nsw <8 x i32> %1947, %1943
  %1952 = add nsw <8 x i32> %1948, %1944
  %1953 = add nsw <8 x i32> %1949, %1945
  store <8 x i32> %1950, <8 x i32>* %249, align 4, !tbaa !33, !alias.scope !420, !noalias !417
  store <8 x i32> %1951, <8 x i32>* %250, align 4, !tbaa !33, !alias.scope !420, !noalias !417
  store <8 x i32> %1952, <8 x i32>* %251, align 4, !tbaa !33, !alias.scope !420, !noalias !417
  store <8 x i32> %1953, <8 x i32>* %252, align 4, !tbaa !33, !alias.scope !420, !noalias !417
  br label %1954

; <label>:1954:                                   ; preds = %1925, %1929
  %1955 = phi i64 [ 32, %1929 ], [ 0, %1925 ]
  br label %1956

; <label>:1956:                                   ; preds = %1954
  br i1 %253, label %2038, label %1957

; <label>:1957:                                   ; preds = %1956
  br label %1958

; <label>:1958:                                   ; preds = %1958, %1957
  %1959 = phi i64 [ %1955, %1957 ], [ %2035, %1958 ]
  %1960 = add i64 %61, %1959
  %1961 = getelementptr inbounds i32, i32* %1836, i64 %1960
  %1962 = bitcast i32* %1961 to <8 x i32>*
  %1963 = load <8 x i32>, <8 x i32>* %1962, align 4, !tbaa !33, !alias.scope !417
  %1964 = getelementptr i32, i32* %1961, i64 8
  %1965 = bitcast i32* %1964 to <8 x i32>*
  %1966 = load <8 x i32>, <8 x i32>* %1965, align 4, !tbaa !33, !alias.scope !417
  %1967 = getelementptr i32, i32* %1961, i64 16
  %1968 = bitcast i32* %1967 to <8 x i32>*
  %1969 = load <8 x i32>, <8 x i32>* %1968, align 4, !tbaa !33, !alias.scope !417
  %1970 = getelementptr i32, i32* %1961, i64 24
  %1971 = bitcast i32* %1970 to <8 x i32>*
  %1972 = load <8 x i32>, <8 x i32>* %1971, align 4, !tbaa !33, !alias.scope !417
  %1973 = mul nsw <8 x i32> %1963, %1927
  %1974 = mul nsw <8 x i32> %1966, %1927
  %1975 = mul nsw <8 x i32> %1969, %1927
  %1976 = mul nsw <8 x i32> %1972, %1927
  %1977 = getelementptr inbounds i32, i32* %4, i64 %1960
  %1978 = bitcast i32* %1977 to <8 x i32>*
  %1979 = load <8 x i32>, <8 x i32>* %1978, align 4, !tbaa !33, !alias.scope !420, !noalias !417
  %1980 = getelementptr i32, i32* %1977, i64 8
  %1981 = bitcast i32* %1980 to <8 x i32>*
  %1982 = load <8 x i32>, <8 x i32>* %1981, align 4, !tbaa !33, !alias.scope !420, !noalias !417
  %1983 = getelementptr i32, i32* %1977, i64 16
  %1984 = bitcast i32* %1983 to <8 x i32>*
  %1985 = load <8 x i32>, <8 x i32>* %1984, align 4, !tbaa !33, !alias.scope !420, !noalias !417
  %1986 = getelementptr i32, i32* %1977, i64 24
  %1987 = bitcast i32* %1986 to <8 x i32>*
  %1988 = load <8 x i32>, <8 x i32>* %1987, align 4, !tbaa !33, !alias.scope !420, !noalias !417
  %1989 = add nsw <8 x i32> %1979, %1973
  %1990 = add nsw <8 x i32> %1982, %1974
  %1991 = add nsw <8 x i32> %1985, %1975
  %1992 = add nsw <8 x i32> %1988, %1976
  %1993 = bitcast i32* %1977 to <8 x i32>*
  store <8 x i32> %1989, <8 x i32>* %1993, align 4, !tbaa !33, !alias.scope !420, !noalias !417
  %1994 = bitcast i32* %1980 to <8 x i32>*
  store <8 x i32> %1990, <8 x i32>* %1994, align 4, !tbaa !33, !alias.scope !420, !noalias !417
  %1995 = bitcast i32* %1983 to <8 x i32>*
  store <8 x i32> %1991, <8 x i32>* %1995, align 4, !tbaa !33, !alias.scope !420, !noalias !417
  %1996 = bitcast i32* %1986 to <8 x i32>*
  store <8 x i32> %1992, <8 x i32>* %1996, align 4, !tbaa !33, !alias.scope !420, !noalias !417
  %1997 = add i64 %1959, 32
  %1998 = add i64 %61, %1997
  %1999 = getelementptr inbounds i32, i32* %1836, i64 %1998
  %2000 = bitcast i32* %1999 to <8 x i32>*
  %2001 = load <8 x i32>, <8 x i32>* %2000, align 4, !tbaa !33, !alias.scope !417
  %2002 = getelementptr i32, i32* %1999, i64 8
  %2003 = bitcast i32* %2002 to <8 x i32>*
  %2004 = load <8 x i32>, <8 x i32>* %2003, align 4, !tbaa !33, !alias.scope !417
  %2005 = getelementptr i32, i32* %1999, i64 16
  %2006 = bitcast i32* %2005 to <8 x i32>*
  %2007 = load <8 x i32>, <8 x i32>* %2006, align 4, !tbaa !33, !alias.scope !417
  %2008 = getelementptr i32, i32* %1999, i64 24
  %2009 = bitcast i32* %2008 to <8 x i32>*
  %2010 = load <8 x i32>, <8 x i32>* %2009, align 4, !tbaa !33, !alias.scope !417
  %2011 = mul nsw <8 x i32> %2001, %1927
  %2012 = mul nsw <8 x i32> %2004, %1927
  %2013 = mul nsw <8 x i32> %2007, %1927
  %2014 = mul nsw <8 x i32> %2010, %1927
  %2015 = getelementptr inbounds i32, i32* %4, i64 %1998
  %2016 = bitcast i32* %2015 to <8 x i32>*
  %2017 = load <8 x i32>, <8 x i32>* %2016, align 4, !tbaa !33, !alias.scope !420, !noalias !417
  %2018 = getelementptr i32, i32* %2015, i64 8
  %2019 = bitcast i32* %2018 to <8 x i32>*
  %2020 = load <8 x i32>, <8 x i32>* %2019, align 4, !tbaa !33, !alias.scope !420, !noalias !417
  %2021 = getelementptr i32, i32* %2015, i64 16
  %2022 = bitcast i32* %2021 to <8 x i32>*
  %2023 = load <8 x i32>, <8 x i32>* %2022, align 4, !tbaa !33, !alias.scope !420, !noalias !417
  %2024 = getelementptr i32, i32* %2015, i64 24
  %2025 = bitcast i32* %2024 to <8 x i32>*
  %2026 = load <8 x i32>, <8 x i32>* %2025, align 4, !tbaa !33, !alias.scope !420, !noalias !417
  %2027 = add nsw <8 x i32> %2017, %2011
  %2028 = add nsw <8 x i32> %2020, %2012
  %2029 = add nsw <8 x i32> %2023, %2013
  %2030 = add nsw <8 x i32> %2026, %2014
  %2031 = bitcast i32* %2015 to <8 x i32>*
  store <8 x i32> %2027, <8 x i32>* %2031, align 4, !tbaa !33, !alias.scope !420, !noalias !417
  %2032 = bitcast i32* %2018 to <8 x i32>*
  store <8 x i32> %2028, <8 x i32>* %2032, align 4, !tbaa !33, !alias.scope !420, !noalias !417
  %2033 = bitcast i32* %2021 to <8 x i32>*
  store <8 x i32> %2029, <8 x i32>* %2033, align 4, !tbaa !33, !alias.scope !420, !noalias !417
  %2034 = bitcast i32* %2024 to <8 x i32>*
  store <8 x i32> %2030, <8 x i32>* %2034, align 4, !tbaa !33, !alias.scope !420, !noalias !417
  %2035 = add i64 %1959, 64
  %2036 = icmp eq i64 %2035, %236
  br i1 %2036, label %2037, label %1958, !llvm.loop !422

; <label>:2037:                                   ; preds = %1958
  br label %2038

; <label>:2038:                                   ; preds = %1956, %2037
  br i1 %254, label %2191, label %1889

; <label>:2039:                                   ; preds = %2039, %1882
  %2040 = phi i64 [ %1881, %1882 ], [ %2112, %2039 ]
  %2041 = getelementptr inbounds i32, i32* %4, i64 %2040
  %2042 = getelementptr inbounds i32, i32* %1836, i64 %2040
  %2043 = bitcast i32* %2042 to <4 x i32>*
  %2044 = load <4 x i32>, <4 x i32>* %2043, align 16, !tbaa !11
  %2045 = bitcast i32* %2041 to <4 x i32>*
  %2046 = load <4 x i32>, <4 x i32>* %2045, align 16, !tbaa !11
  %2047 = mul <4 x i32> %2044, %1832
  %2048 = add <4 x i32> %2046, %2047
  store <4 x i32> %2048, <4 x i32>* %2045, align 16, !tbaa !11
  %2049 = add nsw i64 %2040, 4
  %2050 = getelementptr inbounds i32, i32* %4, i64 %2049
  %2051 = getelementptr inbounds i32, i32* %1836, i64 %2049
  %2052 = bitcast i32* %2051 to <4 x i32>*
  %2053 = load <4 x i32>, <4 x i32>* %2052, align 16, !tbaa !11
  %2054 = bitcast i32* %2050 to <4 x i32>*
  %2055 = load <4 x i32>, <4 x i32>* %2054, align 16, !tbaa !11
  %2056 = mul <4 x i32> %2053, %1832
  %2057 = add <4 x i32> %2055, %2056
  store <4 x i32> %2057, <4 x i32>* %2054, align 16, !tbaa !11
  %2058 = add nsw i64 %2040, 8
  %2059 = getelementptr inbounds i32, i32* %4, i64 %2058
  %2060 = getelementptr inbounds i32, i32* %1836, i64 %2058
  %2061 = bitcast i32* %2060 to <4 x i32>*
  %2062 = load <4 x i32>, <4 x i32>* %2061, align 16, !tbaa !11
  %2063 = bitcast i32* %2059 to <4 x i32>*
  %2064 = load <4 x i32>, <4 x i32>* %2063, align 16, !tbaa !11
  %2065 = mul <4 x i32> %2062, %1832
  %2066 = add <4 x i32> %2064, %2065
  store <4 x i32> %2066, <4 x i32>* %2063, align 16, !tbaa !11
  %2067 = add nsw i64 %2040, 12
  %2068 = getelementptr inbounds i32, i32* %4, i64 %2067
  %2069 = getelementptr inbounds i32, i32* %1836, i64 %2067
  %2070 = bitcast i32* %2069 to <4 x i32>*
  %2071 = load <4 x i32>, <4 x i32>* %2070, align 16, !tbaa !11
  %2072 = bitcast i32* %2068 to <4 x i32>*
  %2073 = load <4 x i32>, <4 x i32>* %2072, align 16, !tbaa !11
  %2074 = mul <4 x i32> %2071, %1832
  %2075 = add <4 x i32> %2073, %2074
  store <4 x i32> %2075, <4 x i32>* %2072, align 16, !tbaa !11
  %2076 = add nsw i64 %2040, 16
  %2077 = getelementptr inbounds i32, i32* %4, i64 %2076
  %2078 = getelementptr inbounds i32, i32* %1836, i64 %2076
  %2079 = bitcast i32* %2078 to <4 x i32>*
  %2080 = load <4 x i32>, <4 x i32>* %2079, align 16, !tbaa !11
  %2081 = bitcast i32* %2077 to <4 x i32>*
  %2082 = load <4 x i32>, <4 x i32>* %2081, align 16, !tbaa !11
  %2083 = mul <4 x i32> %2080, %1832
  %2084 = add <4 x i32> %2082, %2083
  store <4 x i32> %2084, <4 x i32>* %2081, align 16, !tbaa !11
  %2085 = add nsw i64 %2040, 20
  %2086 = getelementptr inbounds i32, i32* %4, i64 %2085
  %2087 = getelementptr inbounds i32, i32* %1836, i64 %2085
  %2088 = bitcast i32* %2087 to <4 x i32>*
  %2089 = load <4 x i32>, <4 x i32>* %2088, align 16, !tbaa !11
  %2090 = bitcast i32* %2086 to <4 x i32>*
  %2091 = load <4 x i32>, <4 x i32>* %2090, align 16, !tbaa !11
  %2092 = mul <4 x i32> %2089, %1832
  %2093 = add <4 x i32> %2091, %2092
  store <4 x i32> %2093, <4 x i32>* %2090, align 16, !tbaa !11
  %2094 = add nsw i64 %2040, 24
  %2095 = getelementptr inbounds i32, i32* %4, i64 %2094
  %2096 = getelementptr inbounds i32, i32* %1836, i64 %2094
  %2097 = bitcast i32* %2096 to <4 x i32>*
  %2098 = load <4 x i32>, <4 x i32>* %2097, align 16, !tbaa !11
  %2099 = bitcast i32* %2095 to <4 x i32>*
  %2100 = load <4 x i32>, <4 x i32>* %2099, align 16, !tbaa !11
  %2101 = mul <4 x i32> %2098, %1832
  %2102 = add <4 x i32> %2100, %2101
  store <4 x i32> %2102, <4 x i32>* %2099, align 16, !tbaa !11
  %2103 = add nsw i64 %2040, 28
  %2104 = getelementptr inbounds i32, i32* %4, i64 %2103
  %2105 = getelementptr inbounds i32, i32* %1836, i64 %2103
  %2106 = bitcast i32* %2105 to <4 x i32>*
  %2107 = load <4 x i32>, <4 x i32>* %2106, align 16, !tbaa !11
  %2108 = bitcast i32* %2104 to <4 x i32>*
  %2109 = load <4 x i32>, <4 x i32>* %2108, align 16, !tbaa !11
  %2110 = mul <4 x i32> %2107, %1832
  %2111 = add <4 x i32> %2109, %2110
  store <4 x i32> %2111, <4 x i32>* %2108, align 16, !tbaa !11
  %2112 = add nsw i64 %2040, 32
  %2113 = icmp slt i64 %2112, %61
  br i1 %2113, label %2039, label %1883

; <label>:2114:                                   ; preds = %2114, %1861
  %2115 = phi i64 [ %1860, %1861 ], [ %2187, %2114 ]
  %2116 = getelementptr inbounds i32, i32* %4, i64 %2115
  %2117 = getelementptr inbounds i32, i32* %1836, i64 %2115
  %2118 = bitcast i32* %2117 to <4 x i32>*
  %2119 = load <4 x i32>, <4 x i32>* %2118, align 1, !tbaa !11
  %2120 = bitcast i32* %2116 to <4 x i32>*
  %2121 = load <4 x i32>, <4 x i32>* %2120, align 16, !tbaa !11
  %2122 = mul <4 x i32> %2119, %1832
  %2123 = add <4 x i32> %2121, %2122
  store <4 x i32> %2123, <4 x i32>* %2120, align 16, !tbaa !11
  %2124 = add nsw i64 %2115, 4
  %2125 = getelementptr inbounds i32, i32* %4, i64 %2124
  %2126 = getelementptr inbounds i32, i32* %1836, i64 %2124
  %2127 = bitcast i32* %2126 to <4 x i32>*
  %2128 = load <4 x i32>, <4 x i32>* %2127, align 1, !tbaa !11
  %2129 = bitcast i32* %2125 to <4 x i32>*
  %2130 = load <4 x i32>, <4 x i32>* %2129, align 16, !tbaa !11
  %2131 = mul <4 x i32> %2128, %1832
  %2132 = add <4 x i32> %2130, %2131
  store <4 x i32> %2132, <4 x i32>* %2129, align 16, !tbaa !11
  %2133 = add nsw i64 %2115, 8
  %2134 = getelementptr inbounds i32, i32* %4, i64 %2133
  %2135 = getelementptr inbounds i32, i32* %1836, i64 %2133
  %2136 = bitcast i32* %2135 to <4 x i32>*
  %2137 = load <4 x i32>, <4 x i32>* %2136, align 1, !tbaa !11
  %2138 = bitcast i32* %2134 to <4 x i32>*
  %2139 = load <4 x i32>, <4 x i32>* %2138, align 16, !tbaa !11
  %2140 = mul <4 x i32> %2137, %1832
  %2141 = add <4 x i32> %2139, %2140
  store <4 x i32> %2141, <4 x i32>* %2138, align 16, !tbaa !11
  %2142 = add nsw i64 %2115, 12
  %2143 = getelementptr inbounds i32, i32* %4, i64 %2142
  %2144 = getelementptr inbounds i32, i32* %1836, i64 %2142
  %2145 = bitcast i32* %2144 to <4 x i32>*
  %2146 = load <4 x i32>, <4 x i32>* %2145, align 1, !tbaa !11
  %2147 = bitcast i32* %2143 to <4 x i32>*
  %2148 = load <4 x i32>, <4 x i32>* %2147, align 16, !tbaa !11
  %2149 = mul <4 x i32> %2146, %1832
  %2150 = add <4 x i32> %2148, %2149
  store <4 x i32> %2150, <4 x i32>* %2147, align 16, !tbaa !11
  %2151 = add nsw i64 %2115, 16
  %2152 = getelementptr inbounds i32, i32* %4, i64 %2151
  %2153 = getelementptr inbounds i32, i32* %1836, i64 %2151
  %2154 = bitcast i32* %2153 to <4 x i32>*
  %2155 = load <4 x i32>, <4 x i32>* %2154, align 1, !tbaa !11
  %2156 = bitcast i32* %2152 to <4 x i32>*
  %2157 = load <4 x i32>, <4 x i32>* %2156, align 16, !tbaa !11
  %2158 = mul <4 x i32> %2155, %1832
  %2159 = add <4 x i32> %2157, %2158
  store <4 x i32> %2159, <4 x i32>* %2156, align 16, !tbaa !11
  %2160 = add nsw i64 %2115, 20
  %2161 = getelementptr inbounds i32, i32* %4, i64 %2160
  %2162 = getelementptr inbounds i32, i32* %1836, i64 %2160
  %2163 = bitcast i32* %2162 to <4 x i32>*
  %2164 = load <4 x i32>, <4 x i32>* %2163, align 1, !tbaa !11
  %2165 = bitcast i32* %2161 to <4 x i32>*
  %2166 = load <4 x i32>, <4 x i32>* %2165, align 16, !tbaa !11
  %2167 = mul <4 x i32> %2164, %1832
  %2168 = add <4 x i32> %2166, %2167
  store <4 x i32> %2168, <4 x i32>* %2165, align 16, !tbaa !11
  %2169 = add nsw i64 %2115, 24
  %2170 = getelementptr inbounds i32, i32* %4, i64 %2169
  %2171 = getelementptr inbounds i32, i32* %1836, i64 %2169
  %2172 = bitcast i32* %2171 to <4 x i32>*
  %2173 = load <4 x i32>, <4 x i32>* %2172, align 1, !tbaa !11
  %2174 = bitcast i32* %2170 to <4 x i32>*
  %2175 = load <4 x i32>, <4 x i32>* %2174, align 16, !tbaa !11
  %2176 = mul <4 x i32> %2173, %1832
  %2177 = add <4 x i32> %2175, %2176
  store <4 x i32> %2177, <4 x i32>* %2174, align 16, !tbaa !11
  %2178 = add nsw i64 %2115, 28
  %2179 = getelementptr inbounds i32, i32* %4, i64 %2178
  %2180 = getelementptr inbounds i32, i32* %1836, i64 %2178
  %2181 = bitcast i32* %2180 to <4 x i32>*
  %2182 = load <4 x i32>, <4 x i32>* %2181, align 1, !tbaa !11
  %2183 = bitcast i32* %2179 to <4 x i32>*
  %2184 = load <4 x i32>, <4 x i32>* %2183, align 16, !tbaa !11
  %2185 = mul <4 x i32> %2182, %1832
  %2186 = add <4 x i32> %2184, %2185
  store <4 x i32> %2186, <4 x i32>* %2183, align 16, !tbaa !11
  %2187 = add nsw i64 %2115, 32
  %2188 = icmp slt i64 %2187, %61
  br i1 %2188, label %2114, label %1885

; <label>:2189:                                   ; preds = %2195
  br label %2190

; <label>:2190:                                   ; preds = %1909, %2189
  br label %2191

; <label>:2191:                                   ; preds = %2190, %2038, %1887
  %2192 = add nsw i64 %1822, 1
  %2193 = icmp eq i64 %2192, %1167
  %2194 = add i64 %1821, 1
  br i1 %2193, label %1817, label %1820

; <label>:2195:                                   ; preds = %2195, %1912
  %2196 = phi i64 [ %1910, %1912 ], [ %2252, %2195 ]
  %2197 = getelementptr inbounds i32, i32* %1836, i64 %2196
  %2198 = load i32, i32* %2197, align 4, !tbaa !33
  %2199 = mul nsw i32 %2198, %1830
  %2200 = getelementptr inbounds i32, i32* %4, i64 %2196
  %2201 = load i32, i32* %2200, align 4, !tbaa !33
  %2202 = add nsw i32 %2201, %2199
  store i32 %2202, i32* %2200, align 4, !tbaa !33
  %2203 = add nsw i64 %2196, 1
  %2204 = getelementptr inbounds i32, i32* %1836, i64 %2203
  %2205 = load i32, i32* %2204, align 4, !tbaa !33
  %2206 = mul nsw i32 %2205, %1830
  %2207 = getelementptr inbounds i32, i32* %4, i64 %2203
  %2208 = load i32, i32* %2207, align 4, !tbaa !33
  %2209 = add nsw i32 %2208, %2206
  store i32 %2209, i32* %2207, align 4, !tbaa !33
  %2210 = add nsw i64 %2196, 2
  %2211 = getelementptr inbounds i32, i32* %1836, i64 %2210
  %2212 = load i32, i32* %2211, align 4, !tbaa !33
  %2213 = mul nsw i32 %2212, %1830
  %2214 = getelementptr inbounds i32, i32* %4, i64 %2210
  %2215 = load i32, i32* %2214, align 4, !tbaa !33
  %2216 = add nsw i32 %2215, %2213
  store i32 %2216, i32* %2214, align 4, !tbaa !33
  %2217 = add nsw i64 %2196, 3
  %2218 = getelementptr inbounds i32, i32* %1836, i64 %2217
  %2219 = load i32, i32* %2218, align 4, !tbaa !33
  %2220 = mul nsw i32 %2219, %1830
  %2221 = getelementptr inbounds i32, i32* %4, i64 %2217
  %2222 = load i32, i32* %2221, align 4, !tbaa !33
  %2223 = add nsw i32 %2222, %2220
  store i32 %2223, i32* %2221, align 4, !tbaa !33
  %2224 = add nsw i64 %2196, 4
  %2225 = getelementptr inbounds i32, i32* %1836, i64 %2224
  %2226 = load i32, i32* %2225, align 4, !tbaa !33
  %2227 = mul nsw i32 %2226, %1830
  %2228 = getelementptr inbounds i32, i32* %4, i64 %2224
  %2229 = load i32, i32* %2228, align 4, !tbaa !33
  %2230 = add nsw i32 %2229, %2227
  store i32 %2230, i32* %2228, align 4, !tbaa !33
  %2231 = add nsw i64 %2196, 5
  %2232 = getelementptr inbounds i32, i32* %1836, i64 %2231
  %2233 = load i32, i32* %2232, align 4, !tbaa !33
  %2234 = mul nsw i32 %2233, %1830
  %2235 = getelementptr inbounds i32, i32* %4, i64 %2231
  %2236 = load i32, i32* %2235, align 4, !tbaa !33
  %2237 = add nsw i32 %2236, %2234
  store i32 %2237, i32* %2235, align 4, !tbaa !33
  %2238 = add nsw i64 %2196, 6
  %2239 = getelementptr inbounds i32, i32* %1836, i64 %2238
  %2240 = load i32, i32* %2239, align 4, !tbaa !33
  %2241 = mul nsw i32 %2240, %1830
  %2242 = getelementptr inbounds i32, i32* %4, i64 %2238
  %2243 = load i32, i32* %2242, align 4, !tbaa !33
  %2244 = add nsw i32 %2243, %2241
  store i32 %2244, i32* %2242, align 4, !tbaa !33
  %2245 = add nsw i64 %2196, 7
  %2246 = getelementptr inbounds i32, i32* %1836, i64 %2245
  %2247 = load i32, i32* %2246, align 4, !tbaa !33
  %2248 = mul nsw i32 %2247, %1830
  %2249 = getelementptr inbounds i32, i32* %4, i64 %2245
  %2250 = load i32, i32* %2249, align 4, !tbaa !33
  %2251 = add nsw i32 %2250, %2248
  store i32 %2251, i32* %2249, align 4, !tbaa !33
  %2252 = add nsw i64 %2196, 8
  %2253 = icmp eq i64 %2252, %0
  br i1 %2253, label %2189, label %2195, !llvm.loop !423

; <label>:2254:                                   ; preds = %1818
  ret void

; <label>:2255:                                   ; preds = %50
  %2256 = shl nuw nsw i64 %27, 1
  %2257 = add nsw i64 %2256, %42
  %2258 = srem i64 %2257, 4
  %2259 = icmp eq i64 %21, %2258
  br i1 %2259, label %54, label %2260

; <label>:2260:                                   ; preds = %2255
  %2261 = mul nuw nsw i64 %27, 3
  %2262 = add nsw i64 %2261, %42
  %2263 = srem i64 %2262, 4
  %2264 = icmp eq i64 %21, %2263
  br i1 %2264, label %54, label %58
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal15call_assignmentINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEENS_7ProductINS_9TransposeINS2_IiLi47ELi1ELi0ELi47ELi1EEEEENS5_INS2_IiLin1ELi47ELi0ELin1ELi47EEEEELi0EEENS0_13add_assign_opIiiEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsr25evaluator_assume_aliasingISF_EE5valueEPvE4typeE(%"class.Eigen::Matrix.170"* dereferenceable(16), %"class.Eigen::Product.234"* dereferenceable(16), %"struct.Eigen::internal::add_assign_op"* dereferenceable(1), i8*) local_unnamed_addr #6 {
  %5 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %6 = alloca %"class.Eigen::Matrix.724", align 8
  %7 = bitcast %"class.Eigen::Matrix.724"* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %7) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %7, i8 0, i64 16, i32 8, i1 false) #11
  %8 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %5, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %8) #11
  call void @_ZN5Eigen8internal10AssignmentINS_6MatrixIiLi1ELin1ELi1ELi1ELin1EEENS_7ProductINS_9TransposeINS2_IiLi47ELi1ELi0ELi47ELi1EEEEENS5_INS2_IiLin1ELi47ELi0ELin1ELi47EEEEELi0EEENS0_9assign_opIiiEENS0_11Dense2DenseEvE3runERS3_RKSA_RKSC_(%"class.Eigen::Matrix.724"* nonnull dereferenceable(16) %6, %"class.Eigen::Product.234"* nonnull dereferenceable(16) %1, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %5) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %8) #11
  %9 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %0, i64 0, i32 0, i32 0, i32 0
  %10 = load i32*, i32** %9, align 8, !tbaa !44
  %11 = getelementptr inbounds %"class.Eigen::Matrix.724", %"class.Eigen::Matrix.724"* %6, i64 0, i32 0, i32 0, i32 0
  %12 = load i32*, i32** %11, align 8
  %13 = icmp eq i32* %12, %10
  %14 = icmp ne i32* %10, null
  %15 = and i1 %14, %13
  br i1 %15, label %16, label %17, !prof !50

; <label>:16:                                     ; preds = %4
  call void @__assert_rtn(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__func__._ZN5Eigen8internal10redux_implINS0_17scalar_product_opIiiEENS0_15redux_evaluatorINS_6MatrixIiLi6ELi1ELi0ELi6ELi1EEEEELi3ELi2EE3runERKS7_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.31, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([275 x i8], [275 x i8]* @.str.32, i64 0, i64 0)) #13
  unreachable

; <label>:17:                                     ; preds = %4
  %18 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %0, i64 0, i32 0, i32 0, i32 1
  %19 = load i64, i64* %18, align 8, !tbaa !46
  %20 = getelementptr inbounds %"class.Eigen::Matrix.724", %"class.Eigen::Matrix.724"* %6, i64 0, i32 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8, !tbaa !424
  %22 = icmp eq i64 %19, %21
  br i1 %22, label %24, label %23, !prof !10

; <label>:23:                                     ; preds = %17
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__._ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEENS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES3_EEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.15, i64 0, i64 0), i32 710, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.29, i64 0, i64 0)) #13
  unreachable

; <label>:24:                                     ; preds = %17
  %25 = sdiv i64 %19, 4
  %26 = shl nsw i64 %25, 2
  %27 = icmp sgt i64 %19, 3
  br i1 %27, label %28, label %57

; <label>:28:                                     ; preds = %24
  %29 = icmp sgt i64 %26, 4
  %30 = select i1 %29, i64 %26, i64 4
  %31 = add nsw i64 %30, -1
  %32 = lshr i64 %31, 2
  %33 = add nuw nsw i64 %32, 1
  %34 = and i64 %33, 7
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %51, label %36

; <label>:36:                                     ; preds = %28
  br label %37

; <label>:37:                                     ; preds = %37, %36
  %38 = phi i64 [ %47, %37 ], [ 0, %36 ]
  %39 = phi i64 [ %48, %37 ], [ %34, %36 ]
  %40 = getelementptr inbounds i32, i32* %10, i64 %38
  %41 = getelementptr inbounds i32, i32* %12, i64 %38
  %42 = bitcast i32* %41 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 16, !tbaa !11
  %44 = bitcast i32* %40 to <4 x i32>*
  %45 = load <4 x i32>, <4 x i32>* %44, align 16, !tbaa !11
  %46 = add <4 x i32> %45, %43
  store <4 x i32> %46, <4 x i32>* %44, align 16, !tbaa !11
  %47 = add nuw nsw i64 %38, 4
  %48 = add i64 %39, -1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %37, !llvm.loop !425

; <label>:50:                                     ; preds = %37
  br label %51

; <label>:51:                                     ; preds = %28, %50
  %52 = phi i64 [ 0, %28 ], [ %47, %50 ]
  %53 = icmp ult i64 %31, 28
  br i1 %53, label %56, label %54

; <label>:54:                                     ; preds = %51
  br label %266

; <label>:55:                                     ; preds = %266
  br label %56

; <label>:56:                                     ; preds = %51, %55
  br label %57

; <label>:57:                                     ; preds = %56, %24
  %58 = icmp sgt i64 %19, %26
  br i1 %58, label %59, label %335

; <label>:59:                                     ; preds = %57
  %60 = sub i64 %19, %26
  %61 = icmp ult i64 %60, 32
  br i1 %61, label %191, label %62

; <label>:62:                                     ; preds = %59
  %63 = and i64 %60, -32
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %191, label %65

; <label>:65:                                     ; preds = %62
  %66 = getelementptr i32, i32* %10, i64 %26
  %67 = getelementptr i32, i32* %10, i64 %19
  %68 = getelementptr i32, i32* %12, i64 %26
  %69 = getelementptr i32, i32* %12, i64 %19
  %70 = icmp ult i32* %66, %69
  %71 = icmp ult i32* %68, %67
  %72 = and i1 %70, %71
  %73 = add i64 %26, %63
  br i1 %72, label %191, label %74

; <label>:74:                                     ; preds = %65
  %75 = add i64 %63, -32
  %76 = lshr exact i64 %75, 5
  %77 = and i64 %76, 1
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %113

; <label>:79:                                     ; preds = %74
  br label %80

; <label>:80:                                     ; preds = %79
  %81 = getelementptr inbounds i32, i32* %10, i64 %26
  %82 = getelementptr inbounds i32, i32* %12, i64 %26
  %83 = bitcast i32* %82 to <8 x i32>*
  %84 = load <8 x i32>, <8 x i32>* %83, align 4, !tbaa !33, !alias.scope !426
  %85 = getelementptr i32, i32* %82, i64 8
  %86 = bitcast i32* %85 to <8 x i32>*
  %87 = load <8 x i32>, <8 x i32>* %86, align 4, !tbaa !33, !alias.scope !426
  %88 = getelementptr i32, i32* %82, i64 16
  %89 = bitcast i32* %88 to <8 x i32>*
  %90 = load <8 x i32>, <8 x i32>* %89, align 4, !tbaa !33, !alias.scope !426
  %91 = getelementptr i32, i32* %82, i64 24
  %92 = bitcast i32* %91 to <8 x i32>*
  %93 = load <8 x i32>, <8 x i32>* %92, align 4, !tbaa !33, !alias.scope !426
  %94 = bitcast i32* %81 to <8 x i32>*
  %95 = load <8 x i32>, <8 x i32>* %94, align 4, !tbaa !33, !alias.scope !429, !noalias !426
  %96 = getelementptr i32, i32* %81, i64 8
  %97 = bitcast i32* %96 to <8 x i32>*
  %98 = load <8 x i32>, <8 x i32>* %97, align 4, !tbaa !33, !alias.scope !429, !noalias !426
  %99 = getelementptr i32, i32* %81, i64 16
  %100 = bitcast i32* %99 to <8 x i32>*
  %101 = load <8 x i32>, <8 x i32>* %100, align 4, !tbaa !33, !alias.scope !429, !noalias !426
  %102 = getelementptr i32, i32* %81, i64 24
  %103 = bitcast i32* %102 to <8 x i32>*
  %104 = load <8 x i32>, <8 x i32>* %103, align 4, !tbaa !33, !alias.scope !429, !noalias !426
  %105 = add nsw <8 x i32> %95, %84
  %106 = add nsw <8 x i32> %98, %87
  %107 = add nsw <8 x i32> %101, %90
  %108 = add nsw <8 x i32> %104, %93
  %109 = bitcast i32* %81 to <8 x i32>*
  store <8 x i32> %105, <8 x i32>* %109, align 4, !tbaa !33, !alias.scope !429, !noalias !426
  %110 = bitcast i32* %96 to <8 x i32>*
  store <8 x i32> %106, <8 x i32>* %110, align 4, !tbaa !33, !alias.scope !429, !noalias !426
  %111 = bitcast i32* %99 to <8 x i32>*
  store <8 x i32> %107, <8 x i32>* %111, align 4, !tbaa !33, !alias.scope !429, !noalias !426
  %112 = bitcast i32* %102 to <8 x i32>*
  store <8 x i32> %108, <8 x i32>* %112, align 4, !tbaa !33, !alias.scope !429, !noalias !426
  br label %113

; <label>:113:                                    ; preds = %80, %74
  %114 = phi i64 [ 0, %74 ], [ 32, %80 ]
  %115 = icmp eq i64 %76, 0
  br i1 %115, label %189, label %116

; <label>:116:                                    ; preds = %113
  br label %117

; <label>:117:                                    ; preds = %117, %116
  %118 = phi i64 [ %114, %116 ], [ %186, %117 ]
  %119 = add i64 %26, %118
  %120 = getelementptr inbounds i32, i32* %10, i64 %119
  %121 = getelementptr inbounds i32, i32* %12, i64 %119
  %122 = bitcast i32* %121 to <8 x i32>*
  %123 = load <8 x i32>, <8 x i32>* %122, align 4, !tbaa !33, !alias.scope !426
  %124 = getelementptr i32, i32* %121, i64 8
  %125 = bitcast i32* %124 to <8 x i32>*
  %126 = load <8 x i32>, <8 x i32>* %125, align 4, !tbaa !33, !alias.scope !426
  %127 = getelementptr i32, i32* %121, i64 16
  %128 = bitcast i32* %127 to <8 x i32>*
  %129 = load <8 x i32>, <8 x i32>* %128, align 4, !tbaa !33, !alias.scope !426
  %130 = getelementptr i32, i32* %121, i64 24
  %131 = bitcast i32* %130 to <8 x i32>*
  %132 = load <8 x i32>, <8 x i32>* %131, align 4, !tbaa !33, !alias.scope !426
  %133 = bitcast i32* %120 to <8 x i32>*
  %134 = load <8 x i32>, <8 x i32>* %133, align 4, !tbaa !33, !alias.scope !429, !noalias !426
  %135 = getelementptr i32, i32* %120, i64 8
  %136 = bitcast i32* %135 to <8 x i32>*
  %137 = load <8 x i32>, <8 x i32>* %136, align 4, !tbaa !33, !alias.scope !429, !noalias !426
  %138 = getelementptr i32, i32* %120, i64 16
  %139 = bitcast i32* %138 to <8 x i32>*
  %140 = load <8 x i32>, <8 x i32>* %139, align 4, !tbaa !33, !alias.scope !429, !noalias !426
  %141 = getelementptr i32, i32* %120, i64 24
  %142 = bitcast i32* %141 to <8 x i32>*
  %143 = load <8 x i32>, <8 x i32>* %142, align 4, !tbaa !33, !alias.scope !429, !noalias !426
  %144 = add nsw <8 x i32> %134, %123
  %145 = add nsw <8 x i32> %137, %126
  %146 = add nsw <8 x i32> %140, %129
  %147 = add nsw <8 x i32> %143, %132
  %148 = bitcast i32* %120 to <8 x i32>*
  store <8 x i32> %144, <8 x i32>* %148, align 4, !tbaa !33, !alias.scope !429, !noalias !426
  %149 = bitcast i32* %135 to <8 x i32>*
  store <8 x i32> %145, <8 x i32>* %149, align 4, !tbaa !33, !alias.scope !429, !noalias !426
  %150 = bitcast i32* %138 to <8 x i32>*
  store <8 x i32> %146, <8 x i32>* %150, align 4, !tbaa !33, !alias.scope !429, !noalias !426
  %151 = bitcast i32* %141 to <8 x i32>*
  store <8 x i32> %147, <8 x i32>* %151, align 4, !tbaa !33, !alias.scope !429, !noalias !426
  %152 = add i64 %118, 32
  %153 = add i64 %26, %152
  %154 = getelementptr inbounds i32, i32* %10, i64 %153
  %155 = getelementptr inbounds i32, i32* %12, i64 %153
  %156 = bitcast i32* %155 to <8 x i32>*
  %157 = load <8 x i32>, <8 x i32>* %156, align 4, !tbaa !33, !alias.scope !426
  %158 = getelementptr i32, i32* %155, i64 8
  %159 = bitcast i32* %158 to <8 x i32>*
  %160 = load <8 x i32>, <8 x i32>* %159, align 4, !tbaa !33, !alias.scope !426
  %161 = getelementptr i32, i32* %155, i64 16
  %162 = bitcast i32* %161 to <8 x i32>*
  %163 = load <8 x i32>, <8 x i32>* %162, align 4, !tbaa !33, !alias.scope !426
  %164 = getelementptr i32, i32* %155, i64 24
  %165 = bitcast i32* %164 to <8 x i32>*
  %166 = load <8 x i32>, <8 x i32>* %165, align 4, !tbaa !33, !alias.scope !426
  %167 = bitcast i32* %154 to <8 x i32>*
  %168 = load <8 x i32>, <8 x i32>* %167, align 4, !tbaa !33, !alias.scope !429, !noalias !426
  %169 = getelementptr i32, i32* %154, i64 8
  %170 = bitcast i32* %169 to <8 x i32>*
  %171 = load <8 x i32>, <8 x i32>* %170, align 4, !tbaa !33, !alias.scope !429, !noalias !426
  %172 = getelementptr i32, i32* %154, i64 16
  %173 = bitcast i32* %172 to <8 x i32>*
  %174 = load <8 x i32>, <8 x i32>* %173, align 4, !tbaa !33, !alias.scope !429, !noalias !426
  %175 = getelementptr i32, i32* %154, i64 24
  %176 = bitcast i32* %175 to <8 x i32>*
  %177 = load <8 x i32>, <8 x i32>* %176, align 4, !tbaa !33, !alias.scope !429, !noalias !426
  %178 = add nsw <8 x i32> %168, %157
  %179 = add nsw <8 x i32> %171, %160
  %180 = add nsw <8 x i32> %174, %163
  %181 = add nsw <8 x i32> %177, %166
  %182 = bitcast i32* %154 to <8 x i32>*
  store <8 x i32> %178, <8 x i32>* %182, align 4, !tbaa !33, !alias.scope !429, !noalias !426
  %183 = bitcast i32* %169 to <8 x i32>*
  store <8 x i32> %179, <8 x i32>* %183, align 4, !tbaa !33, !alias.scope !429, !noalias !426
  %184 = bitcast i32* %172 to <8 x i32>*
  store <8 x i32> %180, <8 x i32>* %184, align 4, !tbaa !33, !alias.scope !429, !noalias !426
  %185 = bitcast i32* %175 to <8 x i32>*
  store <8 x i32> %181, <8 x i32>* %185, align 4, !tbaa !33, !alias.scope !429, !noalias !426
  %186 = add i64 %118, 64
  %187 = icmp eq i64 %186, %63
  br i1 %187, label %188, label %117, !llvm.loop !431

; <label>:188:                                    ; preds = %117
  br label %189

; <label>:189:                                    ; preds = %113, %188
  %190 = icmp eq i64 %60, %63
  br i1 %190, label %335, label %191

; <label>:191:                                    ; preds = %189, %65, %62, %59
  %192 = phi i64 [ %26, %65 ], [ %26, %62 ], [ %26, %59 ], [ %73, %189 ]
  %193 = sub i64 %19, %192
  %194 = add i64 %19, -1
  %195 = sub i64 %194, %192
  %196 = and i64 %193, 7
  %197 = icmp eq i64 %196, 0
  br i1 %197, label %211, label %198

; <label>:198:                                    ; preds = %191
  br label %199

; <label>:199:                                    ; preds = %199, %198
  %200 = phi i64 [ %207, %199 ], [ %192, %198 ]
  %201 = phi i64 [ %208, %199 ], [ %196, %198 ]
  %202 = getelementptr inbounds i32, i32* %10, i64 %200
  %203 = getelementptr inbounds i32, i32* %12, i64 %200
  %204 = load i32, i32* %203, align 4, !tbaa !33
  %205 = load i32, i32* %202, align 4, !tbaa !33
  %206 = add nsw i32 %205, %204
  store i32 %206, i32* %202, align 4, !tbaa !33
  %207 = add nsw i64 %200, 1
  %208 = add i64 %201, -1
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %210, label %199, !llvm.loop !432

; <label>:210:                                    ; preds = %199
  br label %211

; <label>:211:                                    ; preds = %191, %210
  %212 = phi i64 [ %192, %191 ], [ %207, %210 ]
  %213 = icmp ult i64 %195, 7
  br i1 %213, label %334, label %214

; <label>:214:                                    ; preds = %211
  br label %215

; <label>:215:                                    ; preds = %215, %214
  %216 = phi i64 [ %212, %214 ], [ %264, %215 ]
  %217 = getelementptr inbounds i32, i32* %10, i64 %216
  %218 = getelementptr inbounds i32, i32* %12, i64 %216
  %219 = load i32, i32* %218, align 4, !tbaa !33
  %220 = load i32, i32* %217, align 4, !tbaa !33
  %221 = add nsw i32 %220, %219
  store i32 %221, i32* %217, align 4, !tbaa !33
  %222 = add nsw i64 %216, 1
  %223 = getelementptr inbounds i32, i32* %10, i64 %222
  %224 = getelementptr inbounds i32, i32* %12, i64 %222
  %225 = load i32, i32* %224, align 4, !tbaa !33
  %226 = load i32, i32* %223, align 4, !tbaa !33
  %227 = add nsw i32 %226, %225
  store i32 %227, i32* %223, align 4, !tbaa !33
  %228 = add nsw i64 %216, 2
  %229 = getelementptr inbounds i32, i32* %10, i64 %228
  %230 = getelementptr inbounds i32, i32* %12, i64 %228
  %231 = load i32, i32* %230, align 4, !tbaa !33
  %232 = load i32, i32* %229, align 4, !tbaa !33
  %233 = add nsw i32 %232, %231
  store i32 %233, i32* %229, align 4, !tbaa !33
  %234 = add nsw i64 %216, 3
  %235 = getelementptr inbounds i32, i32* %10, i64 %234
  %236 = getelementptr inbounds i32, i32* %12, i64 %234
  %237 = load i32, i32* %236, align 4, !tbaa !33
  %238 = load i32, i32* %235, align 4, !tbaa !33
  %239 = add nsw i32 %238, %237
  store i32 %239, i32* %235, align 4, !tbaa !33
  %240 = add nsw i64 %216, 4
  %241 = getelementptr inbounds i32, i32* %10, i64 %240
  %242 = getelementptr inbounds i32, i32* %12, i64 %240
  %243 = load i32, i32* %242, align 4, !tbaa !33
  %244 = load i32, i32* %241, align 4, !tbaa !33
  %245 = add nsw i32 %244, %243
  store i32 %245, i32* %241, align 4, !tbaa !33
  %246 = add nsw i64 %216, 5
  %247 = getelementptr inbounds i32, i32* %10, i64 %246
  %248 = getelementptr inbounds i32, i32* %12, i64 %246
  %249 = load i32, i32* %248, align 4, !tbaa !33
  %250 = load i32, i32* %247, align 4, !tbaa !33
  %251 = add nsw i32 %250, %249
  store i32 %251, i32* %247, align 4, !tbaa !33
  %252 = add nsw i64 %216, 6
  %253 = getelementptr inbounds i32, i32* %10, i64 %252
  %254 = getelementptr inbounds i32, i32* %12, i64 %252
  %255 = load i32, i32* %254, align 4, !tbaa !33
  %256 = load i32, i32* %253, align 4, !tbaa !33
  %257 = add nsw i32 %256, %255
  store i32 %257, i32* %253, align 4, !tbaa !33
  %258 = add nsw i64 %216, 7
  %259 = getelementptr inbounds i32, i32* %10, i64 %258
  %260 = getelementptr inbounds i32, i32* %12, i64 %258
  %261 = load i32, i32* %260, align 4, !tbaa !33
  %262 = load i32, i32* %259, align 4, !tbaa !33
  %263 = add nsw i32 %262, %261
  store i32 %263, i32* %259, align 4, !tbaa !33
  %264 = add nsw i64 %216, 8
  %265 = icmp eq i64 %264, %19
  br i1 %265, label %333, label %215, !llvm.loop !433

; <label>:266:                                    ; preds = %266, %54
  %267 = phi i64 [ %52, %54 ], [ %331, %266 ]
  %268 = getelementptr inbounds i32, i32* %10, i64 %267
  %269 = getelementptr inbounds i32, i32* %12, i64 %267
  %270 = bitcast i32* %269 to <4 x i32>*
  %271 = load <4 x i32>, <4 x i32>* %270, align 16, !tbaa !11
  %272 = bitcast i32* %268 to <4 x i32>*
  %273 = load <4 x i32>, <4 x i32>* %272, align 16, !tbaa !11
  %274 = add <4 x i32> %273, %271
  store <4 x i32> %274, <4 x i32>* %272, align 16, !tbaa !11
  %275 = add nuw nsw i64 %267, 4
  %276 = getelementptr inbounds i32, i32* %10, i64 %275
  %277 = getelementptr inbounds i32, i32* %12, i64 %275
  %278 = bitcast i32* %277 to <4 x i32>*
  %279 = load <4 x i32>, <4 x i32>* %278, align 16, !tbaa !11
  %280 = bitcast i32* %276 to <4 x i32>*
  %281 = load <4 x i32>, <4 x i32>* %280, align 16, !tbaa !11
  %282 = add <4 x i32> %281, %279
  store <4 x i32> %282, <4 x i32>* %280, align 16, !tbaa !11
  %283 = add nsw i64 %267, 8
  %284 = getelementptr inbounds i32, i32* %10, i64 %283
  %285 = getelementptr inbounds i32, i32* %12, i64 %283
  %286 = bitcast i32* %285 to <4 x i32>*
  %287 = load <4 x i32>, <4 x i32>* %286, align 16, !tbaa !11
  %288 = bitcast i32* %284 to <4 x i32>*
  %289 = load <4 x i32>, <4 x i32>* %288, align 16, !tbaa !11
  %290 = add <4 x i32> %289, %287
  store <4 x i32> %290, <4 x i32>* %288, align 16, !tbaa !11
  %291 = add nsw i64 %267, 12
  %292 = getelementptr inbounds i32, i32* %10, i64 %291
  %293 = getelementptr inbounds i32, i32* %12, i64 %291
  %294 = bitcast i32* %293 to <4 x i32>*
  %295 = load <4 x i32>, <4 x i32>* %294, align 16, !tbaa !11
  %296 = bitcast i32* %292 to <4 x i32>*
  %297 = load <4 x i32>, <4 x i32>* %296, align 16, !tbaa !11
  %298 = add <4 x i32> %297, %295
  store <4 x i32> %298, <4 x i32>* %296, align 16, !tbaa !11
  %299 = add nsw i64 %267, 16
  %300 = getelementptr inbounds i32, i32* %10, i64 %299
  %301 = getelementptr inbounds i32, i32* %12, i64 %299
  %302 = bitcast i32* %301 to <4 x i32>*
  %303 = load <4 x i32>, <4 x i32>* %302, align 16, !tbaa !11
  %304 = bitcast i32* %300 to <4 x i32>*
  %305 = load <4 x i32>, <4 x i32>* %304, align 16, !tbaa !11
  %306 = add <4 x i32> %305, %303
  store <4 x i32> %306, <4 x i32>* %304, align 16, !tbaa !11
  %307 = add nsw i64 %267, 20
  %308 = getelementptr inbounds i32, i32* %10, i64 %307
  %309 = getelementptr inbounds i32, i32* %12, i64 %307
  %310 = bitcast i32* %309 to <4 x i32>*
  %311 = load <4 x i32>, <4 x i32>* %310, align 16, !tbaa !11
  %312 = bitcast i32* %308 to <4 x i32>*
  %313 = load <4 x i32>, <4 x i32>* %312, align 16, !tbaa !11
  %314 = add <4 x i32> %313, %311
  store <4 x i32> %314, <4 x i32>* %312, align 16, !tbaa !11
  %315 = add nsw i64 %267, 24
  %316 = getelementptr inbounds i32, i32* %10, i64 %315
  %317 = getelementptr inbounds i32, i32* %12, i64 %315
  %318 = bitcast i32* %317 to <4 x i32>*
  %319 = load <4 x i32>, <4 x i32>* %318, align 16, !tbaa !11
  %320 = bitcast i32* %316 to <4 x i32>*
  %321 = load <4 x i32>, <4 x i32>* %320, align 16, !tbaa !11
  %322 = add <4 x i32> %321, %319
  store <4 x i32> %322, <4 x i32>* %320, align 16, !tbaa !11
  %323 = add nsw i64 %267, 28
  %324 = getelementptr inbounds i32, i32* %10, i64 %323
  %325 = getelementptr inbounds i32, i32* %12, i64 %323
  %326 = bitcast i32* %325 to <4 x i32>*
  %327 = load <4 x i32>, <4 x i32>* %326, align 16, !tbaa !11
  %328 = bitcast i32* %324 to <4 x i32>*
  %329 = load <4 x i32>, <4 x i32>* %328, align 16, !tbaa !11
  %330 = add <4 x i32> %329, %327
  store <4 x i32> %330, <4 x i32>* %328, align 16, !tbaa !11
  %331 = add nsw i64 %267, 32
  %332 = icmp slt i64 %331, %26
  br i1 %332, label %266, label %55

; <label>:333:                                    ; preds = %215
  br label %334

; <label>:334:                                    ; preds = %211, %333
  br label %335

; <label>:335:                                    ; preds = %334, %189, %57
  %336 = load i32*, i32** %11, align 8, !tbaa !197
  %337 = icmp eq i32* %336, null
  br i1 %337, label %342, label %338

; <label>:338:                                    ; preds = %335
  %339 = getelementptr inbounds i32, i32* %336, i64 -2
  %340 = bitcast i32* %339 to i8**
  %341 = load i8*, i8** %340, align 8, !tbaa !29
  call void @free(i8* %341) #11
  br label %342

; <label>:342:                                    ; preds = %335, %338
  call void @llvm.lifetime.end(i64 16, i8* nonnull %7) #11
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal10AssignmentINS_6MatrixIiLi1ELin1ELi1ELi1ELin1EEENS_7ProductINS_9TransposeINS2_IiLi47ELi1ELi0ELi47ELi1EEEEENS5_INS2_IiLin1ELi47ELi0ELin1ELi47EEEEELi0EEENS0_9assign_opIiiEENS0_11Dense2DenseEvE3runERS3_RKSA_RKSC_(%"class.Eigen::Matrix.724"* dereferenceable(16), %"class.Eigen::Product.234"* dereferenceable(16), %"struct.Eigen::internal::assign_op.512"* dereferenceable(1)) local_unnamed_addr #6 align 2 {
  %4 = alloca %"class.Eigen::internal::const_blas_data_mapper.717", align 8
  %5 = alloca %"class.Eigen::internal::const_blas_data_mapper.719", align 8
  %6 = getelementptr inbounds %"class.Eigen::Product.234", %"class.Eigen::Product.234"* %1, i64 0, i32 1
  %7 = bitcast %"class.Eigen::Transpose.247"* %6 to %"class.Eigen::PlainObjectBase.33"**
  %8 = load %"class.Eigen::PlainObjectBase.33"*, %"class.Eigen::PlainObjectBase.33"** %7, align 8, !tbaa !11
  %9 = getelementptr inbounds %"class.Eigen::PlainObjectBase.33", %"class.Eigen::PlainObjectBase.33"* %8, i64 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !37
  %11 = getelementptr inbounds %"class.Eigen::Matrix.724", %"class.Eigen::Matrix.724"* %0, i64 0, i32 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8, !tbaa !424
  %13 = icmp eq i64 %12, %10
  %14 = icmp sgt i64 %10, -1
  br i1 %13, label %41, label %15

; <label>:15:                                     ; preds = %3
  br i1 %14, label %17, label %16, !prof !10

; <label>:16:                                     ; preds = %15
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:17:                                     ; preds = %15
  %18 = getelementptr inbounds %"class.Eigen::Matrix.724", %"class.Eigen::Matrix.724"* %0, i64 0, i32 0, i32 0, i32 0
  %19 = load i32*, i32** %18, align 8, !tbaa !197
  %20 = icmp eq i32* %19, null
  br i1 %20, label %25, label %21

; <label>:21:                                     ; preds = %17
  %22 = getelementptr inbounds i32, i32* %19, i64 -2
  %23 = bitcast i32* %22 to i8**
  %24 = load i8*, i8** %23, align 8, !tbaa !29
  tail call void @free(i8* %24) #11
  br label %25

; <label>:25:                                     ; preds = %21, %17
  %26 = icmp eq i64 %10, 0
  br i1 %26, label %39, label %27

; <label>:27:                                     ; preds = %25
  %28 = shl i64 %10, 2
  %29 = add i64 %28, 32
  %30 = tail call i8* @malloc(i64 %29) #14
  %31 = icmp eq i8* %30, null
  br i1 %31, label %39, label %32

; <label>:32:                                     ; preds = %27
  %33 = ptrtoint i8* %30 to i64
  %34 = add i64 %33, 32
  %35 = and i64 %34, -32
  %36 = inttoptr i64 %35 to i8**
  %37 = getelementptr inbounds i8*, i8** %36, i64 -1
  store i8* %30, i8** %37, align 8, !tbaa !29
  %38 = inttoptr i64 %35 to i32*
  br label %39

; <label>:39:                                     ; preds = %25, %27, %32
  %40 = phi i32* [ %38, %32 ], [ null, %27 ], [ null, %25 ]
  store i32* %40, i32** %18, align 8, !tbaa !197
  store i64 %10, i64* %11, align 8, !tbaa !424
  br label %43

; <label>:41:                                     ; preds = %3
  br i1 %14, label %43, label %42, !prof !10

; <label>:42:                                     ; preds = %41
  tail call void @__assert_rtn(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__._ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEENS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEC2EllRKS3_, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.13, i64 0, i64 0), i32 74, i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.14, i64 0, i64 0)) #13, !noalias !434
  unreachable

; <label>:43:                                     ; preds = %39, %41
  %44 = bitcast %"class.Eigen::Matrix.724"* %0 to i64*
  %45 = load i64, i64* %44, align 8, !tbaa !197
  %46 = and i64 %10, -4
  %47 = icmp sgt i64 %10, 3
  br i1 %47, label %48, label %56

; <label>:48:                                     ; preds = %43
  %49 = inttoptr i64 %45 to i8*
  %50 = icmp sgt i64 %46, 4
  %51 = select i1 %50, i64 %46, i64 4
  %52 = add nuw i64 %51, 4611686018427387903
  %53 = lshr i64 %52, 2
  %54 = shl i64 %53, 4
  %55 = add i64 %54, 16
  call void @llvm.memset.p0i8.i64(i8* %49, i8 0, i64 %55, i32 16, i1 false)
  br label %56

; <label>:56:                                     ; preds = %48, %43
  %57 = icmp slt i64 %46, %10
  br i1 %57, label %58, label %66

; <label>:58:                                     ; preds = %56
  %59 = inttoptr i64 %45 to i32*
  %60 = getelementptr i32, i32* %59, i64 %46
  %61 = bitcast i32* %60 to i8*
  %62 = shl i64 %10, 2
  %63 = lshr i64 %10, 2
  %64 = shl i64 %63, 4
  %65 = sub i64 %62, %64
  call void @llvm.memset.p0i8.i64(i8* %61, i8 0, i64 %65, i32 4, i1 false)
  br label %66

; <label>:66:                                     ; preds = %58, %56
  %67 = getelementptr inbounds %"class.Eigen::Product.234", %"class.Eigen::Product.234"* %1, i64 0, i32 0, i32 0
  %68 = load %"class.Eigen::Matrix.153"*, %"class.Eigen::Matrix.153"** %67, align 8
  %69 = getelementptr inbounds %"class.Eigen::Transpose.247", %"class.Eigen::Transpose.247"* %6, i64 0, i32 0
  %70 = load %"class.Eigen::Matrix.32"*, %"class.Eigen::Matrix.32"** %69, align 8
  %71 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %70, i64 0, i32 0, i32 0, i32 1
  %72 = load i64, i64* %71, align 8, !tbaa !37
  %73 = bitcast %"class.Eigen::internal::const_blas_data_mapper.717"* %4 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %73) #11
  %74 = bitcast %"class.Eigen::Matrix.32"* %70 to i64*
  %75 = load i64, i64* %74, align 8, !tbaa !35
  %76 = bitcast %"class.Eigen::internal::const_blas_data_mapper.717"* %4 to i64*
  store i64 %75, i64* %76, align 8, !tbaa !362
  %77 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.717", %"class.Eigen::internal::const_blas_data_mapper.717"* %4, i64 0, i32 0, i32 1
  store i64 %72, i64* %77, align 8, !tbaa !364
  %78 = bitcast %"class.Eigen::internal::const_blas_data_mapper.719"* %5 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %78) #11
  %79 = getelementptr inbounds %"class.Eigen::Matrix.153", %"class.Eigen::Matrix.153"* %68, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %80 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.719", %"class.Eigen::internal::const_blas_data_mapper.719"* %5, i64 0, i32 0, i32 0
  store i32* %79, i32** %80, align 8, !tbaa !365
  %81 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.719", %"class.Eigen::internal::const_blas_data_mapper.719"* %5, i64 0, i32 0, i32 1
  store i64 1, i64* %81, align 8, !tbaa !367
  %82 = getelementptr inbounds %"class.Eigen::Matrix.724", %"class.Eigen::Matrix.724"* %0, i64 0, i32 0, i32 0, i32 0
  %83 = load i32*, i32** %82, align 8, !tbaa !197
  call void @_ZN5Eigen8internal29general_matrix_vector_productIliNS0_22const_blas_data_mapperIilLi0EEELi0ELb0EiNS2_IilLi1EEELb0ELi0EE3runEllRKS3_RKS4_Pili(i64 %72, i64 47, %"class.Eigen::internal::const_blas_data_mapper.717"* nonnull dereferenceable(16) %4, %"class.Eigen::internal::const_blas_data_mapper.719"* nonnull dereferenceable(16) %5, i32* %83, i64 1, i32 1) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %78) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %73) #11
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi47ELi1ELi0ELi47ELi1EEEEENS3_INS_7ProductINS4_IiLi47ELi6ELi0ELi47ELi6EEENS4_IiLi6ELi1ELi0ELi6ELi1EEELi1EEEEENS0_9assign_opIiiEELi0EEELi3ELi0EE3runERSE_(%"class.Eigen::internal::generic_dense_assignment_kernel.843"* dereferenceable(32)) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %0, i64 0, i32 3
  %3 = bitcast %"class.Eigen::Matrix.153"** %2 to i64*
  %4 = load i64, i64* %3, align 8, !tbaa !11
  %5 = and i64 %4, 3
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %13

; <label>:7:                                      ; preds = %1
  %8 = lshr i64 %4, 2
  %9 = sub nsw i64 0, %8
  %10 = and i64 %9, 3
  %11 = or i64 %10, 44
  %12 = icmp eq i64 %10, 0
  br i1 %12, label %72, label %13

; <label>:13:                                     ; preds = %1, %7
  %14 = phi i64 [ %11, %7 ], [ 47, %1 ]
  %15 = phi i64 [ %10, %7 ], [ 47, %1 ]
  %16 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %0, i64 0, i32 1
  %17 = bitcast %"struct.Eigen::internal::evaluator.840"** %16 to %"struct.Eigen::internal::product_evaluator.841"**
  %18 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %0 to %"struct.Eigen::internal::evaluator.584"**
  br label %19

; <label>:19:                                     ; preds = %27, %13
  %20 = phi i64 [ 0, %13 ], [ %68, %27 ]
  %21 = load %"struct.Eigen::internal::product_evaluator.841"*, %"struct.Eigen::internal::product_evaluator.841"** %17, align 8, !tbaa !11
  %22 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.841", %"struct.Eigen::internal::product_evaluator.841"* %21, i64 0, i32 0
  %23 = load %"class.Eigen::Matrix.77"*, %"class.Eigen::Matrix.77"** %22, align 8, !tbaa !11
  %24 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %20
  %25 = icmp ugt i64 %20, 46
  br i1 %25, label %26, label %27, !prof !439

; <label>:26:                                     ; preds = %19
  tail call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !440
  unreachable

; <label>:27:                                     ; preds = %19
  %28 = load %"struct.Eigen::internal::evaluator.584"*, %"struct.Eigen::internal::evaluator.584"** %18, align 8, !tbaa !11
  %29 = getelementptr inbounds %"struct.Eigen::internal::evaluator.584", %"struct.Eigen::internal::evaluator.584"* %28, i64 0, i32 0
  %30 = load i32*, i32** %29, align 8, !tbaa !92
  %31 = getelementptr inbounds i32, i32* %30, i64 %20
  %32 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.841", %"struct.Eigen::internal::product_evaluator.841"* %21, i64 0, i32 1
  %33 = load %"class.Eigen::Matrix.185"*, %"class.Eigen::Matrix.185"** %32, align 8, !tbaa !11
  %34 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %35 = load i32, i32* %24, align 4, !tbaa !33
  %36 = load i32, i32* %34, align 4, !tbaa !33
  %37 = mul nsw i32 %36, %35
  %38 = getelementptr inbounds i32, i32* %24, i64 47
  %39 = load i32, i32* %38, align 4, !tbaa !33
  %40 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %41 = load i32, i32* %40, align 4, !tbaa !33
  %42 = mul nsw i32 %41, %39
  %43 = getelementptr inbounds i32, i32* %24, i64 94
  %44 = load i32, i32* %43, align 4, !tbaa !33
  %45 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %46 = load i32, i32* %45, align 4, !tbaa !33
  %47 = mul nsw i32 %46, %44
  %48 = getelementptr inbounds i32, i32* %24, i64 141
  %49 = load i32, i32* %48, align 4, !tbaa !33
  %50 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i64 3
  %51 = load i32, i32* %50, align 4, !tbaa !33
  %52 = mul nsw i32 %51, %49
  %53 = getelementptr inbounds i32, i32* %24, i64 188
  %54 = load i32, i32* %53, align 4, !tbaa !33
  %55 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %56 = load i32, i32* %55, align 4, !tbaa !33
  %57 = mul nsw i32 %56, %54
  %58 = getelementptr inbounds i32, i32* %24, i64 235
  %59 = load i32, i32* %58, align 4, !tbaa !33
  %60 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i64 5
  %61 = load i32, i32* %60, align 4, !tbaa !33
  %62 = mul nsw i32 %61, %59
  %63 = add i32 %42, %37
  %64 = add i32 %63, %47
  %65 = add i32 %64, %52
  %66 = add i32 %65, %57
  %67 = add i32 %66, %62
  store i32 %67, i32* %31, align 4, !tbaa !33
  %68 = add nuw nsw i64 %20, 1
  %69 = icmp slt i64 %68, %15
  br i1 %69, label %19, label %70

; <label>:70:                                     ; preds = %27
  %71 = icmp slt i64 %15, %14
  br i1 %71, label %72, label %79

; <label>:72:                                     ; preds = %7, %70
  %73 = phi i64 [ %15, %70 ], [ 0, %7 ]
  %74 = phi i64 [ %14, %70 ], [ %11, %7 ]
  %75 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %0 to %"struct.Eigen::internal::evaluator.584"**
  %76 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %0, i64 0, i32 1
  %77 = bitcast %"struct.Eigen::internal::evaluator.840"** %76 to %"struct.Eigen::internal::product_evaluator.841"**
  br label %136

; <label>:78:                                     ; preds = %136
  br label %79

; <label>:79:                                     ; preds = %78, %70
  %80 = phi i64 [ %14, %70 ], [ %74, %78 ]
  %81 = icmp ult i64 %80, 47
  br i1 %81, label %82, label %135

; <label>:82:                                     ; preds = %79
  %83 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.843", %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %0, i64 0, i32 1
  %84 = bitcast %"struct.Eigen::internal::evaluator.840"** %83 to %"struct.Eigen::internal::product_evaluator.841"**
  %85 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.843"* %0 to %"struct.Eigen::internal::evaluator.584"**
  br label %86

; <label>:86:                                     ; preds = %82, %86
  %87 = phi i64 [ %80, %82 ], [ %132, %86 ]
  %88 = load %"struct.Eigen::internal::product_evaluator.841"*, %"struct.Eigen::internal::product_evaluator.841"** %84, align 8, !tbaa !11
  %89 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.841", %"struct.Eigen::internal::product_evaluator.841"* %88, i64 0, i32 0
  %90 = load %"class.Eigen::Matrix.77"*, %"class.Eigen::Matrix.77"** %89, align 8, !tbaa !11
  %91 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %90, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %87
  %92 = load %"struct.Eigen::internal::evaluator.584"*, %"struct.Eigen::internal::evaluator.584"** %85, align 8, !tbaa !11
  %93 = getelementptr inbounds %"struct.Eigen::internal::evaluator.584", %"struct.Eigen::internal::evaluator.584"* %92, i64 0, i32 0
  %94 = load i32*, i32** %93, align 8, !tbaa !92
  %95 = getelementptr inbounds i32, i32* %94, i64 %87
  %96 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.841", %"struct.Eigen::internal::product_evaluator.841"* %88, i64 0, i32 1
  %97 = load %"class.Eigen::Matrix.185"*, %"class.Eigen::Matrix.185"** %96, align 8, !tbaa !11
  %98 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %97, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %99 = load i32, i32* %91, align 4, !tbaa !33
  %100 = load i32, i32* %98, align 4, !tbaa !33
  %101 = mul nsw i32 %100, %99
  %102 = getelementptr inbounds i32, i32* %91, i64 47
  %103 = load i32, i32* %102, align 4, !tbaa !33
  %104 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %97, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %105 = load i32, i32* %104, align 4, !tbaa !33
  %106 = mul nsw i32 %105, %103
  %107 = getelementptr inbounds i32, i32* %91, i64 94
  %108 = load i32, i32* %107, align 4, !tbaa !33
  %109 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %97, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %110 = load i32, i32* %109, align 4, !tbaa !33
  %111 = mul nsw i32 %110, %108
  %112 = getelementptr inbounds i32, i32* %91, i64 141
  %113 = load i32, i32* %112, align 4, !tbaa !33
  %114 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %97, i64 0, i32 0, i32 0, i32 0, i32 0, i64 3
  %115 = load i32, i32* %114, align 4, !tbaa !33
  %116 = mul nsw i32 %115, %113
  %117 = getelementptr inbounds i32, i32* %91, i64 188
  %118 = load i32, i32* %117, align 4, !tbaa !33
  %119 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %97, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %120 = load i32, i32* %119, align 4, !tbaa !33
  %121 = mul nsw i32 %120, %118
  %122 = getelementptr inbounds i32, i32* %91, i64 235
  %123 = load i32, i32* %122, align 4, !tbaa !33
  %124 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %97, i64 0, i32 0, i32 0, i32 0, i32 0, i64 5
  %125 = load i32, i32* %124, align 4, !tbaa !33
  %126 = mul nsw i32 %125, %123
  %127 = add i32 %106, %101
  %128 = add i32 %127, %111
  %129 = add i32 %128, %116
  %130 = add i32 %129, %121
  %131 = add i32 %130, %126
  store i32 %131, i32* %95, align 4, !tbaa !33
  %132 = add nuw nsw i64 %87, 1
  %133 = icmp slt i64 %132, 47
  br i1 %133, label %86, label %134

; <label>:134:                                    ; preds = %86
  br label %135

; <label>:135:                                    ; preds = %134, %79
  ret void

; <label>:136:                                    ; preds = %72, %136
  %137 = phi i64 [ %73, %72 ], [ %200, %136 ]
  %138 = load %"struct.Eigen::internal::evaluator.584"*, %"struct.Eigen::internal::evaluator.584"** %75, align 8, !tbaa !11
  %139 = getelementptr inbounds %"struct.Eigen::internal::evaluator.584", %"struct.Eigen::internal::evaluator.584"* %138, i64 0, i32 0
  %140 = load i32*, i32** %139, align 8, !tbaa !92
  %141 = getelementptr inbounds i32, i32* %140, i64 %137
  %142 = load %"struct.Eigen::internal::product_evaluator.841"*, %"struct.Eigen::internal::product_evaluator.841"** %77, align 8, !tbaa !11
  %143 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.841", %"struct.Eigen::internal::product_evaluator.841"* %142, i64 0, i32 2, i32 0, i32 0
  %144 = load i32*, i32** %143, align 8, !tbaa !94
  %145 = getelementptr inbounds i32, i32* %144, i64 %137
  %146 = bitcast i32* %145 to <4 x i32>*
  %147 = load <4 x i32>, <4 x i32>* %146, align 1, !tbaa !11
  %148 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.841", %"struct.Eigen::internal::product_evaluator.841"* %142, i64 0, i32 3, i32 0, i32 0
  %149 = load i32*, i32** %148, align 8, !tbaa !97
  %150 = load i32, i32* %149, align 4, !tbaa !33
  %151 = insertelement <4 x i32> undef, i32 %150, i32 0
  %152 = shufflevector <4 x i32> %151, <4 x i32> undef, <4 x i32> zeroinitializer
  %153 = mul <4 x i32> %152, %147
  %154 = getelementptr inbounds i32, i32* %145, i64 47
  %155 = bitcast i32* %154 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 1, !tbaa !11
  %157 = getelementptr inbounds i32, i32* %149, i64 1
  %158 = load i32, i32* %157, align 4, !tbaa !33
  %159 = insertelement <4 x i32> undef, i32 %158, i32 0
  %160 = shufflevector <4 x i32> %159, <4 x i32> undef, <4 x i32> zeroinitializer
  %161 = mul <4 x i32> %160, %156
  %162 = add <4 x i32> %161, %153
  %163 = getelementptr inbounds i32, i32* %145, i64 94
  %164 = bitcast i32* %163 to <4 x i32>*
  %165 = load <4 x i32>, <4 x i32>* %164, align 1, !tbaa !11
  %166 = getelementptr inbounds i32, i32* %149, i64 2
  %167 = load i32, i32* %166, align 4, !tbaa !33
  %168 = insertelement <4 x i32> undef, i32 %167, i32 0
  %169 = shufflevector <4 x i32> %168, <4 x i32> undef, <4 x i32> zeroinitializer
  %170 = mul <4 x i32> %169, %165
  %171 = add <4 x i32> %162, %170
  %172 = getelementptr inbounds i32, i32* %145, i64 141
  %173 = bitcast i32* %172 to <4 x i32>*
  %174 = load <4 x i32>, <4 x i32>* %173, align 1, !tbaa !11
  %175 = getelementptr inbounds i32, i32* %149, i64 3
  %176 = load i32, i32* %175, align 4, !tbaa !33
  %177 = insertelement <4 x i32> undef, i32 %176, i32 0
  %178 = shufflevector <4 x i32> %177, <4 x i32> undef, <4 x i32> zeroinitializer
  %179 = mul <4 x i32> %178, %174
  %180 = add <4 x i32> %171, %179
  %181 = getelementptr inbounds i32, i32* %145, i64 188
  %182 = bitcast i32* %181 to <4 x i32>*
  %183 = load <4 x i32>, <4 x i32>* %182, align 1, !tbaa !11
  %184 = getelementptr inbounds i32, i32* %149, i64 4
  %185 = load i32, i32* %184, align 4, !tbaa !33
  %186 = insertelement <4 x i32> undef, i32 %185, i32 0
  %187 = shufflevector <4 x i32> %186, <4 x i32> undef, <4 x i32> zeroinitializer
  %188 = mul <4 x i32> %187, %183
  %189 = add <4 x i32> %180, %188
  %190 = getelementptr inbounds i32, i32* %145, i64 235
  %191 = bitcast i32* %190 to <4 x i32>*
  %192 = load <4 x i32>, <4 x i32>* %191, align 1, !tbaa !11
  %193 = getelementptr inbounds i32, i32* %149, i64 5
  %194 = load i32, i32* %193, align 4, !tbaa !33
  %195 = insertelement <4 x i32> undef, i32 %194, i32 0
  %196 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> zeroinitializer
  %197 = mul <4 x i32> %196, %192
  %198 = add <4 x i32> %189, %197
  %199 = bitcast i32* %141 to <4 x i32>*
  store <4 x i32> %198, <4 x i32>* %199, align 16, !tbaa !11
  %200 = add nsw i64 %137, 4
  %201 = icmp slt i64 %200, %74
  br i1 %201, label %136, label %78
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal15call_assignmentINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS2_IiLi47ELi6ELi0ELi47ELi6EEEEESC_EENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS0_13sub_assign_opIiiEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsr25evaluator_assume_aliasingISP_EE5valueEPvE4typeE(%"class.Eigen::Matrix.48"* dereferenceable(16), %"class.Eigen::Product.277"* dereferenceable(40), %"struct.Eigen::internal::sub_assign_op"* dereferenceable(1), i8*) local_unnamed_addr #6 {
  %5 = alloca %"class.Eigen::Matrix.48", align 8
  %6 = bitcast %"class.Eigen::Matrix.48"* %5 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %6) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %6, i8 0, i64 16, i32 8, i1 false) #11
  %7 = getelementptr inbounds %"class.Eigen::Product.277", %"class.Eigen::Product.277"* %1, i64 0, i32 1
  %8 = bitcast %"class.Eigen::Transpose.296"* %7 to %"class.Eigen::PlainObjectBase.124"**
  %9 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %8, align 8, !tbaa !11
  %10 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %9, i64 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8, !tbaa !43
  %12 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %5, i64 0, i32 0, i32 0, i32 1
  %13 = icmp eq i64 %11, 0
  br i1 %13, label %32, label %14

; <label>:14:                                     ; preds = %4
  %15 = icmp sgt i64 %11, -1
  br i1 %15, label %17, label %16, !prof !10

; <label>:16:                                     ; preds = %14
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:17:                                     ; preds = %14
  %18 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %5, i64 0, i32 0, i32 0, i32 0
  %19 = mul i64 %11, 188
  %20 = add i64 %19, 32
  %21 = tail call i8* @malloc(i64 %20) #14
  %22 = icmp eq i8* %21, null
  br i1 %22, label %30, label %23

; <label>:23:                                     ; preds = %17
  %24 = ptrtoint i8* %21 to i64
  %25 = add i64 %24, 32
  %26 = and i64 %25, -32
  %27 = inttoptr i64 %26 to i8**
  %28 = getelementptr inbounds i8*, i8** %27, i64 -1
  store i8* %21, i8** %28, align 8, !tbaa !29
  %29 = inttoptr i64 %26 to i32*
  br label %30

; <label>:30:                                     ; preds = %23, %17
  %31 = phi i32* [ %29, %23 ], [ null, %17 ]
  store i32* %31, i32** %18, align 8, !tbaa !38
  store i64 %11, i64* %12, align 8, !tbaa !40
  br label %32

; <label>:32:                                     ; preds = %4, %30
  %33 = getelementptr inbounds %"class.Eigen::Product.277", %"class.Eigen::Product.277"* %1, i64 0, i32 0
  call void @_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EENS_9TransposeIKNS8_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeESI_Li8EE6evalToINS8_IiLi47ELin1ELi0ELi47ELin1EEEEEvRT_RKSD_RKSH_(%"class.Eigen::Matrix.48"* nonnull dereferenceable(16) %5, %"class.Eigen::CwiseBinaryOp.284"* nonnull dereferenceable(32) %33, %"class.Eigen::Transpose.296"* nonnull dereferenceable(8) %7) #11
  %34 = bitcast %"class.Eigen::Matrix.48"* %5 to i64*
  %35 = load i64, i64* %34, align 8, !tbaa !38
  %36 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %0, i64 0, i32 0, i32 0, i32 1
  %37 = load i64, i64* %36, align 8, !tbaa !40
  %38 = load i64, i64* %12, align 8, !tbaa !40
  %39 = icmp eq i64 %37, %38
  br i1 %39, label %41, label %40, !prof !10

; <label>:40:                                     ; preds = %32
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__._ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEENS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES3_EEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.15, i64 0, i64 0), i32 710, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.29, i64 0, i64 0)) #13
  unreachable

; <label>:41:                                     ; preds = %32
  %42 = bitcast %"class.Eigen::Matrix.48"* %0 to i64*
  %43 = load i64, i64* %42, align 8, !tbaa !38
  %44 = mul nsw i64 %37, 47
  %45 = sdiv i64 %44, 4
  %46 = shl nsw i64 %45, 2
  %47 = icmp sgt i64 %44, 3
  br i1 %47, label %48, label %79

; <label>:48:                                     ; preds = %41
  %49 = inttoptr i64 %43 to i32*
  %50 = inttoptr i64 %35 to i32*
  %51 = icmp sgt i64 %46, 4
  %52 = select i1 %51, i64 %46, i64 4
  %53 = add nsw i64 %52, -1
  %54 = lshr i64 %53, 2
  %55 = add nuw nsw i64 %54, 1
  %56 = and i64 %55, 7
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %73, label %58

; <label>:58:                                     ; preds = %48
  br label %59

; <label>:59:                                     ; preds = %59, %58
  %60 = phi i64 [ %69, %59 ], [ 0, %58 ]
  %61 = phi i64 [ %70, %59 ], [ %56, %58 ]
  %62 = getelementptr inbounds i32, i32* %49, i64 %60
  %63 = getelementptr inbounds i32, i32* %50, i64 %60
  %64 = bitcast i32* %63 to <4 x i32>*
  %65 = load <4 x i32>, <4 x i32>* %64, align 16, !tbaa !11
  %66 = bitcast i32* %62 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 16, !tbaa !11
  %68 = sub <4 x i32> %67, %65
  store <4 x i32> %68, <4 x i32>* %66, align 16, !tbaa !11
  %69 = add nuw nsw i64 %60, 4
  %70 = add i64 %61, -1
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %59, !llvm.loop !443

; <label>:72:                                     ; preds = %59
  br label %73

; <label>:73:                                     ; preds = %48, %72
  %74 = phi i64 [ 0, %48 ], [ %69, %72 ]
  %75 = icmp ult i64 %53, 28
  br i1 %75, label %78, label %76

; <label>:76:                                     ; preds = %73
  br label %290

; <label>:77:                                     ; preds = %290
  br label %78

; <label>:78:                                     ; preds = %73, %77
  br label %79

; <label>:79:                                     ; preds = %78, %41
  %80 = icmp sgt i64 %44, %46
  br i1 %80, label %81, label %359

; <label>:81:                                     ; preds = %79
  %82 = inttoptr i64 %43 to i32*
  %83 = inttoptr i64 %35 to i32*
  %84 = sub i64 %44, %46
  %85 = icmp ult i64 %84, 32
  br i1 %85, label %215, label %86

; <label>:86:                                     ; preds = %81
  %87 = and i64 %84, -32
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %215, label %89

; <label>:89:                                     ; preds = %86
  %90 = getelementptr i32, i32* %82, i64 %46
  %91 = getelementptr i32, i32* %82, i64 %44
  %92 = getelementptr i32, i32* %83, i64 %46
  %93 = getelementptr i32, i32* %83, i64 %44
  %94 = icmp ult i32* %90, %93
  %95 = icmp ult i32* %92, %91
  %96 = and i1 %94, %95
  %97 = add i64 %46, %87
  br i1 %96, label %215, label %98

; <label>:98:                                     ; preds = %89
  %99 = add i64 %87, -32
  %100 = lshr exact i64 %99, 5
  %101 = and i64 %100, 1
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %103, label %137

; <label>:103:                                    ; preds = %98
  br label %104

; <label>:104:                                    ; preds = %103
  %105 = getelementptr inbounds i32, i32* %82, i64 %46
  %106 = getelementptr inbounds i32, i32* %83, i64 %46
  %107 = bitcast i32* %106 to <8 x i32>*
  %108 = load <8 x i32>, <8 x i32>* %107, align 4, !tbaa !33, !alias.scope !444
  %109 = getelementptr i32, i32* %106, i64 8
  %110 = bitcast i32* %109 to <8 x i32>*
  %111 = load <8 x i32>, <8 x i32>* %110, align 4, !tbaa !33, !alias.scope !444
  %112 = getelementptr i32, i32* %106, i64 16
  %113 = bitcast i32* %112 to <8 x i32>*
  %114 = load <8 x i32>, <8 x i32>* %113, align 4, !tbaa !33, !alias.scope !444
  %115 = getelementptr i32, i32* %106, i64 24
  %116 = bitcast i32* %115 to <8 x i32>*
  %117 = load <8 x i32>, <8 x i32>* %116, align 4, !tbaa !33, !alias.scope !444
  %118 = bitcast i32* %105 to <8 x i32>*
  %119 = load <8 x i32>, <8 x i32>* %118, align 4, !tbaa !33, !alias.scope !447, !noalias !444
  %120 = getelementptr i32, i32* %105, i64 8
  %121 = bitcast i32* %120 to <8 x i32>*
  %122 = load <8 x i32>, <8 x i32>* %121, align 4, !tbaa !33, !alias.scope !447, !noalias !444
  %123 = getelementptr i32, i32* %105, i64 16
  %124 = bitcast i32* %123 to <8 x i32>*
  %125 = load <8 x i32>, <8 x i32>* %124, align 4, !tbaa !33, !alias.scope !447, !noalias !444
  %126 = getelementptr i32, i32* %105, i64 24
  %127 = bitcast i32* %126 to <8 x i32>*
  %128 = load <8 x i32>, <8 x i32>* %127, align 4, !tbaa !33, !alias.scope !447, !noalias !444
  %129 = sub nsw <8 x i32> %119, %108
  %130 = sub nsw <8 x i32> %122, %111
  %131 = sub nsw <8 x i32> %125, %114
  %132 = sub nsw <8 x i32> %128, %117
  %133 = bitcast i32* %105 to <8 x i32>*
  store <8 x i32> %129, <8 x i32>* %133, align 4, !tbaa !33, !alias.scope !447, !noalias !444
  %134 = bitcast i32* %120 to <8 x i32>*
  store <8 x i32> %130, <8 x i32>* %134, align 4, !tbaa !33, !alias.scope !447, !noalias !444
  %135 = bitcast i32* %123 to <8 x i32>*
  store <8 x i32> %131, <8 x i32>* %135, align 4, !tbaa !33, !alias.scope !447, !noalias !444
  %136 = bitcast i32* %126 to <8 x i32>*
  store <8 x i32> %132, <8 x i32>* %136, align 4, !tbaa !33, !alias.scope !447, !noalias !444
  br label %137

; <label>:137:                                    ; preds = %104, %98
  %138 = phi i64 [ 0, %98 ], [ 32, %104 ]
  %139 = icmp eq i64 %100, 0
  br i1 %139, label %213, label %140

; <label>:140:                                    ; preds = %137
  br label %141

; <label>:141:                                    ; preds = %141, %140
  %142 = phi i64 [ %138, %140 ], [ %210, %141 ]
  %143 = add i64 %46, %142
  %144 = getelementptr inbounds i32, i32* %82, i64 %143
  %145 = getelementptr inbounds i32, i32* %83, i64 %143
  %146 = bitcast i32* %145 to <8 x i32>*
  %147 = load <8 x i32>, <8 x i32>* %146, align 4, !tbaa !33, !alias.scope !444
  %148 = getelementptr i32, i32* %145, i64 8
  %149 = bitcast i32* %148 to <8 x i32>*
  %150 = load <8 x i32>, <8 x i32>* %149, align 4, !tbaa !33, !alias.scope !444
  %151 = getelementptr i32, i32* %145, i64 16
  %152 = bitcast i32* %151 to <8 x i32>*
  %153 = load <8 x i32>, <8 x i32>* %152, align 4, !tbaa !33, !alias.scope !444
  %154 = getelementptr i32, i32* %145, i64 24
  %155 = bitcast i32* %154 to <8 x i32>*
  %156 = load <8 x i32>, <8 x i32>* %155, align 4, !tbaa !33, !alias.scope !444
  %157 = bitcast i32* %144 to <8 x i32>*
  %158 = load <8 x i32>, <8 x i32>* %157, align 4, !tbaa !33, !alias.scope !447, !noalias !444
  %159 = getelementptr i32, i32* %144, i64 8
  %160 = bitcast i32* %159 to <8 x i32>*
  %161 = load <8 x i32>, <8 x i32>* %160, align 4, !tbaa !33, !alias.scope !447, !noalias !444
  %162 = getelementptr i32, i32* %144, i64 16
  %163 = bitcast i32* %162 to <8 x i32>*
  %164 = load <8 x i32>, <8 x i32>* %163, align 4, !tbaa !33, !alias.scope !447, !noalias !444
  %165 = getelementptr i32, i32* %144, i64 24
  %166 = bitcast i32* %165 to <8 x i32>*
  %167 = load <8 x i32>, <8 x i32>* %166, align 4, !tbaa !33, !alias.scope !447, !noalias !444
  %168 = sub nsw <8 x i32> %158, %147
  %169 = sub nsw <8 x i32> %161, %150
  %170 = sub nsw <8 x i32> %164, %153
  %171 = sub nsw <8 x i32> %167, %156
  %172 = bitcast i32* %144 to <8 x i32>*
  store <8 x i32> %168, <8 x i32>* %172, align 4, !tbaa !33, !alias.scope !447, !noalias !444
  %173 = bitcast i32* %159 to <8 x i32>*
  store <8 x i32> %169, <8 x i32>* %173, align 4, !tbaa !33, !alias.scope !447, !noalias !444
  %174 = bitcast i32* %162 to <8 x i32>*
  store <8 x i32> %170, <8 x i32>* %174, align 4, !tbaa !33, !alias.scope !447, !noalias !444
  %175 = bitcast i32* %165 to <8 x i32>*
  store <8 x i32> %171, <8 x i32>* %175, align 4, !tbaa !33, !alias.scope !447, !noalias !444
  %176 = add i64 %142, 32
  %177 = add i64 %46, %176
  %178 = getelementptr inbounds i32, i32* %82, i64 %177
  %179 = getelementptr inbounds i32, i32* %83, i64 %177
  %180 = bitcast i32* %179 to <8 x i32>*
  %181 = load <8 x i32>, <8 x i32>* %180, align 4, !tbaa !33, !alias.scope !444
  %182 = getelementptr i32, i32* %179, i64 8
  %183 = bitcast i32* %182 to <8 x i32>*
  %184 = load <8 x i32>, <8 x i32>* %183, align 4, !tbaa !33, !alias.scope !444
  %185 = getelementptr i32, i32* %179, i64 16
  %186 = bitcast i32* %185 to <8 x i32>*
  %187 = load <8 x i32>, <8 x i32>* %186, align 4, !tbaa !33, !alias.scope !444
  %188 = getelementptr i32, i32* %179, i64 24
  %189 = bitcast i32* %188 to <8 x i32>*
  %190 = load <8 x i32>, <8 x i32>* %189, align 4, !tbaa !33, !alias.scope !444
  %191 = bitcast i32* %178 to <8 x i32>*
  %192 = load <8 x i32>, <8 x i32>* %191, align 4, !tbaa !33, !alias.scope !447, !noalias !444
  %193 = getelementptr i32, i32* %178, i64 8
  %194 = bitcast i32* %193 to <8 x i32>*
  %195 = load <8 x i32>, <8 x i32>* %194, align 4, !tbaa !33, !alias.scope !447, !noalias !444
  %196 = getelementptr i32, i32* %178, i64 16
  %197 = bitcast i32* %196 to <8 x i32>*
  %198 = load <8 x i32>, <8 x i32>* %197, align 4, !tbaa !33, !alias.scope !447, !noalias !444
  %199 = getelementptr i32, i32* %178, i64 24
  %200 = bitcast i32* %199 to <8 x i32>*
  %201 = load <8 x i32>, <8 x i32>* %200, align 4, !tbaa !33, !alias.scope !447, !noalias !444
  %202 = sub nsw <8 x i32> %192, %181
  %203 = sub nsw <8 x i32> %195, %184
  %204 = sub nsw <8 x i32> %198, %187
  %205 = sub nsw <8 x i32> %201, %190
  %206 = bitcast i32* %178 to <8 x i32>*
  store <8 x i32> %202, <8 x i32>* %206, align 4, !tbaa !33, !alias.scope !447, !noalias !444
  %207 = bitcast i32* %193 to <8 x i32>*
  store <8 x i32> %203, <8 x i32>* %207, align 4, !tbaa !33, !alias.scope !447, !noalias !444
  %208 = bitcast i32* %196 to <8 x i32>*
  store <8 x i32> %204, <8 x i32>* %208, align 4, !tbaa !33, !alias.scope !447, !noalias !444
  %209 = bitcast i32* %199 to <8 x i32>*
  store <8 x i32> %205, <8 x i32>* %209, align 4, !tbaa !33, !alias.scope !447, !noalias !444
  %210 = add i64 %142, 64
  %211 = icmp eq i64 %210, %87
  br i1 %211, label %212, label %141, !llvm.loop !449

; <label>:212:                                    ; preds = %141
  br label %213

; <label>:213:                                    ; preds = %137, %212
  %214 = icmp eq i64 %84, %87
  br i1 %214, label %359, label %215

; <label>:215:                                    ; preds = %213, %89, %86, %81
  %216 = phi i64 [ %46, %89 ], [ %46, %86 ], [ %46, %81 ], [ %97, %213 ]
  %217 = sub i64 %44, %216
  %218 = add i64 %44, -1
  %219 = sub i64 %218, %216
  %220 = and i64 %217, 7
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %235, label %222

; <label>:222:                                    ; preds = %215
  br label %223

; <label>:223:                                    ; preds = %223, %222
  %224 = phi i64 [ %231, %223 ], [ %216, %222 ]
  %225 = phi i64 [ %232, %223 ], [ %220, %222 ]
  %226 = getelementptr inbounds i32, i32* %82, i64 %224
  %227 = getelementptr inbounds i32, i32* %83, i64 %224
  %228 = load i32, i32* %227, align 4, !tbaa !33
  %229 = load i32, i32* %226, align 4, !tbaa !33
  %230 = sub nsw i32 %229, %228
  store i32 %230, i32* %226, align 4, !tbaa !33
  %231 = add nsw i64 %224, 1
  %232 = add i64 %225, -1
  %233 = icmp eq i64 %232, 0
  br i1 %233, label %234, label %223, !llvm.loop !450

; <label>:234:                                    ; preds = %223
  br label %235

; <label>:235:                                    ; preds = %215, %234
  %236 = phi i64 [ %216, %215 ], [ %231, %234 ]
  %237 = icmp ult i64 %219, 7
  br i1 %237, label %358, label %238

; <label>:238:                                    ; preds = %235
  br label %239

; <label>:239:                                    ; preds = %239, %238
  %240 = phi i64 [ %236, %238 ], [ %288, %239 ]
  %241 = getelementptr inbounds i32, i32* %82, i64 %240
  %242 = getelementptr inbounds i32, i32* %83, i64 %240
  %243 = load i32, i32* %242, align 4, !tbaa !33
  %244 = load i32, i32* %241, align 4, !tbaa !33
  %245 = sub nsw i32 %244, %243
  store i32 %245, i32* %241, align 4, !tbaa !33
  %246 = add nsw i64 %240, 1
  %247 = getelementptr inbounds i32, i32* %82, i64 %246
  %248 = getelementptr inbounds i32, i32* %83, i64 %246
  %249 = load i32, i32* %248, align 4, !tbaa !33
  %250 = load i32, i32* %247, align 4, !tbaa !33
  %251 = sub nsw i32 %250, %249
  store i32 %251, i32* %247, align 4, !tbaa !33
  %252 = add nsw i64 %240, 2
  %253 = getelementptr inbounds i32, i32* %82, i64 %252
  %254 = getelementptr inbounds i32, i32* %83, i64 %252
  %255 = load i32, i32* %254, align 4, !tbaa !33
  %256 = load i32, i32* %253, align 4, !tbaa !33
  %257 = sub nsw i32 %256, %255
  store i32 %257, i32* %253, align 4, !tbaa !33
  %258 = add nsw i64 %240, 3
  %259 = getelementptr inbounds i32, i32* %82, i64 %258
  %260 = getelementptr inbounds i32, i32* %83, i64 %258
  %261 = load i32, i32* %260, align 4, !tbaa !33
  %262 = load i32, i32* %259, align 4, !tbaa !33
  %263 = sub nsw i32 %262, %261
  store i32 %263, i32* %259, align 4, !tbaa !33
  %264 = add nsw i64 %240, 4
  %265 = getelementptr inbounds i32, i32* %82, i64 %264
  %266 = getelementptr inbounds i32, i32* %83, i64 %264
  %267 = load i32, i32* %266, align 4, !tbaa !33
  %268 = load i32, i32* %265, align 4, !tbaa !33
  %269 = sub nsw i32 %268, %267
  store i32 %269, i32* %265, align 4, !tbaa !33
  %270 = add nsw i64 %240, 5
  %271 = getelementptr inbounds i32, i32* %82, i64 %270
  %272 = getelementptr inbounds i32, i32* %83, i64 %270
  %273 = load i32, i32* %272, align 4, !tbaa !33
  %274 = load i32, i32* %271, align 4, !tbaa !33
  %275 = sub nsw i32 %274, %273
  store i32 %275, i32* %271, align 4, !tbaa !33
  %276 = add nsw i64 %240, 6
  %277 = getelementptr inbounds i32, i32* %82, i64 %276
  %278 = getelementptr inbounds i32, i32* %83, i64 %276
  %279 = load i32, i32* %278, align 4, !tbaa !33
  %280 = load i32, i32* %277, align 4, !tbaa !33
  %281 = sub nsw i32 %280, %279
  store i32 %281, i32* %277, align 4, !tbaa !33
  %282 = add nsw i64 %240, 7
  %283 = getelementptr inbounds i32, i32* %82, i64 %282
  %284 = getelementptr inbounds i32, i32* %83, i64 %282
  %285 = load i32, i32* %284, align 4, !tbaa !33
  %286 = load i32, i32* %283, align 4, !tbaa !33
  %287 = sub nsw i32 %286, %285
  store i32 %287, i32* %283, align 4, !tbaa !33
  %288 = add nsw i64 %240, 8
  %289 = icmp eq i64 %288, %44
  br i1 %289, label %357, label %239, !llvm.loop !451

; <label>:290:                                    ; preds = %290, %76
  %291 = phi i64 [ %74, %76 ], [ %355, %290 ]
  %292 = getelementptr inbounds i32, i32* %49, i64 %291
  %293 = getelementptr inbounds i32, i32* %50, i64 %291
  %294 = bitcast i32* %293 to <4 x i32>*
  %295 = load <4 x i32>, <4 x i32>* %294, align 16, !tbaa !11
  %296 = bitcast i32* %292 to <4 x i32>*
  %297 = load <4 x i32>, <4 x i32>* %296, align 16, !tbaa !11
  %298 = sub <4 x i32> %297, %295
  store <4 x i32> %298, <4 x i32>* %296, align 16, !tbaa !11
  %299 = add nuw nsw i64 %291, 4
  %300 = getelementptr inbounds i32, i32* %49, i64 %299
  %301 = getelementptr inbounds i32, i32* %50, i64 %299
  %302 = bitcast i32* %301 to <4 x i32>*
  %303 = load <4 x i32>, <4 x i32>* %302, align 16, !tbaa !11
  %304 = bitcast i32* %300 to <4 x i32>*
  %305 = load <4 x i32>, <4 x i32>* %304, align 16, !tbaa !11
  %306 = sub <4 x i32> %305, %303
  store <4 x i32> %306, <4 x i32>* %304, align 16, !tbaa !11
  %307 = add nsw i64 %291, 8
  %308 = getelementptr inbounds i32, i32* %49, i64 %307
  %309 = getelementptr inbounds i32, i32* %50, i64 %307
  %310 = bitcast i32* %309 to <4 x i32>*
  %311 = load <4 x i32>, <4 x i32>* %310, align 16, !tbaa !11
  %312 = bitcast i32* %308 to <4 x i32>*
  %313 = load <4 x i32>, <4 x i32>* %312, align 16, !tbaa !11
  %314 = sub <4 x i32> %313, %311
  store <4 x i32> %314, <4 x i32>* %312, align 16, !tbaa !11
  %315 = add nsw i64 %291, 12
  %316 = getelementptr inbounds i32, i32* %49, i64 %315
  %317 = getelementptr inbounds i32, i32* %50, i64 %315
  %318 = bitcast i32* %317 to <4 x i32>*
  %319 = load <4 x i32>, <4 x i32>* %318, align 16, !tbaa !11
  %320 = bitcast i32* %316 to <4 x i32>*
  %321 = load <4 x i32>, <4 x i32>* %320, align 16, !tbaa !11
  %322 = sub <4 x i32> %321, %319
  store <4 x i32> %322, <4 x i32>* %320, align 16, !tbaa !11
  %323 = add nsw i64 %291, 16
  %324 = getelementptr inbounds i32, i32* %49, i64 %323
  %325 = getelementptr inbounds i32, i32* %50, i64 %323
  %326 = bitcast i32* %325 to <4 x i32>*
  %327 = load <4 x i32>, <4 x i32>* %326, align 16, !tbaa !11
  %328 = bitcast i32* %324 to <4 x i32>*
  %329 = load <4 x i32>, <4 x i32>* %328, align 16, !tbaa !11
  %330 = sub <4 x i32> %329, %327
  store <4 x i32> %330, <4 x i32>* %328, align 16, !tbaa !11
  %331 = add nsw i64 %291, 20
  %332 = getelementptr inbounds i32, i32* %49, i64 %331
  %333 = getelementptr inbounds i32, i32* %50, i64 %331
  %334 = bitcast i32* %333 to <4 x i32>*
  %335 = load <4 x i32>, <4 x i32>* %334, align 16, !tbaa !11
  %336 = bitcast i32* %332 to <4 x i32>*
  %337 = load <4 x i32>, <4 x i32>* %336, align 16, !tbaa !11
  %338 = sub <4 x i32> %337, %335
  store <4 x i32> %338, <4 x i32>* %336, align 16, !tbaa !11
  %339 = add nsw i64 %291, 24
  %340 = getelementptr inbounds i32, i32* %49, i64 %339
  %341 = getelementptr inbounds i32, i32* %50, i64 %339
  %342 = bitcast i32* %341 to <4 x i32>*
  %343 = load <4 x i32>, <4 x i32>* %342, align 16, !tbaa !11
  %344 = bitcast i32* %340 to <4 x i32>*
  %345 = load <4 x i32>, <4 x i32>* %344, align 16, !tbaa !11
  %346 = sub <4 x i32> %345, %343
  store <4 x i32> %346, <4 x i32>* %344, align 16, !tbaa !11
  %347 = add nsw i64 %291, 28
  %348 = getelementptr inbounds i32, i32* %49, i64 %347
  %349 = getelementptr inbounds i32, i32* %50, i64 %347
  %350 = bitcast i32* %349 to <4 x i32>*
  %351 = load <4 x i32>, <4 x i32>* %350, align 16, !tbaa !11
  %352 = bitcast i32* %348 to <4 x i32>*
  %353 = load <4 x i32>, <4 x i32>* %352, align 16, !tbaa !11
  %354 = sub <4 x i32> %353, %351
  store <4 x i32> %354, <4 x i32>* %352, align 16, !tbaa !11
  %355 = add nsw i64 %291, 32
  %356 = icmp slt i64 %355, %46
  br i1 %356, label %290, label %77

; <label>:357:                                    ; preds = %239
  br label %358

; <label>:358:                                    ; preds = %235, %357
  br label %359

; <label>:359:                                    ; preds = %358, %213, %79
  %360 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %5, i64 0, i32 0, i32 0, i32 0
  %361 = load i32*, i32** %360, align 8, !tbaa !38
  %362 = icmp eq i32* %361, null
  br i1 %362, label %367, label %363

; <label>:363:                                    ; preds = %359
  %364 = getelementptr inbounds i32, i32* %361, i64 -2
  %365 = bitcast i32* %364 to i8**
  %366 = load i8*, i8** %365, align 8, !tbaa !29
  call void @free(i8* %366) #11
  br label %367

; <label>:367:                                    ; preds = %359, %363
  call void @llvm.lifetime.end(i64 16, i8* nonnull %6) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EENS_9TransposeIKNS8_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeESI_Li8EE6evalToINS8_IiLi47ELin1ELi0ELi47ELin1EEEEEvRT_RKSD_RKSH_(%"class.Eigen::Matrix.48"* dereferenceable(16), %"class.Eigen::CwiseBinaryOp.284"* dereferenceable(32), %"class.Eigen::Transpose.296"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.Eigen::Product.885", align 8
  %5 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8, !tbaa !40
  %9 = add nsw i64 %8, 53
  %10 = icmp slt i64 %9, 20
  br i1 %10, label %11, label %26

; <label>:11:                                     ; preds = %3
  %12 = getelementptr inbounds %"class.Eigen::Product.885", %"class.Eigen::Product.885"* %4, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start(i64 40, i8* nonnull %12) #11
  %13 = getelementptr inbounds %"class.Eigen::Product.885", %"class.Eigen::Product.885"* %4, i64 0, i32 0, i32 1, i32 2, i32 0
  %14 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.284", %"class.Eigen::CwiseBinaryOp.284"* %1, i64 0, i32 1, i32 2, i32 0
  %15 = load i32, i32* %14, align 4, !tbaa !51, !noalias !452
  store i32 %15, i32* %13, align 4, !tbaa !51, !alias.scope !452
  %16 = getelementptr inbounds %"class.Eigen::Product.885", %"class.Eigen::Product.885"* %4, i64 0, i32 0, i32 3
  %17 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.284", %"class.Eigen::CwiseBinaryOp.284"* %1, i64 0, i32 3
  %18 = bitcast %"class.Eigen::Matrix.77"** %17 to i64*
  %19 = load i64, i64* %18, align 8, !tbaa !11, !noalias !452
  %20 = bitcast %"class.Eigen::Matrix.77"** %16 to i64*
  store i64 %19, i64* %20, align 8, !tbaa !11, !alias.scope !452
  %21 = getelementptr inbounds %"class.Eigen::Product.885", %"class.Eigen::Product.885"* %4, i64 0, i32 1
  %22 = bitcast %"class.Eigen::Transpose.296"* %2 to i64*
  %23 = load i64, i64* %22, align 8, !noalias !452
  %24 = bitcast %"class.Eigen::Transpose.296"* %21 to i64*
  store i64 %23, i64* %24, align 8, !alias.scope !452
  %25 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %5, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %25) #11
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS2_IiLi47ELi6ELi0ELi47ELi6EEEEESC_EENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.48"* nonnull dereferenceable(16) %0, %"class.Eigen::Product.885"* nonnull dereferenceable(40) %4, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %5) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %25) #11
  call void @llvm.lifetime.end(i64 40, i8* nonnull %12) #11
  br label %54

; <label>:26:                                     ; preds = %3
  %27 = icmp sgt i64 %8, -1
  br i1 %27, label %29, label %28, !prof !10

; <label>:28:                                     ; preds = %26
  tail call void @__assert_rtn(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__._ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEENS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEC2EllRKS3_, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.13, i64 0, i64 0), i32 74, i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.14, i64 0, i64 0)) #13, !noalias !455
  unreachable

; <label>:29:                                     ; preds = %26
  %30 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %0, i64 0, i32 0, i32 0, i32 0
  %31 = load i32*, i32** %30, align 8, !tbaa !38
  %32 = mul nsw i64 %8, 47
  %33 = sdiv i64 %32, 4
  %34 = shl nsw i64 %33, 2
  %35 = icmp sgt i64 %32, 3
  br i1 %35, label %36, label %44

; <label>:36:                                     ; preds = %29
  %37 = bitcast i32* %31 to i8*
  %38 = icmp sgt i64 %34, 4
  %39 = select i1 %38, i64 %34, i64 4
  %40 = add nuw i64 %39, 4611686018427387903
  %41 = lshr i64 %40, 2
  %42 = shl i64 %41, 4
  %43 = add i64 %42, 16
  tail call void @llvm.memset.p0i8.i64(i8* %37, i8 0, i64 %43, i32 16, i1 false) #11
  br label %44

; <label>:44:                                     ; preds = %36, %29
  %45 = icmp slt i64 %34, %32
  br i1 %45, label %46, label %52

; <label>:46:                                     ; preds = %44
  %47 = getelementptr i32, i32* %31, i64 %34
  %48 = bitcast i32* %47 to i8*
  %49 = mul i64 %8, 188
  %50 = shl i64 %33, 4
  %51 = sub i64 %49, %50
  tail call void @llvm.memset.p0i8.i64(i8* %48, i8 0, i64 %51, i32 4, i1 false) #11
  br label %52

; <label>:52:                                     ; preds = %44, %46
  %53 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start(i64 4, i8* nonnull %53) #11
  store i32 1, i32* %6, align 4, !tbaa !33
  call void @_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EENS_9TransposeIKNS8_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeESI_Li8EE13scaleAndAddToINS8_IiLi47ELin1ELi0ELi47ELin1EEEEEvRT_RKSD_RKSH_RKi(%"class.Eigen::Matrix.48"* nonnull dereferenceable(16) %0, %"class.Eigen::CwiseBinaryOp.284"* nonnull dereferenceable(32) %1, %"class.Eigen::Transpose.296"* nonnull dereferenceable(8) %2, i32* nonnull dereferenceable(4) %6)
  call void @llvm.lifetime.end(i64 4, i8* nonnull %53) #11
  br label %54

; <label>:54:                                     ; preds = %52, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EENS_9TransposeIKNS8_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeESI_Li8EE13scaleAndAddToINS8_IiLi47ELin1ELi0ELi47ELin1EEEEEvRT_RKSD_RKSH_RKi(%"class.Eigen::Matrix.48"* dereferenceable(16), %"class.Eigen::CwiseBinaryOp.284"* dereferenceable(32), %"class.Eigen::Transpose.296"* dereferenceable(8), i32* dereferenceable(4)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.Eigen::internal::gemm_blocking_space", align 8
  %6 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i64, i64* %6, align 8, !tbaa !40
  %8 = bitcast %"class.Eigen::Transpose.296"* %2 to %"class.Eigen::PlainObjectBase.124"**
  %9 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %8, align 8, !tbaa !11
  %10 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %9, i64 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8, !tbaa !43
  %12 = icmp eq i64 %7, %11
  br i1 %12, label %14, label %13, !prof !10

; <label>:13:                                     ; preds = %4
  tail call void @__assert_rtn(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__func__._ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EENS_9TransposeIKNS8_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeESI_Li8EE13scaleAndAddToINS8_IiLi47ELin1ELi0ELi47ELin1EEEEEvRT_RKSD_RKSH_RKi, i64 0, i64 0), i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.33, i64 0, i64 0), i32 460, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.34, i64 0, i64 0)) #13
  unreachable

; <label>:14:                                     ; preds = %4
  %15 = icmp eq i64 %7, 0
  br i1 %15, label %64, label %16

; <label>:16:                                     ; preds = %14
  %17 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.284", %"class.Eigen::CwiseBinaryOp.284"* %1, i64 0, i32 3
  %18 = bitcast %"class.Eigen::Matrix.77"** %17 to %"class.Eigen::PlainObjectBase.78"**
  %19 = load %"class.Eigen::PlainObjectBase.78"*, %"class.Eigen::PlainObjectBase.78"** %18, align 8, !tbaa !11
  %20 = load i32, i32* %3, align 4, !tbaa !33
  %21 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.284", %"class.Eigen::CwiseBinaryOp.284"* %1, i64 0, i32 1, i32 2, i32 0
  %22 = load i32, i32* %21, align 4, !tbaa !51
  %23 = mul nsw i32 %22, %20
  %24 = bitcast %"class.Eigen::internal::gemm_blocking_space"* %5 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %24) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %24, i8 0, i64 16, i32 8, i1 false) #11
  %25 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 0, i32 2
  store i64 47, i64* %25, align 8, !tbaa !460
  %26 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 0, i32 3
  store i64 %7, i64* %26, align 8, !tbaa !461
  %27 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 0, i32 4
  store i64 6, i64* %27, align 8, !tbaa !193
  call void @_ZN5Eigen8internal37evaluateProductBlockingSizesHeuristicIiiLi1ElEEvRT2_S3_S3_S2_(i64* nonnull dereferenceable(8) %27, i64* nonnull dereferenceable(8) %25, i64* nonnull dereferenceable(8) %26, i64 1) #11
  %28 = load i64, i64* %25, align 8, !tbaa !460
  %29 = load i64, i64* %27, align 8, !tbaa !193
  %30 = mul nsw i64 %29, %28
  %31 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 1
  store i64 %30, i64* %31, align 8, !tbaa !462
  %32 = load i64, i64* %26, align 8, !tbaa !461
  %33 = mul nsw i64 %32, %29
  %34 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 2
  store i64 %33, i64* %34, align 8, !tbaa !464
  %35 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %8, align 8, !tbaa !11
  %36 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %35, i64 0, i32 0, i32 1
  %37 = load i64, i64* %36, align 8, !tbaa !43
  %38 = icmp eq i64 %37, -1
  %39 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %9, i64 0, i32 0, i32 1
  %40 = load i64, i64* %39, align 8, !tbaa !43
  %41 = select i1 %38, i64 %40, i64 %37
  %42 = getelementptr inbounds %"class.Eigen::PlainObjectBase.78", %"class.Eigen::PlainObjectBase.78"* %19, i64 0, i32 0, i32 0, i32 0, i64 0
  %43 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %9, i64 0, i32 0, i32 0
  %44 = load i32*, i32** %43, align 8, !tbaa !41
  %45 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %0, i64 0, i32 0, i32 0, i32 0
  %46 = load i32*, i32** %45, align 8, !tbaa !38
  %47 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 0
  call void @_ZN5Eigen8internal29general_matrix_matrix_productIliLi0ELb0EiLi1ELb0ELi0EE3runElllPKilS4_lPiliRNS0_15level3_blockingIiiEEPNS0_16GemmParallelInfoIlEE(i64 47, i64 %41, i64 6, i32* nonnull %42, i64 47, i32* nonnull %44, i64 %40, i32* nonnull %46, i64 47, i32 %23, %"class.Eigen::internal::level3_blocking"* nonnull dereferenceable(40) %47, %"struct.Eigen::internal::GemmParallelInfo"* null) #11
  %48 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 0, i32 0
  %49 = load i32*, i32** %48, align 8, !tbaa !195
  %50 = icmp eq i32* %49, null
  br i1 %50, label %55, label %51

; <label>:51:                                     ; preds = %16
  %52 = getelementptr inbounds i32, i32* %49, i64 -2
  %53 = bitcast i32* %52 to i8**
  %54 = load i8*, i8** %53, align 8, !tbaa !29
  call void @free(i8* %54) #11
  br label %55

; <label>:55:                                     ; preds = %51, %16
  %56 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 0, i32 1
  %57 = load i32*, i32** %56, align 8, !tbaa !196
  %58 = icmp eq i32* %57, null
  br i1 %58, label %63, label %59

; <label>:59:                                     ; preds = %55
  %60 = getelementptr inbounds i32, i32* %57, i64 -2
  %61 = bitcast i32* %60 to i8**
  %62 = load i8*, i8** %61, align 8, !tbaa !29
  call void @free(i8* %62) #11
  br label %63

; <label>:63:                                     ; preds = %55, %59
  call void @llvm.lifetime.end(i64 56, i8* nonnull %24) #11
  br label %64

; <label>:64:                                     ; preds = %14, %63
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS2_IiLi47ELi6ELi0ELi47ELi6EEEEESC_EENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.48"* dereferenceable(16), %"class.Eigen::Product.885"* dereferenceable(40), %"struct.Eigen::internal::assign_op.512"* dereferenceable(1)) local_unnamed_addr #6 {
  %4 = alloca %"struct.Eigen::internal::evaluator.892", align 8
  %5 = alloca %"struct.Eigen::internal::evaluator.529", align 8
  %6 = alloca %"class.Eigen::internal::generic_dense_assignment_kernel.899", align 8
  %7 = bitcast %"struct.Eigen::internal::evaluator.892"* %4 to i8*
  call void @llvm.lifetime.start(i64 1184, i8* nonnull %7) #11
  %8 = getelementptr inbounds %"class.Eigen::Product.885", %"class.Eigen::Product.885"* %1, i64 0, i32 0, i32 1, i32 2, i32 0
  %9 = load i32, i32* %8, align 4, !tbaa !51
  %10 = getelementptr inbounds %"class.Eigen::Product.885", %"class.Eigen::Product.885"* %1, i64 0, i32 0, i32 3
  %11 = load %"class.Eigen::Matrix.77"*, %"class.Eigen::Matrix.77"** %10, align 8, !tbaa !11
  %12 = ptrtoint %"struct.Eigen::internal::evaluator.892"* %4 to i64
  %13 = lshr exact i64 %12, 2
  %14 = sub nsw i64 0, %13
  %15 = and i64 %14, 2
  %16 = or i64 %15, 280
  %17 = icmp eq i64 %15, 0
  br i1 %17, label %25, label %18

; <label>:18:                                     ; preds = %3
  br label %19

; <label>:19:                                     ; preds = %18
  %20 = getelementptr inbounds %"struct.Eigen::internal::evaluator.892", %"struct.Eigen::internal::evaluator.892"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %21 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %22 = load i32, i32* %21, align 4, !tbaa !33
  %23 = mul nsw i32 %22, %9
  store i32 %23, i32* %20, align 8, !tbaa !33
  br i1 false, label %24, label %243

; <label>:24:                                     ; preds = %243, %19
  br label %25

; <label>:25:                                     ; preds = %24, %3
  %26 = phi i64 [ 0, %3 ], [ %15, %24 ]
  %27 = insertelement <4 x i32> undef, i32 %9, i32 0
  %28 = shufflevector <4 x i32> %27, <4 x i32> undef, <4 x i32> zeroinitializer
  %29 = add nuw nsw i64 %16, 31
  %30 = sub nsw i64 %29, %26
  %31 = lshr i64 %30, 2
  %32 = add nuw nsw i64 %31, 1
  %33 = and i64 %32, 7
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %49, label %35

; <label>:35:                                     ; preds = %25
  br label %36

; <label>:36:                                     ; preds = %36, %35
  %37 = phi i64 [ %26, %35 ], [ %45, %36 ]
  %38 = phi i64 [ %33, %35 ], [ %46, %36 ]
  %39 = getelementptr inbounds %"struct.Eigen::internal::evaluator.892", %"struct.Eigen::internal::evaluator.892"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %37
  %40 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %37
  %41 = bitcast i32* %40 to <4 x i32>*
  %42 = load <4 x i32>, <4 x i32>* %41, align 1, !tbaa !11
  %43 = mul <4 x i32> %42, %28
  %44 = bitcast i32* %39 to <4 x i32>*
  store <4 x i32> %43, <4 x i32>* %44, align 16, !tbaa !11
  %45 = add nuw nsw i64 %37, 4
  %46 = add i64 %38, -1
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %36, !llvm.loop !465

; <label>:48:                                     ; preds = %36
  br label %49

; <label>:49:                                     ; preds = %25, %48
  %50 = phi i64 [ %26, %25 ], [ %45, %48 ]
  br i1 false, label %53, label %51

; <label>:51:                                     ; preds = %49
  br label %119

; <label>:52:                                     ; preds = %119
  br label %53

; <label>:53:                                     ; preds = %49, %52
  %54 = icmp eq i64 %16, 282
  br i1 %54, label %180, label %55

; <label>:55:                                     ; preds = %53
  %56 = sub nsw i64 282, %15
  %57 = sub nsw i64 281, %16
  %58 = and i64 %56, 2
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %72, label %60

; <label>:60:                                     ; preds = %55
  br label %61

; <label>:61:                                     ; preds = %61, %60
  %62 = phi i64 [ %68, %61 ], [ %16, %60 ]
  %63 = phi i64 [ %69, %61 ], [ %58, %60 ]
  %64 = getelementptr inbounds %"struct.Eigen::internal::evaluator.892", %"struct.Eigen::internal::evaluator.892"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %62
  %65 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %62
  %66 = load i32, i32* %65, align 4, !tbaa !33
  %67 = mul nsw i32 %66, %9
  store i32 %67, i32* %64, align 4, !tbaa !33
  %68 = add nsw i64 %62, 1
  %69 = add i64 %63, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %61, !llvm.loop !466

; <label>:71:                                     ; preds = %61
  br label %72

; <label>:72:                                     ; preds = %55, %71
  %73 = phi i64 [ %16, %55 ], [ %68, %71 ]
  %74 = icmp ult i64 %57, 7
  br i1 %74, label %179, label %75

; <label>:75:                                     ; preds = %72
  br label %76

; <label>:76:                                     ; preds = %76, %75
  %77 = phi i64 [ %73, %75 ], [ %117, %76 ]
  %78 = getelementptr inbounds %"struct.Eigen::internal::evaluator.892", %"struct.Eigen::internal::evaluator.892"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %77
  %79 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %77
  %80 = load i32, i32* %79, align 4, !tbaa !33
  %81 = mul nsw i32 %80, %9
  store i32 %81, i32* %78, align 4, !tbaa !33
  %82 = add nsw i64 %77, 1
  %83 = getelementptr inbounds %"struct.Eigen::internal::evaluator.892", %"struct.Eigen::internal::evaluator.892"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %82
  %84 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %82
  %85 = load i32, i32* %84, align 4, !tbaa !33
  %86 = mul nsw i32 %85, %9
  store i32 %86, i32* %83, align 4, !tbaa !33
  %87 = add nsw i64 %77, 2
  %88 = getelementptr inbounds %"struct.Eigen::internal::evaluator.892", %"struct.Eigen::internal::evaluator.892"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %87
  %89 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %87
  %90 = load i32, i32* %89, align 4, !tbaa !33
  %91 = mul nsw i32 %90, %9
  store i32 %91, i32* %88, align 4, !tbaa !33
  %92 = add nsw i64 %77, 3
  %93 = getelementptr inbounds %"struct.Eigen::internal::evaluator.892", %"struct.Eigen::internal::evaluator.892"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %92
  %94 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %92
  %95 = load i32, i32* %94, align 4, !tbaa !33
  %96 = mul nsw i32 %95, %9
  store i32 %96, i32* %93, align 4, !tbaa !33
  %97 = add nsw i64 %77, 4
  %98 = getelementptr inbounds %"struct.Eigen::internal::evaluator.892", %"struct.Eigen::internal::evaluator.892"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %97
  %99 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %97
  %100 = load i32, i32* %99, align 4, !tbaa !33
  %101 = mul nsw i32 %100, %9
  store i32 %101, i32* %98, align 4, !tbaa !33
  %102 = add nsw i64 %77, 5
  %103 = getelementptr inbounds %"struct.Eigen::internal::evaluator.892", %"struct.Eigen::internal::evaluator.892"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %102
  %104 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %102
  %105 = load i32, i32* %104, align 4, !tbaa !33
  %106 = mul nsw i32 %105, %9
  store i32 %106, i32* %103, align 4, !tbaa !33
  %107 = add nsw i64 %77, 6
  %108 = getelementptr inbounds %"struct.Eigen::internal::evaluator.892", %"struct.Eigen::internal::evaluator.892"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %107
  %109 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %107
  %110 = load i32, i32* %109, align 4, !tbaa !33
  %111 = mul nsw i32 %110, %9
  store i32 %111, i32* %108, align 4, !tbaa !33
  %112 = add nsw i64 %77, 7
  %113 = getelementptr inbounds %"struct.Eigen::internal::evaluator.892", %"struct.Eigen::internal::evaluator.892"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %112
  %114 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %112
  %115 = load i32, i32* %114, align 4, !tbaa !33
  %116 = mul nsw i32 %115, %9
  store i32 %116, i32* %113, align 4, !tbaa !33
  %117 = add nsw i64 %77, 8
  %118 = icmp eq i64 %117, 282
  br i1 %118, label %178, label %76, !llvm.loop !467

; <label>:119:                                    ; preds = %119, %51
  %120 = phi i64 [ %50, %51 ], [ %176, %119 ]
  %121 = getelementptr inbounds %"struct.Eigen::internal::evaluator.892", %"struct.Eigen::internal::evaluator.892"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %120
  %122 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %120
  %123 = bitcast i32* %122 to <4 x i32>*
  %124 = load <4 x i32>, <4 x i32>* %123, align 1, !tbaa !11
  %125 = mul <4 x i32> %124, %28
  %126 = bitcast i32* %121 to <4 x i32>*
  store <4 x i32> %125, <4 x i32>* %126, align 16, !tbaa !11
  %127 = add nuw nsw i64 %120, 4
  %128 = getelementptr inbounds %"struct.Eigen::internal::evaluator.892", %"struct.Eigen::internal::evaluator.892"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %127
  %129 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %127
  %130 = bitcast i32* %129 to <4 x i32>*
  %131 = load <4 x i32>, <4 x i32>* %130, align 1, !tbaa !11
  %132 = mul <4 x i32> %131, %28
  %133 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> %132, <4 x i32>* %133, align 16, !tbaa !11
  %134 = add nsw i64 %120, 8
  %135 = getelementptr inbounds %"struct.Eigen::internal::evaluator.892", %"struct.Eigen::internal::evaluator.892"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %134
  %136 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %134
  %137 = bitcast i32* %136 to <4 x i32>*
  %138 = load <4 x i32>, <4 x i32>* %137, align 1, !tbaa !11
  %139 = mul <4 x i32> %138, %28
  %140 = bitcast i32* %135 to <4 x i32>*
  store <4 x i32> %139, <4 x i32>* %140, align 16, !tbaa !11
  %141 = add nsw i64 %120, 12
  %142 = getelementptr inbounds %"struct.Eigen::internal::evaluator.892", %"struct.Eigen::internal::evaluator.892"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %141
  %143 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %141
  %144 = bitcast i32* %143 to <4 x i32>*
  %145 = load <4 x i32>, <4 x i32>* %144, align 1, !tbaa !11
  %146 = mul <4 x i32> %145, %28
  %147 = bitcast i32* %142 to <4 x i32>*
  store <4 x i32> %146, <4 x i32>* %147, align 16, !tbaa !11
  %148 = add nsw i64 %120, 16
  %149 = getelementptr inbounds %"struct.Eigen::internal::evaluator.892", %"struct.Eigen::internal::evaluator.892"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %148
  %150 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %148
  %151 = bitcast i32* %150 to <4 x i32>*
  %152 = load <4 x i32>, <4 x i32>* %151, align 1, !tbaa !11
  %153 = mul <4 x i32> %152, %28
  %154 = bitcast i32* %149 to <4 x i32>*
  store <4 x i32> %153, <4 x i32>* %154, align 16, !tbaa !11
  %155 = add nsw i64 %120, 20
  %156 = getelementptr inbounds %"struct.Eigen::internal::evaluator.892", %"struct.Eigen::internal::evaluator.892"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %155
  %157 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %155
  %158 = bitcast i32* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 1, !tbaa !11
  %160 = mul <4 x i32> %159, %28
  %161 = bitcast i32* %156 to <4 x i32>*
  store <4 x i32> %160, <4 x i32>* %161, align 16, !tbaa !11
  %162 = add nsw i64 %120, 24
  %163 = getelementptr inbounds %"struct.Eigen::internal::evaluator.892", %"struct.Eigen::internal::evaluator.892"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %162
  %164 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %162
  %165 = bitcast i32* %164 to <4 x i32>*
  %166 = load <4 x i32>, <4 x i32>* %165, align 1, !tbaa !11
  %167 = mul <4 x i32> %166, %28
  %168 = bitcast i32* %163 to <4 x i32>*
  store <4 x i32> %167, <4 x i32>* %168, align 16, !tbaa !11
  %169 = add nsw i64 %120, 28
  %170 = getelementptr inbounds %"struct.Eigen::internal::evaluator.892", %"struct.Eigen::internal::evaluator.892"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %169
  %171 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %169
  %172 = bitcast i32* %171 to <4 x i32>*
  %173 = load <4 x i32>, <4 x i32>* %172, align 1, !tbaa !11
  %174 = mul <4 x i32> %173, %28
  %175 = bitcast i32* %170 to <4 x i32>*
  store <4 x i32> %174, <4 x i32>* %175, align 16, !tbaa !11
  %176 = add nsw i64 %120, 32
  %177 = icmp slt i64 %176, %16
  br i1 %177, label %119, label %52

; <label>:178:                                    ; preds = %76
  br label %179

; <label>:179:                                    ; preds = %72, %178
  br label %180

; <label>:180:                                    ; preds = %179, %53
  %181 = getelementptr inbounds %"struct.Eigen::internal::evaluator.892", %"struct.Eigen::internal::evaluator.892"* %4, i64 0, i32 0, i32 1
  %182 = getelementptr inbounds %"class.Eigen::Product.885", %"class.Eigen::Product.885"* %1, i64 0, i32 1
  %183 = bitcast %"class.Eigen::Transpose.296"* %182 to i64*
  %184 = load i64, i64* %183, align 8
  %185 = bitcast %"class.Eigen::Transpose.296"* %181 to i64*
  store i64 %184, i64* %185, align 8
  %186 = getelementptr inbounds %"struct.Eigen::internal::evaluator.892", %"struct.Eigen::internal::evaluator.892"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %187 = getelementptr inbounds %"struct.Eigen::internal::evaluator.892", %"struct.Eigen::internal::evaluator.892"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0
  store i32* %187, i32** %186, align 8, !tbaa !94
  %188 = getelementptr inbounds %"struct.Eigen::internal::evaluator.892", %"struct.Eigen::internal::evaluator.892"* %4, i64 0, i32 0, i32 3, i32 0, i32 1
  %189 = inttoptr i64 %184 to %"class.Eigen::Matrix.123"*
  %190 = inttoptr i64 %184 to i64*
  %191 = load i64, i64* %190, align 8, !tbaa !41
  %192 = bitcast %"struct.Eigen::internal::evaluator.898"* %188 to i64*
  store i64 %191, i64* %192, align 8, !tbaa !468
  %193 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %189, i64 0, i32 0, i32 0, i32 1
  %194 = load i64, i64* %193, align 8, !tbaa !43
  %195 = getelementptr inbounds %"struct.Eigen::internal::evaluator.892", %"struct.Eigen::internal::evaluator.892"* %4, i64 0, i32 0, i32 3, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0
  store i64 %194, i64* %195, align 8, !tbaa !59
  %196 = getelementptr inbounds %"struct.Eigen::internal::evaluator.892", %"struct.Eigen::internal::evaluator.892"* %4, i64 0, i32 0, i32 4
  store i64 6, i64* %196, align 8, !tbaa !470
  %197 = inttoptr i64 %184 to %"class.Eigen::PlainObjectBase.124"*
  %198 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %197, i64 0, i32 0, i32 1
  %199 = load i64, i64* %198, align 8, !tbaa !43
  %200 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %0, i64 0, i32 0, i32 0, i32 1
  %201 = load i64, i64* %200, align 8, !tbaa !40
  %202 = icmp eq i64 %201, %199
  br i1 %202, label %203, label %206

; <label>:203:                                    ; preds = %180
  %204 = bitcast %"class.Eigen::Matrix.48"* %0 to i64*
  %205 = load i64, i64* %204, align 8, !tbaa !38
  br label %234

; <label>:206:                                    ; preds = %180
  %207 = icmp sgt i64 %199, -1
  br i1 %207, label %209, label %208, !prof !10

; <label>:208:                                    ; preds = %206
  call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:209:                                    ; preds = %206
  %210 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %0, i64 0, i32 0, i32 0, i32 0
  %211 = load i32*, i32** %210, align 8, !tbaa !38
  %212 = icmp eq i32* %211, null
  br i1 %212, label %217, label %213

; <label>:213:                                    ; preds = %209
  %214 = getelementptr inbounds i32, i32* %211, i64 -2
  %215 = bitcast i32* %214 to i8**
  %216 = load i8*, i8** %215, align 8, !tbaa !29
  call void @free(i8* %216) #11
  br label %217

; <label>:217:                                    ; preds = %213, %209
  %218 = icmp eq i64 %199, 0
  br i1 %218, label %231, label %219

; <label>:219:                                    ; preds = %217
  %220 = mul i64 %199, 188
  %221 = add i64 %220, 32
  %222 = call i8* @malloc(i64 %221) #14
  %223 = icmp eq i8* %222, null
  br i1 %223, label %231, label %224

; <label>:224:                                    ; preds = %219
  %225 = ptrtoint i8* %222 to i64
  %226 = add i64 %225, 32
  %227 = and i64 %226, -32
  %228 = inttoptr i64 %227 to i8**
  %229 = getelementptr inbounds i8*, i8** %228, i64 -1
  store i8* %222, i8** %229, align 8, !tbaa !29
  %230 = inttoptr i64 %227 to i32*
  br label %231

; <label>:231:                                    ; preds = %217, %219, %224
  %232 = phi i32* [ %230, %224 ], [ null, %219 ], [ null, %217 ]
  store i32* %232, i32** %210, align 8, !tbaa !38
  store i64 %199, i64* %200, align 8, !tbaa !40
  %233 = ptrtoint i32* %232 to i64
  br label %234

; <label>:234:                                    ; preds = %203, %231
  %235 = phi i64 [ %205, %203 ], [ %233, %231 ]
  %236 = bitcast %"struct.Eigen::internal::evaluator.529"* %5 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %236) #11
  %237 = bitcast %"struct.Eigen::internal::evaluator.529"* %5 to i64*
  store i64 %235, i64* %237, align 8, !tbaa !475
  %238 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.899"* %6 to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %238) #11
  %239 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.899", %"class.Eigen::internal::generic_dense_assignment_kernel.899"* %6, i64 0, i32 0
  store %"struct.Eigen::internal::evaluator.529"* %5, %"struct.Eigen::internal::evaluator.529"** %239, align 8, !tbaa !11
  %240 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.899", %"class.Eigen::internal::generic_dense_assignment_kernel.899"* %6, i64 0, i32 1
  store %"struct.Eigen::internal::evaluator.892"* %4, %"struct.Eigen::internal::evaluator.892"** %240, align 8, !tbaa !11
  %241 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.899", %"class.Eigen::internal::generic_dense_assignment_kernel.899"* %6, i64 0, i32 2
  store %"struct.Eigen::internal::assign_op.512"* %2, %"struct.Eigen::internal::assign_op.512"** %241, align 8, !tbaa !11
  %242 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.899", %"class.Eigen::internal::generic_dense_assignment_kernel.899"* %6, i64 0, i32 3
  store %"class.Eigen::Matrix.48"* %0, %"class.Eigen::Matrix.48"** %242, align 8, !tbaa !11
  call void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS4_IiLi47ELi6ELi0ELi47ELi6EEEEESF_EENS_9TransposeIKNS4_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEEEENS0_9assign_opIiiEELi0EEELi4ELi0EE3runERSR_(%"class.Eigen::internal::generic_dense_assignment_kernel.899"* nonnull dereferenceable(32) %6)
  call void @llvm.lifetime.end(i64 32, i8* nonnull %238) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %236) #11
  call void @llvm.lifetime.end(i64 1184, i8* nonnull %7) #11
  ret void

; <label>:243:                                    ; preds = %19
  %244 = getelementptr inbounds %"struct.Eigen::internal::evaluator.892", %"struct.Eigen::internal::evaluator.892"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %245 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %246 = load i32, i32* %245, align 4, !tbaa !33
  %247 = mul nsw i32 %246, %9
  store i32 %247, i32* %244, align 4, !tbaa !33
  br label %24
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS4_IiLi47ELi6ELi0ELi47ELi6EEEEESF_EENS_9TransposeIKNS4_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEEEENS0_9assign_opIiiEELi0EEELi4ELi0EE3runERSR_(%"class.Eigen::internal::generic_dense_assignment_kernel.899"* dereferenceable(32)) local_unnamed_addr #6 align 2 {
  %2 = alloca %"struct.Eigen::internal::scalar_sum_op", align 1
  %3 = alloca %"class.Eigen::CwiseBinaryOp.916", align 8
  %4 = alloca %"struct.Eigen::internal::scalar_sum_op", align 1
  %5 = alloca %"class.Eigen::CwiseBinaryOp.916", align 8
  %6 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.899", %"class.Eigen::internal::generic_dense_assignment_kernel.899"* %0, i64 0, i32 3
  %7 = bitcast %"class.Eigen::Matrix.48"** %6 to %"class.Eigen::DenseBase.51"**
  %8 = load %"class.Eigen::DenseBase.51"*, %"class.Eigen::DenseBase.51"** %7, align 8, !tbaa !11
  %9 = getelementptr inbounds %"class.Eigen::DenseBase.51", %"class.Eigen::DenseBase.51"* %8, i64 8
  %10 = bitcast %"class.Eigen::DenseBase.51"* %9 to i64*
  %11 = load i64, i64* %10, align 8, !tbaa !40
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %50

; <label>:13:                                     ; preds = %1
  %14 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.899"* %0 to %"struct.Eigen::internal::evaluator.530"**
  %15 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.899", %"class.Eigen::internal::generic_dense_assignment_kernel.899"* %0, i64 0, i32 1
  %16 = bitcast %"struct.Eigen::internal::evaluator.892"** %15 to %"struct.Eigen::internal::product_evaluator.893"**
  %17 = bitcast %"class.Eigen::CwiseBinaryOp.916"* %3 to i8*
  %18 = bitcast %"class.Eigen::CwiseBinaryOp.916"* %3 to i64*
  %19 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %20 = bitcast %"class.Eigen::Matrix.77"** %19 to %"struct.Eigen::internal::product_evaluator.893"**
  %21 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  %22 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 0
  %23 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %3, i64 0, i32 1
  %24 = bitcast %"class.Eigen::Block.922"* %23 to i64*
  %25 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %3, i64 0, i32 1, i32 0, i32 0, i32 1
  %26 = bitcast %"class.Eigen::Transpose.296"* %25 to i64*
  %27 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %3, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0
  %28 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %3, i64 0, i32 1, i32 0, i32 0, i32 3, i32 0
  %29 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %3, i64 0, i32 1, i32 0, i32 0, i32 4
  %30 = bitcast %"class.Eigen::CwiseBinaryOp.916"* %3 to %"class.Eigen::DenseBase.919"*
  %31 = getelementptr inbounds %"struct.Eigen::internal::scalar_sum_op", %"struct.Eigen::internal::scalar_sum_op"* %2, i64 0, i32 0
  %32 = bitcast %"class.Eigen::CwiseBinaryOp.916"* %5 to i8*
  %33 = bitcast %"class.Eigen::CwiseBinaryOp.916"* %5 to i64*
  %34 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %35 = bitcast %"class.Eigen::Matrix.77"** %34 to %"struct.Eigen::internal::product_evaluator.893"**
  %36 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  %37 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 0
  %38 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %5, i64 0, i32 1
  %39 = bitcast %"class.Eigen::Block.922"* %38 to i64*
  %40 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %5, i64 0, i32 1, i32 0, i32 0, i32 1
  %41 = bitcast %"class.Eigen::Transpose.296"* %40 to i64*
  %42 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %5, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0
  %43 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %5, i64 0, i32 1, i32 0, i32 0, i32 3, i32 0
  %44 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %5, i64 0, i32 1, i32 0, i32 0, i32 4
  %45 = bitcast %"class.Eigen::CwiseBinaryOp.916"* %5 to %"class.Eigen::DenseBase.919"*
  %46 = getelementptr inbounds %"struct.Eigen::internal::scalar_sum_op", %"struct.Eigen::internal::scalar_sum_op"* %4, i64 0, i32 0
  %47 = bitcast i64* %22 to <2 x i64>*
  %48 = bitcast i64* %37 to <2 x i64>*
  br label %51

; <label>:49:                                     ; preds = %199
  br label %50

; <label>:50:                                     ; preds = %49, %1
  ret void

; <label>:51:                                     ; preds = %13, %199
  %52 = phi i64 [ 0, %13 ], [ %201, %199 ]
  %53 = phi i64 [ 0, %13 ], [ %202, %199 ]
  %54 = sub nsw i64 47, %52
  %55 = and i64 %54, -4
  %56 = add nsw i64 %55, %52
  %57 = icmp sgt i64 %52, 0
  br i1 %57, label %58, label %85

; <label>:58:                                     ; preds = %51
  %59 = mul nsw i64 %53, 47
  br label %60

; <label>:60:                                     ; preds = %71, %58
  %61 = phi i64 [ %82, %71 ], [ 0, %58 ]
  %62 = load %"struct.Eigen::internal::evaluator.530"*, %"struct.Eigen::internal::evaluator.530"** %14, align 8, !tbaa !11
  %63 = getelementptr inbounds %"struct.Eigen::internal::evaluator.530", %"struct.Eigen::internal::evaluator.530"* %62, i64 0, i32 0
  %64 = load i32*, i32** %63, align 8, !tbaa !475
  %65 = load %"struct.Eigen::internal::product_evaluator.893"*, %"struct.Eigen::internal::product_evaluator.893"** %16, align 8, !tbaa !11
  call void @llvm.lifetime.start(i64 104, i8* nonnull %17) #11
  %66 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.893", %"struct.Eigen::internal::product_evaluator.893"* %65, i64 0, i32 1, i32 0
  %67 = load %"class.Eigen::Matrix.123"*, %"class.Eigen::Matrix.123"** %66, align 8, !tbaa !11, !noalias !477
  %68 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %67, i64 0, i32 0, i32 0, i32 1
  %69 = load i64, i64* %68, align 8, !tbaa !43, !noalias !477
  %70 = icmp sgt i64 %69, %53
  br i1 %70, label %71, label %89, !prof !10

; <label>:71:                                     ; preds = %60
  %72 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.893", %"struct.Eigen::internal::product_evaluator.893"* %65, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %61
  %73 = ptrtoint i32* %72 to i64
  %74 = add nsw i64 %61, %59
  %75 = getelementptr inbounds i32, i32* %64, i64 %74
  %76 = ptrtoint %"class.Eigen::Matrix.123"* %67 to i64
  %77 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %67, i64 0, i32 0, i32 0, i32 0
  %78 = load i32*, i32** %77, align 8, !tbaa !41, !noalias !477
  %79 = getelementptr inbounds i32, i32* %78, i64 %53
  %80 = ptrtoint i32* %79 to i64
  store i64 %73, i64* %18, align 8, !tbaa !480, !alias.scope !482
  store %"struct.Eigen::internal::product_evaluator.893"* %65, %"struct.Eigen::internal::product_evaluator.893"** %20, align 8
  store i64 %61, i64* %21, align 8
  store <2 x i64> <i64 0, i64 1>, <2 x i64>* %47, align 8
  store i64 %80, i64* %24, align 8, !tbaa !485, !alias.scope !482
  store i64 %76, i64* %26, align 8
  store i64 0, i64* %27, align 8
  store i64 %53, i64* %28, align 8
  store i64 1, i64* %29, align 8
  call void @llvm.lifetime.start(i64 1, i8* nonnull %31) #11
  %81 = call i32 @_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0EEEEEKNS6_IKNS5_IKNS7_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIiiEEEEiRKT_(%"class.Eigen::DenseBase.919"* nonnull %30, %"struct.Eigen::internal::scalar_sum_op"* nonnull dereferenceable(1) %2) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %31) #11
  call void @llvm.lifetime.end(i64 104, i8* nonnull %17) #11
  store i32 %81, i32* %75, align 4, !tbaa !33
  %82 = add nuw nsw i64 %61, 1
  %83 = icmp slt i64 %82, %52
  br i1 %83, label %60, label %84

; <label>:84:                                     ; preds = %71
  br label %85

; <label>:85:                                     ; preds = %84, %51
  %86 = icmp sgt i64 %55, 0
  br i1 %86, label %87, label %91

; <label>:87:                                     ; preds = %85
  %88 = mul nsw i64 %53, 47
  br label %119

; <label>:89:                                     ; preds = %60
  call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !477
  unreachable

; <label>:90:                                     ; preds = %119
  br label %91

; <label>:91:                                     ; preds = %90, %85
  %92 = icmp slt i64 %56, 47
  br i1 %92, label %93, label %199

; <label>:93:                                     ; preds = %91
  %94 = mul nsw i64 %53, 47
  br label %95

; <label>:95:                                     ; preds = %106, %93
  %96 = phi i64 [ %117, %106 ], [ %56, %93 ]
  %97 = load %"struct.Eigen::internal::evaluator.530"*, %"struct.Eigen::internal::evaluator.530"** %14, align 8, !tbaa !11
  %98 = getelementptr inbounds %"struct.Eigen::internal::evaluator.530", %"struct.Eigen::internal::evaluator.530"* %97, i64 0, i32 0
  %99 = load i32*, i32** %98, align 8, !tbaa !475
  %100 = load %"struct.Eigen::internal::product_evaluator.893"*, %"struct.Eigen::internal::product_evaluator.893"** %16, align 8, !tbaa !11
  call void @llvm.lifetime.start(i64 104, i8* nonnull %32) #11
  %101 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.893", %"struct.Eigen::internal::product_evaluator.893"* %100, i64 0, i32 1, i32 0
  %102 = load %"class.Eigen::Matrix.123"*, %"class.Eigen::Matrix.123"** %101, align 8, !tbaa !11, !noalias !487
  %103 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %102, i64 0, i32 0, i32 0, i32 1
  %104 = load i64, i64* %103, align 8, !tbaa !43, !noalias !487
  %105 = icmp sgt i64 %104, %53
  br i1 %105, label %106, label %204, !prof !10

; <label>:106:                                    ; preds = %95
  %107 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.893", %"struct.Eigen::internal::product_evaluator.893"* %100, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %96
  %108 = ptrtoint i32* %107 to i64
  %109 = add nsw i64 %96, %94
  %110 = getelementptr inbounds i32, i32* %99, i64 %109
  %111 = ptrtoint %"class.Eigen::Matrix.123"* %102 to i64
  %112 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %102, i64 0, i32 0, i32 0, i32 0
  %113 = load i32*, i32** %112, align 8, !tbaa !41, !noalias !487
  %114 = getelementptr inbounds i32, i32* %113, i64 %53
  %115 = ptrtoint i32* %114 to i64
  store i64 %108, i64* %33, align 8, !tbaa !480, !alias.scope !490
  store %"struct.Eigen::internal::product_evaluator.893"* %100, %"struct.Eigen::internal::product_evaluator.893"** %35, align 8
  store i64 %96, i64* %36, align 8
  store <2 x i64> <i64 0, i64 1>, <2 x i64>* %48, align 8
  store i64 %115, i64* %39, align 8, !tbaa !485, !alias.scope !490
  store i64 %111, i64* %41, align 8
  store i64 0, i64* %42, align 8
  store i64 %53, i64* %43, align 8
  store i64 1, i64* %44, align 8
  call void @llvm.lifetime.start(i64 1, i8* nonnull %46) #11
  %116 = call i32 @_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0EEEEEKNS6_IKNS5_IKNS7_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIiiEEEEiRKT_(%"class.Eigen::DenseBase.919"* nonnull %45, %"struct.Eigen::internal::scalar_sum_op"* nonnull dereferenceable(1) %4) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %46) #11
  call void @llvm.lifetime.end(i64 104, i8* nonnull %32) #11
  store i32 %116, i32* %110, align 4, !tbaa !33
  %117 = add nsw i64 %96, 1
  %118 = icmp slt i64 %117, 47
  br i1 %118, label %95, label %198

; <label>:119:                                    ; preds = %87, %119
  %120 = phi i64 [ %52, %87 ], [ %196, %119 ]
  %121 = load %"struct.Eigen::internal::evaluator.530"*, %"struct.Eigen::internal::evaluator.530"** %14, align 8, !tbaa !11
  %122 = getelementptr inbounds %"struct.Eigen::internal::evaluator.530", %"struct.Eigen::internal::evaluator.530"* %121, i64 0, i32 0
  %123 = load i32*, i32** %122, align 8, !tbaa !475
  %124 = add nsw i64 %120, %88
  %125 = getelementptr inbounds i32, i32* %123, i64 %124
  %126 = load %"struct.Eigen::internal::product_evaluator.893"*, %"struct.Eigen::internal::product_evaluator.893"** %16, align 8, !tbaa !11
  %127 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.893", %"struct.Eigen::internal::product_evaluator.893"* %126, i64 0, i32 2, i32 0, i32 0
  %128 = load i32*, i32** %127, align 8, !tbaa !94
  %129 = getelementptr inbounds i32, i32* %128, i64 %120
  %130 = bitcast i32* %129 to <4 x i32>*
  %131 = load <4 x i32>, <4 x i32>* %130, align 1, !tbaa !11
  %132 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.893", %"struct.Eigen::internal::product_evaluator.893"* %126, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0, i32 0
  %133 = load i32*, i32** %132, align 8, !tbaa !468
  %134 = getelementptr inbounds i32, i32* %133, i64 %53
  %135 = load i32, i32* %134, align 4, !tbaa !33
  %136 = insertelement <4 x i32> undef, i32 %135, i32 0
  %137 = shufflevector <4 x i32> %136, <4 x i32> undef, <4 x i32> zeroinitializer
  %138 = mul <4 x i32> %137, %131
  %139 = getelementptr inbounds i32, i32* %129, i64 47
  %140 = bitcast i32* %139 to <4 x i32>*
  %141 = load <4 x i32>, <4 x i32>* %140, align 1, !tbaa !11
  %142 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.893", %"struct.Eigen::internal::product_evaluator.893"* %126, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0
  %143 = load i64, i64* %142, align 8, !tbaa !59
  %144 = add nsw i64 %143, %53
  %145 = getelementptr inbounds i32, i32* %133, i64 %144
  %146 = load i32, i32* %145, align 4, !tbaa !33
  %147 = insertelement <4 x i32> undef, i32 %146, i32 0
  %148 = shufflevector <4 x i32> %147, <4 x i32> undef, <4 x i32> zeroinitializer
  %149 = mul <4 x i32> %148, %141
  %150 = add <4 x i32> %149, %138
  %151 = getelementptr inbounds i32, i32* %129, i64 94
  %152 = bitcast i32* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 1, !tbaa !11
  %154 = shl i64 %143, 1
  %155 = add nsw i64 %154, %53
  %156 = getelementptr inbounds i32, i32* %133, i64 %155
  %157 = load i32, i32* %156, align 4, !tbaa !33
  %158 = insertelement <4 x i32> undef, i32 %157, i32 0
  %159 = shufflevector <4 x i32> %158, <4 x i32> undef, <4 x i32> zeroinitializer
  %160 = mul <4 x i32> %159, %153
  %161 = add <4 x i32> %150, %160
  %162 = getelementptr inbounds i32, i32* %129, i64 141
  %163 = bitcast i32* %162 to <4 x i32>*
  %164 = load <4 x i32>, <4 x i32>* %163, align 1, !tbaa !11
  %165 = mul nsw i64 %143, 3
  %166 = add nsw i64 %165, %53
  %167 = getelementptr inbounds i32, i32* %133, i64 %166
  %168 = load i32, i32* %167, align 4, !tbaa !33
  %169 = insertelement <4 x i32> undef, i32 %168, i32 0
  %170 = shufflevector <4 x i32> %169, <4 x i32> undef, <4 x i32> zeroinitializer
  %171 = mul <4 x i32> %170, %164
  %172 = add <4 x i32> %161, %171
  %173 = getelementptr inbounds i32, i32* %129, i64 188
  %174 = bitcast i32* %173 to <4 x i32>*
  %175 = load <4 x i32>, <4 x i32>* %174, align 1, !tbaa !11
  %176 = shl i64 %143, 2
  %177 = add nsw i64 %176, %53
  %178 = getelementptr inbounds i32, i32* %133, i64 %177
  %179 = load i32, i32* %178, align 4, !tbaa !33
  %180 = insertelement <4 x i32> undef, i32 %179, i32 0
  %181 = shufflevector <4 x i32> %180, <4 x i32> undef, <4 x i32> zeroinitializer
  %182 = mul <4 x i32> %181, %175
  %183 = add <4 x i32> %172, %182
  %184 = getelementptr inbounds i32, i32* %129, i64 235
  %185 = bitcast i32* %184 to <4 x i32>*
  %186 = load <4 x i32>, <4 x i32>* %185, align 1, !tbaa !11
  %187 = mul nsw i64 %143, 5
  %188 = add nsw i64 %187, %53
  %189 = getelementptr inbounds i32, i32* %133, i64 %188
  %190 = load i32, i32* %189, align 4, !tbaa !33
  %191 = insertelement <4 x i32> undef, i32 %190, i32 0
  %192 = shufflevector <4 x i32> %191, <4 x i32> undef, <4 x i32> zeroinitializer
  %193 = mul <4 x i32> %192, %186
  %194 = add <4 x i32> %183, %193
  %195 = bitcast i32* %125 to <4 x i32>*
  store <4 x i32> %194, <4 x i32>* %195, align 16, !tbaa !11
  %196 = add nsw i64 %120, 4
  %197 = icmp slt i64 %196, %56
  br i1 %197, label %119, label %90

; <label>:198:                                    ; preds = %106
  br label %199

; <label>:199:                                    ; preds = %198, %91
  %200 = add nsw i64 %52, 1
  %201 = srem i64 %200, 4
  %202 = add nuw nsw i64 %53, 1
  %203 = icmp slt i64 %202, %11
  br i1 %203, label %51, label %49

; <label>:204:                                    ; preds = %95
  call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !487
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr i32 @_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0EEEEEKNS6_IKNS5_IKNS7_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIiiEEEEiRKT_(%"class.Eigen::DenseBase.919"*, %"struct.Eigen::internal::scalar_sum_op"* dereferenceable(1)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.Eigen::DenseBase.919"* %0 to i32**
  %4 = load i32*, i32** %3, align 8, !tbaa !480
  %5 = getelementptr inbounds %"class.Eigen::DenseBase.919", %"class.Eigen::DenseBase.919"* %0, i64 40
  %6 = bitcast %"class.Eigen::DenseBase.919"* %5 to i64*
  %7 = load i64, i64* %6, align 8, !tbaa !493
  %8 = icmp eq i64 %7, 1
  br i1 %8, label %10, label %9, !prof !10

; <label>:9:                                      ; preds = %2
  tail call void @__assert_rtn(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__func__._ZN5Eigen8internal19variable_if_dynamicIlLi0EEC2El, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.8, i64 0, i64 0), i32 110, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0)) #13
  unreachable

; <label>:10:                                     ; preds = %2
  %11 = getelementptr inbounds %"class.Eigen::DenseBase.919", %"class.Eigen::DenseBase.919"* %0, i64 64
  %12 = bitcast %"class.Eigen::DenseBase.919"* %11 to %"class.Eigen::Matrix.123"**
  %13 = load %"class.Eigen::Matrix.123"*, %"class.Eigen::Matrix.123"** %12, align 8, !tbaa !11
  %14 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %13, i64 0, i32 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8, !tbaa !43
  %16 = getelementptr inbounds %"class.Eigen::DenseBase.919", %"class.Eigen::DenseBase.919"* %0, i64 88
  %17 = bitcast %"class.Eigen::DenseBase.919"* %16 to i64*
  %18 = load i64, i64* %17, align 8, !tbaa !495
  %19 = icmp eq i64 %18, 1
  br i1 %19, label %21, label %20, !prof !10

; <label>:20:                                     ; preds = %10
  tail call void @__assert_rtn(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__func__._ZN5Eigen8internal19variable_if_dynamicIlLi0EEC2El, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.8, i64 0, i64 0), i32 110, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0)) #13
  unreachable

; <label>:21:                                     ; preds = %10
  %22 = getelementptr inbounds %"class.Eigen::DenseBase.919", %"class.Eigen::DenseBase.919"* %0, i64 48
  %23 = bitcast %"class.Eigen::DenseBase.919"* %22 to i32**
  %24 = load i32*, i32** %23, align 8, !tbaa !485
  %25 = load i32, i32* %4, align 4, !tbaa !33
  %26 = load i32, i32* %24, align 4, !tbaa !33
  %27 = mul nsw i32 %26, %25
  %28 = getelementptr inbounds i32, i32* %4, i64 47
  %29 = load i32, i32* %28, align 4, !tbaa !33
  %30 = getelementptr inbounds i32, i32* %24, i64 %15
  %31 = load i32, i32* %30, align 4, !tbaa !33
  %32 = mul nsw i32 %31, %29
  %33 = getelementptr inbounds i32, i32* %4, i64 94
  %34 = load i32, i32* %33, align 4, !tbaa !33
  %35 = shl nsw i64 %15, 1
  %36 = getelementptr inbounds i32, i32* %24, i64 %35
  %37 = load i32, i32* %36, align 4, !tbaa !33
  %38 = mul nsw i32 %37, %34
  %39 = getelementptr inbounds i32, i32* %4, i64 141
  %40 = load i32, i32* %39, align 4, !tbaa !33
  %41 = mul nsw i64 %15, 3
  %42 = getelementptr inbounds i32, i32* %24, i64 %41
  %43 = load i32, i32* %42, align 4, !tbaa !33
  %44 = mul nsw i32 %43, %40
  %45 = getelementptr inbounds i32, i32* %4, i64 188
  %46 = load i32, i32* %45, align 4, !tbaa !33
  %47 = shl nsw i64 %15, 2
  %48 = getelementptr inbounds i32, i32* %24, i64 %47
  %49 = load i32, i32* %48, align 4, !tbaa !33
  %50 = mul nsw i32 %49, %46
  %51 = getelementptr inbounds i32, i32* %4, i64 235
  %52 = load i32, i32* %51, align 4, !tbaa !33
  %53 = mul nsw i64 %15, 5
  %54 = getelementptr inbounds i32, i32* %24, i64 %53
  %55 = load i32, i32* %54, align 4, !tbaa !33
  %56 = mul nsw i32 %55, %52
  %57 = add i32 %32, %27
  %58 = add i32 %57, %38
  %59 = add i32 %58, %44
  %60 = add i32 %59, %50
  %61 = add i32 %60, %56
  ret i32 %61
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal37evaluateProductBlockingSizesHeuristicIiiLi1ElEEvRT2_S3_S3_S2_(i64* dereferenceable(8), i64* dereferenceable(8), i64* dereferenceable(8), i64) local_unnamed_addr #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = load atomic i8, i8* bitcast (i64* @_ZGVZN5Eigen8internal20manage_caching_sizesENS_6ActionEPlS2_S2_E12m_cacheSizes to i8*) acquire, align 8
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %29

; <label>:10:                                     ; preds = %4
  %11 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5Eigen8internal20manage_caching_sizesENS_6ActionEPlS2_S2_E12m_cacheSizes) #11
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %29, label %13

; <label>:13:                                     ; preds = %10
  %14 = bitcast i32* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* bitcast (%"struct.Eigen::internal::CacheSizes"* @_ZZN5Eigen8internal20manage_caching_sizesENS_6ActionEPlS2_S2_E12m_cacheSizes to i8*), i8 -1, i64 24, i32 8, i1 false) #11
  call void @llvm.lifetime.start(i64 4, i8* nonnull %14) #11
  %15 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start(i64 4, i8* nonnull %15) #11
  %16 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start(i64 4, i8* nonnull %16) #11
  call void @_ZN5Eigen8internal15queryCacheSizesERiS1_S1_(i32* nonnull dereferenceable(4) %5, i32* nonnull dereferenceable(4) %6, i32* nonnull dereferenceable(4) %7) #11
  %17 = load i32, i32* %5, align 4, !tbaa !33
  %18 = sext i32 %17 to i64
  %19 = icmp slt i32 %17, 1
  %20 = select i1 %19, i64 32768, i64 %18
  store i64 %20, i64* getelementptr inbounds (%"struct.Eigen::internal::CacheSizes", %"struct.Eigen::internal::CacheSizes"* @_ZZN5Eigen8internal20manage_caching_sizesENS_6ActionEPlS2_S2_E12m_cacheSizes, i64 0, i32 0), align 8, !tbaa !497
  %21 = load i32, i32* %6, align 4, !tbaa !33
  %22 = sext i32 %21 to i64
  %23 = icmp slt i32 %21, 1
  %24 = select i1 %23, i64 262144, i64 %22
  store i64 %24, i64* getelementptr inbounds (%"struct.Eigen::internal::CacheSizes", %"struct.Eigen::internal::CacheSizes"* @_ZZN5Eigen8internal20manage_caching_sizesENS_6ActionEPlS2_S2_E12m_cacheSizes, i64 0, i32 1), align 8, !tbaa !499
  %25 = load i32, i32* %7, align 4, !tbaa !33
  %26 = sext i32 %25 to i64
  %27 = icmp slt i32 %25, 1
  %28 = select i1 %27, i64 2097152, i64 %26
  store i64 %28, i64* getelementptr inbounds (%"struct.Eigen::internal::CacheSizes", %"struct.Eigen::internal::CacheSizes"* @_ZZN5Eigen8internal20manage_caching_sizesENS_6ActionEPlS2_S2_E12m_cacheSizes, i64 0, i32 2), align 8, !tbaa !500
  call void @llvm.lifetime.end(i64 4, i8* nonnull %16) #11
  call void @llvm.lifetime.end(i64 4, i8* nonnull %15) #11
  call void @llvm.lifetime.end(i64 4, i8* nonnull %14) #11
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN5Eigen8internal20manage_caching_sizesENS_6ActionEPlS2_S2_E12m_cacheSizes) #11
  br label %29

; <label>:29:                                     ; preds = %4, %10, %13
  %30 = load i64, i64* getelementptr inbounds (%"struct.Eigen::internal::CacheSizes", %"struct.Eigen::internal::CacheSizes"* @_ZZN5Eigen8internal20manage_caching_sizesENS_6ActionEPlS2_S2_E12m_cacheSizes, i64 0, i32 0), align 8, !tbaa !497
  %31 = load i64, i64* getelementptr inbounds (%"struct.Eigen::internal::CacheSizes", %"struct.Eigen::internal::CacheSizes"* @_ZZN5Eigen8internal20manage_caching_sizesENS_6ActionEPlS2_S2_E12m_cacheSizes, i64 0, i32 1), align 8, !tbaa !499
  %32 = load i64, i64* getelementptr inbounds (%"struct.Eigen::internal::CacheSizes", %"struct.Eigen::internal::CacheSizes"* @_ZZN5Eigen8internal20manage_caching_sizesENS_6ActionEPlS2_S2_E12m_cacheSizes, i64 0, i32 2), align 8, !tbaa !500
  %33 = icmp sgt i64 %3, 1
  br i1 %33, label %34, label %87

; <label>:34:                                     ; preds = %29
  %35 = add nsw i64 %30, -192
  %36 = sdiv i64 %35, 64
  %37 = icmp slt i64 %36, 320
  %38 = select i1 %37, i64 %36, i64 320
  %39 = load i64, i64* %0, align 8, !tbaa !32
  %40 = icmp slt i64 %38, %39
  br i1 %40, label %41, label %44

; <label>:41:                                     ; preds = %34
  %42 = srem i64 %38, 8
  %43 = sub nsw i64 %38, %42
  store i64 %43, i64* %0, align 8, !tbaa !32
  br label %44

; <label>:44:                                     ; preds = %41, %34
  %45 = phi i64 [ %43, %41 ], [ %39, %34 ]
  %46 = sub nsw i64 %31, %30
  %47 = shl i64 %45, 4
  %48 = udiv i64 %46, %47
  %49 = load i64, i64* %2, align 8, !tbaa !32
  %50 = add i64 %3, -1
  %51 = add i64 %50, %49
  %52 = sdiv i64 %51, %3
  %53 = icmp sgt i64 %48, %52
  br i1 %53, label %57, label %54

; <label>:54:                                     ; preds = %44
  %55 = srem i64 %48, 4
  %56 = sub nsw i64 %48, %55
  br label %63

; <label>:57:                                     ; preds = %44
  %58 = add nsw i64 %52, 3
  %59 = srem i64 %58, 4
  %60 = sub nsw i64 %58, %59
  %61 = icmp slt i64 %60, %49
  %62 = select i1 %61, i64 %60, i64 %49
  br label %63

; <label>:63:                                     ; preds = %57, %54
  %64 = phi i64 [ %56, %54 ], [ %62, %57 ]
  store i64 %64, i64* %2, align 8, !tbaa !32
  %65 = icmp sgt i64 %32, %31
  br i1 %65, label %66, label %194

; <label>:66:                                     ; preds = %63
  %67 = sub nsw i64 %32, %31
  %68 = load i64, i64* %0, align 8, !tbaa !32
  %69 = shl i64 %3, 2
  %70 = mul i64 %69, %68
  %71 = udiv i64 %67, %70
  %72 = load i64, i64* %1, align 8, !tbaa !32
  %73 = add i64 %50, %72
  %74 = sdiv i64 %73, %3
  %75 = icmp slt i64 %71, %74
  %76 = icmp sgt i64 %71, 11
  %77 = and i1 %76, %75
  br i1 %77, label %78, label %81

; <label>:78:                                     ; preds = %66
  %79 = urem i64 %71, 12
  %80 = sub nsw i64 %71, %79
  store i64 %80, i64* %1, align 8, !tbaa !32
  br label %194

; <label>:81:                                     ; preds = %66
  %82 = add nsw i64 %74, 11
  %83 = srem i64 %82, 12
  %84 = sub nsw i64 %82, %83
  %85 = icmp slt i64 %84, %72
  %86 = select i1 %85, i64 %84, i64 %72
  store i64 %86, i64* %1, align 8, !tbaa !32
  br label %194

; <label>:87:                                     ; preds = %29
  %88 = load i64, i64* %1, align 8
  %89 = load i64, i64* %2, align 8
  %90 = icmp slt i64 %88, %89
  %91 = select i1 %90, i64 %89, i64 %88
  %92 = load i64, i64* %0, align 8
  %93 = icmp slt i64 %92, %91
  %94 = select i1 %93, i64 %91, i64 %92
  %95 = icmp slt i64 %94, 48
  br i1 %95, label %194, label %96

; <label>:96:                                     ; preds = %87
  %97 = add nsw i64 %30, -192
  %98 = sdiv i64 %97, 64
  %99 = and i64 %98, -8
  %100 = icmp sgt i64 %99, 1
  %101 = select i1 %100, i64 %99, i64 1
  %102 = icmp sgt i64 %92, %101
  br i1 %102, label %103, label %118

; <label>:103:                                    ; preds = %96
  %104 = srem i64 %92, %101
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %115, label %106

; <label>:106:                                    ; preds = %103
  %107 = add nsw i64 %101, -1
  %108 = sub i64 %107, %104
  %109 = sdiv i64 %92, %101
  %110 = shl i64 %109, 3
  %111 = add i64 %110, 8
  %112 = sdiv i64 %108, %111
  %113 = shl nsw i64 %112, 3
  %114 = sub nsw i64 %101, %113
  br label %115

; <label>:115:                                    ; preds = %103, %106
  %116 = phi i64 [ %114, %106 ], [ %101, %103 ]
  store i64 %116, i64* %0, align 8, !tbaa !32
  %117 = load i64, i64* %1, align 8, !tbaa !32
  br label %118

; <label>:118:                                    ; preds = %115, %96
  %119 = phi i64 [ %116, %115 ], [ %92, %96 ]
  %120 = phi i64 [ %117, %115 ], [ %88, %96 ]
  %121 = shl i64 %120, 2
  %122 = mul i64 %121, %119
  %123 = sub nsw i64 %97, %122
  %124 = shl nsw i64 %119, 4
  %125 = icmp slt i64 %123, %124
  br i1 %125, label %129, label %126

; <label>:126:                                    ; preds = %118
  %127 = shl i64 %119, 2
  %128 = udiv i64 %123, %127
  br label %132

; <label>:129:                                    ; preds = %118
  %130 = shl nsw i64 %101, 4
  %131 = udiv i64 4718592, %130
  br label %132

; <label>:132:                                    ; preds = %129, %126
  %133 = phi i64 [ %131, %129 ], [ %128, %126 ]
  %134 = shl i64 %119, 3
  %135 = udiv i64 1572864, %134
  %136 = icmp slt i64 %133, %135
  %137 = select i1 %136, i64 %133, i64 %135
  %138 = and i64 %137, -4
  %139 = load i64, i64* %2, align 8, !tbaa !32
  %140 = icmp sgt i64 %139, %138
  br i1 %140, label %141, label %154

; <label>:141:                                    ; preds = %132
  %142 = srem i64 %139, %138
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %152, label %144

; <label>:144:                                    ; preds = %141
  %145 = sub nsw i64 %138, %142
  %146 = sdiv i64 %139, %138
  %147 = shl i64 %146, 2
  %148 = add i64 %147, 4
  %149 = sdiv i64 %145, %148
  %150 = shl nsw i64 %149, 2
  %151 = sub nsw i64 %138, %150
  br label %152

; <label>:152:                                    ; preds = %141, %144
  %153 = phi i64 [ %151, %144 ], [ %138, %141 ]
  store i64 %153, i64* %2, align 8, !tbaa !32
  br label %194

; <label>:154:                                    ; preds = %132
  %155 = icmp eq i64 %92, %119
  br i1 %155, label %156, label %194

; <label>:156:                                    ; preds = %154
  %157 = shl i64 %92, 2
  %158 = mul i64 %157, %139
  %159 = icmp slt i64 %158, 1025
  br i1 %159, label %167, label %160

; <label>:160:                                    ; preds = %156
  %161 = icmp ne i64 %32, 0
  %162 = icmp slt i64 %158, 32769
  %163 = and i1 %161, %162
  br i1 %163, label %164, label %167

; <label>:164:                                    ; preds = %160
  %165 = icmp slt i64 %120, 576
  %166 = select i1 %165, i64 %120, i64 576
  br label %167

; <label>:167:                                    ; preds = %156, %160, %164
  %168 = phi i64 [ %166, %164 ], [ %120, %160 ], [ %120, %156 ]
  %169 = phi i64 [ %31, %164 ], [ 1572864, %160 ], [ %30, %156 ]
  %170 = mul i64 %92, 12
  %171 = udiv i64 %169, %170
  %172 = icmp slt i64 %168, %171
  %173 = select i1 %172, i64 %168, i64 %171
  %174 = icmp sgt i64 %173, 12
  br i1 %174, label %175, label %178

; <label>:175:                                    ; preds = %167
  %176 = urem i64 %173, 12
  %177 = sub nsw i64 %173, %176
  br label %180

; <label>:178:                                    ; preds = %167
  %179 = icmp eq i64 %173, 0
  br i1 %179, label %194, label %180

; <label>:180:                                    ; preds = %178, %175
  %181 = phi i64 [ %177, %175 ], [ %173, %178 ]
  %182 = srem i64 %120, %181
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %192, label %184

; <label>:184:                                    ; preds = %180
  %185 = sub nsw i64 %181, %182
  %186 = sdiv i64 %120, %181
  %187 = mul i64 %186, 12
  %188 = add i64 %187, 12
  %189 = sdiv i64 %185, %188
  %190 = mul i64 %189, -12
  %191 = add i64 %190, %181
  br label %192

; <label>:192:                                    ; preds = %180, %184
  %193 = phi i64 [ %191, %184 ], [ %181, %180 ]
  store i64 %193, i64* %1, align 8, !tbaa !32
  br label %194

; <label>:194:                                    ; preds = %154, %152, %178, %192, %78, %81, %63, %87
  ret void
}

; Function Attrs: nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #11

; Function Attrs: nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #11

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal15queryCacheSizesERiS1_S1_(i32* dereferenceable(4), i32* dereferenceable(4), i32* dereferenceable(4)) local_unnamed_addr #6 {
  %4 = tail call { i32, i32, i32, i32 } asm sideeffect "xchg$(q$)\09$(%$)rbx, ${1:q}; cpuid; xchg$(q$)\09$(%$)rbx, ${1:q}", "={ax},=&r,={cx},={dx},0,2,~{dirflag},~{fpsr},~{flags}"(i32 0, i32 0) #11, !srcloc !501
  %5 = extractvalue { i32, i32, i32, i32 } %4, 1
  %6 = extractvalue { i32, i32, i32, i32 } %4, 2
  %7 = extractvalue { i32, i32, i32, i32 } %4, 3
  switch i32 %5, label %64 [
    i32 1970169159, label %8
    i32 1752462657, label %44
    i32 1766083905, label %48
  ]

; <label>:8:                                      ; preds = %3
  %9 = icmp eq i32 %7, 1231384169
  %10 = icmp eq i32 %6, 1818588270
  %11 = and i1 %9, %10
  br i1 %11, label %12, label %66

; <label>:12:                                     ; preds = %8
  store i32 0, i32* %2, align 4, !tbaa !33
  store i32 0, i32* %1, align 4, !tbaa !33
  store i32 0, i32* %0, align 4, !tbaa !33
  br label %13

; <label>:13:                                     ; preds = %39, %12
  %14 = phi i32 [ 0, %12 ], [ %40, %39 ]
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "xchg$(q$)\09$(%$)rbx, ${1:q}; cpuid; xchg$(q$)\09$(%$)rbx, ${1:q}", "={ax},=&r,={cx},={dx},0,2,~{dirflag},~{fpsr},~{flags}"(i32 4, i32 %14) #11, !srcloc !502
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1
  %18 = and i32 %16, 15
  %19 = or i32 %18, 2
  %20 = icmp eq i32 %19, 3
  br i1 %20, label %21, label %39

; <label>:21:                                     ; preds = %13
  %22 = extractvalue { i32, i32, i32, i32 } %15, 2
  %23 = lshr i32 %16, 5
  %24 = lshr i32 %17, 22
  %25 = lshr i32 %17, 12
  %26 = and i32 %25, 1023
  %27 = and i32 %17, 4095
  %28 = add nuw nsw i32 %24, 1
  %29 = add nuw nsw i32 %26, 1
  %30 = add nuw nsw i32 %27, 1
  %31 = add nsw i32 %22, 1
  %32 = mul i32 %28, %31
  %33 = mul i32 %32, %30
  %34 = mul i32 %33, %29
  %35 = trunc i32 %23 to i3
  switch i3 %35, label %39 [
    i3 1, label %36
    i3 2, label %37
    i3 3, label %38
  ]

; <label>:36:                                     ; preds = %21
  store i32 %34, i32* %0, align 4, !tbaa !33
  br label %39

; <label>:37:                                     ; preds = %21
  store i32 %34, i32* %1, align 4, !tbaa !33
  br label %39

; <label>:38:                                     ; preds = %21
  store i32 %34, i32* %2, align 4, !tbaa !33
  br label %39

; <label>:39:                                     ; preds = %38, %37, %36, %21, %13
  %40 = add nuw nsw i32 %14, 1
  %41 = icmp ne i32 %18, 0
  %42 = icmp slt i32 %40, 16
  %43 = and i1 %42, %41
  br i1 %43, label %13, label %100

; <label>:44:                                     ; preds = %3
  %45 = icmp eq i32 %7, 1769238117
  %46 = icmp eq i32 %6, 1145913699
  %47 = and i1 %45, %46
  br i1 %47, label %52, label %66

; <label>:48:                                     ; preds = %3
  %49 = icmp eq i32 %7, 1952801395
  %50 = icmp eq i32 %6, 561145204
  %51 = and i1 %49, %50
  br i1 %51, label %52, label %66

; <label>:52:                                     ; preds = %48, %44
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "xchg$(q$)\09$(%$)rbx, ${1:q}; cpuid; xchg$(q$)\09$(%$)rbx, ${1:q}", "={ax},=&r,={cx},={dx},0,2,~{dirflag},~{fpsr},~{flags}"(i32 -2147483643, i32 0) #11, !srcloc !503
  %54 = extractvalue { i32, i32, i32, i32 } %53, 2
  %55 = ashr i32 %54, 24
  %56 = shl nsw i32 %55, 10
  store i32 %56, i32* %0, align 4, !tbaa !33
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "xchg$(q$)\09$(%$)rbx, ${1:q}; cpuid; xchg$(q$)\09$(%$)rbx, ${1:q}", "={ax},=&r,={cx},={dx},0,2,~{dirflag},~{fpsr},~{flags}"(i32 -2147483642, i32 0) #11, !srcloc !504
  %58 = extractvalue { i32, i32, i32, i32 } %57, 2
  %59 = extractvalue { i32, i32, i32, i32 } %57, 3
  %60 = ashr i32 %58, 16
  %61 = shl nsw i32 %60, 10
  store i32 %61, i32* %1, align 4, !tbaa !33
  %62 = shl i32 %59, 1
  %63 = and i32 %62, 536346624
  store i32 %63, i32* %2, align 4, !tbaa !33
  br label %101

; <label>:64:                                     ; preds = %3
  %65 = icmp sgt i32 %5, 3
  br i1 %65, label %66, label %98

; <label>:66:                                     ; preds = %8, %44, %48, %64
  store i32 0, i32* %2, align 4, !tbaa !33
  store i32 0, i32* %1, align 4, !tbaa !33
  store i32 0, i32* %0, align 4, !tbaa !33
  br label %67

; <label>:67:                                     ; preds = %93, %66
  %68 = phi i32 [ 0, %66 ], [ %94, %93 ]
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "xchg$(q$)\09$(%$)rbx, ${1:q}; cpuid; xchg$(q$)\09$(%$)rbx, ${1:q}", "={ax},=&r,={cx},={dx},0,2,~{dirflag},~{fpsr},~{flags}"(i32 4, i32 %68) #11, !srcloc !502
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1
  %72 = and i32 %70, 15
  %73 = or i32 %72, 2
  %74 = icmp eq i32 %73, 3
  br i1 %74, label %75, label %93

; <label>:75:                                     ; preds = %67
  %76 = extractvalue { i32, i32, i32, i32 } %69, 2
  %77 = lshr i32 %70, 5
  %78 = lshr i32 %71, 22
  %79 = lshr i32 %71, 12
  %80 = and i32 %79, 1023
  %81 = and i32 %71, 4095
  %82 = add nuw nsw i32 %78, 1
  %83 = add nuw nsw i32 %80, 1
  %84 = add nuw nsw i32 %81, 1
  %85 = add nsw i32 %76, 1
  %86 = mul i32 %82, %85
  %87 = mul i32 %86, %84
  %88 = mul i32 %87, %83
  %89 = trunc i32 %77 to i3
  switch i3 %89, label %93 [
    i3 1, label %90
    i3 2, label %91
    i3 3, label %92
  ]

; <label>:90:                                     ; preds = %75
  store i32 %88, i32* %0, align 4, !tbaa !33
  br label %93

; <label>:91:                                     ; preds = %75
  store i32 %88, i32* %1, align 4, !tbaa !33
  br label %93

; <label>:92:                                     ; preds = %75
  store i32 %88, i32* %2, align 4, !tbaa !33
  br label %93

; <label>:93:                                     ; preds = %92, %91, %90, %75, %67
  %94 = add nuw nsw i32 %68, 1
  %95 = icmp ne i32 %72, 0
  %96 = icmp slt i32 %94, 16
  %97 = and i1 %96, %95
  br i1 %97, label %67, label %99

; <label>:98:                                     ; preds = %64
  tail call void @_ZN5Eigen8internal27queryCacheSizes_intel_codesERiS1_S1_(i32* nonnull dereferenceable(4) %0, i32* nonnull dereferenceable(4) %1, i32* nonnull dereferenceable(4) %2) #11
  br label %101

; <label>:99:                                     ; preds = %93
  br label %101

; <label>:100:                                    ; preds = %39
  br label %101

; <label>:101:                                    ; preds = %100, %99, %98, %52
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal27queryCacheSizes_intel_codesERiS1_S1_(i32* dereferenceable(4), i32* dereferenceable(4), i32* dereferenceable(4)) local_unnamed_addr #6 {
  %4 = alloca [4 x i32], align 16
  %5 = bitcast [4 x i32]* %4 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %5) #11
  %6 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 3
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 2
  %8 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 1
  %9 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 0
  store i32 0, i32* %2, align 4, !tbaa !33
  store i32 0, i32* %1, align 4, !tbaa !33
  store i32 0, i32* %0, align 4, !tbaa !33
  %10 = tail call { i32, i32, i32, i32 } asm sideeffect "xchg$(q$)\09$(%$)rbx, ${1:q}; cpuid; xchg$(q$)\09$(%$)rbx, ${1:q}", "={ax},=&r,={cx},={dx},0,2,~{dirflag},~{fpsr},~{flags}"(i32 2, i32 0) #11, !srcloc !505
  %11 = extractvalue { i32, i32, i32, i32 } %10, 0
  %12 = extractvalue { i32, i32, i32, i32 } %10, 1
  %13 = extractvalue { i32, i32, i32, i32 } %10, 2
  %14 = extractvalue { i32, i32, i32, i32 } %10, 3
  store i32 %11, i32* %9, align 16, !tbaa !33
  store i32 %12, i32* %8, align 4, !tbaa !33
  store i32 %13, i32* %7, align 8, !tbaa !33
  store i32 %14, i32* %6, align 4, !tbaa !33
  %15 = getelementptr inbounds i8, i8* %5, i64 2
  %16 = lshr i32 %11, 16
  %17 = trunc i32 %16 to i8
  br label %21

; <label>:18:                                     ; preds = %86
  %19 = and i8 %87, 1
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %98, label %93

; <label>:21:                                     ; preds = %90, %3
  %22 = phi i8 [ %17, %3 ], [ %92, %90 ]
  %23 = phi i64 [ 0, %3 ], [ %88, %90 ]
  %24 = phi i8 [ 0, %3 ], [ %87, %90 ]
  switch i8 %22, label %86 [
    i8 10, label %25
    i8 12, label %26
    i8 14, label %27
    i8 16, label %28
    i8 21, label %29
    i8 44, label %30
    i8 48, label %31
    i8 96, label %32
    i8 102, label %33
    i8 103, label %34
    i8 104, label %35
    i8 26, label %36
    i8 34, label %37
    i8 35, label %38
    i8 37, label %39
    i8 41, label %40
    i8 57, label %41
    i8 58, label %42
    i8 59, label %43
    i8 60, label %44
    i8 61, label %45
    i8 62, label %46
    i8 64, label %47
    i8 65, label %48
    i8 66, label %49
    i8 67, label %50
    i8 68, label %51
    i8 69, label %52
    i8 70, label %53
    i8 71, label %54
    i8 72, label %55
    i8 73, label %56
    i8 74, label %61
    i8 75, label %62
    i8 76, label %63
    i8 77, label %64
    i8 78, label %65
    i8 120, label %66
    i8 121, label %67
    i8 122, label %68
    i8 123, label %69
    i8 124, label %70
    i8 125, label %71
    i8 126, label %72
    i8 127, label %73
    i8 -128, label %74
    i8 -127, label %75
    i8 -126, label %76
    i8 -125, label %77
    i8 -124, label %78
    i8 -123, label %79
    i8 -122, label %80
    i8 -121, label %81
    i8 -120, label %82
    i8 -119, label %83
    i8 -118, label %84
    i8 -115, label %85
  ]

; <label>:25:                                     ; preds = %21
  store i32 8, i32* %0, align 4, !tbaa !33
  br label %86

; <label>:26:                                     ; preds = %21
  store i32 16, i32* %0, align 4, !tbaa !33
  br label %86

; <label>:27:                                     ; preds = %21
  store i32 24, i32* %0, align 4, !tbaa !33
  br label %86

; <label>:28:                                     ; preds = %21
  store i32 16, i32* %0, align 4, !tbaa !33
  br label %86

; <label>:29:                                     ; preds = %21
  store i32 16, i32* %0, align 4, !tbaa !33
  br label %86

; <label>:30:                                     ; preds = %21
  store i32 32, i32* %0, align 4, !tbaa !33
  br label %86

; <label>:31:                                     ; preds = %21
  store i32 32, i32* %0, align 4, !tbaa !33
  br label %86

; <label>:32:                                     ; preds = %21
  store i32 16, i32* %0, align 4, !tbaa !33
  br label %86

; <label>:33:                                     ; preds = %21
  store i32 8, i32* %0, align 4, !tbaa !33
  br label %86

; <label>:34:                                     ; preds = %21
  store i32 16, i32* %0, align 4, !tbaa !33
  br label %86

; <label>:35:                                     ; preds = %21
  store i32 32, i32* %0, align 4, !tbaa !33
  br label %86

; <label>:36:                                     ; preds = %21
  store i32 96, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:37:                                     ; preds = %21
  store i32 512, i32* %2, align 4, !tbaa !33
  br label %86

; <label>:38:                                     ; preds = %21
  store i32 1024, i32* %2, align 4, !tbaa !33
  br label %86

; <label>:39:                                     ; preds = %21
  store i32 2048, i32* %2, align 4, !tbaa !33
  br label %86

; <label>:40:                                     ; preds = %21
  store i32 4096, i32* %2, align 4, !tbaa !33
  br label %86

; <label>:41:                                     ; preds = %21
  store i32 128, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:42:                                     ; preds = %21
  store i32 192, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:43:                                     ; preds = %21
  store i32 128, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:44:                                     ; preds = %21
  store i32 256, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:45:                                     ; preds = %21
  store i32 384, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:46:                                     ; preds = %21
  store i32 512, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:47:                                     ; preds = %21
  store i32 0, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:48:                                     ; preds = %21
  store i32 128, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:49:                                     ; preds = %21
  store i32 256, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:50:                                     ; preds = %21
  store i32 512, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:51:                                     ; preds = %21
  store i32 1024, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:52:                                     ; preds = %21
  store i32 2048, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:53:                                     ; preds = %21
  store i32 4096, i32* %2, align 4, !tbaa !33
  br label %86

; <label>:54:                                     ; preds = %21
  store i32 8192, i32* %2, align 4, !tbaa !33
  br label %86

; <label>:55:                                     ; preds = %21
  store i32 3072, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:56:                                     ; preds = %21
  %57 = load i32, i32* %1, align 4, !tbaa !33
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %60, label %59

; <label>:59:                                     ; preds = %56
  store i32 4096, i32* %2, align 4, !tbaa !33
  br label %86

; <label>:60:                                     ; preds = %56
  store i32 4096, i32* %1, align 4, !tbaa !33
  store i32 4096, i32* %2, align 4, !tbaa !33
  br label %86

; <label>:61:                                     ; preds = %21
  store i32 6144, i32* %2, align 4, !tbaa !33
  br label %86

; <label>:62:                                     ; preds = %21
  store i32 8192, i32* %2, align 4, !tbaa !33
  br label %86

; <label>:63:                                     ; preds = %21
  store i32 12288, i32* %2, align 4, !tbaa !33
  br label %86

; <label>:64:                                     ; preds = %21
  store i32 16384, i32* %2, align 4, !tbaa !33
  br label %86

; <label>:65:                                     ; preds = %21
  store i32 6144, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:66:                                     ; preds = %21
  store i32 1024, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:67:                                     ; preds = %21
  store i32 128, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:68:                                     ; preds = %21
  store i32 256, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:69:                                     ; preds = %21
  store i32 512, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:70:                                     ; preds = %21
  store i32 1024, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:71:                                     ; preds = %21
  store i32 2048, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:72:                                     ; preds = %21
  store i32 256, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:73:                                     ; preds = %21
  store i32 512, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:74:                                     ; preds = %21
  store i32 512, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:75:                                     ; preds = %21
  store i32 128, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:76:                                     ; preds = %21
  store i32 256, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:77:                                     ; preds = %21
  store i32 512, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:78:                                     ; preds = %21
  store i32 1024, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:79:                                     ; preds = %21
  store i32 2048, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:80:                                     ; preds = %21
  store i32 512, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:81:                                     ; preds = %21
  store i32 1024, i32* %1, align 4, !tbaa !33
  br label %86

; <label>:82:                                     ; preds = %21
  store i32 2048, i32* %2, align 4, !tbaa !33
  br label %86

; <label>:83:                                     ; preds = %21
  store i32 4096, i32* %2, align 4, !tbaa !33
  br label %86

; <label>:84:                                     ; preds = %21
  store i32 8192, i32* %2, align 4, !tbaa !33
  br label %86

; <label>:85:                                     ; preds = %21
  store i32 3072, i32* %2, align 4, !tbaa !33
  br label %86

; <label>:86:                                     ; preds = %25, %26, %27, %28, %29, %30, %31, %32, %33, %34, %35, %36, %37, %38, %39, %40, %41, %42, %43, %44, %45, %46, %47, %48, %49, %50, %51, %52, %53, %54, %55, %61, %62, %63, %64, %65, %66, %67, %68, %69, %70, %71, %72, %73, %74, %75, %76, %77, %78, %79, %80, %81, %82, %83, %84, %85, %60, %59, %21
  %87 = phi i8 [ %24, %21 ], [ %24, %85 ], [ %24, %84 ], [ %24, %83 ], [ %24, %82 ], [ %24, %81 ], [ %24, %80 ], [ %24, %79 ], [ %24, %78 ], [ %24, %77 ], [ %24, %76 ], [ %24, %75 ], [ %24, %74 ], [ %24, %73 ], [ %24, %72 ], [ %24, %71 ], [ %24, %70 ], [ %24, %69 ], [ %24, %68 ], [ %24, %67 ], [ %24, %66 ], [ %24, %65 ], [ %24, %64 ], [ %24, %63 ], [ %24, %62 ], [ %24, %61 ], [ %24, %59 ], [ 1, %60 ], [ %24, %55 ], [ %24, %54 ], [ %24, %53 ], [ %24, %52 ], [ %24, %51 ], [ %24, %50 ], [ %24, %49 ], [ %24, %48 ], [ %24, %47 ], [ %24, %46 ], [ %24, %45 ], [ %24, %44 ], [ %24, %43 ], [ %24, %42 ], [ %24, %41 ], [ %24, %40 ], [ %24, %39 ], [ %24, %38 ], [ %24, %37 ], [ %24, %36 ], [ %24, %35 ], [ %24, %34 ], [ %24, %33 ], [ %24, %32 ], [ %24, %31 ], [ %24, %30 ], [ %24, %29 ], [ %24, %28 ], [ %24, %27 ], [ %24, %26 ], [ %24, %25 ]
  %88 = add nuw nsw i64 %23, 1
  %89 = icmp eq i64 %88, 14
  br i1 %89, label %18, label %90

; <label>:90:                                     ; preds = %86
  %91 = getelementptr inbounds i8, i8* %15, i64 %88
  %92 = load i8, i8* %91, align 1, !tbaa !11
  br label %21

; <label>:93:                                     ; preds = %18
  %94 = load i32, i32* %1, align 4, !tbaa !33
  %95 = load i32, i32* %2, align 4, !tbaa !33
  %96 = icmp eq i32 %94, %95
  br i1 %96, label %97, label %98

; <label>:97:                                     ; preds = %93
  store i32 0, i32* %2, align 4, !tbaa !33
  br label %98

; <label>:98:                                     ; preds = %18, %97, %93
  %99 = load i32, i32* %0, align 4, !tbaa !33
  %100 = shl nsw i32 %99, 10
  store i32 %100, i32* %0, align 4, !tbaa !33
  %101 = load i32, i32* %1, align 4, !tbaa !33
  %102 = shl nsw i32 %101, 10
  store i32 %102, i32* %1, align 4, !tbaa !33
  %103 = load i32, i32* %2, align 4, !tbaa !33
  %104 = shl nsw i32 %103, 10
  store i32 %104, i32* %2, align 4, !tbaa !33
  call void @llvm.lifetime.end(i64 16, i8* nonnull %5) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal29general_matrix_matrix_productIliLi0ELb0EiLi1ELb0ELi0EE3runElllPKilS4_lPiliRNS0_15level3_blockingIiiEEPNS0_16GemmParallelInfoIlEE(i64, i64, i64, i32*, i64, i32*, i64, i32*, i64, i32, %"class.Eigen::internal::level3_blocking"* dereferenceable(40), %"struct.Eigen::internal::GemmParallelInfo"*) local_unnamed_addr #0 align 2 {
  %13 = alloca %"struct.Eigen::internal::gemm_pack_lhs", align 1
  %14 = alloca %"struct.Eigen::internal::gemm_pack_rhs", align 1
  %15 = alloca %"struct.Eigen::internal::gebp_kernel", align 1
  %16 = alloca %"class.Eigen::internal::const_blas_data_mapper.717", align 8
  %17 = alloca %"class.Eigen::internal::const_blas_data_mapper.719", align 8
  %18 = alloca %"class.Eigen::internal::blas_data_mapper.951", align 8
  %19 = getelementptr inbounds %"class.Eigen::internal::level3_blocking", %"class.Eigen::internal::level3_blocking"* %10, i64 0, i32 4
  %20 = load i64, i64* %19, align 8, !tbaa !193
  %21 = getelementptr inbounds %"class.Eigen::internal::level3_blocking", %"class.Eigen::internal::level3_blocking"* %10, i64 0, i32 2
  %22 = load i64, i64* %21, align 8, !tbaa !460
  %23 = icmp slt i64 %22, %0
  %24 = select i1 %23, i64 %22, i64 %0
  %25 = getelementptr inbounds %"class.Eigen::internal::level3_blocking", %"class.Eigen::internal::level3_blocking"* %10, i64 0, i32 3
  %26 = load i64, i64* %25, align 8, !tbaa !461
  %27 = icmp slt i64 %26, %1
  %28 = select i1 %27, i64 %26, i64 %1
  %29 = getelementptr inbounds %"struct.Eigen::internal::gemm_pack_lhs", %"struct.Eigen::internal::gemm_pack_lhs"* %13, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %29) #11
  %30 = getelementptr inbounds %"struct.Eigen::internal::gemm_pack_rhs", %"struct.Eigen::internal::gemm_pack_rhs"* %14, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %30) #11
  %31 = getelementptr inbounds %"struct.Eigen::internal::gebp_kernel", %"struct.Eigen::internal::gebp_kernel"* %15, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %31) #11
  %32 = mul nsw i64 %24, %20
  %33 = mul nsw i64 %28, %20
  %34 = getelementptr inbounds %"class.Eigen::internal::level3_blocking", %"class.Eigen::internal::level3_blocking"* %10, i64 0, i32 0
  %35 = load i32*, i32** %34, align 8, !tbaa !195
  %36 = icmp eq i32* %35, null
  %37 = shl i64 %32, 2
  br i1 %36, label %38, label %63

; <label>:38:                                     ; preds = %12
  %39 = icmp ult i64 %37, 131073
  br i1 %39, label %40, label %47

; <label>:40:                                     ; preds = %38
  %41 = add i64 %37, 31
  %42 = alloca i8, i64 %41, align 16
  %43 = ptrtoint i8* %42 to i64
  %44 = add i64 %43, 31
  %45 = and i64 %44, -32
  %46 = inttoptr i64 %45 to i8*
  br label %59

; <label>:47:                                     ; preds = %38
  %48 = add i64 %37, 32
  %49 = tail call i8* @malloc(i64 %48) #14
  %50 = icmp eq i8* %49, null
  br i1 %50, label %59, label %51

; <label>:51:                                     ; preds = %47
  %52 = ptrtoint i8* %49 to i64
  %53 = add i64 %52, 32
  %54 = and i64 %53, -32
  %55 = inttoptr i64 %54 to i8*
  %56 = inttoptr i64 %54 to i8**
  %57 = getelementptr inbounds i8*, i8** %56, i64 -1
  store i8* %49, i8** %57, align 8, !tbaa !29
  %58 = load i32*, i32** %34, align 8, !tbaa !195
  br label %59

; <label>:59:                                     ; preds = %51, %47, %40
  %60 = phi i32* [ null, %40 ], [ %58, %51 ], [ null, %47 ]
  %61 = phi i8* [ %46, %40 ], [ %55, %51 ], [ null, %47 ]
  %62 = bitcast i8* %61 to i32*
  br label %63

; <label>:63:                                     ; preds = %12, %59
  %64 = phi i32* [ %60, %59 ], [ %35, %12 ]
  %65 = phi i32* [ %62, %59 ], [ %35, %12 ]
  %66 = icmp ugt i64 %37, 131072
  %67 = getelementptr inbounds %"class.Eigen::internal::level3_blocking", %"class.Eigen::internal::level3_blocking"* %10, i64 0, i32 1
  %68 = load i32*, i32** %67, align 8, !tbaa !196
  %69 = icmp eq i32* %68, null
  %70 = shl i64 %33, 2
  br i1 %69, label %71, label %96

; <label>:71:                                     ; preds = %63
  %72 = icmp ult i64 %70, 131073
  br i1 %72, label %73, label %80

; <label>:73:                                     ; preds = %71
  %74 = add i64 %70, 31
  %75 = alloca i8, i64 %74, align 16
  %76 = ptrtoint i8* %75 to i64
  %77 = add i64 %76, 31
  %78 = and i64 %77, -32
  %79 = inttoptr i64 %78 to i8*
  br label %92

; <label>:80:                                     ; preds = %71
  %81 = add i64 %70, 32
  %82 = call i8* @malloc(i64 %81) #14
  %83 = icmp eq i8* %82, null
  br i1 %83, label %92, label %84

; <label>:84:                                     ; preds = %80
  %85 = ptrtoint i8* %82 to i64
  %86 = add i64 %85, 32
  %87 = and i64 %86, -32
  %88 = inttoptr i64 %87 to i8*
  %89 = inttoptr i64 %87 to i8**
  %90 = getelementptr inbounds i8*, i8** %89, i64 -1
  store i8* %82, i8** %90, align 8, !tbaa !29
  %91 = load i32*, i32** %67, align 8, !tbaa !196
  br label %92

; <label>:92:                                     ; preds = %84, %80, %73
  %93 = phi i32* [ null, %73 ], [ %91, %84 ], [ null, %80 ]
  %94 = phi i8* [ %79, %73 ], [ %88, %84 ], [ null, %80 ]
  %95 = bitcast i8* %94 to i32*
  br label %96

; <label>:96:                                     ; preds = %63, %92
  %97 = phi i32* [ %93, %92 ], [ %68, %63 ]
  %98 = phi i32* [ %95, %92 ], [ %68, %63 ]
  %99 = icmp ugt i64 %70, 131072
  %100 = icmp eq i64 %20, %2
  %101 = and i1 %100, %23
  %102 = xor i1 %101, true
  %103 = or i1 %27, %102
  %104 = icmp sgt i64 %0, 0
  br i1 %104, label %105, label %122

; <label>:105:                                    ; preds = %96
  %106 = icmp sgt i64 %2, 0
  %107 = bitcast %"class.Eigen::internal::const_blas_data_mapper.717"* %16 to i8*
  %108 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.717", %"class.Eigen::internal::const_blas_data_mapper.717"* %16, i64 0, i32 0, i32 0
  %109 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.717", %"class.Eigen::internal::const_blas_data_mapper.717"* %16, i64 0, i32 0, i32 1
  %110 = icmp sgt i64 %1, 0
  %111 = bitcast %"class.Eigen::internal::const_blas_data_mapper.719"* %17 to i8*
  %112 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.719", %"class.Eigen::internal::const_blas_data_mapper.719"* %17, i64 0, i32 0, i32 0
  %113 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.719", %"class.Eigen::internal::const_blas_data_mapper.719"* %17, i64 0, i32 0, i32 1
  %114 = bitcast %"class.Eigen::internal::blas_data_mapper.951"* %18 to i8*
  %115 = getelementptr inbounds %"class.Eigen::internal::blas_data_mapper.951", %"class.Eigen::internal::blas_data_mapper.951"* %18, i64 0, i32 0
  %116 = getelementptr inbounds %"class.Eigen::internal::blas_data_mapper.951", %"class.Eigen::internal::blas_data_mapper.951"* %18, i64 0, i32 1
  br label %141

; <label>:117:                                    ; preds = %176
  br label %119

; <label>:118:                                    ; preds = %190
  br label %119

; <label>:119:                                    ; preds = %118, %117, %141
  %120 = icmp slt i64 %143, %0
  br i1 %120, label %141, label %121

; <label>:121:                                    ; preds = %119
  br label %122

; <label>:122:                                    ; preds = %121, %96
  br i1 %99, label %123, label %131

; <label>:123:                                    ; preds = %122
  %124 = icmp eq i32* %98, null
  %125 = icmp ne i32* %97, null
  %126 = or i1 %124, %125
  br i1 %126, label %131, label %127

; <label>:127:                                    ; preds = %123
  %128 = getelementptr inbounds i32, i32* %98, i64 -2
  %129 = bitcast i32* %128 to i8**
  %130 = load i8*, i8** %129, align 8, !tbaa !29
  call void @free(i8* %130) #11
  br label %131

; <label>:131:                                    ; preds = %122, %123, %127
  br i1 %66, label %132, label %140

; <label>:132:                                    ; preds = %131
  %133 = icmp eq i32* %65, null
  %134 = icmp ne i32* %64, null
  %135 = or i1 %133, %134
  br i1 %135, label %140, label %136

; <label>:136:                                    ; preds = %132
  %137 = getelementptr inbounds i32, i32* %65, i64 -2
  %138 = bitcast i32* %137 to i8**
  %139 = load i8*, i8** %138, align 8, !tbaa !29
  call void @free(i8* %139) #11
  br label %140

; <label>:140:                                    ; preds = %131, %132, %136
  call void @llvm.lifetime.end(i64 1, i8* nonnull %31) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %30) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %29) #11
  ret void

; <label>:141:                                    ; preds = %105, %119
  %142 = phi i64 [ 0, %105 ], [ %143, %119 ]
  %143 = add nsw i64 %142, %24
  %144 = icmp sgt i64 %143, %0
  %145 = select i1 %144, i64 %0, i64 %143
  %146 = sub nsw i64 %145, %142
  br i1 %106, label %147, label %119

; <label>:147:                                    ; preds = %141
  %148 = icmp eq i64 %142, 0
  %149 = or i1 %103, %148
  br i1 %110, label %151, label %150

; <label>:150:                                    ; preds = %147
  br label %190

; <label>:151:                                    ; preds = %147
  br label %152

; <label>:152:                                    ; preds = %151, %176
  %153 = phi i64 [ %154, %176 ], [ 0, %151 ]
  %154 = add nsw i64 %153, %20
  %155 = icmp sgt i64 %154, %2
  %156 = select i1 %155, i64 %2, i64 %154
  %157 = sub nsw i64 %156, %153
  call void @llvm.lifetime.start(i64 16, i8* nonnull %107) #11
  %158 = mul nsw i64 %153, %4
  %159 = add nsw i64 %158, %142
  %160 = getelementptr inbounds i32, i32* %3, i64 %159
  store i32* %160, i32** %108, align 8
  store i64 %4, i64* %109, align 8
  call void @_ZN5Eigen8internal13gemm_pack_lhsIilNS0_22const_blas_data_mapperIilLi0EEELi12ELi4ELi0ELb0ELb0EEclEPiRKS3_llll(%"struct.Eigen::internal::gemm_pack_lhs"* nonnull %13, i32* %65, %"class.Eigen::internal::const_blas_data_mapper.717"* nonnull dereferenceable(16) %16, i64 %157, i64 %146, i64 0, i64 0)
  call void @llvm.lifetime.end(i64 16, i8* nonnull %107) #11
  %161 = mul nsw i64 %153, %6
  br i1 %149, label %163, label %162

; <label>:162:                                    ; preds = %152
  br label %164

; <label>:163:                                    ; preds = %152
  br label %178

; <label>:164:                                    ; preds = %162, %164
  %165 = phi i64 [ %166, %164 ], [ 0, %162 ]
  %166 = add nsw i64 %165, %28
  %167 = icmp sgt i64 %166, %1
  %168 = select i1 %167, i64 %1, i64 %166
  %169 = sub nsw i64 %168, %165
  call void @llvm.lifetime.start(i64 16, i8* nonnull %114) #11
  %170 = mul nsw i64 %165, %8
  %171 = add nsw i64 %170, %142
  %172 = getelementptr inbounds i32, i32* %7, i64 %171
  store i32* %172, i32** %115, align 8
  store i64 %8, i64* %116, align 8
  call void @_ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0EEELi12ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll(%"struct.Eigen::internal::gebp_kernel"* nonnull %15, %"class.Eigen::internal::blas_data_mapper.951"* nonnull dereferenceable(16) %18, i32* %65, i32* %98, i64 %146, i64 %157, i64 %169, i32 %9, i64 -1, i64 -1, i64 0, i64 0)
  call void @llvm.lifetime.end(i64 16, i8* nonnull %114) #11
  %173 = icmp slt i64 %166, %1
  br i1 %173, label %164, label %175

; <label>:174:                                    ; preds = %178
  br label %176

; <label>:175:                                    ; preds = %164
  br label %176

; <label>:176:                                    ; preds = %175, %174
  %177 = icmp slt i64 %154, %2
  br i1 %177, label %152, label %117

; <label>:178:                                    ; preds = %163, %178
  %179 = phi i64 [ %180, %178 ], [ 0, %163 ]
  %180 = add nsw i64 %179, %28
  %181 = icmp sgt i64 %180, %1
  %182 = select i1 %181, i64 %1, i64 %180
  %183 = sub nsw i64 %182, %179
  call void @llvm.lifetime.start(i64 16, i8* nonnull %111) #11
  %184 = add nsw i64 %179, %161
  %185 = getelementptr inbounds i32, i32* %5, i64 %184
  store i32* %185, i32** %112, align 8
  store i64 %6, i64* %113, align 8
  call void @_ZN5Eigen8internal13gemm_pack_rhsIilNS0_22const_blas_data_mapperIilLi1EEELi4ELi1ELb0ELb0EEclEPiRKS3_llll(%"struct.Eigen::internal::gemm_pack_rhs"* nonnull %14, i32* %98, %"class.Eigen::internal::const_blas_data_mapper.719"* nonnull dereferenceable(16) %17, i64 %157, i64 %183, i64 0, i64 0)
  call void @llvm.lifetime.end(i64 16, i8* nonnull %111) #11
  call void @llvm.lifetime.start(i64 16, i8* nonnull %114) #11
  %186 = mul nsw i64 %179, %8
  %187 = add nsw i64 %186, %142
  %188 = getelementptr inbounds i32, i32* %7, i64 %187
  store i32* %188, i32** %115, align 8
  store i64 %8, i64* %116, align 8
  call void @_ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0EEELi12ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll(%"struct.Eigen::internal::gebp_kernel"* nonnull %15, %"class.Eigen::internal::blas_data_mapper.951"* nonnull dereferenceable(16) %18, i32* %65, i32* %98, i64 %146, i64 %157, i64 %183, i32 %9, i64 -1, i64 -1, i64 0, i64 0)
  call void @llvm.lifetime.end(i64 16, i8* nonnull %114) #11
  %189 = icmp slt i64 %180, %1
  br i1 %189, label %178, label %174

; <label>:190:                                    ; preds = %150, %190
  %191 = phi i64 [ %192, %190 ], [ 0, %150 ]
  %192 = add nsw i64 %191, %20
  %193 = icmp sgt i64 %192, %2
  %194 = select i1 %193, i64 %2, i64 %192
  %195 = sub nsw i64 %194, %191
  call void @llvm.lifetime.start(i64 16, i8* nonnull %107) #11
  %196 = mul nsw i64 %191, %4
  %197 = add nsw i64 %196, %142
  %198 = getelementptr inbounds i32, i32* %3, i64 %197
  store i32* %198, i32** %108, align 8
  store i64 %4, i64* %109, align 8
  call void @_ZN5Eigen8internal13gemm_pack_lhsIilNS0_22const_blas_data_mapperIilLi0EEELi12ELi4ELi0ELb0ELb0EEclEPiRKS3_llll(%"struct.Eigen::internal::gemm_pack_lhs"* nonnull %13, i32* %65, %"class.Eigen::internal::const_blas_data_mapper.717"* nonnull dereferenceable(16) %16, i64 %195, i64 %146, i64 0, i64 0)
  call void @llvm.lifetime.end(i64 16, i8* nonnull %107) #11
  %199 = icmp slt i64 %192, %2
  br i1 %199, label %190, label %118
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal13gemm_pack_lhsIilNS0_22const_blas_data_mapperIilLi0EEELi12ELi4ELi0ELb0ELb0EEclEPiRKS3_llll(%"struct.Eigen::internal::gemm_pack_lhs"*, i32*, %"class.Eigen::internal::const_blas_data_mapper.717"* dereferenceable(16), i64, i64, i64, i64) local_unnamed_addr #8 align 2 {
  tail call void asm sideeffect "#EIGEN PRODUCT PACK LHS", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !506
  %8 = or i64 %6, %5
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %11, label %10, !prof !10

; <label>:10:                                     ; preds = %7
  tail call void @__assert_rtn(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__func__._ZN5Eigen8internal13gemm_pack_lhsIilNS0_22const_blas_data_mapperIilLi0EEELi12ELi4ELi0ELb0ELb0EEclEPiRKS3_llll, i64 0, i64 0), i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.35, i64 0, i64 0), i32 1705, i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.36, i64 0, i64 0)) #13
  unreachable

; <label>:11:                                     ; preds = %7
  %12 = srem i64 %4, 12
  %13 = sub i64 %4, %12
  %14 = sdiv i64 %12, 8
  %15 = shl nsw i64 %14, 3
  %16 = add nsw i64 %15, %13
  %17 = sdiv i64 %4, 4
  %18 = shl nsw i64 %17, 2
  %19 = icmp sgt i64 %13, 0
  br i1 %19, label %20, label %128

; <label>:20:                                     ; preds = %11
  %21 = icmp sgt i64 %3, 0
  %22 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.717", %"class.Eigen::internal::const_blas_data_mapper.717"* %2, i64 0, i32 0, i32 0
  %23 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.717", %"class.Eigen::internal::const_blas_data_mapper.717"* %2, i64 0, i32 0, i32 1
  br i1 %21, label %30, label %24

; <label>:24:                                     ; preds = %20
  %25 = add i64 %4, -1
  %26 = sub i64 %25, %12
  %27 = urem i64 %26, 12
  %28 = sub i64 %26, %27
  %29 = add i64 %28, 12
  br label %128

; <label>:30:                                     ; preds = %20
  %31 = mul i64 %3, 12
  %32 = and i64 %3, 1
  %33 = icmp eq i64 %32, 0
  %34 = icmp eq i64 %3, 1
  br label %35

; <label>:35:                                     ; preds = %30, %123
  %36 = phi i64 [ %125, %123 ], [ 0, %30 ]
  %37 = phi i64 [ %124, %123 ], [ 0, %30 ]
  %38 = add nuw nsw i64 %36, 4
  %39 = add nuw nsw i64 %36, 8
  br i1 %33, label %63, label %40

; <label>:40:                                     ; preds = %35
  br label %41

; <label>:41:                                     ; preds = %40
  %42 = load i32*, i32** %22, align 8, !tbaa !362
  %43 = getelementptr inbounds i32, i32* %42, i64 %36
  %44 = bitcast i32* %43 to <2 x i64>*
  %45 = load <2 x i64>, <2 x i64>* %44, align 1, !tbaa !11
  %46 = add nsw i64 %36, 4
  %47 = getelementptr inbounds i32, i32* %42, i64 %46
  %48 = bitcast i32* %47 to <2 x i64>*
  %49 = load <2 x i64>, <2 x i64>* %48, align 1, !tbaa !11
  %50 = add nsw i64 %36, 8
  %51 = getelementptr inbounds i32, i32* %42, i64 %50
  %52 = bitcast i32* %51 to <2 x i64>*
  %53 = load <2 x i64>, <2 x i64>* %52, align 1, !tbaa !11
  %54 = getelementptr inbounds i32, i32* %1, i64 %37
  %55 = bitcast i32* %54 to <2 x i64>*
  store <2 x i64> %45, <2 x i64>* %55, align 16, !tbaa !11
  %56 = add nsw i64 %37, 4
  %57 = getelementptr inbounds i32, i32* %1, i64 %56
  %58 = bitcast i32* %57 to <2 x i64>*
  store <2 x i64> %49, <2 x i64>* %58, align 16, !tbaa !11
  %59 = add nsw i64 %37, 8
  %60 = getelementptr inbounds i32, i32* %1, i64 %59
  %61 = bitcast i32* %60 to <2 x i64>*
  store <2 x i64> %53, <2 x i64>* %61, align 16, !tbaa !11
  %62 = add nsw i64 %37, 12
  br label %63

; <label>:63:                                     ; preds = %35, %41
  %64 = phi i64 [ 1, %41 ], [ 0, %35 ]
  %65 = phi i64 [ %62, %41 ], [ %37, %35 ]
  br label %66

; <label>:66:                                     ; preds = %63
  br i1 %34, label %123, label %67

; <label>:67:                                     ; preds = %66
  br label %68

; <label>:68:                                     ; preds = %68, %67
  %69 = phi i64 [ %64, %67 ], [ %120, %68 ]
  %70 = phi i64 [ %65, %67 ], [ %119, %68 ]
  %71 = load i32*, i32** %22, align 8, !tbaa !362
  %72 = load i64, i64* %23, align 8, !tbaa !364
  %73 = mul nsw i64 %72, %69
  %74 = add nsw i64 %73, %36
  %75 = getelementptr inbounds i32, i32* %71, i64 %74
  %76 = bitcast i32* %75 to <2 x i64>*
  %77 = load <2 x i64>, <2 x i64>* %76, align 1, !tbaa !11
  %78 = add nsw i64 %38, %73
  %79 = getelementptr inbounds i32, i32* %71, i64 %78
  %80 = bitcast i32* %79 to <2 x i64>*
  %81 = load <2 x i64>, <2 x i64>* %80, align 1, !tbaa !11
  %82 = add nsw i64 %39, %73
  %83 = getelementptr inbounds i32, i32* %71, i64 %82
  %84 = bitcast i32* %83 to <2 x i64>*
  %85 = load <2 x i64>, <2 x i64>* %84, align 1, !tbaa !11
  %86 = getelementptr inbounds i32, i32* %1, i64 %70
  %87 = bitcast i32* %86 to <2 x i64>*
  store <2 x i64> %77, <2 x i64>* %87, align 16, !tbaa !11
  %88 = add nsw i64 %70, 4
  %89 = getelementptr inbounds i32, i32* %1, i64 %88
  %90 = bitcast i32* %89 to <2 x i64>*
  store <2 x i64> %81, <2 x i64>* %90, align 16, !tbaa !11
  %91 = add nsw i64 %70, 8
  %92 = getelementptr inbounds i32, i32* %1, i64 %91
  %93 = bitcast i32* %92 to <2 x i64>*
  store <2 x i64> %85, <2 x i64>* %93, align 16, !tbaa !11
  %94 = add nsw i64 %70, 12
  %95 = add nuw nsw i64 %69, 1
  %96 = load i32*, i32** %22, align 8, !tbaa !362
  %97 = load i64, i64* %23, align 8, !tbaa !364
  %98 = mul nsw i64 %97, %95
  %99 = add nsw i64 %98, %36
  %100 = getelementptr inbounds i32, i32* %96, i64 %99
  %101 = bitcast i32* %100 to <2 x i64>*
  %102 = load <2 x i64>, <2 x i64>* %101, align 1, !tbaa !11
  %103 = add nsw i64 %38, %98
  %104 = getelementptr inbounds i32, i32* %96, i64 %103
  %105 = bitcast i32* %104 to <2 x i64>*
  %106 = load <2 x i64>, <2 x i64>* %105, align 1, !tbaa !11
  %107 = add nsw i64 %39, %98
  %108 = getelementptr inbounds i32, i32* %96, i64 %107
  %109 = bitcast i32* %108 to <2 x i64>*
  %110 = load <2 x i64>, <2 x i64>* %109, align 1, !tbaa !11
  %111 = getelementptr inbounds i32, i32* %1, i64 %94
  %112 = bitcast i32* %111 to <2 x i64>*
  store <2 x i64> %102, <2 x i64>* %112, align 16, !tbaa !11
  %113 = add nsw i64 %70, 16
  %114 = getelementptr inbounds i32, i32* %1, i64 %113
  %115 = bitcast i32* %114 to <2 x i64>*
  store <2 x i64> %106, <2 x i64>* %115, align 16, !tbaa !11
  %116 = add nsw i64 %70, 20
  %117 = getelementptr inbounds i32, i32* %1, i64 %116
  %118 = bitcast i32* %117 to <2 x i64>*
  store <2 x i64> %110, <2 x i64>* %118, align 16, !tbaa !11
  %119 = add nsw i64 %70, 24
  %120 = add nsw i64 %69, 2
  %121 = icmp eq i64 %120, %3
  br i1 %121, label %122, label %68

; <label>:122:                                    ; preds = %68
  br label %123

; <label>:123:                                    ; preds = %66, %122
  %124 = add i64 %31, %37
  %125 = add nuw nsw i64 %36, 12
  %126 = icmp slt i64 %125, %13
  br i1 %126, label %35, label %127

; <label>:127:                                    ; preds = %123
  br label %128

; <label>:128:                                    ; preds = %127, %24, %11
  %129 = phi i64 [ 0, %11 ], [ 0, %24 ], [ %124, %127 ]
  %130 = phi i64 [ 0, %11 ], [ %29, %24 ], [ %125, %127 ]
  %131 = icmp slt i64 %130, %16
  br i1 %131, label %132, label %276

; <label>:132:                                    ; preds = %128
  %133 = icmp sgt i64 %3, 0
  %134 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.717", %"class.Eigen::internal::const_blas_data_mapper.717"* %2, i64 0, i32 0, i32 0
  %135 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.717", %"class.Eigen::internal::const_blas_data_mapper.717"* %2, i64 0, i32 0, i32 1
  br i1 %133, label %144, label %136

; <label>:136:                                    ; preds = %132
  %137 = add i64 %15, %4
  %138 = add i64 %137, -1
  %139 = sub i64 %138, %130
  %140 = sub i64 %139, %12
  %141 = and i64 %140, -8
  %142 = add i64 %130, %141
  %143 = add i64 %142, 8
  br label %276

; <label>:144:                                    ; preds = %132
  %145 = shl i64 %3, 3
  %146 = add i64 %15, %4
  %147 = add i64 %146, -1
  %148 = sub i64 %147, %130
  %149 = sub i64 %148, %12
  %150 = and i64 %149, -8
  %151 = add i64 %130, %150
  %152 = add i64 %150, 8
  %153 = mul i64 %152, %3
  %154 = add i64 %3, -1
  %155 = and i64 %3, 3
  %156 = icmp eq i64 %155, 0
  %157 = icmp ult i64 %154, 3
  br label %158

; <label>:158:                                    ; preds = %144, %269
  %159 = phi i64 [ %271, %269 ], [ %130, %144 ]
  %160 = phi i64 [ %270, %269 ], [ %129, %144 ]
  %161 = add nsw i64 %159, 4
  br i1 %156, label %188, label %162

; <label>:162:                                    ; preds = %158
  br label %163

; <label>:163:                                    ; preds = %163, %162
  %164 = phi i64 [ 0, %162 ], [ %184, %163 ]
  %165 = phi i64 [ %160, %162 ], [ %183, %163 ]
  %166 = phi i64 [ %155, %162 ], [ %185, %163 ]
  %167 = load i32*, i32** %134, align 8, !tbaa !362
  %168 = load i64, i64* %135, align 8, !tbaa !364
  %169 = mul nsw i64 %168, %164
  %170 = add nsw i64 %169, %159
  %171 = getelementptr inbounds i32, i32* %167, i64 %170
  %172 = bitcast i32* %171 to <2 x i64>*
  %173 = load <2 x i64>, <2 x i64>* %172, align 1, !tbaa !11
  %174 = add nsw i64 %161, %169
  %175 = getelementptr inbounds i32, i32* %167, i64 %174
  %176 = bitcast i32* %175 to <2 x i64>*
  %177 = load <2 x i64>, <2 x i64>* %176, align 1, !tbaa !11
  %178 = getelementptr inbounds i32, i32* %1, i64 %165
  %179 = bitcast i32* %178 to <2 x i64>*
  store <2 x i64> %173, <2 x i64>* %179, align 16, !tbaa !11
  %180 = add nsw i64 %165, 4
  %181 = getelementptr inbounds i32, i32* %1, i64 %180
  %182 = bitcast i32* %181 to <2 x i64>*
  store <2 x i64> %177, <2 x i64>* %182, align 16, !tbaa !11
  %183 = add nsw i64 %165, 8
  %184 = add nuw nsw i64 %164, 1
  %185 = add i64 %166, -1
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %187, label %163, !llvm.loop !507

; <label>:187:                                    ; preds = %163
  br label %188

; <label>:188:                                    ; preds = %158, %187
  %189 = phi i64 [ 0, %158 ], [ %184, %187 ]
  %190 = phi i64 [ %160, %158 ], [ %183, %187 ]
  br i1 %157, label %269, label %191

; <label>:191:                                    ; preds = %188
  br label %192

; <label>:192:                                    ; preds = %192, %191
  %193 = phi i64 [ %189, %191 ], [ %266, %192 ]
  %194 = phi i64 [ %190, %191 ], [ %265, %192 ]
  %195 = load i32*, i32** %134, align 8, !tbaa !362
  %196 = load i64, i64* %135, align 8, !tbaa !364
  %197 = mul nsw i64 %196, %193
  %198 = add nsw i64 %197, %159
  %199 = getelementptr inbounds i32, i32* %195, i64 %198
  %200 = bitcast i32* %199 to <2 x i64>*
  %201 = load <2 x i64>, <2 x i64>* %200, align 1, !tbaa !11
  %202 = add nsw i64 %161, %197
  %203 = getelementptr inbounds i32, i32* %195, i64 %202
  %204 = bitcast i32* %203 to <2 x i64>*
  %205 = load <2 x i64>, <2 x i64>* %204, align 1, !tbaa !11
  %206 = getelementptr inbounds i32, i32* %1, i64 %194
  %207 = bitcast i32* %206 to <2 x i64>*
  store <2 x i64> %201, <2 x i64>* %207, align 16, !tbaa !11
  %208 = add nsw i64 %194, 4
  %209 = getelementptr inbounds i32, i32* %1, i64 %208
  %210 = bitcast i32* %209 to <2 x i64>*
  store <2 x i64> %205, <2 x i64>* %210, align 16, !tbaa !11
  %211 = add nsw i64 %194, 8
  %212 = add nuw nsw i64 %193, 1
  %213 = load i32*, i32** %134, align 8, !tbaa !362
  %214 = load i64, i64* %135, align 8, !tbaa !364
  %215 = mul nsw i64 %214, %212
  %216 = add nsw i64 %215, %159
  %217 = getelementptr inbounds i32, i32* %213, i64 %216
  %218 = bitcast i32* %217 to <2 x i64>*
  %219 = load <2 x i64>, <2 x i64>* %218, align 1, !tbaa !11
  %220 = add nsw i64 %161, %215
  %221 = getelementptr inbounds i32, i32* %213, i64 %220
  %222 = bitcast i32* %221 to <2 x i64>*
  %223 = load <2 x i64>, <2 x i64>* %222, align 1, !tbaa !11
  %224 = getelementptr inbounds i32, i32* %1, i64 %211
  %225 = bitcast i32* %224 to <2 x i64>*
  store <2 x i64> %219, <2 x i64>* %225, align 16, !tbaa !11
  %226 = add nsw i64 %194, 12
  %227 = getelementptr inbounds i32, i32* %1, i64 %226
  %228 = bitcast i32* %227 to <2 x i64>*
  store <2 x i64> %223, <2 x i64>* %228, align 16, !tbaa !11
  %229 = add nsw i64 %194, 16
  %230 = add nsw i64 %193, 2
  %231 = load i32*, i32** %134, align 8, !tbaa !362
  %232 = load i64, i64* %135, align 8, !tbaa !364
  %233 = mul nsw i64 %232, %230
  %234 = add nsw i64 %233, %159
  %235 = getelementptr inbounds i32, i32* %231, i64 %234
  %236 = bitcast i32* %235 to <2 x i64>*
  %237 = load <2 x i64>, <2 x i64>* %236, align 1, !tbaa !11
  %238 = add nsw i64 %161, %233
  %239 = getelementptr inbounds i32, i32* %231, i64 %238
  %240 = bitcast i32* %239 to <2 x i64>*
  %241 = load <2 x i64>, <2 x i64>* %240, align 1, !tbaa !11
  %242 = getelementptr inbounds i32, i32* %1, i64 %229
  %243 = bitcast i32* %242 to <2 x i64>*
  store <2 x i64> %237, <2 x i64>* %243, align 16, !tbaa !11
  %244 = add nsw i64 %194, 20
  %245 = getelementptr inbounds i32, i32* %1, i64 %244
  %246 = bitcast i32* %245 to <2 x i64>*
  store <2 x i64> %241, <2 x i64>* %246, align 16, !tbaa !11
  %247 = add nsw i64 %194, 24
  %248 = add nsw i64 %193, 3
  %249 = load i32*, i32** %134, align 8, !tbaa !362
  %250 = load i64, i64* %135, align 8, !tbaa !364
  %251 = mul nsw i64 %250, %248
  %252 = add nsw i64 %251, %159
  %253 = getelementptr inbounds i32, i32* %249, i64 %252
  %254 = bitcast i32* %253 to <2 x i64>*
  %255 = load <2 x i64>, <2 x i64>* %254, align 1, !tbaa !11
  %256 = add nsw i64 %161, %251
  %257 = getelementptr inbounds i32, i32* %249, i64 %256
  %258 = bitcast i32* %257 to <2 x i64>*
  %259 = load <2 x i64>, <2 x i64>* %258, align 1, !tbaa !11
  %260 = getelementptr inbounds i32, i32* %1, i64 %247
  %261 = bitcast i32* %260 to <2 x i64>*
  store <2 x i64> %255, <2 x i64>* %261, align 16, !tbaa !11
  %262 = add nsw i64 %194, 28
  %263 = getelementptr inbounds i32, i32* %1, i64 %262
  %264 = bitcast i32* %263 to <2 x i64>*
  store <2 x i64> %259, <2 x i64>* %264, align 16, !tbaa !11
  %265 = add nsw i64 %194, 32
  %266 = add nsw i64 %193, 4
  %267 = icmp eq i64 %266, %3
  br i1 %267, label %268, label %192

; <label>:268:                                    ; preds = %192
  br label %269

; <label>:269:                                    ; preds = %188, %268
  %270 = add i64 %145, %160
  %271 = add nsw i64 %159, 8
  %272 = icmp slt i64 %271, %16
  br i1 %272, label %158, label %273

; <label>:273:                                    ; preds = %269
  %274 = add i64 %151, 8
  %275 = add i64 %129, %153
  br label %276

; <label>:276:                                    ; preds = %136, %273, %128
  %277 = phi i64 [ %129, %128 ], [ %275, %273 ], [ %129, %136 ]
  %278 = phi i64 [ %130, %128 ], [ %274, %273 ], [ %143, %136 ]
  %279 = icmp slt i64 %278, %18
  br i1 %279, label %280, label %384

; <label>:280:                                    ; preds = %276
  %281 = icmp sgt i64 %3, 0
  %282 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.717", %"class.Eigen::internal::const_blas_data_mapper.717"* %2, i64 0, i32 0, i32 0
  %283 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.717", %"class.Eigen::internal::const_blas_data_mapper.717"* %2, i64 0, i32 0, i32 1
  br i1 %281, label %290, label %284

; <label>:284:                                    ; preds = %280
  %285 = add i64 %18, -1
  %286 = sub i64 %285, %278
  %287 = and i64 %286, -4
  %288 = add i64 %278, %287
  %289 = add i64 %288, 4
  br label %384

; <label>:290:                                    ; preds = %280
  %291 = shl i64 %3, 2
  %292 = add i64 %18, -1
  %293 = sub i64 %292, %278
  %294 = and i64 %293, -4
  %295 = add i64 %278, %294
  %296 = add i64 %294, 4
  %297 = mul i64 %296, %3
  %298 = add i64 %3, -1
  %299 = and i64 %3, 3
  %300 = icmp eq i64 %299, 0
  %301 = icmp ult i64 %298, 3
  br label %302

; <label>:302:                                    ; preds = %290, %377
  %303 = phi i64 [ %379, %377 ], [ %278, %290 ]
  %304 = phi i64 [ %378, %377 ], [ %277, %290 ]
  br i1 %300, label %324, label %305

; <label>:305:                                    ; preds = %302
  br label %306

; <label>:306:                                    ; preds = %306, %305
  %307 = phi i64 [ 0, %305 ], [ %320, %306 ]
  %308 = phi i64 [ %304, %305 ], [ %319, %306 ]
  %309 = phi i64 [ %299, %305 ], [ %321, %306 ]
  %310 = load i32*, i32** %282, align 8, !tbaa !362
  %311 = load i64, i64* %283, align 8, !tbaa !364
  %312 = mul nsw i64 %311, %307
  %313 = add nsw i64 %312, %303
  %314 = getelementptr inbounds i32, i32* %310, i64 %313
  %315 = bitcast i32* %314 to <2 x i64>*
  %316 = load <2 x i64>, <2 x i64>* %315, align 1, !tbaa !11
  %317 = getelementptr inbounds i32, i32* %1, i64 %308
  %318 = bitcast i32* %317 to <2 x i64>*
  store <2 x i64> %316, <2 x i64>* %318, align 16, !tbaa !11
  %319 = add nsw i64 %308, 4
  %320 = add nuw nsw i64 %307, 1
  %321 = add i64 %309, -1
  %322 = icmp eq i64 %321, 0
  br i1 %322, label %323, label %306, !llvm.loop !508

; <label>:323:                                    ; preds = %306
  br label %324

; <label>:324:                                    ; preds = %302, %323
  %325 = phi i64 [ 0, %302 ], [ %320, %323 ]
  %326 = phi i64 [ %304, %302 ], [ %319, %323 ]
  br i1 %301, label %377, label %327

; <label>:327:                                    ; preds = %324
  br label %328

; <label>:328:                                    ; preds = %328, %327
  %329 = phi i64 [ %325, %327 ], [ %374, %328 ]
  %330 = phi i64 [ %326, %327 ], [ %373, %328 ]
  %331 = load i32*, i32** %282, align 8, !tbaa !362
  %332 = load i64, i64* %283, align 8, !tbaa !364
  %333 = mul nsw i64 %332, %329
  %334 = add nsw i64 %333, %303
  %335 = getelementptr inbounds i32, i32* %331, i64 %334
  %336 = bitcast i32* %335 to <2 x i64>*
  %337 = load <2 x i64>, <2 x i64>* %336, align 1, !tbaa !11
  %338 = getelementptr inbounds i32, i32* %1, i64 %330
  %339 = bitcast i32* %338 to <2 x i64>*
  store <2 x i64> %337, <2 x i64>* %339, align 16, !tbaa !11
  %340 = add nsw i64 %330, 4
  %341 = add nuw nsw i64 %329, 1
  %342 = load i32*, i32** %282, align 8, !tbaa !362
  %343 = load i64, i64* %283, align 8, !tbaa !364
  %344 = mul nsw i64 %343, %341
  %345 = add nsw i64 %344, %303
  %346 = getelementptr inbounds i32, i32* %342, i64 %345
  %347 = bitcast i32* %346 to <2 x i64>*
  %348 = load <2 x i64>, <2 x i64>* %347, align 1, !tbaa !11
  %349 = getelementptr inbounds i32, i32* %1, i64 %340
  %350 = bitcast i32* %349 to <2 x i64>*
  store <2 x i64> %348, <2 x i64>* %350, align 16, !tbaa !11
  %351 = add nsw i64 %330, 8
  %352 = add nsw i64 %329, 2
  %353 = load i32*, i32** %282, align 8, !tbaa !362
  %354 = load i64, i64* %283, align 8, !tbaa !364
  %355 = mul nsw i64 %354, %352
  %356 = add nsw i64 %355, %303
  %357 = getelementptr inbounds i32, i32* %353, i64 %356
  %358 = bitcast i32* %357 to <2 x i64>*
  %359 = load <2 x i64>, <2 x i64>* %358, align 1, !tbaa !11
  %360 = getelementptr inbounds i32, i32* %1, i64 %351
  %361 = bitcast i32* %360 to <2 x i64>*
  store <2 x i64> %359, <2 x i64>* %361, align 16, !tbaa !11
  %362 = add nsw i64 %330, 12
  %363 = add nsw i64 %329, 3
  %364 = load i32*, i32** %282, align 8, !tbaa !362
  %365 = load i64, i64* %283, align 8, !tbaa !364
  %366 = mul nsw i64 %365, %363
  %367 = add nsw i64 %366, %303
  %368 = getelementptr inbounds i32, i32* %364, i64 %367
  %369 = bitcast i32* %368 to <2 x i64>*
  %370 = load <2 x i64>, <2 x i64>* %369, align 1, !tbaa !11
  %371 = getelementptr inbounds i32, i32* %1, i64 %362
  %372 = bitcast i32* %371 to <2 x i64>*
  store <2 x i64> %370, <2 x i64>* %372, align 16, !tbaa !11
  %373 = add nsw i64 %330, 16
  %374 = add nsw i64 %329, 4
  %375 = icmp eq i64 %374, %3
  br i1 %375, label %376, label %328

; <label>:376:                                    ; preds = %328
  br label %377

; <label>:377:                                    ; preds = %324, %376
  %378 = add i64 %291, %304
  %379 = add nsw i64 %303, 4
  %380 = icmp slt i64 %379, %18
  br i1 %380, label %302, label %381

; <label>:381:                                    ; preds = %377
  %382 = add i64 %295, 4
  %383 = add i64 %277, %297
  br label %384

; <label>:384:                                    ; preds = %284, %381, %276
  %385 = phi i64 [ %277, %276 ], [ %383, %381 ], [ %277, %284 ]
  %386 = phi i64 [ %278, %276 ], [ %382, %381 ], [ %289, %284 ]
  %387 = icmp slt i64 %386, %4
  br i1 %387, label %388, label %660

; <label>:388:                                    ; preds = %384
  %389 = icmp sgt i64 %3, 0
  %390 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.717", %"class.Eigen::internal::const_blas_data_mapper.717"* %2, i64 0, i32 0, i32 0
  %391 = load i32*, i32** %390, align 8
  %392 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.717", %"class.Eigen::internal::const_blas_data_mapper.717"* %2, i64 0, i32 0, i32 1
  %393 = load i64, i64* %392, align 8
  br i1 %389, label %394, label %660

; <label>:394:                                    ; preds = %388
  %395 = add i64 %385, %3
  %396 = add i64 %386, %3
  %397 = add i64 %3, -32
  %398 = lshr i64 %397, 5
  %399 = add nuw nsw i64 %398, 1
  %400 = add i64 %3, -1
  %401 = icmp ult i64 %3, 32
  %402 = and i64 %3, -32
  %403 = icmp ne i64 %402, 0
  %404 = icmp eq i64 %393, 1
  %405 = and i1 %403, %404
  %406 = and i64 %399, 3
  %407 = icmp eq i64 %406, 0
  %408 = icmp ult i64 %397, 96
  %409 = icmp eq i64 %402, %3
  br label %410

; <label>:410:                                    ; preds = %394, %654
  %411 = phi i64 [ 0, %394 ], [ %658, %654 ]
  %412 = phi i64 [ %386, %394 ], [ %656, %654 ]
  %413 = phi i64 [ %385, %394 ], [ %655, %654 ]
  %414 = mul i64 %411, %3
  %415 = add i64 %385, %414
  %416 = getelementptr i32, i32* %1, i64 %415
  %417 = add i64 %395, %414
  %418 = getelementptr i32, i32* %1, i64 %417
  %419 = add i64 %386, %411
  %420 = getelementptr i32, i32* %391, i64 %419
  %421 = add i64 %396, %411
  %422 = getelementptr i32, i32* %391, i64 %421
  br i1 %401, label %565, label %423

; <label>:423:                                    ; preds = %410
  br i1 %405, label %424, label %565

; <label>:424:                                    ; preds = %423
  %425 = icmp ult i32* %416, %422
  %426 = icmp ult i32* %420, %418
  %427 = and i1 %425, %426
  %428 = add i64 %413, %402
  br i1 %427, label %565, label %429

; <label>:429:                                    ; preds = %424
  br i1 %407, label %461, label %430

; <label>:430:                                    ; preds = %429
  br label %431

; <label>:431:                                    ; preds = %431, %430
  %432 = phi i64 [ %457, %431 ], [ 0, %430 ]
  %433 = phi i64 [ %458, %431 ], [ %406, %430 ]
  %434 = add i64 %413, %432
  %435 = mul nsw i64 %393, %432
  %436 = add nsw i64 %435, %412
  %437 = getelementptr inbounds i32, i32* %391, i64 %436
  %438 = bitcast i32* %437 to <8 x i32>*
  %439 = load <8 x i32>, <8 x i32>* %438, align 4, !tbaa !33, !alias.scope !509
  %440 = getelementptr i32, i32* %437, i64 8
  %441 = bitcast i32* %440 to <8 x i32>*
  %442 = load <8 x i32>, <8 x i32>* %441, align 4, !tbaa !33, !alias.scope !509
  %443 = getelementptr i32, i32* %437, i64 16
  %444 = bitcast i32* %443 to <8 x i32>*
  %445 = load <8 x i32>, <8 x i32>* %444, align 4, !tbaa !33, !alias.scope !509
  %446 = getelementptr i32, i32* %437, i64 24
  %447 = bitcast i32* %446 to <8 x i32>*
  %448 = load <8 x i32>, <8 x i32>* %447, align 4, !tbaa !33, !alias.scope !509
  %449 = getelementptr inbounds i32, i32* %1, i64 %434
  %450 = bitcast i32* %449 to <8 x i32>*
  store <8 x i32> %439, <8 x i32>* %450, align 4, !tbaa !33, !alias.scope !512, !noalias !509
  %451 = getelementptr i32, i32* %449, i64 8
  %452 = bitcast i32* %451 to <8 x i32>*
  store <8 x i32> %442, <8 x i32>* %452, align 4, !tbaa !33, !alias.scope !512, !noalias !509
  %453 = getelementptr i32, i32* %449, i64 16
  %454 = bitcast i32* %453 to <8 x i32>*
  store <8 x i32> %445, <8 x i32>* %454, align 4, !tbaa !33, !alias.scope !512, !noalias !509
  %455 = getelementptr i32, i32* %449, i64 24
  %456 = bitcast i32* %455 to <8 x i32>*
  store <8 x i32> %448, <8 x i32>* %456, align 4, !tbaa !33, !alias.scope !512, !noalias !509
  %457 = add i64 %432, 32
  %458 = add i64 %433, -1
  %459 = icmp eq i64 %458, 0
  br i1 %459, label %460, label %431, !llvm.loop !514

; <label>:460:                                    ; preds = %431
  br label %461

; <label>:461:                                    ; preds = %429, %460
  %462 = phi i64 [ 0, %429 ], [ %457, %460 ]
  br i1 %408, label %564, label %463

; <label>:463:                                    ; preds = %461
  br label %464

; <label>:464:                                    ; preds = %464, %463
  %465 = phi i64 [ %462, %463 ], [ %561, %464 ]
  %466 = add i64 %413, %465
  %467 = mul nsw i64 %393, %465
  %468 = add nsw i64 %467, %412
  %469 = getelementptr inbounds i32, i32* %391, i64 %468
  %470 = bitcast i32* %469 to <8 x i32>*
  %471 = load <8 x i32>, <8 x i32>* %470, align 4, !tbaa !33, !alias.scope !509
  %472 = getelementptr i32, i32* %469, i64 8
  %473 = bitcast i32* %472 to <8 x i32>*
  %474 = load <8 x i32>, <8 x i32>* %473, align 4, !tbaa !33, !alias.scope !509
  %475 = getelementptr i32, i32* %469, i64 16
  %476 = bitcast i32* %475 to <8 x i32>*
  %477 = load <8 x i32>, <8 x i32>* %476, align 4, !tbaa !33, !alias.scope !509
  %478 = getelementptr i32, i32* %469, i64 24
  %479 = bitcast i32* %478 to <8 x i32>*
  %480 = load <8 x i32>, <8 x i32>* %479, align 4, !tbaa !33, !alias.scope !509
  %481 = getelementptr inbounds i32, i32* %1, i64 %466
  %482 = bitcast i32* %481 to <8 x i32>*
  store <8 x i32> %471, <8 x i32>* %482, align 4, !tbaa !33, !alias.scope !512, !noalias !509
  %483 = getelementptr i32, i32* %481, i64 8
  %484 = bitcast i32* %483 to <8 x i32>*
  store <8 x i32> %474, <8 x i32>* %484, align 4, !tbaa !33, !alias.scope !512, !noalias !509
  %485 = getelementptr i32, i32* %481, i64 16
  %486 = bitcast i32* %485 to <8 x i32>*
  store <8 x i32> %477, <8 x i32>* %486, align 4, !tbaa !33, !alias.scope !512, !noalias !509
  %487 = getelementptr i32, i32* %481, i64 24
  %488 = bitcast i32* %487 to <8 x i32>*
  store <8 x i32> %480, <8 x i32>* %488, align 4, !tbaa !33, !alias.scope !512, !noalias !509
  %489 = add i64 %465, 32
  %490 = add i64 %413, %489
  %491 = mul nsw i64 %393, %489
  %492 = add nsw i64 %491, %412
  %493 = getelementptr inbounds i32, i32* %391, i64 %492
  %494 = bitcast i32* %493 to <8 x i32>*
  %495 = load <8 x i32>, <8 x i32>* %494, align 4, !tbaa !33, !alias.scope !509
  %496 = getelementptr i32, i32* %493, i64 8
  %497 = bitcast i32* %496 to <8 x i32>*
  %498 = load <8 x i32>, <8 x i32>* %497, align 4, !tbaa !33, !alias.scope !509
  %499 = getelementptr i32, i32* %493, i64 16
  %500 = bitcast i32* %499 to <8 x i32>*
  %501 = load <8 x i32>, <8 x i32>* %500, align 4, !tbaa !33, !alias.scope !509
  %502 = getelementptr i32, i32* %493, i64 24
  %503 = bitcast i32* %502 to <8 x i32>*
  %504 = load <8 x i32>, <8 x i32>* %503, align 4, !tbaa !33, !alias.scope !509
  %505 = getelementptr inbounds i32, i32* %1, i64 %490
  %506 = bitcast i32* %505 to <8 x i32>*
  store <8 x i32> %495, <8 x i32>* %506, align 4, !tbaa !33, !alias.scope !512, !noalias !509
  %507 = getelementptr i32, i32* %505, i64 8
  %508 = bitcast i32* %507 to <8 x i32>*
  store <8 x i32> %498, <8 x i32>* %508, align 4, !tbaa !33, !alias.scope !512, !noalias !509
  %509 = getelementptr i32, i32* %505, i64 16
  %510 = bitcast i32* %509 to <8 x i32>*
  store <8 x i32> %501, <8 x i32>* %510, align 4, !tbaa !33, !alias.scope !512, !noalias !509
  %511 = getelementptr i32, i32* %505, i64 24
  %512 = bitcast i32* %511 to <8 x i32>*
  store <8 x i32> %504, <8 x i32>* %512, align 4, !tbaa !33, !alias.scope !512, !noalias !509
  %513 = add i64 %465, 64
  %514 = add i64 %413, %513
  %515 = mul nsw i64 %393, %513
  %516 = add nsw i64 %515, %412
  %517 = getelementptr inbounds i32, i32* %391, i64 %516
  %518 = bitcast i32* %517 to <8 x i32>*
  %519 = load <8 x i32>, <8 x i32>* %518, align 4, !tbaa !33, !alias.scope !509
  %520 = getelementptr i32, i32* %517, i64 8
  %521 = bitcast i32* %520 to <8 x i32>*
  %522 = load <8 x i32>, <8 x i32>* %521, align 4, !tbaa !33, !alias.scope !509
  %523 = getelementptr i32, i32* %517, i64 16
  %524 = bitcast i32* %523 to <8 x i32>*
  %525 = load <8 x i32>, <8 x i32>* %524, align 4, !tbaa !33, !alias.scope !509
  %526 = getelementptr i32, i32* %517, i64 24
  %527 = bitcast i32* %526 to <8 x i32>*
  %528 = load <8 x i32>, <8 x i32>* %527, align 4, !tbaa !33, !alias.scope !509
  %529 = getelementptr inbounds i32, i32* %1, i64 %514
  %530 = bitcast i32* %529 to <8 x i32>*
  store <8 x i32> %519, <8 x i32>* %530, align 4, !tbaa !33, !alias.scope !512, !noalias !509
  %531 = getelementptr i32, i32* %529, i64 8
  %532 = bitcast i32* %531 to <8 x i32>*
  store <8 x i32> %522, <8 x i32>* %532, align 4, !tbaa !33, !alias.scope !512, !noalias !509
  %533 = getelementptr i32, i32* %529, i64 16
  %534 = bitcast i32* %533 to <8 x i32>*
  store <8 x i32> %525, <8 x i32>* %534, align 4, !tbaa !33, !alias.scope !512, !noalias !509
  %535 = getelementptr i32, i32* %529, i64 24
  %536 = bitcast i32* %535 to <8 x i32>*
  store <8 x i32> %528, <8 x i32>* %536, align 4, !tbaa !33, !alias.scope !512, !noalias !509
  %537 = add i64 %465, 96
  %538 = add i64 %413, %537
  %539 = mul nsw i64 %393, %537
  %540 = add nsw i64 %539, %412
  %541 = getelementptr inbounds i32, i32* %391, i64 %540
  %542 = bitcast i32* %541 to <8 x i32>*
  %543 = load <8 x i32>, <8 x i32>* %542, align 4, !tbaa !33, !alias.scope !509
  %544 = getelementptr i32, i32* %541, i64 8
  %545 = bitcast i32* %544 to <8 x i32>*
  %546 = load <8 x i32>, <8 x i32>* %545, align 4, !tbaa !33, !alias.scope !509
  %547 = getelementptr i32, i32* %541, i64 16
  %548 = bitcast i32* %547 to <8 x i32>*
  %549 = load <8 x i32>, <8 x i32>* %548, align 4, !tbaa !33, !alias.scope !509
  %550 = getelementptr i32, i32* %541, i64 24
  %551 = bitcast i32* %550 to <8 x i32>*
  %552 = load <8 x i32>, <8 x i32>* %551, align 4, !tbaa !33, !alias.scope !509
  %553 = getelementptr inbounds i32, i32* %1, i64 %538
  %554 = bitcast i32* %553 to <8 x i32>*
  store <8 x i32> %543, <8 x i32>* %554, align 4, !tbaa !33, !alias.scope !512, !noalias !509
  %555 = getelementptr i32, i32* %553, i64 8
  %556 = bitcast i32* %555 to <8 x i32>*
  store <8 x i32> %546, <8 x i32>* %556, align 4, !tbaa !33, !alias.scope !512, !noalias !509
  %557 = getelementptr i32, i32* %553, i64 16
  %558 = bitcast i32* %557 to <8 x i32>*
  store <8 x i32> %549, <8 x i32>* %558, align 4, !tbaa !33, !alias.scope !512, !noalias !509
  %559 = getelementptr i32, i32* %553, i64 24
  %560 = bitcast i32* %559 to <8 x i32>*
  store <8 x i32> %552, <8 x i32>* %560, align 4, !tbaa !33, !alias.scope !512, !noalias !509
  %561 = add i64 %465, 128
  %562 = icmp eq i64 %561, %402
  br i1 %562, label %563, label %464, !llvm.loop !515

; <label>:563:                                    ; preds = %464
  br label %564

; <label>:564:                                    ; preds = %461, %563
  br i1 %409, label %654, label %565

; <label>:565:                                    ; preds = %423, %564, %424, %410
  %566 = phi i64 [ 0, %424 ], [ 0, %423 ], [ 0, %410 ], [ %402, %564 ]
  %567 = phi i64 [ %413, %424 ], [ %413, %423 ], [ %413, %410 ], [ %428, %564 ]
  %568 = sub i64 %3, %566
  %569 = sub i64 %400, %566
  %570 = and i64 %568, 7
  %571 = icmp eq i64 %570, 0
  br i1 %571, label %587, label %572

; <label>:572:                                    ; preds = %565
  br label %573

; <label>:573:                                    ; preds = %573, %572
  %574 = phi i64 [ %583, %573 ], [ %566, %572 ]
  %575 = phi i64 [ %581, %573 ], [ %567, %572 ]
  %576 = phi i64 [ %584, %573 ], [ %570, %572 ]
  %577 = mul nsw i64 %393, %574
  %578 = add nsw i64 %577, %412
  %579 = getelementptr inbounds i32, i32* %391, i64 %578
  %580 = load i32, i32* %579, align 4, !tbaa !33
  %581 = add nsw i64 %575, 1
  %582 = getelementptr inbounds i32, i32* %1, i64 %575
  store i32 %580, i32* %582, align 4, !tbaa !33
  %583 = add nuw nsw i64 %574, 1
  %584 = add i64 %576, -1
  %585 = icmp eq i64 %584, 0
  br i1 %585, label %586, label %573, !llvm.loop !516

; <label>:586:                                    ; preds = %573
  br label %587

; <label>:587:                                    ; preds = %565, %586
  %588 = phi i64 [ %566, %565 ], [ %583, %586 ]
  %589 = phi i64 [ %567, %565 ], [ %581, %586 ]
  %590 = icmp ult i64 %569, 7
  br i1 %590, label %653, label %591

; <label>:591:                                    ; preds = %587
  br label %592

; <label>:592:                                    ; preds = %592, %591
  %593 = phi i64 [ %588, %591 ], [ %650, %592 ]
  %594 = phi i64 [ %589, %591 ], [ %648, %592 ]
  %595 = mul nsw i64 %393, %593
  %596 = add nsw i64 %595, %412
  %597 = getelementptr inbounds i32, i32* %391, i64 %596
  %598 = load i32, i32* %597, align 4, !tbaa !33
  %599 = add nsw i64 %594, 1
  %600 = getelementptr inbounds i32, i32* %1, i64 %594
  store i32 %598, i32* %600, align 4, !tbaa !33
  %601 = add nuw nsw i64 %593, 1
  %602 = mul nsw i64 %393, %601
  %603 = add nsw i64 %602, %412
  %604 = getelementptr inbounds i32, i32* %391, i64 %603
  %605 = load i32, i32* %604, align 4, !tbaa !33
  %606 = add nsw i64 %594, 2
  %607 = getelementptr inbounds i32, i32* %1, i64 %599
  store i32 %605, i32* %607, align 4, !tbaa !33
  %608 = add nsw i64 %593, 2
  %609 = mul nsw i64 %393, %608
  %610 = add nsw i64 %609, %412
  %611 = getelementptr inbounds i32, i32* %391, i64 %610
  %612 = load i32, i32* %611, align 4, !tbaa !33
  %613 = add nsw i64 %594, 3
  %614 = getelementptr inbounds i32, i32* %1, i64 %606
  store i32 %612, i32* %614, align 4, !tbaa !33
  %615 = add nsw i64 %593, 3
  %616 = mul nsw i64 %393, %615
  %617 = add nsw i64 %616, %412
  %618 = getelementptr inbounds i32, i32* %391, i64 %617
  %619 = load i32, i32* %618, align 4, !tbaa !33
  %620 = add nsw i64 %594, 4
  %621 = getelementptr inbounds i32, i32* %1, i64 %613
  store i32 %619, i32* %621, align 4, !tbaa !33
  %622 = add nsw i64 %593, 4
  %623 = mul nsw i64 %393, %622
  %624 = add nsw i64 %623, %412
  %625 = getelementptr inbounds i32, i32* %391, i64 %624
  %626 = load i32, i32* %625, align 4, !tbaa !33
  %627 = add nsw i64 %594, 5
  %628 = getelementptr inbounds i32, i32* %1, i64 %620
  store i32 %626, i32* %628, align 4, !tbaa !33
  %629 = add nsw i64 %593, 5
  %630 = mul nsw i64 %393, %629
  %631 = add nsw i64 %630, %412
  %632 = getelementptr inbounds i32, i32* %391, i64 %631
  %633 = load i32, i32* %632, align 4, !tbaa !33
  %634 = add nsw i64 %594, 6
  %635 = getelementptr inbounds i32, i32* %1, i64 %627
  store i32 %633, i32* %635, align 4, !tbaa !33
  %636 = add nsw i64 %593, 6
  %637 = mul nsw i64 %393, %636
  %638 = add nsw i64 %637, %412
  %639 = getelementptr inbounds i32, i32* %391, i64 %638
  %640 = load i32, i32* %639, align 4, !tbaa !33
  %641 = add nsw i64 %594, 7
  %642 = getelementptr inbounds i32, i32* %1, i64 %634
  store i32 %640, i32* %642, align 4, !tbaa !33
  %643 = add nsw i64 %593, 7
  %644 = mul nsw i64 %393, %643
  %645 = add nsw i64 %644, %412
  %646 = getelementptr inbounds i32, i32* %391, i64 %645
  %647 = load i32, i32* %646, align 4, !tbaa !33
  %648 = add nsw i64 %594, 8
  %649 = getelementptr inbounds i32, i32* %1, i64 %641
  store i32 %647, i32* %649, align 4, !tbaa !33
  %650 = add nsw i64 %593, 8
  %651 = icmp eq i64 %650, %3
  br i1 %651, label %652, label %592, !llvm.loop !517

; <label>:652:                                    ; preds = %592
  br label %653

; <label>:653:                                    ; preds = %587, %652
  br label %654

; <label>:654:                                    ; preds = %653, %564
  %655 = add i64 %413, %3
  %656 = add nsw i64 %412, 1
  %657 = icmp eq i64 %656, %4
  %658 = add i64 %411, 1
  br i1 %657, label %659, label %410

; <label>:659:                                    ; preds = %654
  br label %660

; <label>:660:                                    ; preds = %659, %388, %384
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal13gemm_pack_rhsIilNS0_22const_blas_data_mapperIilLi1EEELi4ELi1ELb0ELb0EEclEPiRKS3_llll(%"struct.Eigen::internal::gemm_pack_rhs"*, i32*, %"class.Eigen::internal::const_blas_data_mapper.719"* dereferenceable(16), i64, i64, i64, i64) local_unnamed_addr #8 align 2 {
  tail call void asm sideeffect "#EIGEN PRODUCT PACK RHS ROWMAJOR", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !518
  %8 = or i64 %6, %5
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %11, label %10, !prof !10

; <label>:10:                                     ; preds = %7
  tail call void @__assert_rtn(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__func__._ZN5Eigen8internal13gemm_pack_lhsIilNS0_22const_blas_data_mapperIilLi0EEELi12ELi4ELi0ELb0ELb0EEclEPiRKS3_llll, i64 0, i64 0), i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.35, i64 0, i64 0), i32 2030, i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.36, i64 0, i64 0)) #13
  unreachable

; <label>:11:                                     ; preds = %7
  %12 = sdiv i64 %4, 4
  %13 = shl nsw i64 %12, 2
  %14 = icmp sgt i64 %4, 3
  br i1 %14, label %15, label %108

; <label>:15:                                     ; preds = %11
  %16 = icmp sgt i64 %3, 0
  %17 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.719", %"class.Eigen::internal::const_blas_data_mapper.719"* %2, i64 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.719", %"class.Eigen::internal::const_blas_data_mapper.719"* %2, i64 0, i32 0, i32 1
  br i1 %16, label %19, label %108

; <label>:19:                                     ; preds = %15
  %20 = shl i64 %3, 2
  %21 = icmp sgt i64 %13, 4
  %22 = select i1 %21, i64 %13, i64 4
  %23 = add i64 %3, -1
  %24 = and i64 %3, 3
  %25 = icmp eq i64 %24, 0
  %26 = icmp ult i64 %23, 3
  br label %27

; <label>:27:                                     ; preds = %19, %102
  %28 = phi i64 [ %104, %102 ], [ 0, %19 ]
  %29 = phi i64 [ %103, %102 ], [ 0, %19 ]
  br i1 %25, label %49, label %30

; <label>:30:                                     ; preds = %27
  br label %31

; <label>:31:                                     ; preds = %31, %30
  %32 = phi i64 [ 0, %30 ], [ %45, %31 ]
  %33 = phi i64 [ %29, %30 ], [ %44, %31 ]
  %34 = phi i64 [ %24, %30 ], [ %46, %31 ]
  %35 = load i32*, i32** %17, align 8, !tbaa !365
  %36 = load i64, i64* %18, align 8, !tbaa !367
  %37 = mul nsw i64 %36, %32
  %38 = add nsw i64 %37, %28
  %39 = getelementptr inbounds i32, i32* %35, i64 %38
  %40 = bitcast i32* %39 to <2 x i64>*
  %41 = load <2 x i64>, <2 x i64>* %40, align 1, !tbaa !11
  %42 = getelementptr inbounds i32, i32* %1, i64 %33
  %43 = bitcast i32* %42 to <2 x i64>*
  store <2 x i64> %41, <2 x i64>* %43, align 1, !tbaa !11
  %44 = add nsw i64 %33, 4
  %45 = add nuw nsw i64 %32, 1
  %46 = add i64 %34, -1
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %31, !llvm.loop !519

; <label>:48:                                     ; preds = %31
  br label %49

; <label>:49:                                     ; preds = %27, %48
  %50 = phi i64 [ 0, %27 ], [ %45, %48 ]
  %51 = phi i64 [ %29, %27 ], [ %44, %48 ]
  br i1 %26, label %102, label %52

; <label>:52:                                     ; preds = %49
  br label %53

; <label>:53:                                     ; preds = %53, %52
  %54 = phi i64 [ %50, %52 ], [ %99, %53 ]
  %55 = phi i64 [ %51, %52 ], [ %98, %53 ]
  %56 = load i32*, i32** %17, align 8, !tbaa !365
  %57 = load i64, i64* %18, align 8, !tbaa !367
  %58 = mul nsw i64 %57, %54
  %59 = add nsw i64 %58, %28
  %60 = getelementptr inbounds i32, i32* %56, i64 %59
  %61 = bitcast i32* %60 to <2 x i64>*
  %62 = load <2 x i64>, <2 x i64>* %61, align 1, !tbaa !11
  %63 = getelementptr inbounds i32, i32* %1, i64 %55
  %64 = bitcast i32* %63 to <2 x i64>*
  store <2 x i64> %62, <2 x i64>* %64, align 1, !tbaa !11
  %65 = add nsw i64 %55, 4
  %66 = add nuw nsw i64 %54, 1
  %67 = load i32*, i32** %17, align 8, !tbaa !365
  %68 = load i64, i64* %18, align 8, !tbaa !367
  %69 = mul nsw i64 %68, %66
  %70 = add nsw i64 %69, %28
  %71 = getelementptr inbounds i32, i32* %67, i64 %70
  %72 = bitcast i32* %71 to <2 x i64>*
  %73 = load <2 x i64>, <2 x i64>* %72, align 1, !tbaa !11
  %74 = getelementptr inbounds i32, i32* %1, i64 %65
  %75 = bitcast i32* %74 to <2 x i64>*
  store <2 x i64> %73, <2 x i64>* %75, align 1, !tbaa !11
  %76 = add nsw i64 %55, 8
  %77 = add nsw i64 %54, 2
  %78 = load i32*, i32** %17, align 8, !tbaa !365
  %79 = load i64, i64* %18, align 8, !tbaa !367
  %80 = mul nsw i64 %79, %77
  %81 = add nsw i64 %80, %28
  %82 = getelementptr inbounds i32, i32* %78, i64 %81
  %83 = bitcast i32* %82 to <2 x i64>*
  %84 = load <2 x i64>, <2 x i64>* %83, align 1, !tbaa !11
  %85 = getelementptr inbounds i32, i32* %1, i64 %76
  %86 = bitcast i32* %85 to <2 x i64>*
  store <2 x i64> %84, <2 x i64>* %86, align 1, !tbaa !11
  %87 = add nsw i64 %55, 12
  %88 = add nsw i64 %54, 3
  %89 = load i32*, i32** %17, align 8, !tbaa !365
  %90 = load i64, i64* %18, align 8, !tbaa !367
  %91 = mul nsw i64 %90, %88
  %92 = add nsw i64 %91, %28
  %93 = getelementptr inbounds i32, i32* %89, i64 %92
  %94 = bitcast i32* %93 to <2 x i64>*
  %95 = load <2 x i64>, <2 x i64>* %94, align 1, !tbaa !11
  %96 = getelementptr inbounds i32, i32* %1, i64 %87
  %97 = bitcast i32* %96 to <2 x i64>*
  store <2 x i64> %95, <2 x i64>* %97, align 1, !tbaa !11
  %98 = add nsw i64 %55, 16
  %99 = add nsw i64 %54, 4
  %100 = icmp eq i64 %99, %3
  br i1 %100, label %101, label %53

; <label>:101:                                    ; preds = %53
  br label %102

; <label>:102:                                    ; preds = %49, %101
  %103 = add i64 %20, %29
  %104 = add nuw nsw i64 %28, 4
  %105 = icmp slt i64 %104, %13
  br i1 %105, label %27, label %106

; <label>:106:                                    ; preds = %102
  %107 = mul i64 %22, %3
  br label %108

; <label>:108:                                    ; preds = %15, %106, %11
  %109 = phi i64 [ 0, %11 ], [ %107, %106 ], [ 0, %15 ]
  %110 = icmp slt i64 %13, %4
  br i1 %110, label %111, label %383

; <label>:111:                                    ; preds = %108
  %112 = icmp sgt i64 %3, 0
  %113 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.719", %"class.Eigen::internal::const_blas_data_mapper.719"* %2, i64 0, i32 0, i32 0
  %114 = load i32*, i32** %113, align 8
  %115 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.719", %"class.Eigen::internal::const_blas_data_mapper.719"* %2, i64 0, i32 0, i32 1
  %116 = load i64, i64* %115, align 8
  br i1 %112, label %117, label %383

; <label>:117:                                    ; preds = %111
  %118 = add i64 %109, %3
  %119 = add i64 %13, %3
  %120 = add i64 %3, -32
  %121 = lshr i64 %120, 5
  %122 = add nuw nsw i64 %121, 1
  %123 = add i64 %3, -1
  %124 = icmp ult i64 %3, 32
  %125 = and i64 %3, -32
  %126 = icmp ne i64 %125, 0
  %127 = icmp eq i64 %116, 1
  %128 = and i1 %126, %127
  %129 = and i64 %122, 3
  %130 = icmp eq i64 %129, 0
  %131 = icmp ult i64 %120, 96
  %132 = icmp eq i64 %125, %3
  br label %133

; <label>:133:                                    ; preds = %117, %377
  %134 = phi i64 [ 0, %117 ], [ %381, %377 ]
  %135 = phi i64 [ %13, %117 ], [ %379, %377 ]
  %136 = phi i64 [ %109, %117 ], [ %378, %377 ]
  %137 = mul i64 %134, %3
  %138 = add i64 %109, %137
  %139 = getelementptr i32, i32* %1, i64 %138
  %140 = add i64 %118, %137
  %141 = getelementptr i32, i32* %1, i64 %140
  %142 = add i64 %13, %134
  %143 = getelementptr i32, i32* %114, i64 %142
  %144 = add i64 %119, %134
  %145 = getelementptr i32, i32* %114, i64 %144
  br i1 %124, label %288, label %146

; <label>:146:                                    ; preds = %133
  br i1 %128, label %147, label %288

; <label>:147:                                    ; preds = %146
  %148 = icmp ult i32* %139, %145
  %149 = icmp ult i32* %143, %141
  %150 = and i1 %148, %149
  %151 = add i64 %136, %125
  br i1 %150, label %288, label %152

; <label>:152:                                    ; preds = %147
  br i1 %130, label %184, label %153

; <label>:153:                                    ; preds = %152
  br label %154

; <label>:154:                                    ; preds = %154, %153
  %155 = phi i64 [ %180, %154 ], [ 0, %153 ]
  %156 = phi i64 [ %181, %154 ], [ %129, %153 ]
  %157 = add i64 %136, %155
  %158 = mul nsw i64 %116, %155
  %159 = add nsw i64 %158, %135
  %160 = getelementptr inbounds i32, i32* %114, i64 %159
  %161 = bitcast i32* %160 to <8 x i32>*
  %162 = load <8 x i32>, <8 x i32>* %161, align 4, !tbaa !33, !alias.scope !520
  %163 = getelementptr i32, i32* %160, i64 8
  %164 = bitcast i32* %163 to <8 x i32>*
  %165 = load <8 x i32>, <8 x i32>* %164, align 4, !tbaa !33, !alias.scope !520
  %166 = getelementptr i32, i32* %160, i64 16
  %167 = bitcast i32* %166 to <8 x i32>*
  %168 = load <8 x i32>, <8 x i32>* %167, align 4, !tbaa !33, !alias.scope !520
  %169 = getelementptr i32, i32* %160, i64 24
  %170 = bitcast i32* %169 to <8 x i32>*
  %171 = load <8 x i32>, <8 x i32>* %170, align 4, !tbaa !33, !alias.scope !520
  %172 = getelementptr inbounds i32, i32* %1, i64 %157
  %173 = bitcast i32* %172 to <8 x i32>*
  store <8 x i32> %162, <8 x i32>* %173, align 4, !tbaa !33, !alias.scope !523, !noalias !520
  %174 = getelementptr i32, i32* %172, i64 8
  %175 = bitcast i32* %174 to <8 x i32>*
  store <8 x i32> %165, <8 x i32>* %175, align 4, !tbaa !33, !alias.scope !523, !noalias !520
  %176 = getelementptr i32, i32* %172, i64 16
  %177 = bitcast i32* %176 to <8 x i32>*
  store <8 x i32> %168, <8 x i32>* %177, align 4, !tbaa !33, !alias.scope !523, !noalias !520
  %178 = getelementptr i32, i32* %172, i64 24
  %179 = bitcast i32* %178 to <8 x i32>*
  store <8 x i32> %171, <8 x i32>* %179, align 4, !tbaa !33, !alias.scope !523, !noalias !520
  %180 = add i64 %155, 32
  %181 = add i64 %156, -1
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %183, label %154, !llvm.loop !525

; <label>:183:                                    ; preds = %154
  br label %184

; <label>:184:                                    ; preds = %152, %183
  %185 = phi i64 [ 0, %152 ], [ %180, %183 ]
  br i1 %131, label %287, label %186

; <label>:186:                                    ; preds = %184
  br label %187

; <label>:187:                                    ; preds = %187, %186
  %188 = phi i64 [ %185, %186 ], [ %284, %187 ]
  %189 = add i64 %136, %188
  %190 = mul nsw i64 %116, %188
  %191 = add nsw i64 %190, %135
  %192 = getelementptr inbounds i32, i32* %114, i64 %191
  %193 = bitcast i32* %192 to <8 x i32>*
  %194 = load <8 x i32>, <8 x i32>* %193, align 4, !tbaa !33, !alias.scope !520
  %195 = getelementptr i32, i32* %192, i64 8
  %196 = bitcast i32* %195 to <8 x i32>*
  %197 = load <8 x i32>, <8 x i32>* %196, align 4, !tbaa !33, !alias.scope !520
  %198 = getelementptr i32, i32* %192, i64 16
  %199 = bitcast i32* %198 to <8 x i32>*
  %200 = load <8 x i32>, <8 x i32>* %199, align 4, !tbaa !33, !alias.scope !520
  %201 = getelementptr i32, i32* %192, i64 24
  %202 = bitcast i32* %201 to <8 x i32>*
  %203 = load <8 x i32>, <8 x i32>* %202, align 4, !tbaa !33, !alias.scope !520
  %204 = getelementptr inbounds i32, i32* %1, i64 %189
  %205 = bitcast i32* %204 to <8 x i32>*
  store <8 x i32> %194, <8 x i32>* %205, align 4, !tbaa !33, !alias.scope !523, !noalias !520
  %206 = getelementptr i32, i32* %204, i64 8
  %207 = bitcast i32* %206 to <8 x i32>*
  store <8 x i32> %197, <8 x i32>* %207, align 4, !tbaa !33, !alias.scope !523, !noalias !520
  %208 = getelementptr i32, i32* %204, i64 16
  %209 = bitcast i32* %208 to <8 x i32>*
  store <8 x i32> %200, <8 x i32>* %209, align 4, !tbaa !33, !alias.scope !523, !noalias !520
  %210 = getelementptr i32, i32* %204, i64 24
  %211 = bitcast i32* %210 to <8 x i32>*
  store <8 x i32> %203, <8 x i32>* %211, align 4, !tbaa !33, !alias.scope !523, !noalias !520
  %212 = add i64 %188, 32
  %213 = add i64 %136, %212
  %214 = mul nsw i64 %116, %212
  %215 = add nsw i64 %214, %135
  %216 = getelementptr inbounds i32, i32* %114, i64 %215
  %217 = bitcast i32* %216 to <8 x i32>*
  %218 = load <8 x i32>, <8 x i32>* %217, align 4, !tbaa !33, !alias.scope !520
  %219 = getelementptr i32, i32* %216, i64 8
  %220 = bitcast i32* %219 to <8 x i32>*
  %221 = load <8 x i32>, <8 x i32>* %220, align 4, !tbaa !33, !alias.scope !520
  %222 = getelementptr i32, i32* %216, i64 16
  %223 = bitcast i32* %222 to <8 x i32>*
  %224 = load <8 x i32>, <8 x i32>* %223, align 4, !tbaa !33, !alias.scope !520
  %225 = getelementptr i32, i32* %216, i64 24
  %226 = bitcast i32* %225 to <8 x i32>*
  %227 = load <8 x i32>, <8 x i32>* %226, align 4, !tbaa !33, !alias.scope !520
  %228 = getelementptr inbounds i32, i32* %1, i64 %213
  %229 = bitcast i32* %228 to <8 x i32>*
  store <8 x i32> %218, <8 x i32>* %229, align 4, !tbaa !33, !alias.scope !523, !noalias !520
  %230 = getelementptr i32, i32* %228, i64 8
  %231 = bitcast i32* %230 to <8 x i32>*
  store <8 x i32> %221, <8 x i32>* %231, align 4, !tbaa !33, !alias.scope !523, !noalias !520
  %232 = getelementptr i32, i32* %228, i64 16
  %233 = bitcast i32* %232 to <8 x i32>*
  store <8 x i32> %224, <8 x i32>* %233, align 4, !tbaa !33, !alias.scope !523, !noalias !520
  %234 = getelementptr i32, i32* %228, i64 24
  %235 = bitcast i32* %234 to <8 x i32>*
  store <8 x i32> %227, <8 x i32>* %235, align 4, !tbaa !33, !alias.scope !523, !noalias !520
  %236 = add i64 %188, 64
  %237 = add i64 %136, %236
  %238 = mul nsw i64 %116, %236
  %239 = add nsw i64 %238, %135
  %240 = getelementptr inbounds i32, i32* %114, i64 %239
  %241 = bitcast i32* %240 to <8 x i32>*
  %242 = load <8 x i32>, <8 x i32>* %241, align 4, !tbaa !33, !alias.scope !520
  %243 = getelementptr i32, i32* %240, i64 8
  %244 = bitcast i32* %243 to <8 x i32>*
  %245 = load <8 x i32>, <8 x i32>* %244, align 4, !tbaa !33, !alias.scope !520
  %246 = getelementptr i32, i32* %240, i64 16
  %247 = bitcast i32* %246 to <8 x i32>*
  %248 = load <8 x i32>, <8 x i32>* %247, align 4, !tbaa !33, !alias.scope !520
  %249 = getelementptr i32, i32* %240, i64 24
  %250 = bitcast i32* %249 to <8 x i32>*
  %251 = load <8 x i32>, <8 x i32>* %250, align 4, !tbaa !33, !alias.scope !520
  %252 = getelementptr inbounds i32, i32* %1, i64 %237
  %253 = bitcast i32* %252 to <8 x i32>*
  store <8 x i32> %242, <8 x i32>* %253, align 4, !tbaa !33, !alias.scope !523, !noalias !520
  %254 = getelementptr i32, i32* %252, i64 8
  %255 = bitcast i32* %254 to <8 x i32>*
  store <8 x i32> %245, <8 x i32>* %255, align 4, !tbaa !33, !alias.scope !523, !noalias !520
  %256 = getelementptr i32, i32* %252, i64 16
  %257 = bitcast i32* %256 to <8 x i32>*
  store <8 x i32> %248, <8 x i32>* %257, align 4, !tbaa !33, !alias.scope !523, !noalias !520
  %258 = getelementptr i32, i32* %252, i64 24
  %259 = bitcast i32* %258 to <8 x i32>*
  store <8 x i32> %251, <8 x i32>* %259, align 4, !tbaa !33, !alias.scope !523, !noalias !520
  %260 = add i64 %188, 96
  %261 = add i64 %136, %260
  %262 = mul nsw i64 %116, %260
  %263 = add nsw i64 %262, %135
  %264 = getelementptr inbounds i32, i32* %114, i64 %263
  %265 = bitcast i32* %264 to <8 x i32>*
  %266 = load <8 x i32>, <8 x i32>* %265, align 4, !tbaa !33, !alias.scope !520
  %267 = getelementptr i32, i32* %264, i64 8
  %268 = bitcast i32* %267 to <8 x i32>*
  %269 = load <8 x i32>, <8 x i32>* %268, align 4, !tbaa !33, !alias.scope !520
  %270 = getelementptr i32, i32* %264, i64 16
  %271 = bitcast i32* %270 to <8 x i32>*
  %272 = load <8 x i32>, <8 x i32>* %271, align 4, !tbaa !33, !alias.scope !520
  %273 = getelementptr i32, i32* %264, i64 24
  %274 = bitcast i32* %273 to <8 x i32>*
  %275 = load <8 x i32>, <8 x i32>* %274, align 4, !tbaa !33, !alias.scope !520
  %276 = getelementptr inbounds i32, i32* %1, i64 %261
  %277 = bitcast i32* %276 to <8 x i32>*
  store <8 x i32> %266, <8 x i32>* %277, align 4, !tbaa !33, !alias.scope !523, !noalias !520
  %278 = getelementptr i32, i32* %276, i64 8
  %279 = bitcast i32* %278 to <8 x i32>*
  store <8 x i32> %269, <8 x i32>* %279, align 4, !tbaa !33, !alias.scope !523, !noalias !520
  %280 = getelementptr i32, i32* %276, i64 16
  %281 = bitcast i32* %280 to <8 x i32>*
  store <8 x i32> %272, <8 x i32>* %281, align 4, !tbaa !33, !alias.scope !523, !noalias !520
  %282 = getelementptr i32, i32* %276, i64 24
  %283 = bitcast i32* %282 to <8 x i32>*
  store <8 x i32> %275, <8 x i32>* %283, align 4, !tbaa !33, !alias.scope !523, !noalias !520
  %284 = add i64 %188, 128
  %285 = icmp eq i64 %284, %125
  br i1 %285, label %286, label %187, !llvm.loop !526

; <label>:286:                                    ; preds = %187
  br label %287

; <label>:287:                                    ; preds = %184, %286
  br i1 %132, label %377, label %288

; <label>:288:                                    ; preds = %146, %287, %147, %133
  %289 = phi i64 [ 0, %147 ], [ 0, %146 ], [ 0, %133 ], [ %125, %287 ]
  %290 = phi i64 [ %136, %147 ], [ %136, %146 ], [ %136, %133 ], [ %151, %287 ]
  %291 = sub i64 %3, %289
  %292 = sub i64 %123, %289
  %293 = and i64 %291, 7
  %294 = icmp eq i64 %293, 0
  br i1 %294, label %310, label %295

; <label>:295:                                    ; preds = %288
  br label %296

; <label>:296:                                    ; preds = %296, %295
  %297 = phi i64 [ %306, %296 ], [ %289, %295 ]
  %298 = phi i64 [ %305, %296 ], [ %290, %295 ]
  %299 = phi i64 [ %307, %296 ], [ %293, %295 ]
  %300 = mul nsw i64 %116, %297
  %301 = add nsw i64 %300, %135
  %302 = getelementptr inbounds i32, i32* %114, i64 %301
  %303 = load i32, i32* %302, align 4, !tbaa !33
  %304 = getelementptr inbounds i32, i32* %1, i64 %298
  store i32 %303, i32* %304, align 4, !tbaa !33
  %305 = add nsw i64 %298, 1
  %306 = add nuw nsw i64 %297, 1
  %307 = add i64 %299, -1
  %308 = icmp eq i64 %307, 0
  br i1 %308, label %309, label %296, !llvm.loop !527

; <label>:309:                                    ; preds = %296
  br label %310

; <label>:310:                                    ; preds = %288, %309
  %311 = phi i64 [ %289, %288 ], [ %306, %309 ]
  %312 = phi i64 [ %290, %288 ], [ %305, %309 ]
  %313 = icmp ult i64 %292, 7
  br i1 %313, label %376, label %314

; <label>:314:                                    ; preds = %310
  br label %315

; <label>:315:                                    ; preds = %315, %314
  %316 = phi i64 [ %311, %314 ], [ %373, %315 ]
  %317 = phi i64 [ %312, %314 ], [ %372, %315 ]
  %318 = mul nsw i64 %116, %316
  %319 = add nsw i64 %318, %135
  %320 = getelementptr inbounds i32, i32* %114, i64 %319
  %321 = load i32, i32* %320, align 4, !tbaa !33
  %322 = getelementptr inbounds i32, i32* %1, i64 %317
  store i32 %321, i32* %322, align 4, !tbaa !33
  %323 = add nsw i64 %317, 1
  %324 = add nuw nsw i64 %316, 1
  %325 = mul nsw i64 %116, %324
  %326 = add nsw i64 %325, %135
  %327 = getelementptr inbounds i32, i32* %114, i64 %326
  %328 = load i32, i32* %327, align 4, !tbaa !33
  %329 = getelementptr inbounds i32, i32* %1, i64 %323
  store i32 %328, i32* %329, align 4, !tbaa !33
  %330 = add nsw i64 %317, 2
  %331 = add nsw i64 %316, 2
  %332 = mul nsw i64 %116, %331
  %333 = add nsw i64 %332, %135
  %334 = getelementptr inbounds i32, i32* %114, i64 %333
  %335 = load i32, i32* %334, align 4, !tbaa !33
  %336 = getelementptr inbounds i32, i32* %1, i64 %330
  store i32 %335, i32* %336, align 4, !tbaa !33
  %337 = add nsw i64 %317, 3
  %338 = add nsw i64 %316, 3
  %339 = mul nsw i64 %116, %338
  %340 = add nsw i64 %339, %135
  %341 = getelementptr inbounds i32, i32* %114, i64 %340
  %342 = load i32, i32* %341, align 4, !tbaa !33
  %343 = getelementptr inbounds i32, i32* %1, i64 %337
  store i32 %342, i32* %343, align 4, !tbaa !33
  %344 = add nsw i64 %317, 4
  %345 = add nsw i64 %316, 4
  %346 = mul nsw i64 %116, %345
  %347 = add nsw i64 %346, %135
  %348 = getelementptr inbounds i32, i32* %114, i64 %347
  %349 = load i32, i32* %348, align 4, !tbaa !33
  %350 = getelementptr inbounds i32, i32* %1, i64 %344
  store i32 %349, i32* %350, align 4, !tbaa !33
  %351 = add nsw i64 %317, 5
  %352 = add nsw i64 %316, 5
  %353 = mul nsw i64 %116, %352
  %354 = add nsw i64 %353, %135
  %355 = getelementptr inbounds i32, i32* %114, i64 %354
  %356 = load i32, i32* %355, align 4, !tbaa !33
  %357 = getelementptr inbounds i32, i32* %1, i64 %351
  store i32 %356, i32* %357, align 4, !tbaa !33
  %358 = add nsw i64 %317, 6
  %359 = add nsw i64 %316, 6
  %360 = mul nsw i64 %116, %359
  %361 = add nsw i64 %360, %135
  %362 = getelementptr inbounds i32, i32* %114, i64 %361
  %363 = load i32, i32* %362, align 4, !tbaa !33
  %364 = getelementptr inbounds i32, i32* %1, i64 %358
  store i32 %363, i32* %364, align 4, !tbaa !33
  %365 = add nsw i64 %317, 7
  %366 = add nsw i64 %316, 7
  %367 = mul nsw i64 %116, %366
  %368 = add nsw i64 %367, %135
  %369 = getelementptr inbounds i32, i32* %114, i64 %368
  %370 = load i32, i32* %369, align 4, !tbaa !33
  %371 = getelementptr inbounds i32, i32* %1, i64 %365
  store i32 %370, i32* %371, align 4, !tbaa !33
  %372 = add nsw i64 %317, 8
  %373 = add nsw i64 %316, 8
  %374 = icmp eq i64 %373, %3
  br i1 %374, label %375, label %315, !llvm.loop !528

; <label>:375:                                    ; preds = %315
  br label %376

; <label>:376:                                    ; preds = %310, %375
  br label %377

; <label>:377:                                    ; preds = %376, %287
  %378 = add i64 %136, %3
  %379 = add nsw i64 %135, 1
  %380 = icmp eq i64 %379, %4
  %381 = add i64 %134, 1
  br i1 %380, label %382, label %133

; <label>:382:                                    ; preds = %377
  br label %383

; <label>:383:                                    ; preds = %382, %111, %108
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0EEELi12ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll(%"struct.Eigen::internal::gebp_kernel"*, %"class.Eigen::internal::blas_data_mapper.951"* dereferenceable(16), i32*, i32*, i64, i64, i64, i32, i64, i64, i64, i64) local_unnamed_addr #8 align 2 {
  %13 = icmp eq i64 %8, -1
  %14 = select i1 %13, i64 %5, i64 %8
  %15 = icmp eq i64 %9, -1
  %16 = select i1 %15, i64 %5, i64 %9
  %17 = sdiv i64 %6, 4
  %18 = shl nsw i64 %17, 2
  %19 = srem i64 %4, 12
  %20 = sub i64 %4, %19
  %21 = sdiv i64 %19, 8
  %22 = shl nsw i64 %21, 3
  %23 = add nsw i64 %22, %20
  %24 = sdiv i64 %4, 4
  %25 = shl nsw i64 %24, 2
  %26 = and i64 %5, -8
  %27 = shl i64 %5, 4
  %28 = sub i64 32576, %27
  %29 = mul i64 %5, 48
  %30 = udiv i64 %28, %29
  %31 = icmp sgt i64 %30, 1
  %32 = select i1 %31, i64 %30, i64 1
  %33 = mul nsw i64 %32, 12
  %34 = icmp sgt i64 %20, 0
  br i1 %34, label %35, label %50

; <label>:35:                                     ; preds = %12
  %36 = icmp sgt i64 %6, 3
  %37 = icmp slt i64 %18, %6
  %38 = mul nsw i64 %10, 12
  %39 = getelementptr inbounds %"class.Eigen::internal::blas_data_mapper.951", %"class.Eigen::internal::blas_data_mapper.951"* %1, i64 0, i32 0
  %40 = getelementptr inbounds %"class.Eigen::internal::blas_data_mapper.951", %"class.Eigen::internal::blas_data_mapper.951"* %1, i64 0, i32 1
  %41 = icmp sgt i64 %26, 0
  %42 = icmp slt i64 %26, %5
  %43 = insertelement <4 x i32> undef, i32 %7, i32 0
  %44 = shufflevector <4 x i32> %43, <4 x i32> undef, <4 x i32> zeroinitializer
  %45 = shl i64 %11, 2
  br label %68

; <label>:46:                                     ; preds = %707
  br label %47

; <label>:47:                                     ; preds = %46, %76
  %48 = icmp slt i64 %70, %20
  br i1 %48, label %68, label %49

; <label>:49:                                     ; preds = %47
  br label %50

; <label>:50:                                     ; preds = %49, %12
  %51 = shl i64 %5, 5
  %52 = udiv i64 %28, %51
  %53 = icmp sgt i64 %52, 1
  %54 = select i1 %53, i64 %52, i64 1
  %55 = shl nsw i64 %54, 3
  %56 = icmp sgt i64 %19, 7
  br i1 %56, label %57, label %945

; <label>:57:                                     ; preds = %50
  %58 = icmp sgt i64 %6, 3
  %59 = icmp slt i64 %18, %6
  %60 = shl i64 %10, 3
  %61 = getelementptr inbounds %"class.Eigen::internal::blas_data_mapper.951", %"class.Eigen::internal::blas_data_mapper.951"* %1, i64 0, i32 0
  %62 = getelementptr inbounds %"class.Eigen::internal::blas_data_mapper.951", %"class.Eigen::internal::blas_data_mapper.951"* %1, i64 0, i32 1
  %63 = icmp sgt i64 %26, 0
  %64 = icmp slt i64 %26, %5
  %65 = insertelement <4 x i32> undef, i32 %7, i32 0
  %66 = shufflevector <4 x i32> %65, <4 x i32> undef, <4 x i32> zeroinitializer
  %67 = shl i64 %11, 2
  br label %958

; <label>:68:                                     ; preds = %35, %47
  %69 = phi i64 [ 0, %35 ], [ %70, %47 ]
  %70 = add nsw i64 %69, %33
  %71 = icmp slt i64 %20, %70
  %72 = select i1 %71, i64 %20, i64 %70
  br i1 %36, label %73, label %76

; <label>:73:                                     ; preds = %68
  %74 = icmp slt i64 %69, %72
  br label %79

; <label>:75:                                     ; preds = %90
  br label %76

; <label>:76:                                     ; preds = %75, %68
  br i1 %37, label %77, label %47

; <label>:77:                                     ; preds = %76
  %78 = icmp slt i64 %69, %72
  br label %700

; <label>:79:                                     ; preds = %73, %90
  %80 = phi i64 [ 0, %73 ], [ %91, %90 ]
  br i1 %74, label %81, label %90

; <label>:81:                                     ; preds = %79
  %82 = or i64 %80, 1
  %83 = or i64 %80, 2
  %84 = or i64 %80, 3
  %85 = mul nsw i64 %80, %16
  %86 = add nsw i64 %85, %45
  %87 = getelementptr inbounds i32, i32* %3, i64 %86
  %88 = bitcast i32* %87 to i8*
  br label %93

; <label>:89:                                     ; preds = %560
  br label %90

; <label>:90:                                     ; preds = %89, %79
  %91 = add nuw nsw i64 %80, 4
  %92 = icmp slt i64 %91, %18
  br i1 %92, label %79, label %75

; <label>:93:                                     ; preds = %81, %560
  %94 = phi i64 [ %69, %81 ], [ %629, %560 ]
  %95 = mul nsw i64 %94, %14
  %96 = add nsw i64 %95, %38
  %97 = getelementptr inbounds i32, i32* %2, i64 %96
  %98 = bitcast i32* %97 to i8*
  tail call void @llvm.prefetch(i8* %98, i32 0, i32 3, i32 1) #11
  %99 = load i32*, i32** %39, align 8, !tbaa !529
  %100 = load i64, i64* %40, align 8, !tbaa !531
  %101 = mul nsw i64 %100, %80
  %102 = add nsw i64 %101, %94
  %103 = getelementptr inbounds i32, i32* %99, i64 %102
  %104 = mul nsw i64 %100, %82
  %105 = add nsw i64 %104, %94
  %106 = getelementptr inbounds i32, i32* %99, i64 %105
  %107 = mul nsw i64 %100, %83
  %108 = add nsw i64 %107, %94
  %109 = getelementptr inbounds i32, i32* %99, i64 %108
  %110 = mul nsw i64 %100, %84
  %111 = add nsw i64 %110, %94
  %112 = getelementptr inbounds i32, i32* %99, i64 %111
  %113 = bitcast i32* %103 to i8*
  tail call void @llvm.prefetch(i8* %113, i32 0, i32 3, i32 1) #11
  %114 = bitcast i32* %106 to i8*
  tail call void @llvm.prefetch(i8* %114, i32 0, i32 3, i32 1) #11
  %115 = bitcast i32* %109 to i8*
  tail call void @llvm.prefetch(i8* %115, i32 0, i32 3, i32 1) #11
  %116 = bitcast i32* %112 to i8*
  tail call void @llvm.prefetch(i8* %116, i32 0, i32 3, i32 1) #11
  tail call void @llvm.prefetch(i8* %88, i32 0, i32 3, i32 1) #11
  br i1 %41, label %117, label %119

; <label>:117:                                    ; preds = %93
  br label %135

; <label>:118:                                    ; preds = %135
  br label %119

; <label>:119:                                    ; preds = %118, %93
  %120 = phi <4 x i32> [ zeroinitializer, %93 ], [ %554, %118 ]
  %121 = phi <4 x i32> [ zeroinitializer, %93 ], [ %544, %118 ]
  %122 = phi <4 x i32> [ zeroinitializer, %93 ], [ %534, %118 ]
  %123 = phi <4 x i32> [ zeroinitializer, %93 ], [ %524, %118 ]
  %124 = phi <4 x i32> [ zeroinitializer, %93 ], [ %552, %118 ]
  %125 = phi <4 x i32> [ zeroinitializer, %93 ], [ %542, %118 ]
  %126 = phi <4 x i32> [ zeroinitializer, %93 ], [ %532, %118 ]
  %127 = phi <4 x i32> [ zeroinitializer, %93 ], [ %522, %118 ]
  %128 = phi <4 x i32> [ zeroinitializer, %93 ], [ %550, %118 ]
  %129 = phi <4 x i32> [ zeroinitializer, %93 ], [ %540, %118 ]
  %130 = phi <4 x i32> [ zeroinitializer, %93 ], [ %530, %118 ]
  %131 = phi <4 x i32> [ zeroinitializer, %93 ], [ %520, %118 ]
  %132 = phi i32* [ %87, %93 ], [ %555, %118 ]
  %133 = phi i32* [ %97, %93 ], [ %556, %118 ]
  br i1 %42, label %134, label %560

; <label>:134:                                    ; preds = %119
  br label %631

; <label>:135:                                    ; preds = %117, %135
  %136 = phi i32* [ %556, %135 ], [ %97, %117 ]
  %137 = phi i32* [ %555, %135 ], [ %87, %117 ]
  %138 = phi i64 [ %557, %135 ], [ 0, %117 ]
  %139 = phi <4 x i32> [ %520, %135 ], [ zeroinitializer, %117 ]
  %140 = phi <4 x i32> [ %530, %135 ], [ zeroinitializer, %117 ]
  %141 = phi <4 x i32> [ %540, %135 ], [ zeroinitializer, %117 ]
  %142 = phi <4 x i32> [ %550, %135 ], [ zeroinitializer, %117 ]
  %143 = phi <4 x i32> [ %522, %135 ], [ zeroinitializer, %117 ]
  %144 = phi <4 x i32> [ %532, %135 ], [ zeroinitializer, %117 ]
  %145 = phi <4 x i32> [ %542, %135 ], [ zeroinitializer, %117 ]
  %146 = phi <4 x i32> [ %552, %135 ], [ zeroinitializer, %117 ]
  %147 = phi <4 x i32> [ %524, %135 ], [ zeroinitializer, %117 ]
  %148 = phi <4 x i32> [ %534, %135 ], [ zeroinitializer, %117 ]
  %149 = phi <4 x i32> [ %544, %135 ], [ zeroinitializer, %117 ]
  %150 = phi <4 x i32> [ %554, %135 ], [ zeroinitializer, %117 ]
  tail call void asm sideeffect "#begin gebp micro kernel 3pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !532
  %151 = bitcast i32* %137 to i8*
  tail call void @llvm.prefetch(i8* %151, i32 0, i32 3, i32 1) #11
  tail call void asm sideeffect "#begin step of gebp micro kernel 3pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !533
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !534
  %152 = getelementptr inbounds i32, i32* %136, i64 64
  %153 = bitcast i32* %152 to i8*
  tail call void @llvm.prefetch(i8* %153, i32 0, i32 3, i32 1) #11
  %154 = bitcast i32* %136 to <4 x i32>*
  %155 = load <4 x i32>, <4 x i32>* %154, align 16, !tbaa !11
  %156 = getelementptr inbounds i32, i32* %136, i64 4
  %157 = bitcast i32* %156 to <4 x i32>*
  %158 = load <4 x i32>, <4 x i32>* %157, align 16, !tbaa !11
  %159 = getelementptr inbounds i32, i32* %136, i64 8
  %160 = bitcast i32* %159 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 16, !tbaa !11
  %162 = load i32, i32* %137, align 4, !tbaa !33
  %163 = insertelement <4 x i32> undef, i32 %162, i32 0
  %164 = shufflevector <4 x i32> %163, <4 x i32> undef, <4 x i32> zeroinitializer
  %165 = mul <4 x i32> %164, %155
  %166 = add <4 x i32> %165, %139
  %167 = mul <4 x i32> %164, %158
  %168 = add <4 x i32> %167, %143
  %169 = mul <4 x i32> %164, %161
  %170 = add <4 x i32> %169, %147
  %171 = getelementptr inbounds i32, i32* %137, i64 1
  %172 = load i32, i32* %171, align 4, !tbaa !33
  %173 = insertelement <4 x i32> undef, i32 %172, i32 0
  %174 = shufflevector <4 x i32> %173, <4 x i32> undef, <4 x i32> zeroinitializer
  %175 = mul <4 x i32> %174, %155
  %176 = add <4 x i32> %175, %140
  %177 = mul <4 x i32> %174, %158
  %178 = add <4 x i32> %177, %144
  %179 = mul <4 x i32> %174, %161
  %180 = add <4 x i32> %179, %148
  %181 = getelementptr inbounds i32, i32* %137, i64 2
  %182 = load i32, i32* %181, align 4, !tbaa !33
  %183 = insertelement <4 x i32> undef, i32 %182, i32 0
  %184 = shufflevector <4 x i32> %183, <4 x i32> undef, <4 x i32> zeroinitializer
  %185 = mul <4 x i32> %184, %155
  %186 = add <4 x i32> %185, %141
  %187 = mul <4 x i32> %184, %158
  %188 = add <4 x i32> %187, %145
  %189 = mul <4 x i32> %184, %161
  %190 = add <4 x i32> %189, %149
  %191 = getelementptr inbounds i32, i32* %137, i64 3
  %192 = load i32, i32* %191, align 4, !tbaa !33
  %193 = insertelement <4 x i32> undef, i32 %192, i32 0
  %194 = shufflevector <4 x i32> %193, <4 x i32> undef, <4 x i32> zeroinitializer
  %195 = mul <4 x i32> %194, %155
  %196 = add <4 x i32> %195, %142
  %197 = mul <4 x i32> %194, %158
  %198 = add <4 x i32> %197, %146
  %199 = mul <4 x i32> %194, %161
  %200 = add <4 x i32> %199, %150
  tail call void asm sideeffect "#end step of gebp micro kernel 3pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !535
  tail call void asm sideeffect "#begin step of gebp micro kernel 3pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !536
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !537
  %201 = getelementptr inbounds i32, i32* %136, i64 76
  %202 = bitcast i32* %201 to i8*
  tail call void @llvm.prefetch(i8* %202, i32 0, i32 3, i32 1) #11
  %203 = getelementptr inbounds i32, i32* %136, i64 12
  %204 = bitcast i32* %203 to <4 x i32>*
  %205 = load <4 x i32>, <4 x i32>* %204, align 16, !tbaa !11
  %206 = getelementptr inbounds i32, i32* %136, i64 16
  %207 = bitcast i32* %206 to <4 x i32>*
  %208 = load <4 x i32>, <4 x i32>* %207, align 16, !tbaa !11
  %209 = getelementptr inbounds i32, i32* %136, i64 20
  %210 = bitcast i32* %209 to <4 x i32>*
  %211 = load <4 x i32>, <4 x i32>* %210, align 16, !tbaa !11
  %212 = getelementptr inbounds i32, i32* %137, i64 4
  %213 = load i32, i32* %212, align 4, !tbaa !33
  %214 = insertelement <4 x i32> undef, i32 %213, i32 0
  %215 = shufflevector <4 x i32> %214, <4 x i32> undef, <4 x i32> zeroinitializer
  %216 = mul <4 x i32> %215, %205
  %217 = add <4 x i32> %166, %216
  %218 = mul <4 x i32> %215, %208
  %219 = add <4 x i32> %168, %218
  %220 = mul <4 x i32> %215, %211
  %221 = add <4 x i32> %170, %220
  %222 = getelementptr inbounds i32, i32* %137, i64 5
  %223 = load i32, i32* %222, align 4, !tbaa !33
  %224 = insertelement <4 x i32> undef, i32 %223, i32 0
  %225 = shufflevector <4 x i32> %224, <4 x i32> undef, <4 x i32> zeroinitializer
  %226 = mul <4 x i32> %225, %205
  %227 = add <4 x i32> %176, %226
  %228 = mul <4 x i32> %225, %208
  %229 = add <4 x i32> %178, %228
  %230 = mul <4 x i32> %225, %211
  %231 = add <4 x i32> %180, %230
  %232 = getelementptr inbounds i32, i32* %137, i64 6
  %233 = load i32, i32* %232, align 4, !tbaa !33
  %234 = insertelement <4 x i32> undef, i32 %233, i32 0
  %235 = shufflevector <4 x i32> %234, <4 x i32> undef, <4 x i32> zeroinitializer
  %236 = mul <4 x i32> %235, %205
  %237 = add <4 x i32> %186, %236
  %238 = mul <4 x i32> %235, %208
  %239 = add <4 x i32> %188, %238
  %240 = mul <4 x i32> %235, %211
  %241 = add <4 x i32> %190, %240
  %242 = getelementptr inbounds i32, i32* %137, i64 7
  %243 = load i32, i32* %242, align 4, !tbaa !33
  %244 = insertelement <4 x i32> undef, i32 %243, i32 0
  %245 = shufflevector <4 x i32> %244, <4 x i32> undef, <4 x i32> zeroinitializer
  %246 = mul <4 x i32> %245, %205
  %247 = add <4 x i32> %196, %246
  %248 = mul <4 x i32> %245, %208
  %249 = add <4 x i32> %198, %248
  %250 = mul <4 x i32> %245, %211
  %251 = add <4 x i32> %200, %250
  tail call void asm sideeffect "#end step of gebp micro kernel 3pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !538
  tail call void asm sideeffect "#begin step of gebp micro kernel 3pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !539
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !540
  %252 = getelementptr inbounds i32, i32* %136, i64 88
  %253 = bitcast i32* %252 to i8*
  tail call void @llvm.prefetch(i8* %253, i32 0, i32 3, i32 1) #11
  %254 = getelementptr inbounds i32, i32* %136, i64 24
  %255 = bitcast i32* %254 to <4 x i32>*
  %256 = load <4 x i32>, <4 x i32>* %255, align 16, !tbaa !11
  %257 = getelementptr inbounds i32, i32* %136, i64 28
  %258 = bitcast i32* %257 to <4 x i32>*
  %259 = load <4 x i32>, <4 x i32>* %258, align 16, !tbaa !11
  %260 = getelementptr inbounds i32, i32* %136, i64 32
  %261 = bitcast i32* %260 to <4 x i32>*
  %262 = load <4 x i32>, <4 x i32>* %261, align 16, !tbaa !11
  %263 = getelementptr inbounds i32, i32* %137, i64 8
  %264 = load i32, i32* %263, align 4, !tbaa !33
  %265 = insertelement <4 x i32> undef, i32 %264, i32 0
  %266 = shufflevector <4 x i32> %265, <4 x i32> undef, <4 x i32> zeroinitializer
  %267 = mul <4 x i32> %266, %256
  %268 = add <4 x i32> %217, %267
  %269 = mul <4 x i32> %266, %259
  %270 = add <4 x i32> %219, %269
  %271 = mul <4 x i32> %266, %262
  %272 = add <4 x i32> %221, %271
  %273 = getelementptr inbounds i32, i32* %137, i64 9
  %274 = load i32, i32* %273, align 4, !tbaa !33
  %275 = insertelement <4 x i32> undef, i32 %274, i32 0
  %276 = shufflevector <4 x i32> %275, <4 x i32> undef, <4 x i32> zeroinitializer
  %277 = mul <4 x i32> %276, %256
  %278 = add <4 x i32> %227, %277
  %279 = mul <4 x i32> %276, %259
  %280 = add <4 x i32> %229, %279
  %281 = mul <4 x i32> %276, %262
  %282 = add <4 x i32> %231, %281
  %283 = getelementptr inbounds i32, i32* %137, i64 10
  %284 = load i32, i32* %283, align 4, !tbaa !33
  %285 = insertelement <4 x i32> undef, i32 %284, i32 0
  %286 = shufflevector <4 x i32> %285, <4 x i32> undef, <4 x i32> zeroinitializer
  %287 = mul <4 x i32> %286, %256
  %288 = add <4 x i32> %237, %287
  %289 = mul <4 x i32> %286, %259
  %290 = add <4 x i32> %239, %289
  %291 = mul <4 x i32> %286, %262
  %292 = add <4 x i32> %241, %291
  %293 = getelementptr inbounds i32, i32* %137, i64 11
  %294 = load i32, i32* %293, align 4, !tbaa !33
  %295 = insertelement <4 x i32> undef, i32 %294, i32 0
  %296 = shufflevector <4 x i32> %295, <4 x i32> undef, <4 x i32> zeroinitializer
  %297 = mul <4 x i32> %296, %256
  %298 = add <4 x i32> %247, %297
  %299 = mul <4 x i32> %296, %259
  %300 = add <4 x i32> %249, %299
  %301 = mul <4 x i32> %296, %262
  %302 = add <4 x i32> %251, %301
  tail call void asm sideeffect "#end step of gebp micro kernel 3pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !541
  tail call void asm sideeffect "#begin step of gebp micro kernel 3pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !542
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !543
  %303 = getelementptr inbounds i32, i32* %136, i64 100
  %304 = bitcast i32* %303 to i8*
  tail call void @llvm.prefetch(i8* %304, i32 0, i32 3, i32 1) #11
  %305 = getelementptr inbounds i32, i32* %136, i64 36
  %306 = bitcast i32* %305 to <4 x i32>*
  %307 = load <4 x i32>, <4 x i32>* %306, align 16, !tbaa !11
  %308 = getelementptr inbounds i32, i32* %136, i64 40
  %309 = bitcast i32* %308 to <4 x i32>*
  %310 = load <4 x i32>, <4 x i32>* %309, align 16, !tbaa !11
  %311 = getelementptr inbounds i32, i32* %136, i64 44
  %312 = bitcast i32* %311 to <4 x i32>*
  %313 = load <4 x i32>, <4 x i32>* %312, align 16, !tbaa !11
  %314 = getelementptr inbounds i32, i32* %137, i64 12
  %315 = load i32, i32* %314, align 4, !tbaa !33
  %316 = insertelement <4 x i32> undef, i32 %315, i32 0
  %317 = shufflevector <4 x i32> %316, <4 x i32> undef, <4 x i32> zeroinitializer
  %318 = mul <4 x i32> %317, %307
  %319 = add <4 x i32> %268, %318
  %320 = mul <4 x i32> %317, %310
  %321 = add <4 x i32> %270, %320
  %322 = mul <4 x i32> %317, %313
  %323 = add <4 x i32> %272, %322
  %324 = getelementptr inbounds i32, i32* %137, i64 13
  %325 = load i32, i32* %324, align 4, !tbaa !33
  %326 = insertelement <4 x i32> undef, i32 %325, i32 0
  %327 = shufflevector <4 x i32> %326, <4 x i32> undef, <4 x i32> zeroinitializer
  %328 = mul <4 x i32> %327, %307
  %329 = add <4 x i32> %278, %328
  %330 = mul <4 x i32> %327, %310
  %331 = add <4 x i32> %280, %330
  %332 = mul <4 x i32> %327, %313
  %333 = add <4 x i32> %282, %332
  %334 = getelementptr inbounds i32, i32* %137, i64 14
  %335 = load i32, i32* %334, align 4, !tbaa !33
  %336 = insertelement <4 x i32> undef, i32 %335, i32 0
  %337 = shufflevector <4 x i32> %336, <4 x i32> undef, <4 x i32> zeroinitializer
  %338 = mul <4 x i32> %337, %307
  %339 = add <4 x i32> %288, %338
  %340 = mul <4 x i32> %337, %310
  %341 = add <4 x i32> %290, %340
  %342 = mul <4 x i32> %337, %313
  %343 = add <4 x i32> %292, %342
  %344 = getelementptr inbounds i32, i32* %137, i64 15
  %345 = load i32, i32* %344, align 4, !tbaa !33
  %346 = insertelement <4 x i32> undef, i32 %345, i32 0
  %347 = shufflevector <4 x i32> %346, <4 x i32> undef, <4 x i32> zeroinitializer
  %348 = mul <4 x i32> %347, %307
  %349 = add <4 x i32> %298, %348
  %350 = mul <4 x i32> %347, %310
  %351 = add <4 x i32> %300, %350
  %352 = mul <4 x i32> %347, %313
  %353 = add <4 x i32> %302, %352
  tail call void asm sideeffect "#end step of gebp micro kernel 3pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !544
  tail call void asm sideeffect "#begin step of gebp micro kernel 3pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !545
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !546
  %354 = getelementptr inbounds i32, i32* %136, i64 112
  %355 = bitcast i32* %354 to i8*
  tail call void @llvm.prefetch(i8* %355, i32 0, i32 3, i32 1) #11
  %356 = getelementptr inbounds i32, i32* %136, i64 48
  %357 = bitcast i32* %356 to <4 x i32>*
  %358 = load <4 x i32>, <4 x i32>* %357, align 16, !tbaa !11
  %359 = getelementptr inbounds i32, i32* %136, i64 52
  %360 = bitcast i32* %359 to <4 x i32>*
  %361 = load <4 x i32>, <4 x i32>* %360, align 16, !tbaa !11
  %362 = getelementptr inbounds i32, i32* %136, i64 56
  %363 = bitcast i32* %362 to <4 x i32>*
  %364 = load <4 x i32>, <4 x i32>* %363, align 16, !tbaa !11
  %365 = getelementptr inbounds i32, i32* %137, i64 16
  %366 = load i32, i32* %365, align 4, !tbaa !33
  %367 = insertelement <4 x i32> undef, i32 %366, i32 0
  %368 = shufflevector <4 x i32> %367, <4 x i32> undef, <4 x i32> zeroinitializer
  %369 = mul <4 x i32> %368, %358
  %370 = add <4 x i32> %319, %369
  %371 = mul <4 x i32> %368, %361
  %372 = add <4 x i32> %321, %371
  %373 = mul <4 x i32> %368, %364
  %374 = add <4 x i32> %323, %373
  %375 = getelementptr inbounds i32, i32* %137, i64 17
  %376 = load i32, i32* %375, align 4, !tbaa !33
  %377 = insertelement <4 x i32> undef, i32 %376, i32 0
  %378 = shufflevector <4 x i32> %377, <4 x i32> undef, <4 x i32> zeroinitializer
  %379 = mul <4 x i32> %378, %358
  %380 = add <4 x i32> %329, %379
  %381 = mul <4 x i32> %378, %361
  %382 = add <4 x i32> %331, %381
  %383 = mul <4 x i32> %378, %364
  %384 = add <4 x i32> %333, %383
  %385 = getelementptr inbounds i32, i32* %137, i64 18
  %386 = load i32, i32* %385, align 4, !tbaa !33
  %387 = insertelement <4 x i32> undef, i32 %386, i32 0
  %388 = shufflevector <4 x i32> %387, <4 x i32> undef, <4 x i32> zeroinitializer
  %389 = mul <4 x i32> %388, %358
  %390 = add <4 x i32> %339, %389
  %391 = mul <4 x i32> %388, %361
  %392 = add <4 x i32> %341, %391
  %393 = mul <4 x i32> %388, %364
  %394 = add <4 x i32> %343, %393
  %395 = getelementptr inbounds i32, i32* %137, i64 19
  %396 = load i32, i32* %395, align 4, !tbaa !33
  %397 = insertelement <4 x i32> undef, i32 %396, i32 0
  %398 = shufflevector <4 x i32> %397, <4 x i32> undef, <4 x i32> zeroinitializer
  %399 = mul <4 x i32> %398, %358
  %400 = add <4 x i32> %349, %399
  %401 = mul <4 x i32> %398, %361
  %402 = add <4 x i32> %351, %401
  %403 = mul <4 x i32> %398, %364
  %404 = add <4 x i32> %353, %403
  tail call void asm sideeffect "#end step of gebp micro kernel 3pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !547
  tail call void asm sideeffect "#begin step of gebp micro kernel 3pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !548
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !549
  %405 = getelementptr inbounds i32, i32* %136, i64 124
  %406 = bitcast i32* %405 to i8*
  tail call void @llvm.prefetch(i8* %406, i32 0, i32 3, i32 1) #11
  %407 = getelementptr inbounds i32, i32* %136, i64 60
  %408 = bitcast i32* %407 to <4 x i32>*
  %409 = load <4 x i32>, <4 x i32>* %408, align 16, !tbaa !11
  %410 = bitcast i32* %152 to <4 x i32>*
  %411 = load <4 x i32>, <4 x i32>* %410, align 16, !tbaa !11
  %412 = getelementptr inbounds i32, i32* %136, i64 68
  %413 = bitcast i32* %412 to <4 x i32>*
  %414 = load <4 x i32>, <4 x i32>* %413, align 16, !tbaa !11
  %415 = getelementptr inbounds i32, i32* %137, i64 20
  %416 = load i32, i32* %415, align 4, !tbaa !33
  %417 = insertelement <4 x i32> undef, i32 %416, i32 0
  %418 = shufflevector <4 x i32> %417, <4 x i32> undef, <4 x i32> zeroinitializer
  %419 = mul <4 x i32> %418, %409
  %420 = add <4 x i32> %370, %419
  %421 = mul <4 x i32> %418, %411
  %422 = add <4 x i32> %372, %421
  %423 = mul <4 x i32> %418, %414
  %424 = add <4 x i32> %374, %423
  %425 = getelementptr inbounds i32, i32* %137, i64 21
  %426 = load i32, i32* %425, align 4, !tbaa !33
  %427 = insertelement <4 x i32> undef, i32 %426, i32 0
  %428 = shufflevector <4 x i32> %427, <4 x i32> undef, <4 x i32> zeroinitializer
  %429 = mul <4 x i32> %428, %409
  %430 = add <4 x i32> %380, %429
  %431 = mul <4 x i32> %428, %411
  %432 = add <4 x i32> %382, %431
  %433 = mul <4 x i32> %428, %414
  %434 = add <4 x i32> %384, %433
  %435 = getelementptr inbounds i32, i32* %137, i64 22
  %436 = load i32, i32* %435, align 4, !tbaa !33
  %437 = insertelement <4 x i32> undef, i32 %436, i32 0
  %438 = shufflevector <4 x i32> %437, <4 x i32> undef, <4 x i32> zeroinitializer
  %439 = mul <4 x i32> %438, %409
  %440 = add <4 x i32> %390, %439
  %441 = mul <4 x i32> %438, %411
  %442 = add <4 x i32> %392, %441
  %443 = mul <4 x i32> %438, %414
  %444 = add <4 x i32> %394, %443
  %445 = getelementptr inbounds i32, i32* %137, i64 23
  %446 = load i32, i32* %445, align 4, !tbaa !33
  %447 = insertelement <4 x i32> undef, i32 %446, i32 0
  %448 = shufflevector <4 x i32> %447, <4 x i32> undef, <4 x i32> zeroinitializer
  %449 = mul <4 x i32> %448, %409
  %450 = add <4 x i32> %400, %449
  %451 = mul <4 x i32> %448, %411
  %452 = add <4 x i32> %402, %451
  %453 = mul <4 x i32> %448, %414
  %454 = add <4 x i32> %404, %453
  tail call void asm sideeffect "#end step of gebp micro kernel 3pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !550
  tail call void asm sideeffect "#begin step of gebp micro kernel 3pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !551
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !552
  %455 = getelementptr inbounds i32, i32* %136, i64 136
  %456 = bitcast i32* %455 to i8*
  tail call void @llvm.prefetch(i8* %456, i32 0, i32 3, i32 1) #11
  %457 = getelementptr inbounds i32, i32* %136, i64 72
  %458 = bitcast i32* %457 to <4 x i32>*
  %459 = load <4 x i32>, <4 x i32>* %458, align 16, !tbaa !11
  %460 = bitcast i32* %201 to <4 x i32>*
  %461 = load <4 x i32>, <4 x i32>* %460, align 16, !tbaa !11
  %462 = getelementptr inbounds i32, i32* %136, i64 80
  %463 = bitcast i32* %462 to <4 x i32>*
  %464 = load <4 x i32>, <4 x i32>* %463, align 16, !tbaa !11
  %465 = getelementptr inbounds i32, i32* %137, i64 24
  %466 = load i32, i32* %465, align 4, !tbaa !33
  %467 = insertelement <4 x i32> undef, i32 %466, i32 0
  %468 = shufflevector <4 x i32> %467, <4 x i32> undef, <4 x i32> zeroinitializer
  %469 = mul <4 x i32> %468, %459
  %470 = add <4 x i32> %420, %469
  %471 = mul <4 x i32> %468, %461
  %472 = add <4 x i32> %422, %471
  %473 = mul <4 x i32> %468, %464
  %474 = add <4 x i32> %424, %473
  %475 = getelementptr inbounds i32, i32* %137, i64 25
  %476 = load i32, i32* %475, align 4, !tbaa !33
  %477 = insertelement <4 x i32> undef, i32 %476, i32 0
  %478 = shufflevector <4 x i32> %477, <4 x i32> undef, <4 x i32> zeroinitializer
  %479 = mul <4 x i32> %478, %459
  %480 = add <4 x i32> %430, %479
  %481 = mul <4 x i32> %478, %461
  %482 = add <4 x i32> %432, %481
  %483 = mul <4 x i32> %478, %464
  %484 = add <4 x i32> %434, %483
  %485 = getelementptr inbounds i32, i32* %137, i64 26
  %486 = load i32, i32* %485, align 4, !tbaa !33
  %487 = insertelement <4 x i32> undef, i32 %486, i32 0
  %488 = shufflevector <4 x i32> %487, <4 x i32> undef, <4 x i32> zeroinitializer
  %489 = mul <4 x i32> %488, %459
  %490 = add <4 x i32> %440, %489
  %491 = mul <4 x i32> %488, %461
  %492 = add <4 x i32> %442, %491
  %493 = mul <4 x i32> %488, %464
  %494 = add <4 x i32> %444, %493
  %495 = getelementptr inbounds i32, i32* %137, i64 27
  %496 = load i32, i32* %495, align 4, !tbaa !33
  %497 = insertelement <4 x i32> undef, i32 %496, i32 0
  %498 = shufflevector <4 x i32> %497, <4 x i32> undef, <4 x i32> zeroinitializer
  %499 = mul <4 x i32> %498, %459
  %500 = add <4 x i32> %450, %499
  %501 = mul <4 x i32> %498, %461
  %502 = add <4 x i32> %452, %501
  %503 = mul <4 x i32> %498, %464
  %504 = add <4 x i32> %454, %503
  tail call void asm sideeffect "#end step of gebp micro kernel 3pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !553
  tail call void asm sideeffect "#begin step of gebp micro kernel 3pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !554
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !555
  %505 = getelementptr inbounds i32, i32* %136, i64 148
  %506 = bitcast i32* %505 to i8*
  tail call void @llvm.prefetch(i8* %506, i32 0, i32 3, i32 1) #11
  %507 = getelementptr inbounds i32, i32* %136, i64 84
  %508 = bitcast i32* %507 to <4 x i32>*
  %509 = load <4 x i32>, <4 x i32>* %508, align 16, !tbaa !11
  %510 = bitcast i32* %252 to <4 x i32>*
  %511 = load <4 x i32>, <4 x i32>* %510, align 16, !tbaa !11
  %512 = getelementptr inbounds i32, i32* %136, i64 92
  %513 = bitcast i32* %512 to <4 x i32>*
  %514 = load <4 x i32>, <4 x i32>* %513, align 16, !tbaa !11
  %515 = getelementptr inbounds i32, i32* %137, i64 28
  %516 = load i32, i32* %515, align 4, !tbaa !33
  %517 = insertelement <4 x i32> undef, i32 %516, i32 0
  %518 = shufflevector <4 x i32> %517, <4 x i32> undef, <4 x i32> zeroinitializer
  %519 = mul <4 x i32> %518, %509
  %520 = add <4 x i32> %470, %519
  %521 = mul <4 x i32> %518, %511
  %522 = add <4 x i32> %472, %521
  %523 = mul <4 x i32> %518, %514
  %524 = add <4 x i32> %474, %523
  %525 = getelementptr inbounds i32, i32* %137, i64 29
  %526 = load i32, i32* %525, align 4, !tbaa !33
  %527 = insertelement <4 x i32> undef, i32 %526, i32 0
  %528 = shufflevector <4 x i32> %527, <4 x i32> undef, <4 x i32> zeroinitializer
  %529 = mul <4 x i32> %528, %509
  %530 = add <4 x i32> %480, %529
  %531 = mul <4 x i32> %528, %511
  %532 = add <4 x i32> %482, %531
  %533 = mul <4 x i32> %528, %514
  %534 = add <4 x i32> %484, %533
  %535 = getelementptr inbounds i32, i32* %137, i64 30
  %536 = load i32, i32* %535, align 4, !tbaa !33
  %537 = insertelement <4 x i32> undef, i32 %536, i32 0
  %538 = shufflevector <4 x i32> %537, <4 x i32> undef, <4 x i32> zeroinitializer
  %539 = mul <4 x i32> %538, %509
  %540 = add <4 x i32> %490, %539
  %541 = mul <4 x i32> %538, %511
  %542 = add <4 x i32> %492, %541
  %543 = mul <4 x i32> %538, %514
  %544 = add <4 x i32> %494, %543
  %545 = getelementptr inbounds i32, i32* %137, i64 31
  %546 = load i32, i32* %545, align 4, !tbaa !33
  %547 = insertelement <4 x i32> undef, i32 %546, i32 0
  %548 = shufflevector <4 x i32> %547, <4 x i32> undef, <4 x i32> zeroinitializer
  %549 = mul <4 x i32> %548, %509
  %550 = add <4 x i32> %500, %549
  %551 = mul <4 x i32> %548, %511
  %552 = add <4 x i32> %502, %551
  %553 = mul <4 x i32> %548, %514
  %554 = add <4 x i32> %504, %553
  tail call void asm sideeffect "#end step of gebp micro kernel 3pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !556
  %555 = getelementptr inbounds i32, i32* %137, i64 32
  %556 = getelementptr inbounds i32, i32* %136, i64 96
  tail call void asm sideeffect "#end gebp micro kernel 3pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !557
  %557 = add nuw nsw i64 %138, 8
  %558 = icmp slt i64 %557, %26
  br i1 %558, label %135, label %118

; <label>:559:                                    ; preds = %631
  br label %560

; <label>:560:                                    ; preds = %559, %119
  %561 = phi <4 x i32> [ %120, %119 ], [ %695, %559 ]
  %562 = phi <4 x i32> [ %121, %119 ], [ %685, %559 ]
  %563 = phi <4 x i32> [ %122, %119 ], [ %675, %559 ]
  %564 = phi <4 x i32> [ %123, %119 ], [ %665, %559 ]
  %565 = phi <4 x i32> [ %124, %119 ], [ %693, %559 ]
  %566 = phi <4 x i32> [ %125, %119 ], [ %683, %559 ]
  %567 = phi <4 x i32> [ %126, %119 ], [ %673, %559 ]
  %568 = phi <4 x i32> [ %127, %119 ], [ %663, %559 ]
  %569 = phi <4 x i32> [ %128, %119 ], [ %691, %559 ]
  %570 = phi <4 x i32> [ %129, %119 ], [ %681, %559 ]
  %571 = phi <4 x i32> [ %130, %119 ], [ %671, %559 ]
  %572 = phi <4 x i32> [ %131, %119 ], [ %661, %559 ]
  %573 = bitcast i32* %103 to <4 x i32>*
  %574 = load <4 x i32>, <4 x i32>* %573, align 1, !tbaa !11
  %575 = getelementptr inbounds i32, i32* %103, i64 4
  %576 = bitcast i32* %575 to <4 x i32>*
  %577 = load <4 x i32>, <4 x i32>* %576, align 1, !tbaa !11
  %578 = getelementptr inbounds i32, i32* %103, i64 8
  %579 = bitcast i32* %578 to <4 x i32>*
  %580 = load <4 x i32>, <4 x i32>* %579, align 1, !tbaa !11
  %581 = mul <4 x i32> %572, %44
  %582 = add <4 x i32> %574, %581
  %583 = mul <4 x i32> %568, %44
  %584 = add <4 x i32> %577, %583
  %585 = mul <4 x i32> %564, %44
  %586 = add <4 x i32> %580, %585
  store <4 x i32> %582, <4 x i32>* %573, align 1, !tbaa !11
  store <4 x i32> %584, <4 x i32>* %576, align 1, !tbaa !11
  store <4 x i32> %586, <4 x i32>* %579, align 1, !tbaa !11
  %587 = bitcast i32* %106 to <4 x i32>*
  %588 = load <4 x i32>, <4 x i32>* %587, align 1, !tbaa !11
  %589 = getelementptr inbounds i32, i32* %106, i64 4
  %590 = bitcast i32* %589 to <4 x i32>*
  %591 = load <4 x i32>, <4 x i32>* %590, align 1, !tbaa !11
  %592 = getelementptr inbounds i32, i32* %106, i64 8
  %593 = bitcast i32* %592 to <4 x i32>*
  %594 = load <4 x i32>, <4 x i32>* %593, align 1, !tbaa !11
  %595 = mul <4 x i32> %571, %44
  %596 = add <4 x i32> %588, %595
  %597 = mul <4 x i32> %567, %44
  %598 = add <4 x i32> %591, %597
  %599 = mul <4 x i32> %563, %44
  %600 = add <4 x i32> %594, %599
  store <4 x i32> %596, <4 x i32>* %587, align 1, !tbaa !11
  store <4 x i32> %598, <4 x i32>* %590, align 1, !tbaa !11
  store <4 x i32> %600, <4 x i32>* %593, align 1, !tbaa !11
  %601 = bitcast i32* %109 to <4 x i32>*
  %602 = load <4 x i32>, <4 x i32>* %601, align 1, !tbaa !11
  %603 = getelementptr inbounds i32, i32* %109, i64 4
  %604 = bitcast i32* %603 to <4 x i32>*
  %605 = load <4 x i32>, <4 x i32>* %604, align 1, !tbaa !11
  %606 = getelementptr inbounds i32, i32* %109, i64 8
  %607 = bitcast i32* %606 to <4 x i32>*
  %608 = load <4 x i32>, <4 x i32>* %607, align 1, !tbaa !11
  %609 = mul <4 x i32> %570, %44
  %610 = add <4 x i32> %602, %609
  %611 = mul <4 x i32> %566, %44
  %612 = add <4 x i32> %605, %611
  %613 = mul <4 x i32> %562, %44
  %614 = add <4 x i32> %608, %613
  store <4 x i32> %610, <4 x i32>* %601, align 1, !tbaa !11
  store <4 x i32> %612, <4 x i32>* %604, align 1, !tbaa !11
  store <4 x i32> %614, <4 x i32>* %607, align 1, !tbaa !11
  %615 = bitcast i32* %112 to <4 x i32>*
  %616 = load <4 x i32>, <4 x i32>* %615, align 1, !tbaa !11
  %617 = getelementptr inbounds i32, i32* %112, i64 4
  %618 = bitcast i32* %617 to <4 x i32>*
  %619 = load <4 x i32>, <4 x i32>* %618, align 1, !tbaa !11
  %620 = getelementptr inbounds i32, i32* %112, i64 8
  %621 = bitcast i32* %620 to <4 x i32>*
  %622 = load <4 x i32>, <4 x i32>* %621, align 1, !tbaa !11
  %623 = mul <4 x i32> %569, %44
  %624 = add <4 x i32> %616, %623
  %625 = mul <4 x i32> %565, %44
  %626 = add <4 x i32> %619, %625
  %627 = mul <4 x i32> %561, %44
  %628 = add <4 x i32> %622, %627
  store <4 x i32> %624, <4 x i32>* %615, align 1, !tbaa !11
  store <4 x i32> %626, <4 x i32>* %618, align 1, !tbaa !11
  store <4 x i32> %628, <4 x i32>* %621, align 1, !tbaa !11
  %629 = add nsw i64 %94, 12
  %630 = icmp slt i64 %629, %72
  br i1 %630, label %93, label %89

; <label>:631:                                    ; preds = %134, %631
  %632 = phi i32* [ %697, %631 ], [ %133, %134 ]
  %633 = phi i32* [ %696, %631 ], [ %132, %134 ]
  %634 = phi i64 [ %698, %631 ], [ %26, %134 ]
  %635 = phi <4 x i32> [ %661, %631 ], [ %131, %134 ]
  %636 = phi <4 x i32> [ %671, %631 ], [ %130, %134 ]
  %637 = phi <4 x i32> [ %681, %631 ], [ %129, %134 ]
  %638 = phi <4 x i32> [ %691, %631 ], [ %128, %134 ]
  %639 = phi <4 x i32> [ %663, %631 ], [ %127, %134 ]
  %640 = phi <4 x i32> [ %673, %631 ], [ %126, %134 ]
  %641 = phi <4 x i32> [ %683, %631 ], [ %125, %134 ]
  %642 = phi <4 x i32> [ %693, %631 ], [ %124, %134 ]
  %643 = phi <4 x i32> [ %665, %631 ], [ %123, %134 ]
  %644 = phi <4 x i32> [ %675, %631 ], [ %122, %134 ]
  %645 = phi <4 x i32> [ %685, %631 ], [ %121, %134 ]
  %646 = phi <4 x i32> [ %695, %631 ], [ %120, %134 ]
  tail call void asm sideeffect "#begin step of gebp micro kernel 3pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !558
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !559
  %647 = getelementptr inbounds i32, i32* %632, i64 64
  %648 = bitcast i32* %647 to i8*
  tail call void @llvm.prefetch(i8* %648, i32 0, i32 3, i32 1) #11
  %649 = bitcast i32* %632 to <4 x i32>*
  %650 = load <4 x i32>, <4 x i32>* %649, align 16, !tbaa !11
  %651 = getelementptr inbounds i32, i32* %632, i64 4
  %652 = bitcast i32* %651 to <4 x i32>*
  %653 = load <4 x i32>, <4 x i32>* %652, align 16, !tbaa !11
  %654 = getelementptr inbounds i32, i32* %632, i64 8
  %655 = bitcast i32* %654 to <4 x i32>*
  %656 = load <4 x i32>, <4 x i32>* %655, align 16, !tbaa !11
  %657 = load i32, i32* %633, align 4, !tbaa !33
  %658 = insertelement <4 x i32> undef, i32 %657, i32 0
  %659 = shufflevector <4 x i32> %658, <4 x i32> undef, <4 x i32> zeroinitializer
  %660 = mul <4 x i32> %659, %650
  %661 = add <4 x i32> %660, %635
  %662 = mul <4 x i32> %659, %653
  %663 = add <4 x i32> %662, %639
  %664 = mul <4 x i32> %659, %656
  %665 = add <4 x i32> %664, %643
  %666 = getelementptr inbounds i32, i32* %633, i64 1
  %667 = load i32, i32* %666, align 4, !tbaa !33
  %668 = insertelement <4 x i32> undef, i32 %667, i32 0
  %669 = shufflevector <4 x i32> %668, <4 x i32> undef, <4 x i32> zeroinitializer
  %670 = mul <4 x i32> %669, %650
  %671 = add <4 x i32> %670, %636
  %672 = mul <4 x i32> %669, %653
  %673 = add <4 x i32> %672, %640
  %674 = mul <4 x i32> %669, %656
  %675 = add <4 x i32> %674, %644
  %676 = getelementptr inbounds i32, i32* %633, i64 2
  %677 = load i32, i32* %676, align 4, !tbaa !33
  %678 = insertelement <4 x i32> undef, i32 %677, i32 0
  %679 = shufflevector <4 x i32> %678, <4 x i32> undef, <4 x i32> zeroinitializer
  %680 = mul <4 x i32> %679, %650
  %681 = add <4 x i32> %680, %637
  %682 = mul <4 x i32> %679, %653
  %683 = add <4 x i32> %682, %641
  %684 = mul <4 x i32> %679, %656
  %685 = add <4 x i32> %684, %645
  %686 = getelementptr inbounds i32, i32* %633, i64 3
  %687 = load i32, i32* %686, align 4, !tbaa !33
  %688 = insertelement <4 x i32> undef, i32 %687, i32 0
  %689 = shufflevector <4 x i32> %688, <4 x i32> undef, <4 x i32> zeroinitializer
  %690 = mul <4 x i32> %689, %650
  %691 = add <4 x i32> %690, %638
  %692 = mul <4 x i32> %689, %653
  %693 = add <4 x i32> %692, %642
  %694 = mul <4 x i32> %689, %656
  %695 = add <4 x i32> %694, %646
  tail call void asm sideeffect "#end step of gebp micro kernel 3pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !560
  %696 = getelementptr inbounds i32, i32* %633, i64 4
  %697 = getelementptr inbounds i32, i32* %632, i64 12
  %698 = add nsw i64 %634, 1
  %699 = icmp eq i64 %698, %5
  br i1 %699, label %559, label %631

; <label>:700:                                    ; preds = %707, %77
  %701 = phi i64 [ %18, %77 ], [ %708, %707 ]
  br i1 %78, label %702, label %707

; <label>:702:                                    ; preds = %700
  %703 = mul nsw i64 %701, %16
  %704 = add nsw i64 %703, %11
  %705 = getelementptr inbounds i32, i32* %3, i64 %704
  br label %710

; <label>:706:                                    ; preds = %893
  br label %707

; <label>:707:                                    ; preds = %706, %700
  %708 = add nsw i64 %701, 1
  %709 = icmp eq i64 %708, %6
  br i1 %709, label %46, label %700

; <label>:710:                                    ; preds = %702, %893
  %711 = phi i64 [ %69, %702 ], [ %911, %893 ]
  %712 = mul nsw i64 %711, %14
  %713 = add nsw i64 %712, %38
  %714 = getelementptr inbounds i32, i32* %2, i64 %713
  %715 = bitcast i32* %714 to i8*
  tail call void @llvm.prefetch(i8* %715, i32 0, i32 3, i32 1) #11
  %716 = load i32*, i32** %39, align 8, !tbaa !529
  %717 = load i64, i64* %40, align 8, !tbaa !531
  %718 = mul nsw i64 %717, %701
  %719 = add nsw i64 %718, %711
  %720 = getelementptr inbounds i32, i32* %716, i64 %719
  %721 = bitcast i32* %720 to i8*
  tail call void @llvm.prefetch(i8* %721, i32 0, i32 3, i32 1) #11
  br i1 %41, label %722, label %724

; <label>:722:                                    ; preds = %710
  br label %731

; <label>:723:                                    ; preds = %731
  br label %724

; <label>:724:                                    ; preds = %723, %710
  %725 = phi <4 x i32> [ zeroinitializer, %710 ], [ %887, %723 ]
  %726 = phi <4 x i32> [ zeroinitializer, %710 ], [ %885, %723 ]
  %727 = phi <4 x i32> [ zeroinitializer, %710 ], [ %883, %723 ]
  %728 = phi i32* [ %714, %710 ], [ %889, %723 ]
  %729 = phi i32* [ %705, %710 ], [ %888, %723 ]
  br i1 %42, label %730, label %893

; <label>:730:                                    ; preds = %724
  br label %913

; <label>:731:                                    ; preds = %722, %731
  %732 = phi i64 [ %890, %731 ], [ 0, %722 ]
  %733 = phi i32* [ %888, %731 ], [ %705, %722 ]
  %734 = phi i32* [ %889, %731 ], [ %714, %722 ]
  %735 = phi <4 x i32> [ %883, %731 ], [ zeroinitializer, %722 ]
  %736 = phi <4 x i32> [ %885, %731 ], [ zeroinitializer, %722 ]
  %737 = phi <4 x i32> [ %887, %731 ], [ zeroinitializer, %722 ]
  tail call void asm sideeffect "#begin gebp micro kernel 3pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !561
  tail call void asm sideeffect "#begin step of gebp micro kernel 3pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !562
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !563
  %738 = bitcast i32* %734 to <4 x i32>*
  %739 = load <4 x i32>, <4 x i32>* %738, align 16, !tbaa !11
  %740 = getelementptr inbounds i32, i32* %734, i64 4
  %741 = bitcast i32* %740 to <4 x i32>*
  %742 = load <4 x i32>, <4 x i32>* %741, align 16, !tbaa !11
  %743 = getelementptr inbounds i32, i32* %734, i64 8
  %744 = bitcast i32* %743 to <4 x i32>*
  %745 = load <4 x i32>, <4 x i32>* %744, align 16, !tbaa !11
  %746 = load i32, i32* %733, align 4, !tbaa !33
  %747 = insertelement <4 x i32> undef, i32 %746, i32 0
  %748 = shufflevector <4 x i32> %747, <4 x i32> undef, <4 x i32> zeroinitializer
  %749 = mul <4 x i32> %748, %739
  %750 = add <4 x i32> %749, %735
  %751 = mul <4 x i32> %748, %742
  %752 = add <4 x i32> %751, %736
  %753 = mul <4 x i32> %748, %745
  %754 = add <4 x i32> %753, %737
  tail call void asm sideeffect "#end step of gebp micro kernel 3pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !564
  tail call void asm sideeffect "#begin step of gebp micro kernel 3pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !565
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !566
  %755 = getelementptr inbounds i32, i32* %734, i64 12
  %756 = bitcast i32* %755 to <4 x i32>*
  %757 = load <4 x i32>, <4 x i32>* %756, align 16, !tbaa !11
  %758 = getelementptr inbounds i32, i32* %734, i64 16
  %759 = bitcast i32* %758 to <4 x i32>*
  %760 = load <4 x i32>, <4 x i32>* %759, align 16, !tbaa !11
  %761 = getelementptr inbounds i32, i32* %734, i64 20
  %762 = bitcast i32* %761 to <4 x i32>*
  %763 = load <4 x i32>, <4 x i32>* %762, align 16, !tbaa !11
  %764 = getelementptr inbounds i32, i32* %733, i64 1
  %765 = load i32, i32* %764, align 4, !tbaa !33
  %766 = insertelement <4 x i32> undef, i32 %765, i32 0
  %767 = shufflevector <4 x i32> %766, <4 x i32> undef, <4 x i32> zeroinitializer
  %768 = mul <4 x i32> %767, %757
  %769 = add <4 x i32> %750, %768
  %770 = mul <4 x i32> %767, %760
  %771 = add <4 x i32> %752, %770
  %772 = mul <4 x i32> %767, %763
  %773 = add <4 x i32> %754, %772
  tail call void asm sideeffect "#end step of gebp micro kernel 3pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !567
  tail call void asm sideeffect "#begin step of gebp micro kernel 3pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !568
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !569
  %774 = getelementptr inbounds i32, i32* %734, i64 24
  %775 = bitcast i32* %774 to <4 x i32>*
  %776 = load <4 x i32>, <4 x i32>* %775, align 16, !tbaa !11
  %777 = getelementptr inbounds i32, i32* %734, i64 28
  %778 = bitcast i32* %777 to <4 x i32>*
  %779 = load <4 x i32>, <4 x i32>* %778, align 16, !tbaa !11
  %780 = getelementptr inbounds i32, i32* %734, i64 32
  %781 = bitcast i32* %780 to <4 x i32>*
  %782 = load <4 x i32>, <4 x i32>* %781, align 16, !tbaa !11
  %783 = getelementptr inbounds i32, i32* %733, i64 2
  %784 = load i32, i32* %783, align 4, !tbaa !33
  %785 = insertelement <4 x i32> undef, i32 %784, i32 0
  %786 = shufflevector <4 x i32> %785, <4 x i32> undef, <4 x i32> zeroinitializer
  %787 = mul <4 x i32> %786, %776
  %788 = add <4 x i32> %769, %787
  %789 = mul <4 x i32> %786, %779
  %790 = add <4 x i32> %771, %789
  %791 = mul <4 x i32> %786, %782
  %792 = add <4 x i32> %773, %791
  tail call void asm sideeffect "#end step of gebp micro kernel 3pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !570
  tail call void asm sideeffect "#begin step of gebp micro kernel 3pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !571
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !572
  %793 = getelementptr inbounds i32, i32* %734, i64 36
  %794 = bitcast i32* %793 to <4 x i32>*
  %795 = load <4 x i32>, <4 x i32>* %794, align 16, !tbaa !11
  %796 = getelementptr inbounds i32, i32* %734, i64 40
  %797 = bitcast i32* %796 to <4 x i32>*
  %798 = load <4 x i32>, <4 x i32>* %797, align 16, !tbaa !11
  %799 = getelementptr inbounds i32, i32* %734, i64 44
  %800 = bitcast i32* %799 to <4 x i32>*
  %801 = load <4 x i32>, <4 x i32>* %800, align 16, !tbaa !11
  %802 = getelementptr inbounds i32, i32* %733, i64 3
  %803 = load i32, i32* %802, align 4, !tbaa !33
  %804 = insertelement <4 x i32> undef, i32 %803, i32 0
  %805 = shufflevector <4 x i32> %804, <4 x i32> undef, <4 x i32> zeroinitializer
  %806 = mul <4 x i32> %805, %795
  %807 = add <4 x i32> %788, %806
  %808 = mul <4 x i32> %805, %798
  %809 = add <4 x i32> %790, %808
  %810 = mul <4 x i32> %805, %801
  %811 = add <4 x i32> %792, %810
  tail call void asm sideeffect "#end step of gebp micro kernel 3pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !573
  tail call void asm sideeffect "#begin step of gebp micro kernel 3pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !574
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !575
  %812 = getelementptr inbounds i32, i32* %734, i64 48
  %813 = bitcast i32* %812 to <4 x i32>*
  %814 = load <4 x i32>, <4 x i32>* %813, align 16, !tbaa !11
  %815 = getelementptr inbounds i32, i32* %734, i64 52
  %816 = bitcast i32* %815 to <4 x i32>*
  %817 = load <4 x i32>, <4 x i32>* %816, align 16, !tbaa !11
  %818 = getelementptr inbounds i32, i32* %734, i64 56
  %819 = bitcast i32* %818 to <4 x i32>*
  %820 = load <4 x i32>, <4 x i32>* %819, align 16, !tbaa !11
  %821 = getelementptr inbounds i32, i32* %733, i64 4
  %822 = load i32, i32* %821, align 4, !tbaa !33
  %823 = insertelement <4 x i32> undef, i32 %822, i32 0
  %824 = shufflevector <4 x i32> %823, <4 x i32> undef, <4 x i32> zeroinitializer
  %825 = mul <4 x i32> %824, %814
  %826 = add <4 x i32> %807, %825
  %827 = mul <4 x i32> %824, %817
  %828 = add <4 x i32> %809, %827
  %829 = mul <4 x i32> %824, %820
  %830 = add <4 x i32> %811, %829
  tail call void asm sideeffect "#end step of gebp micro kernel 3pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !576
  tail call void asm sideeffect "#begin step of gebp micro kernel 3pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !577
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !578
  %831 = getelementptr inbounds i32, i32* %734, i64 60
  %832 = bitcast i32* %831 to <4 x i32>*
  %833 = load <4 x i32>, <4 x i32>* %832, align 16, !tbaa !11
  %834 = getelementptr inbounds i32, i32* %734, i64 64
  %835 = bitcast i32* %834 to <4 x i32>*
  %836 = load <4 x i32>, <4 x i32>* %835, align 16, !tbaa !11
  %837 = getelementptr inbounds i32, i32* %734, i64 68
  %838 = bitcast i32* %837 to <4 x i32>*
  %839 = load <4 x i32>, <4 x i32>* %838, align 16, !tbaa !11
  %840 = getelementptr inbounds i32, i32* %733, i64 5
  %841 = load i32, i32* %840, align 4, !tbaa !33
  %842 = insertelement <4 x i32> undef, i32 %841, i32 0
  %843 = shufflevector <4 x i32> %842, <4 x i32> undef, <4 x i32> zeroinitializer
  %844 = mul <4 x i32> %843, %833
  %845 = add <4 x i32> %826, %844
  %846 = mul <4 x i32> %843, %836
  %847 = add <4 x i32> %828, %846
  %848 = mul <4 x i32> %843, %839
  %849 = add <4 x i32> %830, %848
  tail call void asm sideeffect "#end step of gebp micro kernel 3pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !579
  tail call void asm sideeffect "#begin step of gebp micro kernel 3pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !580
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !581
  %850 = getelementptr inbounds i32, i32* %734, i64 72
  %851 = bitcast i32* %850 to <4 x i32>*
  %852 = load <4 x i32>, <4 x i32>* %851, align 16, !tbaa !11
  %853 = getelementptr inbounds i32, i32* %734, i64 76
  %854 = bitcast i32* %853 to <4 x i32>*
  %855 = load <4 x i32>, <4 x i32>* %854, align 16, !tbaa !11
  %856 = getelementptr inbounds i32, i32* %734, i64 80
  %857 = bitcast i32* %856 to <4 x i32>*
  %858 = load <4 x i32>, <4 x i32>* %857, align 16, !tbaa !11
  %859 = getelementptr inbounds i32, i32* %733, i64 6
  %860 = load i32, i32* %859, align 4, !tbaa !33
  %861 = insertelement <4 x i32> undef, i32 %860, i32 0
  %862 = shufflevector <4 x i32> %861, <4 x i32> undef, <4 x i32> zeroinitializer
  %863 = mul <4 x i32> %862, %852
  %864 = add <4 x i32> %845, %863
  %865 = mul <4 x i32> %862, %855
  %866 = add <4 x i32> %847, %865
  %867 = mul <4 x i32> %862, %858
  %868 = add <4 x i32> %849, %867
  tail call void asm sideeffect "#end step of gebp micro kernel 3pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !582
  tail call void asm sideeffect "#begin step of gebp micro kernel 3pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !583
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !584
  %869 = getelementptr inbounds i32, i32* %734, i64 84
  %870 = bitcast i32* %869 to <4 x i32>*
  %871 = load <4 x i32>, <4 x i32>* %870, align 16, !tbaa !11
  %872 = getelementptr inbounds i32, i32* %734, i64 88
  %873 = bitcast i32* %872 to <4 x i32>*
  %874 = load <4 x i32>, <4 x i32>* %873, align 16, !tbaa !11
  %875 = getelementptr inbounds i32, i32* %734, i64 92
  %876 = bitcast i32* %875 to <4 x i32>*
  %877 = load <4 x i32>, <4 x i32>* %876, align 16, !tbaa !11
  %878 = getelementptr inbounds i32, i32* %733, i64 7
  %879 = load i32, i32* %878, align 4, !tbaa !33
  %880 = insertelement <4 x i32> undef, i32 %879, i32 0
  %881 = shufflevector <4 x i32> %880, <4 x i32> undef, <4 x i32> zeroinitializer
  %882 = mul <4 x i32> %881, %871
  %883 = add <4 x i32> %864, %882
  %884 = mul <4 x i32> %881, %874
  %885 = add <4 x i32> %866, %884
  %886 = mul <4 x i32> %881, %877
  %887 = add <4 x i32> %868, %886
  tail call void asm sideeffect "#end step of gebp micro kernel 3pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !585
  %888 = getelementptr inbounds i32, i32* %733, i64 8
  %889 = getelementptr inbounds i32, i32* %734, i64 96
  tail call void asm sideeffect "#end gebp micro kernel 3pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !586
  %890 = add nuw nsw i64 %732, 8
  %891 = icmp slt i64 %890, %26
  br i1 %891, label %731, label %723

; <label>:892:                                    ; preds = %913
  br label %893

; <label>:893:                                    ; preds = %892, %724
  %894 = phi <4 x i32> [ %725, %724 ], [ %936, %892 ]
  %895 = phi <4 x i32> [ %726, %724 ], [ %934, %892 ]
  %896 = phi <4 x i32> [ %727, %724 ], [ %932, %892 ]
  %897 = bitcast i32* %720 to <4 x i32>*
  %898 = load <4 x i32>, <4 x i32>* %897, align 1, !tbaa !11
  %899 = getelementptr inbounds i32, i32* %720, i64 4
  %900 = bitcast i32* %899 to <4 x i32>*
  %901 = load <4 x i32>, <4 x i32>* %900, align 1, !tbaa !11
  %902 = getelementptr inbounds i32, i32* %720, i64 8
  %903 = bitcast i32* %902 to <4 x i32>*
  %904 = load <4 x i32>, <4 x i32>* %903, align 1, !tbaa !11
  %905 = mul <4 x i32> %896, %44
  %906 = add <4 x i32> %898, %905
  %907 = mul <4 x i32> %895, %44
  %908 = add <4 x i32> %901, %907
  %909 = mul <4 x i32> %894, %44
  %910 = add <4 x i32> %904, %909
  store <4 x i32> %906, <4 x i32>* %897, align 1, !tbaa !11
  store <4 x i32> %908, <4 x i32>* %900, align 1, !tbaa !11
  store <4 x i32> %910, <4 x i32>* %903, align 1, !tbaa !11
  %911 = add nsw i64 %711, 12
  %912 = icmp slt i64 %911, %72
  br i1 %912, label %710, label %706

; <label>:913:                                    ; preds = %730, %913
  %914 = phi i64 [ %939, %913 ], [ %26, %730 ]
  %915 = phi i32* [ %937, %913 ], [ %729, %730 ]
  %916 = phi i32* [ %938, %913 ], [ %728, %730 ]
  %917 = phi <4 x i32> [ %932, %913 ], [ %727, %730 ]
  %918 = phi <4 x i32> [ %934, %913 ], [ %726, %730 ]
  %919 = phi <4 x i32> [ %936, %913 ], [ %725, %730 ]
  tail call void asm sideeffect "#begin step of gebp micro kernel 3pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !587
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !588
  %920 = bitcast i32* %916 to <4 x i32>*
  %921 = load <4 x i32>, <4 x i32>* %920, align 16, !tbaa !11
  %922 = getelementptr inbounds i32, i32* %916, i64 4
  %923 = bitcast i32* %922 to <4 x i32>*
  %924 = load <4 x i32>, <4 x i32>* %923, align 16, !tbaa !11
  %925 = getelementptr inbounds i32, i32* %916, i64 8
  %926 = bitcast i32* %925 to <4 x i32>*
  %927 = load <4 x i32>, <4 x i32>* %926, align 16, !tbaa !11
  %928 = load i32, i32* %915, align 4, !tbaa !33
  %929 = insertelement <4 x i32> undef, i32 %928, i32 0
  %930 = shufflevector <4 x i32> %929, <4 x i32> undef, <4 x i32> zeroinitializer
  %931 = mul <4 x i32> %930, %921
  %932 = add <4 x i32> %931, %917
  %933 = mul <4 x i32> %930, %924
  %934 = add <4 x i32> %933, %918
  %935 = mul <4 x i32> %930, %927
  %936 = add <4 x i32> %935, %919
  tail call void asm sideeffect "#end step of gebp micro kernel 3pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !589
  %937 = getelementptr inbounds i32, i32* %915, i64 1
  %938 = getelementptr inbounds i32, i32* %916, i64 12
  %939 = add nsw i64 %914, 1
  %940 = icmp eq i64 %939, %5
  br i1 %940, label %892, label %913

; <label>:941:                                    ; preds = %1454
  br label %942

; <label>:942:                                    ; preds = %941, %966
  %943 = icmp slt i64 %960, %23
  br i1 %943, label %958, label %944

; <label>:944:                                    ; preds = %942
  br label %945

; <label>:945:                                    ; preds = %944, %50
  %946 = icmp slt i64 %23, %25
  br i1 %946, label %947, label %1643

; <label>:947:                                    ; preds = %945
  %948 = icmp sgt i64 %6, 3
  %949 = icmp slt i64 %18, %6
  %950 = shl i64 %10, 2
  %951 = getelementptr inbounds %"class.Eigen::internal::blas_data_mapper.951", %"class.Eigen::internal::blas_data_mapper.951"* %1, i64 0, i32 0
  %952 = getelementptr inbounds %"class.Eigen::internal::blas_data_mapper.951", %"class.Eigen::internal::blas_data_mapper.951"* %1, i64 0, i32 1
  %953 = icmp sgt i64 %26, 0
  %954 = icmp slt i64 %26, %5
  %955 = insertelement <4 x i32> undef, i32 %7, i32 0
  %956 = shufflevector <4 x i32> %955, <4 x i32> undef, <4 x i32> zeroinitializer
  %957 = shl i64 %11, 2
  br label %1635

; <label>:958:                                    ; preds = %57, %942
  %959 = phi i64 [ %20, %57 ], [ %960, %942 ]
  %960 = add nsw i64 %959, %55
  %961 = icmp slt i64 %23, %960
  %962 = select i1 %961, i64 %23, i64 %960
  br i1 %58, label %963, label %966

; <label>:963:                                    ; preds = %958
  %964 = icmp slt i64 %959, %962
  br label %969

; <label>:965:                                    ; preds = %980
  br label %966

; <label>:966:                                    ; preds = %965, %958
  br i1 %59, label %967, label %942

; <label>:967:                                    ; preds = %966
  %968 = icmp slt i64 %959, %962
  br label %1447

; <label>:969:                                    ; preds = %963, %980
  %970 = phi i64 [ 0, %963 ], [ %981, %980 ]
  br i1 %964, label %971, label %980

; <label>:971:                                    ; preds = %969
  %972 = or i64 %970, 1
  %973 = or i64 %970, 2
  %974 = or i64 %970, 3
  %975 = mul nsw i64 %970, %16
  %976 = add nsw i64 %975, %67
  %977 = getelementptr inbounds i32, i32* %3, i64 %976
  %978 = bitcast i32* %977 to i8*
  br label %983

; <label>:979:                                    ; preds = %1348
  br label %980

; <label>:980:                                    ; preds = %979, %969
  %981 = add nuw nsw i64 %970, 4
  %982 = icmp slt i64 %981, %18
  br i1 %982, label %969, label %965

; <label>:983:                                    ; preds = %971, %1348
  %984 = phi i64 [ %959, %971 ], [ %1393, %1348 ]
  %985 = mul nsw i64 %984, %14
  %986 = add nsw i64 %985, %60
  %987 = getelementptr inbounds i32, i32* %2, i64 %986
  %988 = bitcast i32* %987 to i8*
  tail call void @llvm.prefetch(i8* %988, i32 0, i32 3, i32 1) #11
  %989 = load i32*, i32** %61, align 8, !tbaa !529
  %990 = load i64, i64* %62, align 8, !tbaa !531
  %991 = mul nsw i64 %990, %970
  %992 = add nsw i64 %991, %984
  %993 = getelementptr inbounds i32, i32* %989, i64 %992
  %994 = mul nsw i64 %990, %972
  %995 = add nsw i64 %994, %984
  %996 = getelementptr inbounds i32, i32* %989, i64 %995
  %997 = mul nsw i64 %990, %973
  %998 = add nsw i64 %997, %984
  %999 = getelementptr inbounds i32, i32* %989, i64 %998
  %1000 = mul nsw i64 %990, %974
  %1001 = add nsw i64 %1000, %984
  %1002 = getelementptr inbounds i32, i32* %989, i64 %1001
  %1003 = getelementptr inbounds i32, i32* %993, i64 8
  %1004 = bitcast i32* %1003 to i8*
  tail call void @llvm.prefetch(i8* %1004, i32 0, i32 3, i32 1) #11
  %1005 = getelementptr inbounds i32, i32* %996, i64 8
  %1006 = bitcast i32* %1005 to i8*
  tail call void @llvm.prefetch(i8* %1006, i32 0, i32 3, i32 1) #11
  %1007 = getelementptr inbounds i32, i32* %999, i64 8
  %1008 = bitcast i32* %1007 to i8*
  tail call void @llvm.prefetch(i8* %1008, i32 0, i32 3, i32 1) #11
  %1009 = getelementptr inbounds i32, i32* %1002, i64 8
  %1010 = bitcast i32* %1009 to i8*
  tail call void @llvm.prefetch(i8* %1010, i32 0, i32 3, i32 1) #11
  tail call void @llvm.prefetch(i8* %978, i32 0, i32 3, i32 1) #11
  br i1 %63, label %1011, label %1013

; <label>:1011:                                   ; preds = %983
  br label %1025

; <label>:1012:                                   ; preds = %1025
  br label %1013

; <label>:1013:                                   ; preds = %1012, %983
  %1014 = phi <4 x i32> [ zeroinitializer, %983 ], [ %1342, %1012 ]
  %1015 = phi <4 x i32> [ zeroinitializer, %983 ], [ %1338, %1012 ]
  %1016 = phi <4 x i32> [ zeroinitializer, %983 ], [ %1334, %1012 ]
  %1017 = phi <4 x i32> [ zeroinitializer, %983 ], [ %1330, %1012 ]
  %1018 = phi <4 x i32> [ zeroinitializer, %983 ], [ %1340, %1012 ]
  %1019 = phi <4 x i32> [ zeroinitializer, %983 ], [ %1336, %1012 ]
  %1020 = phi <4 x i32> [ zeroinitializer, %983 ], [ %1332, %1012 ]
  %1021 = phi <4 x i32> [ zeroinitializer, %983 ], [ %1328, %1012 ]
  %1022 = phi i32* [ %987, %983 ], [ %1344, %1012 ]
  %1023 = phi i32* [ %977, %983 ], [ %1343, %1012 ]
  br i1 %64, label %1024, label %1348

; <label>:1024:                                   ; preds = %1013
  br label %1395

; <label>:1025:                                   ; preds = %1011, %1025
  %1026 = phi i64 [ %1345, %1025 ], [ 0, %1011 ]
  %1027 = phi i32* [ %1343, %1025 ], [ %977, %1011 ]
  %1028 = phi i32* [ %1344, %1025 ], [ %987, %1011 ]
  %1029 = phi <4 x i32> [ %1328, %1025 ], [ zeroinitializer, %1011 ]
  %1030 = phi <4 x i32> [ %1332, %1025 ], [ zeroinitializer, %1011 ]
  %1031 = phi <4 x i32> [ %1336, %1025 ], [ zeroinitializer, %1011 ]
  %1032 = phi <4 x i32> [ %1340, %1025 ], [ zeroinitializer, %1011 ]
  %1033 = phi <4 x i32> [ %1330, %1025 ], [ zeroinitializer, %1011 ]
  %1034 = phi <4 x i32> [ %1334, %1025 ], [ zeroinitializer, %1011 ]
  %1035 = phi <4 x i32> [ %1338, %1025 ], [ zeroinitializer, %1011 ]
  %1036 = phi <4 x i32> [ %1342, %1025 ], [ zeroinitializer, %1011 ]
  tail call void asm sideeffect "#begin gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !590
  %1037 = getelementptr inbounds i32, i32* %1027, i64 48
  %1038 = bitcast i32* %1037 to i8*
  tail call void @llvm.prefetch(i8* %1038, i32 0, i32 3, i32 1) #11
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !591
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !592
  %1039 = bitcast i32* %1028 to <4 x i32>*
  %1040 = load <4 x i32>, <4 x i32>* %1039, align 16, !tbaa !11
  %1041 = getelementptr inbounds i32, i32* %1028, i64 4
  %1042 = bitcast i32* %1041 to <4 x i32>*
  %1043 = load <4 x i32>, <4 x i32>* %1042, align 16, !tbaa !11
  %1044 = load i32, i32* %1027, align 4, !tbaa !33
  %1045 = insertelement <4 x i32> undef, i32 %1044, i32 0
  %1046 = shufflevector <4 x i32> %1045, <4 x i32> undef, <4 x i32> zeroinitializer
  %1047 = getelementptr inbounds i32, i32* %1027, i64 1
  %1048 = load i32, i32* %1047, align 4, !tbaa !33
  %1049 = insertelement <4 x i32> undef, i32 %1048, i32 0
  %1050 = shufflevector <4 x i32> %1049, <4 x i32> undef, <4 x i32> zeroinitializer
  %1051 = getelementptr inbounds i32, i32* %1027, i64 2
  %1052 = load i32, i32* %1051, align 4, !tbaa !33
  %1053 = insertelement <4 x i32> undef, i32 %1052, i32 0
  %1054 = shufflevector <4 x i32> %1053, <4 x i32> undef, <4 x i32> zeroinitializer
  %1055 = getelementptr inbounds i32, i32* %1027, i64 3
  %1056 = load i32, i32* %1055, align 4, !tbaa !33
  %1057 = insertelement <4 x i32> undef, i32 %1056, i32 0
  %1058 = shufflevector <4 x i32> %1057, <4 x i32> undef, <4 x i32> zeroinitializer
  %1059 = mul <4 x i32> %1046, %1040
  %1060 = add <4 x i32> %1059, %1029
  %1061 = mul <4 x i32> %1046, %1043
  %1062 = add <4 x i32> %1061, %1033
  %1063 = mul <4 x i32> %1050, %1040
  %1064 = add <4 x i32> %1063, %1030
  %1065 = mul <4 x i32> %1050, %1043
  %1066 = add <4 x i32> %1065, %1034
  %1067 = mul <4 x i32> %1054, %1040
  %1068 = add <4 x i32> %1067, %1031
  %1069 = mul <4 x i32> %1054, %1043
  %1070 = add <4 x i32> %1069, %1035
  %1071 = mul <4 x i32> %1058, %1040
  %1072 = add <4 x i32> %1071, %1032
  %1073 = mul <4 x i32> %1058, %1043
  %1074 = add <4 x i32> %1073, %1036
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !593
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !594
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !595
  %1075 = getelementptr inbounds i32, i32* %1028, i64 8
  %1076 = bitcast i32* %1075 to <4 x i32>*
  %1077 = load <4 x i32>, <4 x i32>* %1076, align 16, !tbaa !11
  %1078 = getelementptr inbounds i32, i32* %1028, i64 12
  %1079 = bitcast i32* %1078 to <4 x i32>*
  %1080 = load <4 x i32>, <4 x i32>* %1079, align 16, !tbaa !11
  %1081 = getelementptr inbounds i32, i32* %1027, i64 4
  %1082 = load i32, i32* %1081, align 4, !tbaa !33
  %1083 = insertelement <4 x i32> undef, i32 %1082, i32 0
  %1084 = shufflevector <4 x i32> %1083, <4 x i32> undef, <4 x i32> zeroinitializer
  %1085 = getelementptr inbounds i32, i32* %1027, i64 5
  %1086 = load i32, i32* %1085, align 4, !tbaa !33
  %1087 = insertelement <4 x i32> undef, i32 %1086, i32 0
  %1088 = shufflevector <4 x i32> %1087, <4 x i32> undef, <4 x i32> zeroinitializer
  %1089 = getelementptr inbounds i32, i32* %1027, i64 6
  %1090 = load i32, i32* %1089, align 4, !tbaa !33
  %1091 = insertelement <4 x i32> undef, i32 %1090, i32 0
  %1092 = shufflevector <4 x i32> %1091, <4 x i32> undef, <4 x i32> zeroinitializer
  %1093 = getelementptr inbounds i32, i32* %1027, i64 7
  %1094 = load i32, i32* %1093, align 4, !tbaa !33
  %1095 = insertelement <4 x i32> undef, i32 %1094, i32 0
  %1096 = shufflevector <4 x i32> %1095, <4 x i32> undef, <4 x i32> zeroinitializer
  %1097 = mul <4 x i32> %1084, %1077
  %1098 = add <4 x i32> %1060, %1097
  %1099 = mul <4 x i32> %1084, %1080
  %1100 = add <4 x i32> %1062, %1099
  %1101 = mul <4 x i32> %1088, %1077
  %1102 = add <4 x i32> %1064, %1101
  %1103 = mul <4 x i32> %1088, %1080
  %1104 = add <4 x i32> %1066, %1103
  %1105 = mul <4 x i32> %1092, %1077
  %1106 = add <4 x i32> %1068, %1105
  %1107 = mul <4 x i32> %1092, %1080
  %1108 = add <4 x i32> %1070, %1107
  %1109 = mul <4 x i32> %1096, %1077
  %1110 = add <4 x i32> %1072, %1109
  %1111 = mul <4 x i32> %1096, %1080
  %1112 = add <4 x i32> %1074, %1111
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !596
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !597
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !598
  %1113 = getelementptr inbounds i32, i32* %1028, i64 16
  %1114 = bitcast i32* %1113 to <4 x i32>*
  %1115 = load <4 x i32>, <4 x i32>* %1114, align 16, !tbaa !11
  %1116 = getelementptr inbounds i32, i32* %1028, i64 20
  %1117 = bitcast i32* %1116 to <4 x i32>*
  %1118 = load <4 x i32>, <4 x i32>* %1117, align 16, !tbaa !11
  %1119 = getelementptr inbounds i32, i32* %1027, i64 8
  %1120 = load i32, i32* %1119, align 4, !tbaa !33
  %1121 = insertelement <4 x i32> undef, i32 %1120, i32 0
  %1122 = shufflevector <4 x i32> %1121, <4 x i32> undef, <4 x i32> zeroinitializer
  %1123 = getelementptr inbounds i32, i32* %1027, i64 9
  %1124 = load i32, i32* %1123, align 4, !tbaa !33
  %1125 = insertelement <4 x i32> undef, i32 %1124, i32 0
  %1126 = shufflevector <4 x i32> %1125, <4 x i32> undef, <4 x i32> zeroinitializer
  %1127 = getelementptr inbounds i32, i32* %1027, i64 10
  %1128 = load i32, i32* %1127, align 4, !tbaa !33
  %1129 = insertelement <4 x i32> undef, i32 %1128, i32 0
  %1130 = shufflevector <4 x i32> %1129, <4 x i32> undef, <4 x i32> zeroinitializer
  %1131 = getelementptr inbounds i32, i32* %1027, i64 11
  %1132 = load i32, i32* %1131, align 4, !tbaa !33
  %1133 = insertelement <4 x i32> undef, i32 %1132, i32 0
  %1134 = shufflevector <4 x i32> %1133, <4 x i32> undef, <4 x i32> zeroinitializer
  %1135 = mul <4 x i32> %1122, %1115
  %1136 = add <4 x i32> %1098, %1135
  %1137 = mul <4 x i32> %1122, %1118
  %1138 = add <4 x i32> %1100, %1137
  %1139 = mul <4 x i32> %1126, %1115
  %1140 = add <4 x i32> %1102, %1139
  %1141 = mul <4 x i32> %1126, %1118
  %1142 = add <4 x i32> %1104, %1141
  %1143 = mul <4 x i32> %1130, %1115
  %1144 = add <4 x i32> %1106, %1143
  %1145 = mul <4 x i32> %1130, %1118
  %1146 = add <4 x i32> %1108, %1145
  %1147 = mul <4 x i32> %1134, %1115
  %1148 = add <4 x i32> %1110, %1147
  %1149 = mul <4 x i32> %1134, %1118
  %1150 = add <4 x i32> %1112, %1149
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !599
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !600
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !601
  %1151 = getelementptr inbounds i32, i32* %1028, i64 24
  %1152 = bitcast i32* %1151 to <4 x i32>*
  %1153 = load <4 x i32>, <4 x i32>* %1152, align 16, !tbaa !11
  %1154 = getelementptr inbounds i32, i32* %1028, i64 28
  %1155 = bitcast i32* %1154 to <4 x i32>*
  %1156 = load <4 x i32>, <4 x i32>* %1155, align 16, !tbaa !11
  %1157 = getelementptr inbounds i32, i32* %1027, i64 12
  %1158 = load i32, i32* %1157, align 4, !tbaa !33
  %1159 = insertelement <4 x i32> undef, i32 %1158, i32 0
  %1160 = shufflevector <4 x i32> %1159, <4 x i32> undef, <4 x i32> zeroinitializer
  %1161 = getelementptr inbounds i32, i32* %1027, i64 13
  %1162 = load i32, i32* %1161, align 4, !tbaa !33
  %1163 = insertelement <4 x i32> undef, i32 %1162, i32 0
  %1164 = shufflevector <4 x i32> %1163, <4 x i32> undef, <4 x i32> zeroinitializer
  %1165 = getelementptr inbounds i32, i32* %1027, i64 14
  %1166 = load i32, i32* %1165, align 4, !tbaa !33
  %1167 = insertelement <4 x i32> undef, i32 %1166, i32 0
  %1168 = shufflevector <4 x i32> %1167, <4 x i32> undef, <4 x i32> zeroinitializer
  %1169 = getelementptr inbounds i32, i32* %1027, i64 15
  %1170 = load i32, i32* %1169, align 4, !tbaa !33
  %1171 = insertelement <4 x i32> undef, i32 %1170, i32 0
  %1172 = shufflevector <4 x i32> %1171, <4 x i32> undef, <4 x i32> zeroinitializer
  %1173 = mul <4 x i32> %1160, %1153
  %1174 = add <4 x i32> %1136, %1173
  %1175 = mul <4 x i32> %1160, %1156
  %1176 = add <4 x i32> %1138, %1175
  %1177 = mul <4 x i32> %1164, %1153
  %1178 = add <4 x i32> %1140, %1177
  %1179 = mul <4 x i32> %1164, %1156
  %1180 = add <4 x i32> %1142, %1179
  %1181 = mul <4 x i32> %1168, %1153
  %1182 = add <4 x i32> %1144, %1181
  %1183 = mul <4 x i32> %1168, %1156
  %1184 = add <4 x i32> %1146, %1183
  %1185 = mul <4 x i32> %1172, %1153
  %1186 = add <4 x i32> %1148, %1185
  %1187 = mul <4 x i32> %1172, %1156
  %1188 = add <4 x i32> %1150, %1187
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !602
  %1189 = getelementptr inbounds i32, i32* %1027, i64 64
  %1190 = bitcast i32* %1189 to i8*
  tail call void @llvm.prefetch(i8* %1190, i32 0, i32 3, i32 1) #11
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !603
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !604
  %1191 = getelementptr inbounds i32, i32* %1028, i64 32
  %1192 = bitcast i32* %1191 to <4 x i32>*
  %1193 = load <4 x i32>, <4 x i32>* %1192, align 16, !tbaa !11
  %1194 = getelementptr inbounds i32, i32* %1028, i64 36
  %1195 = bitcast i32* %1194 to <4 x i32>*
  %1196 = load <4 x i32>, <4 x i32>* %1195, align 16, !tbaa !11
  %1197 = getelementptr inbounds i32, i32* %1027, i64 16
  %1198 = load i32, i32* %1197, align 4, !tbaa !33
  %1199 = insertelement <4 x i32> undef, i32 %1198, i32 0
  %1200 = shufflevector <4 x i32> %1199, <4 x i32> undef, <4 x i32> zeroinitializer
  %1201 = getelementptr inbounds i32, i32* %1027, i64 17
  %1202 = load i32, i32* %1201, align 4, !tbaa !33
  %1203 = insertelement <4 x i32> undef, i32 %1202, i32 0
  %1204 = shufflevector <4 x i32> %1203, <4 x i32> undef, <4 x i32> zeroinitializer
  %1205 = getelementptr inbounds i32, i32* %1027, i64 18
  %1206 = load i32, i32* %1205, align 4, !tbaa !33
  %1207 = insertelement <4 x i32> undef, i32 %1206, i32 0
  %1208 = shufflevector <4 x i32> %1207, <4 x i32> undef, <4 x i32> zeroinitializer
  %1209 = getelementptr inbounds i32, i32* %1027, i64 19
  %1210 = load i32, i32* %1209, align 4, !tbaa !33
  %1211 = insertelement <4 x i32> undef, i32 %1210, i32 0
  %1212 = shufflevector <4 x i32> %1211, <4 x i32> undef, <4 x i32> zeroinitializer
  %1213 = mul <4 x i32> %1200, %1193
  %1214 = add <4 x i32> %1174, %1213
  %1215 = mul <4 x i32> %1200, %1196
  %1216 = add <4 x i32> %1176, %1215
  %1217 = mul <4 x i32> %1204, %1193
  %1218 = add <4 x i32> %1178, %1217
  %1219 = mul <4 x i32> %1204, %1196
  %1220 = add <4 x i32> %1180, %1219
  %1221 = mul <4 x i32> %1208, %1193
  %1222 = add <4 x i32> %1182, %1221
  %1223 = mul <4 x i32> %1208, %1196
  %1224 = add <4 x i32> %1184, %1223
  %1225 = mul <4 x i32> %1212, %1193
  %1226 = add <4 x i32> %1186, %1225
  %1227 = mul <4 x i32> %1212, %1196
  %1228 = add <4 x i32> %1188, %1227
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !605
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !606
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !607
  %1229 = getelementptr inbounds i32, i32* %1028, i64 40
  %1230 = bitcast i32* %1229 to <4 x i32>*
  %1231 = load <4 x i32>, <4 x i32>* %1230, align 16, !tbaa !11
  %1232 = getelementptr inbounds i32, i32* %1028, i64 44
  %1233 = bitcast i32* %1232 to <4 x i32>*
  %1234 = load <4 x i32>, <4 x i32>* %1233, align 16, !tbaa !11
  %1235 = getelementptr inbounds i32, i32* %1027, i64 20
  %1236 = load i32, i32* %1235, align 4, !tbaa !33
  %1237 = insertelement <4 x i32> undef, i32 %1236, i32 0
  %1238 = shufflevector <4 x i32> %1237, <4 x i32> undef, <4 x i32> zeroinitializer
  %1239 = getelementptr inbounds i32, i32* %1027, i64 21
  %1240 = load i32, i32* %1239, align 4, !tbaa !33
  %1241 = insertelement <4 x i32> undef, i32 %1240, i32 0
  %1242 = shufflevector <4 x i32> %1241, <4 x i32> undef, <4 x i32> zeroinitializer
  %1243 = getelementptr inbounds i32, i32* %1027, i64 22
  %1244 = load i32, i32* %1243, align 4, !tbaa !33
  %1245 = insertelement <4 x i32> undef, i32 %1244, i32 0
  %1246 = shufflevector <4 x i32> %1245, <4 x i32> undef, <4 x i32> zeroinitializer
  %1247 = getelementptr inbounds i32, i32* %1027, i64 23
  %1248 = load i32, i32* %1247, align 4, !tbaa !33
  %1249 = insertelement <4 x i32> undef, i32 %1248, i32 0
  %1250 = shufflevector <4 x i32> %1249, <4 x i32> undef, <4 x i32> zeroinitializer
  %1251 = mul <4 x i32> %1238, %1231
  %1252 = add <4 x i32> %1214, %1251
  %1253 = mul <4 x i32> %1238, %1234
  %1254 = add <4 x i32> %1216, %1253
  %1255 = mul <4 x i32> %1242, %1231
  %1256 = add <4 x i32> %1218, %1255
  %1257 = mul <4 x i32> %1242, %1234
  %1258 = add <4 x i32> %1220, %1257
  %1259 = mul <4 x i32> %1246, %1231
  %1260 = add <4 x i32> %1222, %1259
  %1261 = mul <4 x i32> %1246, %1234
  %1262 = add <4 x i32> %1224, %1261
  %1263 = mul <4 x i32> %1250, %1231
  %1264 = add <4 x i32> %1226, %1263
  %1265 = mul <4 x i32> %1250, %1234
  %1266 = add <4 x i32> %1228, %1265
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !608
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !609
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !610
  %1267 = getelementptr inbounds i32, i32* %1028, i64 48
  %1268 = bitcast i32* %1267 to <4 x i32>*
  %1269 = load <4 x i32>, <4 x i32>* %1268, align 16, !tbaa !11
  %1270 = getelementptr inbounds i32, i32* %1028, i64 52
  %1271 = bitcast i32* %1270 to <4 x i32>*
  %1272 = load <4 x i32>, <4 x i32>* %1271, align 16, !tbaa !11
  %1273 = getelementptr inbounds i32, i32* %1027, i64 24
  %1274 = load i32, i32* %1273, align 4, !tbaa !33
  %1275 = insertelement <4 x i32> undef, i32 %1274, i32 0
  %1276 = shufflevector <4 x i32> %1275, <4 x i32> undef, <4 x i32> zeroinitializer
  %1277 = getelementptr inbounds i32, i32* %1027, i64 25
  %1278 = load i32, i32* %1277, align 4, !tbaa !33
  %1279 = insertelement <4 x i32> undef, i32 %1278, i32 0
  %1280 = shufflevector <4 x i32> %1279, <4 x i32> undef, <4 x i32> zeroinitializer
  %1281 = getelementptr inbounds i32, i32* %1027, i64 26
  %1282 = load i32, i32* %1281, align 4, !tbaa !33
  %1283 = insertelement <4 x i32> undef, i32 %1282, i32 0
  %1284 = shufflevector <4 x i32> %1283, <4 x i32> undef, <4 x i32> zeroinitializer
  %1285 = getelementptr inbounds i32, i32* %1027, i64 27
  %1286 = load i32, i32* %1285, align 4, !tbaa !33
  %1287 = insertelement <4 x i32> undef, i32 %1286, i32 0
  %1288 = shufflevector <4 x i32> %1287, <4 x i32> undef, <4 x i32> zeroinitializer
  %1289 = mul <4 x i32> %1276, %1269
  %1290 = add <4 x i32> %1252, %1289
  %1291 = mul <4 x i32> %1276, %1272
  %1292 = add <4 x i32> %1254, %1291
  %1293 = mul <4 x i32> %1280, %1269
  %1294 = add <4 x i32> %1256, %1293
  %1295 = mul <4 x i32> %1280, %1272
  %1296 = add <4 x i32> %1258, %1295
  %1297 = mul <4 x i32> %1284, %1269
  %1298 = add <4 x i32> %1260, %1297
  %1299 = mul <4 x i32> %1284, %1272
  %1300 = add <4 x i32> %1262, %1299
  %1301 = mul <4 x i32> %1288, %1269
  %1302 = add <4 x i32> %1264, %1301
  %1303 = mul <4 x i32> %1288, %1272
  %1304 = add <4 x i32> %1266, %1303
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !611
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !612
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !613
  %1305 = getelementptr inbounds i32, i32* %1028, i64 56
  %1306 = bitcast i32* %1305 to <4 x i32>*
  %1307 = load <4 x i32>, <4 x i32>* %1306, align 16, !tbaa !11
  %1308 = getelementptr inbounds i32, i32* %1028, i64 60
  %1309 = bitcast i32* %1308 to <4 x i32>*
  %1310 = load <4 x i32>, <4 x i32>* %1309, align 16, !tbaa !11
  %1311 = getelementptr inbounds i32, i32* %1027, i64 28
  %1312 = load i32, i32* %1311, align 4, !tbaa !33
  %1313 = insertelement <4 x i32> undef, i32 %1312, i32 0
  %1314 = shufflevector <4 x i32> %1313, <4 x i32> undef, <4 x i32> zeroinitializer
  %1315 = getelementptr inbounds i32, i32* %1027, i64 29
  %1316 = load i32, i32* %1315, align 4, !tbaa !33
  %1317 = insertelement <4 x i32> undef, i32 %1316, i32 0
  %1318 = shufflevector <4 x i32> %1317, <4 x i32> undef, <4 x i32> zeroinitializer
  %1319 = getelementptr inbounds i32, i32* %1027, i64 30
  %1320 = load i32, i32* %1319, align 4, !tbaa !33
  %1321 = insertelement <4 x i32> undef, i32 %1320, i32 0
  %1322 = shufflevector <4 x i32> %1321, <4 x i32> undef, <4 x i32> zeroinitializer
  %1323 = getelementptr inbounds i32, i32* %1027, i64 31
  %1324 = load i32, i32* %1323, align 4, !tbaa !33
  %1325 = insertelement <4 x i32> undef, i32 %1324, i32 0
  %1326 = shufflevector <4 x i32> %1325, <4 x i32> undef, <4 x i32> zeroinitializer
  %1327 = mul <4 x i32> %1314, %1307
  %1328 = add <4 x i32> %1290, %1327
  %1329 = mul <4 x i32> %1314, %1310
  %1330 = add <4 x i32> %1292, %1329
  %1331 = mul <4 x i32> %1318, %1307
  %1332 = add <4 x i32> %1294, %1331
  %1333 = mul <4 x i32> %1318, %1310
  %1334 = add <4 x i32> %1296, %1333
  %1335 = mul <4 x i32> %1322, %1307
  %1336 = add <4 x i32> %1298, %1335
  %1337 = mul <4 x i32> %1322, %1310
  %1338 = add <4 x i32> %1300, %1337
  %1339 = mul <4 x i32> %1326, %1307
  %1340 = add <4 x i32> %1302, %1339
  %1341 = mul <4 x i32> %1326, %1310
  %1342 = add <4 x i32> %1304, %1341
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !614
  %1343 = getelementptr inbounds i32, i32* %1027, i64 32
  %1344 = getelementptr inbounds i32, i32* %1028, i64 64
  tail call void asm sideeffect "#end gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !615
  %1345 = add nuw nsw i64 %1026, 8
  %1346 = icmp slt i64 %1345, %26
  br i1 %1346, label %1025, label %1012

; <label>:1347:                                   ; preds = %1395
  br label %1348

; <label>:1348:                                   ; preds = %1347, %1013
  %1349 = phi <4 x i32> [ %1014, %1013 ], [ %1442, %1347 ]
  %1350 = phi <4 x i32> [ %1015, %1013 ], [ %1438, %1347 ]
  %1351 = phi <4 x i32> [ %1016, %1013 ], [ %1434, %1347 ]
  %1352 = phi <4 x i32> [ %1017, %1013 ], [ %1430, %1347 ]
  %1353 = phi <4 x i32> [ %1018, %1013 ], [ %1440, %1347 ]
  %1354 = phi <4 x i32> [ %1019, %1013 ], [ %1436, %1347 ]
  %1355 = phi <4 x i32> [ %1020, %1013 ], [ %1432, %1347 ]
  %1356 = phi <4 x i32> [ %1021, %1013 ], [ %1428, %1347 ]
  %1357 = bitcast i32* %993 to <4 x i32>*
  %1358 = load <4 x i32>, <4 x i32>* %1357, align 1, !tbaa !11
  %1359 = getelementptr inbounds i32, i32* %993, i64 4
  %1360 = bitcast i32* %1359 to <4 x i32>*
  %1361 = load <4 x i32>, <4 x i32>* %1360, align 1, !tbaa !11
  %1362 = bitcast i32* %996 to <4 x i32>*
  %1363 = load <4 x i32>, <4 x i32>* %1362, align 1, !tbaa !11
  %1364 = getelementptr inbounds i32, i32* %996, i64 4
  %1365 = bitcast i32* %1364 to <4 x i32>*
  %1366 = load <4 x i32>, <4 x i32>* %1365, align 1, !tbaa !11
  %1367 = mul <4 x i32> %1356, %66
  %1368 = add <4 x i32> %1358, %1367
  %1369 = mul <4 x i32> %1352, %66
  %1370 = add <4 x i32> %1361, %1369
  %1371 = mul <4 x i32> %1355, %66
  %1372 = add <4 x i32> %1363, %1371
  %1373 = mul <4 x i32> %1351, %66
  %1374 = add <4 x i32> %1366, %1373
  store <4 x i32> %1368, <4 x i32>* %1357, align 1, !tbaa !11
  store <4 x i32> %1370, <4 x i32>* %1360, align 1, !tbaa !11
  store <4 x i32> %1372, <4 x i32>* %1362, align 1, !tbaa !11
  store <4 x i32> %1374, <4 x i32>* %1365, align 1, !tbaa !11
  %1375 = bitcast i32* %999 to <4 x i32>*
  %1376 = load <4 x i32>, <4 x i32>* %1375, align 1, !tbaa !11
  %1377 = getelementptr inbounds i32, i32* %999, i64 4
  %1378 = bitcast i32* %1377 to <4 x i32>*
  %1379 = load <4 x i32>, <4 x i32>* %1378, align 1, !tbaa !11
  %1380 = bitcast i32* %1002 to <4 x i32>*
  %1381 = load <4 x i32>, <4 x i32>* %1380, align 1, !tbaa !11
  %1382 = getelementptr inbounds i32, i32* %1002, i64 4
  %1383 = bitcast i32* %1382 to <4 x i32>*
  %1384 = load <4 x i32>, <4 x i32>* %1383, align 1, !tbaa !11
  %1385 = mul <4 x i32> %1354, %66
  %1386 = add <4 x i32> %1376, %1385
  %1387 = mul <4 x i32> %1350, %66
  %1388 = add <4 x i32> %1379, %1387
  %1389 = mul <4 x i32> %1353, %66
  %1390 = add <4 x i32> %1381, %1389
  %1391 = mul <4 x i32> %1349, %66
  %1392 = add <4 x i32> %1384, %1391
  store <4 x i32> %1386, <4 x i32>* %1375, align 1, !tbaa !11
  store <4 x i32> %1388, <4 x i32>* %1378, align 1, !tbaa !11
  store <4 x i32> %1390, <4 x i32>* %1380, align 1, !tbaa !11
  store <4 x i32> %1392, <4 x i32>* %1383, align 1, !tbaa !11
  %1393 = add nsw i64 %984, 8
  %1394 = icmp slt i64 %1393, %962
  br i1 %1394, label %983, label %979

; <label>:1395:                                   ; preds = %1024, %1395
  %1396 = phi i64 [ %1445, %1395 ], [ %26, %1024 ]
  %1397 = phi i32* [ %1443, %1395 ], [ %1023, %1024 ]
  %1398 = phi i32* [ %1444, %1395 ], [ %1022, %1024 ]
  %1399 = phi <4 x i32> [ %1428, %1395 ], [ %1021, %1024 ]
  %1400 = phi <4 x i32> [ %1432, %1395 ], [ %1020, %1024 ]
  %1401 = phi <4 x i32> [ %1436, %1395 ], [ %1019, %1024 ]
  %1402 = phi <4 x i32> [ %1440, %1395 ], [ %1018, %1024 ]
  %1403 = phi <4 x i32> [ %1430, %1395 ], [ %1017, %1024 ]
  %1404 = phi <4 x i32> [ %1434, %1395 ], [ %1016, %1024 ]
  %1405 = phi <4 x i32> [ %1438, %1395 ], [ %1015, %1024 ]
  %1406 = phi <4 x i32> [ %1442, %1395 ], [ %1014, %1024 ]
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !616
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !617
  %1407 = bitcast i32* %1398 to <4 x i32>*
  %1408 = load <4 x i32>, <4 x i32>* %1407, align 16, !tbaa !11
  %1409 = getelementptr inbounds i32, i32* %1398, i64 4
  %1410 = bitcast i32* %1409 to <4 x i32>*
  %1411 = load <4 x i32>, <4 x i32>* %1410, align 16, !tbaa !11
  %1412 = load i32, i32* %1397, align 4, !tbaa !33
  %1413 = insertelement <4 x i32> undef, i32 %1412, i32 0
  %1414 = shufflevector <4 x i32> %1413, <4 x i32> undef, <4 x i32> zeroinitializer
  %1415 = getelementptr inbounds i32, i32* %1397, i64 1
  %1416 = load i32, i32* %1415, align 4, !tbaa !33
  %1417 = insertelement <4 x i32> undef, i32 %1416, i32 0
  %1418 = shufflevector <4 x i32> %1417, <4 x i32> undef, <4 x i32> zeroinitializer
  %1419 = getelementptr inbounds i32, i32* %1397, i64 2
  %1420 = load i32, i32* %1419, align 4, !tbaa !33
  %1421 = insertelement <4 x i32> undef, i32 %1420, i32 0
  %1422 = shufflevector <4 x i32> %1421, <4 x i32> undef, <4 x i32> zeroinitializer
  %1423 = getelementptr inbounds i32, i32* %1397, i64 3
  %1424 = load i32, i32* %1423, align 4, !tbaa !33
  %1425 = insertelement <4 x i32> undef, i32 %1424, i32 0
  %1426 = shufflevector <4 x i32> %1425, <4 x i32> undef, <4 x i32> zeroinitializer
  %1427 = mul <4 x i32> %1414, %1408
  %1428 = add <4 x i32> %1427, %1399
  %1429 = mul <4 x i32> %1414, %1411
  %1430 = add <4 x i32> %1429, %1403
  %1431 = mul <4 x i32> %1418, %1408
  %1432 = add <4 x i32> %1431, %1400
  %1433 = mul <4 x i32> %1418, %1411
  %1434 = add <4 x i32> %1433, %1404
  %1435 = mul <4 x i32> %1422, %1408
  %1436 = add <4 x i32> %1435, %1401
  %1437 = mul <4 x i32> %1422, %1411
  %1438 = add <4 x i32> %1437, %1405
  %1439 = mul <4 x i32> %1426, %1408
  %1440 = add <4 x i32> %1439, %1402
  %1441 = mul <4 x i32> %1426, %1411
  %1442 = add <4 x i32> %1441, %1406
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !618
  %1443 = getelementptr inbounds i32, i32* %1397, i64 4
  %1444 = getelementptr inbounds i32, i32* %1398, i64 8
  %1445 = add nsw i64 %1396, 1
  %1446 = icmp eq i64 %1445, %5
  br i1 %1446, label %1347, label %1395

; <label>:1447:                                   ; preds = %1454, %967
  %1448 = phi i64 [ %18, %967 ], [ %1455, %1454 ]
  br i1 %968, label %1449, label %1454

; <label>:1449:                                   ; preds = %1447
  %1450 = mul nsw i64 %1448, %16
  %1451 = add nsw i64 %1450, %11
  %1452 = getelementptr inbounds i32, i32* %3, i64 %1451
  br label %1457

; <label>:1453:                                   ; preds = %1599
  br label %1454

; <label>:1454:                                   ; preds = %1453, %1447
  %1455 = add nsw i64 %1448, 1
  %1456 = icmp eq i64 %1455, %6
  br i1 %1456, label %941, label %1447

; <label>:1457:                                   ; preds = %1449, %1599
  %1458 = phi i64 [ %959, %1449 ], [ %1611, %1599 ]
  %1459 = mul nsw i64 %1458, %14
  %1460 = add nsw i64 %1459, %60
  %1461 = getelementptr inbounds i32, i32* %2, i64 %1460
  %1462 = bitcast i32* %1461 to i8*
  tail call void @llvm.prefetch(i8* %1462, i32 0, i32 3, i32 1) #11
  %1463 = load i32*, i32** %61, align 8, !tbaa !529
  %1464 = load i64, i64* %62, align 8, !tbaa !531
  %1465 = mul nsw i64 %1464, %1448
  %1466 = add nsw i64 %1465, %1458
  %1467 = getelementptr inbounds i32, i32* %1463, i64 %1466
  %1468 = getelementptr inbounds i32, i32* %1467, i64 8
  %1469 = bitcast i32* %1468 to i8*
  tail call void @llvm.prefetch(i8* %1469, i32 0, i32 3, i32 1) #11
  br i1 %63, label %1470, label %1472

; <label>:1470:                                   ; preds = %1457
  br label %1478

; <label>:1471:                                   ; preds = %1478
  br label %1472

; <label>:1472:                                   ; preds = %1471, %1457
  %1473 = phi <4 x i32> [ zeroinitializer, %1457 ], [ %1593, %1471 ]
  %1474 = phi <4 x i32> [ zeroinitializer, %1457 ], [ %1591, %1471 ]
  %1475 = phi i32* [ %1461, %1457 ], [ %1595, %1471 ]
  %1476 = phi i32* [ %1452, %1457 ], [ %1594, %1471 ]
  br i1 %64, label %1477, label %1599

; <label>:1477:                                   ; preds = %1472
  br label %1613

; <label>:1478:                                   ; preds = %1470, %1478
  %1479 = phi i64 [ %1596, %1478 ], [ 0, %1470 ]
  %1480 = phi i32* [ %1594, %1478 ], [ %1452, %1470 ]
  %1481 = phi i32* [ %1595, %1478 ], [ %1461, %1470 ]
  %1482 = phi <4 x i32> [ %1591, %1478 ], [ zeroinitializer, %1470 ]
  %1483 = phi <4 x i32> [ %1593, %1478 ], [ zeroinitializer, %1470 ]
  tail call void asm sideeffect "#begin gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !619
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !620
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !621
  %1484 = bitcast i32* %1481 to <4 x i32>*
  %1485 = load <4 x i32>, <4 x i32>* %1484, align 16, !tbaa !11
  %1486 = getelementptr inbounds i32, i32* %1481, i64 4
  %1487 = bitcast i32* %1486 to <4 x i32>*
  %1488 = load <4 x i32>, <4 x i32>* %1487, align 16, !tbaa !11
  %1489 = load i32, i32* %1480, align 4, !tbaa !33
  %1490 = insertelement <4 x i32> undef, i32 %1489, i32 0
  %1491 = shufflevector <4 x i32> %1490, <4 x i32> undef, <4 x i32> zeroinitializer
  %1492 = mul <4 x i32> %1491, %1485
  %1493 = add <4 x i32> %1492, %1482
  %1494 = mul <4 x i32> %1491, %1488
  %1495 = add <4 x i32> %1494, %1483
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !622
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !623
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !624
  %1496 = getelementptr inbounds i32, i32* %1481, i64 8
  %1497 = bitcast i32* %1496 to <4 x i32>*
  %1498 = load <4 x i32>, <4 x i32>* %1497, align 16, !tbaa !11
  %1499 = getelementptr inbounds i32, i32* %1481, i64 12
  %1500 = bitcast i32* %1499 to <4 x i32>*
  %1501 = load <4 x i32>, <4 x i32>* %1500, align 16, !tbaa !11
  %1502 = getelementptr inbounds i32, i32* %1480, i64 1
  %1503 = load i32, i32* %1502, align 4, !tbaa !33
  %1504 = insertelement <4 x i32> undef, i32 %1503, i32 0
  %1505 = shufflevector <4 x i32> %1504, <4 x i32> undef, <4 x i32> zeroinitializer
  %1506 = mul <4 x i32> %1505, %1498
  %1507 = add <4 x i32> %1493, %1506
  %1508 = mul <4 x i32> %1505, %1501
  %1509 = add <4 x i32> %1495, %1508
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !625
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !626
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !627
  %1510 = getelementptr inbounds i32, i32* %1481, i64 16
  %1511 = bitcast i32* %1510 to <4 x i32>*
  %1512 = load <4 x i32>, <4 x i32>* %1511, align 16, !tbaa !11
  %1513 = getelementptr inbounds i32, i32* %1481, i64 20
  %1514 = bitcast i32* %1513 to <4 x i32>*
  %1515 = load <4 x i32>, <4 x i32>* %1514, align 16, !tbaa !11
  %1516 = getelementptr inbounds i32, i32* %1480, i64 2
  %1517 = load i32, i32* %1516, align 4, !tbaa !33
  %1518 = insertelement <4 x i32> undef, i32 %1517, i32 0
  %1519 = shufflevector <4 x i32> %1518, <4 x i32> undef, <4 x i32> zeroinitializer
  %1520 = mul <4 x i32> %1519, %1512
  %1521 = add <4 x i32> %1507, %1520
  %1522 = mul <4 x i32> %1519, %1515
  %1523 = add <4 x i32> %1509, %1522
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !628
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !629
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !630
  %1524 = getelementptr inbounds i32, i32* %1481, i64 24
  %1525 = bitcast i32* %1524 to <4 x i32>*
  %1526 = load <4 x i32>, <4 x i32>* %1525, align 16, !tbaa !11
  %1527 = getelementptr inbounds i32, i32* %1481, i64 28
  %1528 = bitcast i32* %1527 to <4 x i32>*
  %1529 = load <4 x i32>, <4 x i32>* %1528, align 16, !tbaa !11
  %1530 = getelementptr inbounds i32, i32* %1480, i64 3
  %1531 = load i32, i32* %1530, align 4, !tbaa !33
  %1532 = insertelement <4 x i32> undef, i32 %1531, i32 0
  %1533 = shufflevector <4 x i32> %1532, <4 x i32> undef, <4 x i32> zeroinitializer
  %1534 = mul <4 x i32> %1533, %1526
  %1535 = add <4 x i32> %1521, %1534
  %1536 = mul <4 x i32> %1533, %1529
  %1537 = add <4 x i32> %1523, %1536
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !631
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !632
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !633
  %1538 = getelementptr inbounds i32, i32* %1481, i64 32
  %1539 = bitcast i32* %1538 to <4 x i32>*
  %1540 = load <4 x i32>, <4 x i32>* %1539, align 16, !tbaa !11
  %1541 = getelementptr inbounds i32, i32* %1481, i64 36
  %1542 = bitcast i32* %1541 to <4 x i32>*
  %1543 = load <4 x i32>, <4 x i32>* %1542, align 16, !tbaa !11
  %1544 = getelementptr inbounds i32, i32* %1480, i64 4
  %1545 = load i32, i32* %1544, align 4, !tbaa !33
  %1546 = insertelement <4 x i32> undef, i32 %1545, i32 0
  %1547 = shufflevector <4 x i32> %1546, <4 x i32> undef, <4 x i32> zeroinitializer
  %1548 = mul <4 x i32> %1547, %1540
  %1549 = add <4 x i32> %1535, %1548
  %1550 = mul <4 x i32> %1547, %1543
  %1551 = add <4 x i32> %1537, %1550
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !634
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !635
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !636
  %1552 = getelementptr inbounds i32, i32* %1481, i64 40
  %1553 = bitcast i32* %1552 to <4 x i32>*
  %1554 = load <4 x i32>, <4 x i32>* %1553, align 16, !tbaa !11
  %1555 = getelementptr inbounds i32, i32* %1481, i64 44
  %1556 = bitcast i32* %1555 to <4 x i32>*
  %1557 = load <4 x i32>, <4 x i32>* %1556, align 16, !tbaa !11
  %1558 = getelementptr inbounds i32, i32* %1480, i64 5
  %1559 = load i32, i32* %1558, align 4, !tbaa !33
  %1560 = insertelement <4 x i32> undef, i32 %1559, i32 0
  %1561 = shufflevector <4 x i32> %1560, <4 x i32> undef, <4 x i32> zeroinitializer
  %1562 = mul <4 x i32> %1561, %1554
  %1563 = add <4 x i32> %1549, %1562
  %1564 = mul <4 x i32> %1561, %1557
  %1565 = add <4 x i32> %1551, %1564
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !637
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !638
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !639
  %1566 = getelementptr inbounds i32, i32* %1481, i64 48
  %1567 = bitcast i32* %1566 to <4 x i32>*
  %1568 = load <4 x i32>, <4 x i32>* %1567, align 16, !tbaa !11
  %1569 = getelementptr inbounds i32, i32* %1481, i64 52
  %1570 = bitcast i32* %1569 to <4 x i32>*
  %1571 = load <4 x i32>, <4 x i32>* %1570, align 16, !tbaa !11
  %1572 = getelementptr inbounds i32, i32* %1480, i64 6
  %1573 = load i32, i32* %1572, align 4, !tbaa !33
  %1574 = insertelement <4 x i32> undef, i32 %1573, i32 0
  %1575 = shufflevector <4 x i32> %1574, <4 x i32> undef, <4 x i32> zeroinitializer
  %1576 = mul <4 x i32> %1575, %1568
  %1577 = add <4 x i32> %1563, %1576
  %1578 = mul <4 x i32> %1575, %1571
  %1579 = add <4 x i32> %1565, %1578
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !640
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !641
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !642
  %1580 = getelementptr inbounds i32, i32* %1481, i64 56
  %1581 = bitcast i32* %1580 to <4 x i32>*
  %1582 = load <4 x i32>, <4 x i32>* %1581, align 16, !tbaa !11
  %1583 = getelementptr inbounds i32, i32* %1481, i64 60
  %1584 = bitcast i32* %1583 to <4 x i32>*
  %1585 = load <4 x i32>, <4 x i32>* %1584, align 16, !tbaa !11
  %1586 = getelementptr inbounds i32, i32* %1480, i64 7
  %1587 = load i32, i32* %1586, align 4, !tbaa !33
  %1588 = insertelement <4 x i32> undef, i32 %1587, i32 0
  %1589 = shufflevector <4 x i32> %1588, <4 x i32> undef, <4 x i32> zeroinitializer
  %1590 = mul <4 x i32> %1589, %1582
  %1591 = add <4 x i32> %1577, %1590
  %1592 = mul <4 x i32> %1589, %1585
  %1593 = add <4 x i32> %1579, %1592
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !643
  %1594 = getelementptr inbounds i32, i32* %1480, i64 8
  %1595 = getelementptr inbounds i32, i32* %1481, i64 64
  tail call void asm sideeffect "#end gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !644
  %1596 = add nuw nsw i64 %1479, 8
  %1597 = icmp slt i64 %1596, %26
  br i1 %1597, label %1478, label %1471

; <label>:1598:                                   ; preds = %1613
  br label %1599

; <label>:1599:                                   ; preds = %1598, %1472
  %1600 = phi <4 x i32> [ %1473, %1472 ], [ %1630, %1598 ]
  %1601 = phi <4 x i32> [ %1474, %1472 ], [ %1628, %1598 ]
  %1602 = bitcast i32* %1467 to <4 x i32>*
  %1603 = load <4 x i32>, <4 x i32>* %1602, align 1, !tbaa !11
  %1604 = getelementptr inbounds i32, i32* %1467, i64 4
  %1605 = bitcast i32* %1604 to <4 x i32>*
  %1606 = load <4 x i32>, <4 x i32>* %1605, align 1, !tbaa !11
  %1607 = mul <4 x i32> %1601, %66
  %1608 = add <4 x i32> %1603, %1607
  %1609 = mul <4 x i32> %1600, %66
  %1610 = add <4 x i32> %1606, %1609
  store <4 x i32> %1608, <4 x i32>* %1602, align 1, !tbaa !11
  store <4 x i32> %1610, <4 x i32>* %1605, align 1, !tbaa !11
  %1611 = add nsw i64 %1458, 8
  %1612 = icmp slt i64 %1611, %962
  br i1 %1612, label %1457, label %1453

; <label>:1613:                                   ; preds = %1477, %1613
  %1614 = phi i64 [ %1633, %1613 ], [ %26, %1477 ]
  %1615 = phi i32* [ %1631, %1613 ], [ %1476, %1477 ]
  %1616 = phi i32* [ %1632, %1613 ], [ %1475, %1477 ]
  %1617 = phi <4 x i32> [ %1628, %1613 ], [ %1474, %1477 ]
  %1618 = phi <4 x i32> [ %1630, %1613 ], [ %1473, %1477 ]
  tail call void asm sideeffect "#begin step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !645
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !646
  %1619 = bitcast i32* %1616 to <4 x i32>*
  %1620 = load <4 x i32>, <4 x i32>* %1619, align 16, !tbaa !11
  %1621 = getelementptr inbounds i32, i32* %1616, i64 4
  %1622 = bitcast i32* %1621 to <4 x i32>*
  %1623 = load <4 x i32>, <4 x i32>* %1622, align 16, !tbaa !11
  %1624 = load i32, i32* %1615, align 4, !tbaa !33
  %1625 = insertelement <4 x i32> undef, i32 %1624, i32 0
  %1626 = shufflevector <4 x i32> %1625, <4 x i32> undef, <4 x i32> zeroinitializer
  %1627 = mul <4 x i32> %1626, %1620
  %1628 = add <4 x i32> %1627, %1617
  %1629 = mul <4 x i32> %1626, %1623
  %1630 = add <4 x i32> %1629, %1618
  tail call void asm sideeffect "#end step of gebp micro kernel 2pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !647
  %1631 = getelementptr inbounds i32, i32* %1615, i64 1
  %1632 = getelementptr inbounds i32, i32* %1616, i64 8
  %1633 = add nsw i64 %1614, 1
  %1634 = icmp eq i64 %1633, %5
  br i1 %1634, label %1598, label %1613

; <label>:1635:                                   ; preds = %947, %2024
  %1636 = phi i64 [ %23, %947 ], [ %2025, %2024 ]
  br i1 %948, label %1637, label %1685

; <label>:1637:                                   ; preds = %1635
  %1638 = mul nsw i64 %1636, %14
  %1639 = add nsw i64 %1638, %950
  %1640 = getelementptr inbounds i32, i32* %2, i64 %1639
  %1641 = bitcast i32* %1640 to i8*
  br label %1691

; <label>:1642:                                   ; preds = %2024
  br label %1643

; <label>:1643:                                   ; preds = %1642, %945
  %1644 = icmp slt i64 %25, %4
  br i1 %1644, label %1645, label %2688

; <label>:1645:                                   ; preds = %1643
  %1646 = icmp sgt i64 %6, 3
  br i1 %1646, label %1647, label %2317

; <label>:1647:                                   ; preds = %1645
  %1648 = shl i64 %11, 2
  %1649 = srem i64 %5, 4
  %1650 = sub i64 %5, %1649
  %1651 = icmp sgt i64 %1650, 0
  %1652 = getelementptr inbounds %"class.Eigen::internal::blas_data_mapper.951", %"class.Eigen::internal::blas_data_mapper.951"* %1, i64 0, i32 0
  %1653 = getelementptr inbounds %"class.Eigen::internal::blas_data_mapper.951", %"class.Eigen::internal::blas_data_mapper.951"* %1, i64 0, i32 1
  %1654 = insertelement <4 x i32> undef, i32 %7, i32 0
  %1655 = shufflevector <4 x i32> %1654, <4 x i32> undef, <4 x i32> zeroinitializer
  %1656 = add i64 %5, -1
  %1657 = sub i64 %1656, %1649
  %1658 = lshr i64 %1657, 2
  %1659 = shl i64 %1658, 4
  %1660 = add i64 %1659, %1648
  %1661 = add i64 %1660, 16
  %1662 = getelementptr i32, i32* %3, i64 %1661
  %1663 = shl i64 %16, 2
  %1664 = mul i64 %14, %24
  %1665 = shl i64 %1664, 2
  %1666 = add i64 %1665, %10
  %1667 = shl nuw i64 %1658, 2
  %1668 = add i64 %1666, %1667
  %1669 = add i64 %1668, 4
  %1670 = getelementptr i32, i32* %2, i64 %1669
  %1671 = add i64 %1667, 4
  %1672 = icmp slt i64 %1671, %5
  %1673 = icmp sgt i64 %5, 0
  %1674 = add i64 %5, -1
  %1675 = sub i64 %5, %1667
  %1676 = add i64 %5, -5
  %1677 = sub i64 %1676, %1667
  %1678 = and i64 %1675, 3
  %1679 = icmp eq i64 %1678, 0
  %1680 = icmp ult i64 %1677, 3
  %1681 = and i64 %5, 3
  %1682 = icmp eq i64 %1681, 0
  %1683 = icmp ult i64 %1674, 3
  br label %2148

; <label>:1684:                                   ; preds = %1963
  br label %1685

; <label>:1685:                                   ; preds = %1684, %1635
  br i1 %949, label %1686, label %2024

; <label>:1686:                                   ; preds = %1685
  %1687 = mul nsw i64 %1636, %14
  %1688 = add nsw i64 %1687, %950
  %1689 = getelementptr inbounds i32, i32* %2, i64 %1688
  %1690 = bitcast i32* %1689 to i8*
  br label %2027

; <label>:1691:                                   ; preds = %1637, %1963
  %1692 = phi i64 [ 0, %1637 ], [ %1984, %1963 ]
  tail call void @llvm.prefetch(i8* %1641, i32 0, i32 3, i32 1) #11
  %1693 = load i32*, i32** %951, align 8, !tbaa !529
  %1694 = load i64, i64* %952, align 8, !tbaa !531
  %1695 = mul nsw i64 %1694, %1692
  %1696 = add nsw i64 %1695, %1636
  %1697 = getelementptr inbounds i32, i32* %1693, i64 %1696
  %1698 = or i64 %1692, 1
  %1699 = mul nsw i64 %1694, %1698
  %1700 = add nsw i64 %1699, %1636
  %1701 = getelementptr inbounds i32, i32* %1693, i64 %1700
  %1702 = or i64 %1692, 2
  %1703 = mul nsw i64 %1694, %1702
  %1704 = add nsw i64 %1703, %1636
  %1705 = getelementptr inbounds i32, i32* %1693, i64 %1704
  %1706 = or i64 %1692, 3
  %1707 = mul nsw i64 %1694, %1706
  %1708 = add nsw i64 %1707, %1636
  %1709 = getelementptr inbounds i32, i32* %1693, i64 %1708
  %1710 = getelementptr inbounds i32, i32* %1697, i64 8
  %1711 = bitcast i32* %1710 to i8*
  tail call void @llvm.prefetch(i8* %1711, i32 0, i32 3, i32 1) #11
  %1712 = getelementptr inbounds i32, i32* %1701, i64 8
  %1713 = bitcast i32* %1712 to i8*
  tail call void @llvm.prefetch(i8* %1713, i32 0, i32 3, i32 1) #11
  %1714 = getelementptr inbounds i32, i32* %1705, i64 8
  %1715 = bitcast i32* %1714 to i8*
  tail call void @llvm.prefetch(i8* %1715, i32 0, i32 3, i32 1) #11
  %1716 = getelementptr inbounds i32, i32* %1709, i64 8
  %1717 = bitcast i32* %1716 to i8*
  tail call void @llvm.prefetch(i8* %1717, i32 0, i32 3, i32 1) #11
  %1718 = mul nsw i64 %1692, %16
  %1719 = add nsw i64 %1718, %957
  %1720 = getelementptr inbounds i32, i32* %3, i64 %1719
  %1721 = bitcast i32* %1720 to i8*
  tail call void @llvm.prefetch(i8* %1721, i32 0, i32 3, i32 1) #11
  br i1 %953, label %1722, label %1724

; <label>:1722:                                   ; preds = %1691
  br label %1732

; <label>:1723:                                   ; preds = %1732
  br label %1724

; <label>:1724:                                   ; preds = %1723, %1691
  %1725 = phi <4 x i32> [ zeroinitializer, %1691 ], [ %1951, %1723 ]
  %1726 = phi <4 x i32> [ zeroinitializer, %1691 ], [ %1953, %1723 ]
  %1727 = phi <4 x i32> [ zeroinitializer, %1691 ], [ %1955, %1723 ]
  %1728 = phi <4 x i32> [ zeroinitializer, %1691 ], [ %1957, %1723 ]
  %1729 = phi i32* [ %1640, %1691 ], [ %1959, %1723 ]
  %1730 = phi i32* [ %1720, %1691 ], [ %1958, %1723 ]
  br i1 %954, label %1731, label %1963

; <label>:1731:                                   ; preds = %1724
  br label %1986

; <label>:1732:                                   ; preds = %1722, %1732
  %1733 = phi i64 [ %1960, %1732 ], [ 0, %1722 ]
  %1734 = phi i32* [ %1958, %1732 ], [ %1720, %1722 ]
  %1735 = phi i32* [ %1959, %1732 ], [ %1640, %1722 ]
  %1736 = phi <4 x i32> [ %1957, %1732 ], [ zeroinitializer, %1722 ]
  %1737 = phi <4 x i32> [ %1955, %1732 ], [ zeroinitializer, %1722 ]
  %1738 = phi <4 x i32> [ %1953, %1732 ], [ zeroinitializer, %1722 ]
  %1739 = phi <4 x i32> [ %1951, %1732 ], [ zeroinitializer, %1722 ]
  tail call void asm sideeffect "#begin gebp micro kernel 1pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !648
  %1740 = getelementptr inbounds i32, i32* %1734, i64 48
  %1741 = bitcast i32* %1740 to i8*
  tail call void @llvm.prefetch(i8* %1741, i32 0, i32 3, i32 1) #11
  tail call void asm sideeffect "#begin step of gebp micro kernel 1pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !649
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !650
  %1742 = bitcast i32* %1735 to <4 x i32>*
  %1743 = load <4 x i32>, <4 x i32>* %1742, align 16, !tbaa !11
  %1744 = load i32, i32* %1734, align 4, !tbaa !33
  %1745 = insertelement <4 x i32> undef, i32 %1744, i32 0
  %1746 = shufflevector <4 x i32> %1745, <4 x i32> undef, <4 x i32> zeroinitializer
  %1747 = getelementptr inbounds i32, i32* %1734, i64 1
  %1748 = load i32, i32* %1747, align 4, !tbaa !33
  %1749 = insertelement <4 x i32> undef, i32 %1748, i32 0
  %1750 = shufflevector <4 x i32> %1749, <4 x i32> undef, <4 x i32> zeroinitializer
  %1751 = getelementptr inbounds i32, i32* %1734, i64 2
  %1752 = load i32, i32* %1751, align 4, !tbaa !33
  %1753 = insertelement <4 x i32> undef, i32 %1752, i32 0
  %1754 = shufflevector <4 x i32> %1753, <4 x i32> undef, <4 x i32> zeroinitializer
  %1755 = getelementptr inbounds i32, i32* %1734, i64 3
  %1756 = load i32, i32* %1755, align 4, !tbaa !33
  %1757 = insertelement <4 x i32> undef, i32 %1756, i32 0
  %1758 = shufflevector <4 x i32> %1757, <4 x i32> undef, <4 x i32> zeroinitializer
  %1759 = mul <4 x i32> %1746, %1743
  %1760 = add <4 x i32> %1759, %1739
  %1761 = mul <4 x i32> %1750, %1743
  %1762 = add <4 x i32> %1761, %1738
  %1763 = mul <4 x i32> %1754, %1743
  %1764 = add <4 x i32> %1763, %1737
  %1765 = mul <4 x i32> %1758, %1743
  %1766 = add <4 x i32> %1765, %1736
  tail call void asm sideeffect "#end step of gebp micro kernel 1pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !651
  tail call void asm sideeffect "#begin step of gebp micro kernel 1pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !652
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !653
  %1767 = getelementptr inbounds i32, i32* %1735, i64 4
  %1768 = bitcast i32* %1767 to <4 x i32>*
  %1769 = load <4 x i32>, <4 x i32>* %1768, align 16, !tbaa !11
  %1770 = getelementptr inbounds i32, i32* %1734, i64 4
  %1771 = load i32, i32* %1770, align 4, !tbaa !33
  %1772 = insertelement <4 x i32> undef, i32 %1771, i32 0
  %1773 = shufflevector <4 x i32> %1772, <4 x i32> undef, <4 x i32> zeroinitializer
  %1774 = getelementptr inbounds i32, i32* %1734, i64 5
  %1775 = load i32, i32* %1774, align 4, !tbaa !33
  %1776 = insertelement <4 x i32> undef, i32 %1775, i32 0
  %1777 = shufflevector <4 x i32> %1776, <4 x i32> undef, <4 x i32> zeroinitializer
  %1778 = getelementptr inbounds i32, i32* %1734, i64 6
  %1779 = load i32, i32* %1778, align 4, !tbaa !33
  %1780 = insertelement <4 x i32> undef, i32 %1779, i32 0
  %1781 = shufflevector <4 x i32> %1780, <4 x i32> undef, <4 x i32> zeroinitializer
  %1782 = getelementptr inbounds i32, i32* %1734, i64 7
  %1783 = load i32, i32* %1782, align 4, !tbaa !33
  %1784 = insertelement <4 x i32> undef, i32 %1783, i32 0
  %1785 = shufflevector <4 x i32> %1784, <4 x i32> undef, <4 x i32> zeroinitializer
  %1786 = mul <4 x i32> %1773, %1769
  %1787 = add <4 x i32> %1760, %1786
  %1788 = mul <4 x i32> %1777, %1769
  %1789 = add <4 x i32> %1762, %1788
  %1790 = mul <4 x i32> %1781, %1769
  %1791 = add <4 x i32> %1764, %1790
  %1792 = mul <4 x i32> %1785, %1769
  %1793 = add <4 x i32> %1766, %1792
  tail call void asm sideeffect "#end step of gebp micro kernel 1pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !654
  tail call void asm sideeffect "#begin step of gebp micro kernel 1pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !655
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !656
  %1794 = getelementptr inbounds i32, i32* %1735, i64 8
  %1795 = bitcast i32* %1794 to <4 x i32>*
  %1796 = load <4 x i32>, <4 x i32>* %1795, align 16, !tbaa !11
  %1797 = getelementptr inbounds i32, i32* %1734, i64 8
  %1798 = load i32, i32* %1797, align 4, !tbaa !33
  %1799 = insertelement <4 x i32> undef, i32 %1798, i32 0
  %1800 = shufflevector <4 x i32> %1799, <4 x i32> undef, <4 x i32> zeroinitializer
  %1801 = getelementptr inbounds i32, i32* %1734, i64 9
  %1802 = load i32, i32* %1801, align 4, !tbaa !33
  %1803 = insertelement <4 x i32> undef, i32 %1802, i32 0
  %1804 = shufflevector <4 x i32> %1803, <4 x i32> undef, <4 x i32> zeroinitializer
  %1805 = getelementptr inbounds i32, i32* %1734, i64 10
  %1806 = load i32, i32* %1805, align 4, !tbaa !33
  %1807 = insertelement <4 x i32> undef, i32 %1806, i32 0
  %1808 = shufflevector <4 x i32> %1807, <4 x i32> undef, <4 x i32> zeroinitializer
  %1809 = getelementptr inbounds i32, i32* %1734, i64 11
  %1810 = load i32, i32* %1809, align 4, !tbaa !33
  %1811 = insertelement <4 x i32> undef, i32 %1810, i32 0
  %1812 = shufflevector <4 x i32> %1811, <4 x i32> undef, <4 x i32> zeroinitializer
  %1813 = mul <4 x i32> %1800, %1796
  %1814 = add <4 x i32> %1787, %1813
  %1815 = mul <4 x i32> %1804, %1796
  %1816 = add <4 x i32> %1789, %1815
  %1817 = mul <4 x i32> %1808, %1796
  %1818 = add <4 x i32> %1791, %1817
  %1819 = mul <4 x i32> %1812, %1796
  %1820 = add <4 x i32> %1793, %1819
  tail call void asm sideeffect "#end step of gebp micro kernel 1pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !657
  tail call void asm sideeffect "#begin step of gebp micro kernel 1pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !658
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !659
  %1821 = getelementptr inbounds i32, i32* %1735, i64 12
  %1822 = bitcast i32* %1821 to <4 x i32>*
  %1823 = load <4 x i32>, <4 x i32>* %1822, align 16, !tbaa !11
  %1824 = getelementptr inbounds i32, i32* %1734, i64 12
  %1825 = load i32, i32* %1824, align 4, !tbaa !33
  %1826 = insertelement <4 x i32> undef, i32 %1825, i32 0
  %1827 = shufflevector <4 x i32> %1826, <4 x i32> undef, <4 x i32> zeroinitializer
  %1828 = getelementptr inbounds i32, i32* %1734, i64 13
  %1829 = load i32, i32* %1828, align 4, !tbaa !33
  %1830 = insertelement <4 x i32> undef, i32 %1829, i32 0
  %1831 = shufflevector <4 x i32> %1830, <4 x i32> undef, <4 x i32> zeroinitializer
  %1832 = getelementptr inbounds i32, i32* %1734, i64 14
  %1833 = load i32, i32* %1832, align 4, !tbaa !33
  %1834 = insertelement <4 x i32> undef, i32 %1833, i32 0
  %1835 = shufflevector <4 x i32> %1834, <4 x i32> undef, <4 x i32> zeroinitializer
  %1836 = getelementptr inbounds i32, i32* %1734, i64 15
  %1837 = load i32, i32* %1836, align 4, !tbaa !33
  %1838 = insertelement <4 x i32> undef, i32 %1837, i32 0
  %1839 = shufflevector <4 x i32> %1838, <4 x i32> undef, <4 x i32> zeroinitializer
  %1840 = mul <4 x i32> %1827, %1823
  %1841 = add <4 x i32> %1814, %1840
  %1842 = mul <4 x i32> %1831, %1823
  %1843 = add <4 x i32> %1816, %1842
  %1844 = mul <4 x i32> %1835, %1823
  %1845 = add <4 x i32> %1818, %1844
  %1846 = mul <4 x i32> %1839, %1823
  %1847 = add <4 x i32> %1820, %1846
  tail call void asm sideeffect "#end step of gebp micro kernel 1pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !660
  %1848 = getelementptr inbounds i32, i32* %1734, i64 64
  %1849 = bitcast i32* %1848 to i8*
  tail call void @llvm.prefetch(i8* %1849, i32 0, i32 3, i32 1) #11
  tail call void asm sideeffect "#begin step of gebp micro kernel 1pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !661
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !662
  %1850 = getelementptr inbounds i32, i32* %1735, i64 16
  %1851 = bitcast i32* %1850 to <4 x i32>*
  %1852 = load <4 x i32>, <4 x i32>* %1851, align 16, !tbaa !11
  %1853 = getelementptr inbounds i32, i32* %1734, i64 16
  %1854 = load i32, i32* %1853, align 4, !tbaa !33
  %1855 = insertelement <4 x i32> undef, i32 %1854, i32 0
  %1856 = shufflevector <4 x i32> %1855, <4 x i32> undef, <4 x i32> zeroinitializer
  %1857 = getelementptr inbounds i32, i32* %1734, i64 17
  %1858 = load i32, i32* %1857, align 4, !tbaa !33
  %1859 = insertelement <4 x i32> undef, i32 %1858, i32 0
  %1860 = shufflevector <4 x i32> %1859, <4 x i32> undef, <4 x i32> zeroinitializer
  %1861 = getelementptr inbounds i32, i32* %1734, i64 18
  %1862 = load i32, i32* %1861, align 4, !tbaa !33
  %1863 = insertelement <4 x i32> undef, i32 %1862, i32 0
  %1864 = shufflevector <4 x i32> %1863, <4 x i32> undef, <4 x i32> zeroinitializer
  %1865 = getelementptr inbounds i32, i32* %1734, i64 19
  %1866 = load i32, i32* %1865, align 4, !tbaa !33
  %1867 = insertelement <4 x i32> undef, i32 %1866, i32 0
  %1868 = shufflevector <4 x i32> %1867, <4 x i32> undef, <4 x i32> zeroinitializer
  %1869 = mul <4 x i32> %1856, %1852
  %1870 = add <4 x i32> %1841, %1869
  %1871 = mul <4 x i32> %1860, %1852
  %1872 = add <4 x i32> %1843, %1871
  %1873 = mul <4 x i32> %1864, %1852
  %1874 = add <4 x i32> %1845, %1873
  %1875 = mul <4 x i32> %1868, %1852
  %1876 = add <4 x i32> %1847, %1875
  tail call void asm sideeffect "#end step of gebp micro kernel 1pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !663
  tail call void asm sideeffect "#begin step of gebp micro kernel 1pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !664
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !665
  %1877 = getelementptr inbounds i32, i32* %1735, i64 20
  %1878 = bitcast i32* %1877 to <4 x i32>*
  %1879 = load <4 x i32>, <4 x i32>* %1878, align 16, !tbaa !11
  %1880 = getelementptr inbounds i32, i32* %1734, i64 20
  %1881 = load i32, i32* %1880, align 4, !tbaa !33
  %1882 = insertelement <4 x i32> undef, i32 %1881, i32 0
  %1883 = shufflevector <4 x i32> %1882, <4 x i32> undef, <4 x i32> zeroinitializer
  %1884 = getelementptr inbounds i32, i32* %1734, i64 21
  %1885 = load i32, i32* %1884, align 4, !tbaa !33
  %1886 = insertelement <4 x i32> undef, i32 %1885, i32 0
  %1887 = shufflevector <4 x i32> %1886, <4 x i32> undef, <4 x i32> zeroinitializer
  %1888 = getelementptr inbounds i32, i32* %1734, i64 22
  %1889 = load i32, i32* %1888, align 4, !tbaa !33
  %1890 = insertelement <4 x i32> undef, i32 %1889, i32 0
  %1891 = shufflevector <4 x i32> %1890, <4 x i32> undef, <4 x i32> zeroinitializer
  %1892 = getelementptr inbounds i32, i32* %1734, i64 23
  %1893 = load i32, i32* %1892, align 4, !tbaa !33
  %1894 = insertelement <4 x i32> undef, i32 %1893, i32 0
  %1895 = shufflevector <4 x i32> %1894, <4 x i32> undef, <4 x i32> zeroinitializer
  %1896 = mul <4 x i32> %1883, %1879
  %1897 = add <4 x i32> %1870, %1896
  %1898 = mul <4 x i32> %1887, %1879
  %1899 = add <4 x i32> %1872, %1898
  %1900 = mul <4 x i32> %1891, %1879
  %1901 = add <4 x i32> %1874, %1900
  %1902 = mul <4 x i32> %1895, %1879
  %1903 = add <4 x i32> %1876, %1902
  tail call void asm sideeffect "#end step of gebp micro kernel 1pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !666
  tail call void asm sideeffect "#begin step of gebp micro kernel 1pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !667
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !668
  %1904 = getelementptr inbounds i32, i32* %1735, i64 24
  %1905 = bitcast i32* %1904 to <4 x i32>*
  %1906 = load <4 x i32>, <4 x i32>* %1905, align 16, !tbaa !11
  %1907 = getelementptr inbounds i32, i32* %1734, i64 24
  %1908 = load i32, i32* %1907, align 4, !tbaa !33
  %1909 = insertelement <4 x i32> undef, i32 %1908, i32 0
  %1910 = shufflevector <4 x i32> %1909, <4 x i32> undef, <4 x i32> zeroinitializer
  %1911 = getelementptr inbounds i32, i32* %1734, i64 25
  %1912 = load i32, i32* %1911, align 4, !tbaa !33
  %1913 = insertelement <4 x i32> undef, i32 %1912, i32 0
  %1914 = shufflevector <4 x i32> %1913, <4 x i32> undef, <4 x i32> zeroinitializer
  %1915 = getelementptr inbounds i32, i32* %1734, i64 26
  %1916 = load i32, i32* %1915, align 4, !tbaa !33
  %1917 = insertelement <4 x i32> undef, i32 %1916, i32 0
  %1918 = shufflevector <4 x i32> %1917, <4 x i32> undef, <4 x i32> zeroinitializer
  %1919 = getelementptr inbounds i32, i32* %1734, i64 27
  %1920 = load i32, i32* %1919, align 4, !tbaa !33
  %1921 = insertelement <4 x i32> undef, i32 %1920, i32 0
  %1922 = shufflevector <4 x i32> %1921, <4 x i32> undef, <4 x i32> zeroinitializer
  %1923 = mul <4 x i32> %1910, %1906
  %1924 = add <4 x i32> %1897, %1923
  %1925 = mul <4 x i32> %1914, %1906
  %1926 = add <4 x i32> %1899, %1925
  %1927 = mul <4 x i32> %1918, %1906
  %1928 = add <4 x i32> %1901, %1927
  %1929 = mul <4 x i32> %1922, %1906
  %1930 = add <4 x i32> %1903, %1929
  tail call void asm sideeffect "#end step of gebp micro kernel 1pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !669
  tail call void asm sideeffect "#begin step of gebp micro kernel 1pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !670
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !671
  %1931 = getelementptr inbounds i32, i32* %1735, i64 28
  %1932 = bitcast i32* %1931 to <4 x i32>*
  %1933 = load <4 x i32>, <4 x i32>* %1932, align 16, !tbaa !11
  %1934 = getelementptr inbounds i32, i32* %1734, i64 28
  %1935 = load i32, i32* %1934, align 4, !tbaa !33
  %1936 = insertelement <4 x i32> undef, i32 %1935, i32 0
  %1937 = shufflevector <4 x i32> %1936, <4 x i32> undef, <4 x i32> zeroinitializer
  %1938 = getelementptr inbounds i32, i32* %1734, i64 29
  %1939 = load i32, i32* %1938, align 4, !tbaa !33
  %1940 = insertelement <4 x i32> undef, i32 %1939, i32 0
  %1941 = shufflevector <4 x i32> %1940, <4 x i32> undef, <4 x i32> zeroinitializer
  %1942 = getelementptr inbounds i32, i32* %1734, i64 30
  %1943 = load i32, i32* %1942, align 4, !tbaa !33
  %1944 = insertelement <4 x i32> undef, i32 %1943, i32 0
  %1945 = shufflevector <4 x i32> %1944, <4 x i32> undef, <4 x i32> zeroinitializer
  %1946 = getelementptr inbounds i32, i32* %1734, i64 31
  %1947 = load i32, i32* %1946, align 4, !tbaa !33
  %1948 = insertelement <4 x i32> undef, i32 %1947, i32 0
  %1949 = shufflevector <4 x i32> %1948, <4 x i32> undef, <4 x i32> zeroinitializer
  %1950 = mul <4 x i32> %1937, %1933
  %1951 = add <4 x i32> %1924, %1950
  %1952 = mul <4 x i32> %1941, %1933
  %1953 = add <4 x i32> %1926, %1952
  %1954 = mul <4 x i32> %1945, %1933
  %1955 = add <4 x i32> %1928, %1954
  %1956 = mul <4 x i32> %1949, %1933
  %1957 = add <4 x i32> %1930, %1956
  tail call void asm sideeffect "#end step of gebp micro kernel 1pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !672
  %1958 = getelementptr inbounds i32, i32* %1734, i64 32
  %1959 = getelementptr inbounds i32, i32* %1735, i64 32
  tail call void asm sideeffect "#end gebp micro kernel 1pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !673
  %1960 = add nuw nsw i64 %1733, 8
  %1961 = icmp slt i64 %1960, %26
  br i1 %1961, label %1732, label %1723

; <label>:1962:                                   ; preds = %1986
  br label %1963

; <label>:1963:                                   ; preds = %1962, %1724
  %1964 = phi <4 x i32> [ %1725, %1724 ], [ %2012, %1962 ]
  %1965 = phi <4 x i32> [ %1726, %1724 ], [ %2014, %1962 ]
  %1966 = phi <4 x i32> [ %1727, %1724 ], [ %2016, %1962 ]
  %1967 = phi <4 x i32> [ %1728, %1724 ], [ %2018, %1962 ]
  %1968 = bitcast i32* %1697 to <4 x i32>*
  %1969 = load <4 x i32>, <4 x i32>* %1968, align 1, !tbaa !11
  %1970 = bitcast i32* %1701 to <4 x i32>*
  %1971 = load <4 x i32>, <4 x i32>* %1970, align 1, !tbaa !11
  %1972 = mul <4 x i32> %1964, %956
  %1973 = add <4 x i32> %1969, %1972
  %1974 = mul <4 x i32> %1965, %956
  %1975 = add <4 x i32> %1971, %1974
  store <4 x i32> %1973, <4 x i32>* %1968, align 1, !tbaa !11
  store <4 x i32> %1975, <4 x i32>* %1970, align 1, !tbaa !11
  %1976 = bitcast i32* %1705 to <4 x i32>*
  %1977 = load <4 x i32>, <4 x i32>* %1976, align 1, !tbaa !11
  %1978 = bitcast i32* %1709 to <4 x i32>*
  %1979 = load <4 x i32>, <4 x i32>* %1978, align 1, !tbaa !11
  %1980 = mul <4 x i32> %1966, %956
  %1981 = add <4 x i32> %1977, %1980
  %1982 = mul <4 x i32> %1967, %956
  %1983 = add <4 x i32> %1979, %1982
  store <4 x i32> %1981, <4 x i32>* %1976, align 1, !tbaa !11
  store <4 x i32> %1983, <4 x i32>* %1978, align 1, !tbaa !11
  %1984 = add nuw nsw i64 %1692, 4
  %1985 = icmp slt i64 %1984, %18
  br i1 %1985, label %1691, label %1684

; <label>:1986:                                   ; preds = %1731, %1986
  %1987 = phi i64 [ %2021, %1986 ], [ %26, %1731 ]
  %1988 = phi i32* [ %2019, %1986 ], [ %1730, %1731 ]
  %1989 = phi i32* [ %2020, %1986 ], [ %1729, %1731 ]
  %1990 = phi <4 x i32> [ %2018, %1986 ], [ %1728, %1731 ]
  %1991 = phi <4 x i32> [ %2016, %1986 ], [ %1727, %1731 ]
  %1992 = phi <4 x i32> [ %2014, %1986 ], [ %1726, %1731 ]
  %1993 = phi <4 x i32> [ %2012, %1986 ], [ %1725, %1731 ]
  tail call void asm sideeffect "#begin step of gebp micro kernel 1pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !674
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !675
  %1994 = bitcast i32* %1989 to <4 x i32>*
  %1995 = load <4 x i32>, <4 x i32>* %1994, align 16, !tbaa !11
  %1996 = load i32, i32* %1988, align 4, !tbaa !33
  %1997 = insertelement <4 x i32> undef, i32 %1996, i32 0
  %1998 = shufflevector <4 x i32> %1997, <4 x i32> undef, <4 x i32> zeroinitializer
  %1999 = getelementptr inbounds i32, i32* %1988, i64 1
  %2000 = load i32, i32* %1999, align 4, !tbaa !33
  %2001 = insertelement <4 x i32> undef, i32 %2000, i32 0
  %2002 = shufflevector <4 x i32> %2001, <4 x i32> undef, <4 x i32> zeroinitializer
  %2003 = getelementptr inbounds i32, i32* %1988, i64 2
  %2004 = load i32, i32* %2003, align 4, !tbaa !33
  %2005 = insertelement <4 x i32> undef, i32 %2004, i32 0
  %2006 = shufflevector <4 x i32> %2005, <4 x i32> undef, <4 x i32> zeroinitializer
  %2007 = getelementptr inbounds i32, i32* %1988, i64 3
  %2008 = load i32, i32* %2007, align 4, !tbaa !33
  %2009 = insertelement <4 x i32> undef, i32 %2008, i32 0
  %2010 = shufflevector <4 x i32> %2009, <4 x i32> undef, <4 x i32> zeroinitializer
  %2011 = mul <4 x i32> %1998, %1995
  %2012 = add <4 x i32> %2011, %1993
  %2013 = mul <4 x i32> %2002, %1995
  %2014 = add <4 x i32> %2013, %1992
  %2015 = mul <4 x i32> %2006, %1995
  %2016 = add <4 x i32> %2015, %1991
  %2017 = mul <4 x i32> %2010, %1995
  %2018 = add <4 x i32> %2017, %1990
  tail call void asm sideeffect "#end step of gebp micro kernel 1pX4", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !676
  %2019 = getelementptr inbounds i32, i32* %1988, i64 4
  %2020 = getelementptr inbounds i32, i32* %1989, i64 4
  %2021 = add nsw i64 %1987, 1
  %2022 = icmp eq i64 %2021, %5
  br i1 %2022, label %1962, label %1986

; <label>:2023:                                   ; preds = %2124
  br label %2024

; <label>:2024:                                   ; preds = %2023, %1685
  %2025 = add nsw i64 %1636, 4
  %2026 = icmp slt i64 %2025, %25
  br i1 %2026, label %1635, label %1642

; <label>:2027:                                   ; preds = %2124, %1686
  %2028 = phi i64 [ %18, %1686 ], [ %2130, %2124 ]
  tail call void @llvm.prefetch(i8* %1690, i32 0, i32 3, i32 1) #11
  %2029 = load i32*, i32** %951, align 8, !tbaa !529
  %2030 = load i64, i64* %952, align 8, !tbaa !531
  %2031 = mul nsw i64 %2030, %2028
  %2032 = add nsw i64 %2031, %1636
  %2033 = getelementptr inbounds i32, i32* %2029, i64 %2032
  %2034 = mul nsw i64 %2028, %16
  %2035 = add nsw i64 %2034, %11
  %2036 = getelementptr inbounds i32, i32* %3, i64 %2035
  br i1 %953, label %2037, label %2039

; <label>:2037:                                   ; preds = %2027
  br label %2044

; <label>:2038:                                   ; preds = %2044
  br label %2039

; <label>:2039:                                   ; preds = %2038, %2027
  %2040 = phi <4 x i32> [ zeroinitializer, %2027 ], [ %2118, %2038 ]
  %2041 = phi i32* [ %1689, %2027 ], [ %2120, %2038 ]
  %2042 = phi i32* [ %2036, %2027 ], [ %2119, %2038 ]
  br i1 %954, label %2043, label %2124

; <label>:2043:                                   ; preds = %2039
  br label %2132

; <label>:2044:                                   ; preds = %2037, %2044
  %2045 = phi i64 [ %2121, %2044 ], [ 0, %2037 ]
  %2046 = phi i32* [ %2119, %2044 ], [ %2036, %2037 ]
  %2047 = phi i32* [ %2120, %2044 ], [ %1689, %2037 ]
  %2048 = phi <4 x i32> [ %2118, %2044 ], [ zeroinitializer, %2037 ]
  tail call void asm sideeffect "#begin gebp micro kernel 1pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !677
  tail call void asm sideeffect "#begin step of gebp micro kernel 1pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !678
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !679
  %2049 = bitcast i32* %2047 to <4 x i32>*
  %2050 = load <4 x i32>, <4 x i32>* %2049, align 16, !tbaa !11
  %2051 = load i32, i32* %2046, align 4, !tbaa !33
  %2052 = insertelement <4 x i32> undef, i32 %2051, i32 0
  %2053 = shufflevector <4 x i32> %2052, <4 x i32> undef, <4 x i32> zeroinitializer
  %2054 = mul <4 x i32> %2053, %2050
  %2055 = add <4 x i32> %2054, %2048
  tail call void asm sideeffect "#end step of gebp micro kernel 1pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !680
  tail call void asm sideeffect "#begin step of gebp micro kernel 1pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !681
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !682
  %2056 = getelementptr inbounds i32, i32* %2047, i64 4
  %2057 = bitcast i32* %2056 to <4 x i32>*
  %2058 = load <4 x i32>, <4 x i32>* %2057, align 16, !tbaa !11
  %2059 = getelementptr inbounds i32, i32* %2046, i64 1
  %2060 = load i32, i32* %2059, align 4, !tbaa !33
  %2061 = insertelement <4 x i32> undef, i32 %2060, i32 0
  %2062 = shufflevector <4 x i32> %2061, <4 x i32> undef, <4 x i32> zeroinitializer
  %2063 = mul <4 x i32> %2062, %2058
  %2064 = add <4 x i32> %2055, %2063
  tail call void asm sideeffect "#end step of gebp micro kernel 1pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !683
  tail call void asm sideeffect "#begin step of gebp micro kernel 1pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !684
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !685
  %2065 = getelementptr inbounds i32, i32* %2047, i64 8
  %2066 = bitcast i32* %2065 to <4 x i32>*
  %2067 = load <4 x i32>, <4 x i32>* %2066, align 16, !tbaa !11
  %2068 = getelementptr inbounds i32, i32* %2046, i64 2
  %2069 = load i32, i32* %2068, align 4, !tbaa !33
  %2070 = insertelement <4 x i32> undef, i32 %2069, i32 0
  %2071 = shufflevector <4 x i32> %2070, <4 x i32> undef, <4 x i32> zeroinitializer
  %2072 = mul <4 x i32> %2071, %2067
  %2073 = add <4 x i32> %2064, %2072
  tail call void asm sideeffect "#end step of gebp micro kernel 1pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !686
  tail call void asm sideeffect "#begin step of gebp micro kernel 1pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !687
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !688
  %2074 = getelementptr inbounds i32, i32* %2047, i64 12
  %2075 = bitcast i32* %2074 to <4 x i32>*
  %2076 = load <4 x i32>, <4 x i32>* %2075, align 16, !tbaa !11
  %2077 = getelementptr inbounds i32, i32* %2046, i64 3
  %2078 = load i32, i32* %2077, align 4, !tbaa !33
  %2079 = insertelement <4 x i32> undef, i32 %2078, i32 0
  %2080 = shufflevector <4 x i32> %2079, <4 x i32> undef, <4 x i32> zeroinitializer
  %2081 = mul <4 x i32> %2080, %2076
  %2082 = add <4 x i32> %2073, %2081
  tail call void asm sideeffect "#end step of gebp micro kernel 1pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !689
  tail call void asm sideeffect "#begin step of gebp micro kernel 1pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !690
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !691
  %2083 = getelementptr inbounds i32, i32* %2047, i64 16
  %2084 = bitcast i32* %2083 to <4 x i32>*
  %2085 = load <4 x i32>, <4 x i32>* %2084, align 16, !tbaa !11
  %2086 = getelementptr inbounds i32, i32* %2046, i64 4
  %2087 = load i32, i32* %2086, align 4, !tbaa !33
  %2088 = insertelement <4 x i32> undef, i32 %2087, i32 0
  %2089 = shufflevector <4 x i32> %2088, <4 x i32> undef, <4 x i32> zeroinitializer
  %2090 = mul <4 x i32> %2089, %2085
  %2091 = add <4 x i32> %2082, %2090
  tail call void asm sideeffect "#end step of gebp micro kernel 1pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !692
  tail call void asm sideeffect "#begin step of gebp micro kernel 1pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !693
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !694
  %2092 = getelementptr inbounds i32, i32* %2047, i64 20
  %2093 = bitcast i32* %2092 to <4 x i32>*
  %2094 = load <4 x i32>, <4 x i32>* %2093, align 16, !tbaa !11
  %2095 = getelementptr inbounds i32, i32* %2046, i64 5
  %2096 = load i32, i32* %2095, align 4, !tbaa !33
  %2097 = insertelement <4 x i32> undef, i32 %2096, i32 0
  %2098 = shufflevector <4 x i32> %2097, <4 x i32> undef, <4 x i32> zeroinitializer
  %2099 = mul <4 x i32> %2098, %2094
  %2100 = add <4 x i32> %2091, %2099
  tail call void asm sideeffect "#end step of gebp micro kernel 1pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !695
  tail call void asm sideeffect "#begin step of gebp micro kernel 1pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !696
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !697
  %2101 = getelementptr inbounds i32, i32* %2047, i64 24
  %2102 = bitcast i32* %2101 to <4 x i32>*
  %2103 = load <4 x i32>, <4 x i32>* %2102, align 16, !tbaa !11
  %2104 = getelementptr inbounds i32, i32* %2046, i64 6
  %2105 = load i32, i32* %2104, align 4, !tbaa !33
  %2106 = insertelement <4 x i32> undef, i32 %2105, i32 0
  %2107 = shufflevector <4 x i32> %2106, <4 x i32> undef, <4 x i32> zeroinitializer
  %2108 = mul <4 x i32> %2107, %2103
  %2109 = add <4 x i32> %2100, %2108
  tail call void asm sideeffect "#end step of gebp micro kernel 1pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !698
  tail call void asm sideeffect "#begin step of gebp micro kernel 1pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !699
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !700
  %2110 = getelementptr inbounds i32, i32* %2047, i64 28
  %2111 = bitcast i32* %2110 to <4 x i32>*
  %2112 = load <4 x i32>, <4 x i32>* %2111, align 16, !tbaa !11
  %2113 = getelementptr inbounds i32, i32* %2046, i64 7
  %2114 = load i32, i32* %2113, align 4, !tbaa !33
  %2115 = insertelement <4 x i32> undef, i32 %2114, i32 0
  %2116 = shufflevector <4 x i32> %2115, <4 x i32> undef, <4 x i32> zeroinitializer
  %2117 = mul <4 x i32> %2116, %2112
  %2118 = add <4 x i32> %2109, %2117
  tail call void asm sideeffect "#end step of gebp micro kernel 1pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !701
  %2119 = getelementptr inbounds i32, i32* %2046, i64 8
  %2120 = getelementptr inbounds i32, i32* %2047, i64 32
  tail call void asm sideeffect "#end gebp micro kernel 1pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !702
  %2121 = add nuw nsw i64 %2045, 8
  %2122 = icmp slt i64 %2121, %26
  br i1 %2122, label %2044, label %2038

; <label>:2123:                                   ; preds = %2132
  br label %2124

; <label>:2124:                                   ; preds = %2123, %2039
  %2125 = phi <4 x i32> [ %2040, %2039 ], [ %2143, %2123 ]
  %2126 = bitcast i32* %2033 to <4 x i32>*
  %2127 = load <4 x i32>, <4 x i32>* %2126, align 1, !tbaa !11
  %2128 = mul <4 x i32> %2125, %956
  %2129 = add <4 x i32> %2127, %2128
  store <4 x i32> %2129, <4 x i32>* %2126, align 1, !tbaa !11
  %2130 = add nsw i64 %2028, 1
  %2131 = icmp eq i64 %2130, %6
  br i1 %2131, label %2023, label %2027

; <label>:2132:                                   ; preds = %2043, %2132
  %2133 = phi i64 [ %2146, %2132 ], [ %26, %2043 ]
  %2134 = phi i32* [ %2144, %2132 ], [ %2042, %2043 ]
  %2135 = phi i32* [ %2145, %2132 ], [ %2041, %2043 ]
  %2136 = phi <4 x i32> [ %2143, %2132 ], [ %2040, %2043 ]
  tail call void asm sideeffect "#begin step of gebp micro kernel 1pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !703
  tail call void asm sideeffect "#Note: these asm comments work around bug 935!", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !704
  %2137 = bitcast i32* %2135 to <4 x i32>*
  %2138 = load <4 x i32>, <4 x i32>* %2137, align 16, !tbaa !11
  %2139 = load i32, i32* %2134, align 4, !tbaa !33
  %2140 = insertelement <4 x i32> undef, i32 %2139, i32 0
  %2141 = shufflevector <4 x i32> %2140, <4 x i32> undef, <4 x i32> zeroinitializer
  %2142 = mul <4 x i32> %2141, %2138
  %2143 = add <4 x i32> %2142, %2136
  tail call void asm sideeffect "#end step of gebp micro kernel 1pX1", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !705
  %2144 = getelementptr inbounds i32, i32* %2134, i64 1
  %2145 = getelementptr inbounds i32, i32* %2135, i64 4
  %2146 = add nsw i64 %2133, 1
  %2147 = icmp eq i64 %2146, %5
  br i1 %2147, label %2123, label %2132

; <label>:2148:                                   ; preds = %2575, %1647
  %2149 = phi i32* [ %1662, %1647 ], [ %2578, %2575 ]
  %2150 = phi i64 [ 0, %1647 ], [ %2576, %2575 ]
  %2151 = mul nsw i64 %2150, %16
  %2152 = add nsw i64 %2151, %1648
  %2153 = getelementptr inbounds i32, i32* %3, i64 %2152
  br i1 %1651, label %2155, label %2154

; <label>:2154:                                   ; preds = %2148
  br label %2579

; <label>:2155:                                   ; preds = %2148
  br label %2156

; <label>:2156:                                   ; preds = %2155, %2166
  %2157 = phi i32* [ %2193, %2166 ], [ %1670, %2155 ]
  %2158 = phi i64 [ %2192, %2166 ], [ %25, %2155 ]
  %2159 = mul nsw i64 %2158, %14
  %2160 = add nsw i64 %2159, %10
  %2161 = getelementptr inbounds i32, i32* %2, i64 %2160
  %2162 = bitcast i32* %2161 to i8*
  tail call void @llvm.prefetch(i8* %2162, i32 0, i32 3, i32 1) #11
  br label %2238

; <label>:2163:                                   ; preds = %2195
  br label %2164

; <label>:2164:                                   ; preds = %2309, %2163
  %2165 = phi <4 x i32> [ %2310, %2309 ], [ %2233, %2163 ]
  br label %2166

; <label>:2166:                                   ; preds = %2164, %2284
  %2167 = phi <4 x i32> [ %2287, %2284 ], [ %2165, %2164 ]
  %2168 = load i32*, i32** %1652, align 8, !tbaa !529
  %2169 = load i64, i64* %1653, align 8, !tbaa !531
  %2170 = mul nsw i64 %2169, %2150
  %2171 = add nsw i64 %2170, %2158
  %2172 = getelementptr inbounds i32, i32* %2168, i64 %2171
  %2173 = mul nsw i64 %2169, 3
  %2174 = getelementptr inbounds i32, i32* %2172, i64 %2173
  %2175 = load i32, i32* %2174, align 4, !tbaa !33
  %2176 = shl nsw i64 %2169, 1
  %2177 = getelementptr inbounds i32, i32* %2172, i64 %2176
  %2178 = load i32, i32* %2177, align 4, !tbaa !33
  %2179 = getelementptr inbounds i32, i32* %2172, i64 %2169
  %2180 = load i32, i32* %2179, align 4, !tbaa !33
  %2181 = load i32, i32* %2172, align 4, !tbaa !33
  %2182 = insertelement <4 x i32> undef, i32 %2181, i32 0
  %2183 = insertelement <4 x i32> %2182, i32 %2180, i32 1
  %2184 = insertelement <4 x i32> %2183, i32 %2178, i32 2
  %2185 = insertelement <4 x i32> %2184, i32 %2175, i32 3
  %2186 = mul <4 x i32> %2167, %1655
  %2187 = add <4 x i32> %2185, %2186
  %2188 = extractelement <4 x i32> %2187, i32 0
  store i32 %2188, i32* %2172, align 4, !tbaa !33
  %2189 = extractelement <4 x i32> %2187, i32 1
  store i32 %2189, i32* %2179, align 4, !tbaa !33
  %2190 = extractelement <4 x i32> %2187, i32 2
  store i32 %2190, i32* %2177, align 4, !tbaa !33
  %2191 = extractelement <4 x i32> %2187, i32 3
  store i32 %2191, i32* %2174, align 4, !tbaa !33
  %2192 = add nsw i64 %2158, 1
  %2193 = getelementptr i32, i32* %2157, i64 %14
  %2194 = icmp eq i64 %2192, %4
  br i1 %2194, label %2573, label %2156

; <label>:2195:                                   ; preds = %2195, %2315
  %2196 = phi i64 [ %2311, %2315 ], [ %2236, %2195 ]
  %2197 = phi i32* [ %2312, %2315 ], [ %2234, %2195 ]
  %2198 = phi i32* [ %2313, %2315 ], [ %2235, %2195 ]
  %2199 = phi <4 x i32> [ %2314, %2315 ], [ %2233, %2195 ]
  %2200 = bitcast i32* %2197 to <4 x i32>*
  %2201 = load <4 x i32>, <4 x i32>* %2200, align 1, !tbaa !11
  %2202 = load i32, i32* %2198, align 4, !tbaa !33
  %2203 = insertelement <4 x i32> undef, i32 %2202, i32 0
  %2204 = shufflevector <4 x i32> %2203, <4 x i32> undef, <4 x i32> zeroinitializer
  %2205 = mul <4 x i32> %2204, %2201
  %2206 = add <4 x i32> %2205, %2199
  %2207 = getelementptr inbounds i32, i32* %2197, i64 4
  %2208 = getelementptr inbounds i32, i32* %2198, i64 1
  %2209 = bitcast i32* %2207 to <4 x i32>*
  %2210 = load <4 x i32>, <4 x i32>* %2209, align 1, !tbaa !11
  %2211 = load i32, i32* %2208, align 4, !tbaa !33
  %2212 = insertelement <4 x i32> undef, i32 %2211, i32 0
  %2213 = shufflevector <4 x i32> %2212, <4 x i32> undef, <4 x i32> zeroinitializer
  %2214 = mul <4 x i32> %2213, %2210
  %2215 = add <4 x i32> %2214, %2206
  %2216 = getelementptr inbounds i32, i32* %2197, i64 8
  %2217 = getelementptr inbounds i32, i32* %2198, i64 2
  %2218 = bitcast i32* %2216 to <4 x i32>*
  %2219 = load <4 x i32>, <4 x i32>* %2218, align 1, !tbaa !11
  %2220 = load i32, i32* %2217, align 4, !tbaa !33
  %2221 = insertelement <4 x i32> undef, i32 %2220, i32 0
  %2222 = shufflevector <4 x i32> %2221, <4 x i32> undef, <4 x i32> zeroinitializer
  %2223 = mul <4 x i32> %2222, %2219
  %2224 = add <4 x i32> %2223, %2215
  %2225 = getelementptr inbounds i32, i32* %2197, i64 12
  %2226 = getelementptr inbounds i32, i32* %2198, i64 3
  %2227 = bitcast i32* %2225 to <4 x i32>*
  %2228 = load <4 x i32>, <4 x i32>* %2227, align 1, !tbaa !11
  %2229 = load i32, i32* %2226, align 4, !tbaa !33
  %2230 = insertelement <4 x i32> undef, i32 %2229, i32 0
  %2231 = shufflevector <4 x i32> %2230, <4 x i32> undef, <4 x i32> zeroinitializer
  %2232 = mul <4 x i32> %2231, %2228
  %2233 = add <4 x i32> %2232, %2224
  %2234 = getelementptr inbounds i32, i32* %2197, i64 16
  %2235 = getelementptr inbounds i32, i32* %2198, i64 4
  %2236 = add nsw i64 %2196, 4
  %2237 = icmp eq i64 %2236, %5
  br i1 %2237, label %2163, label %2195

; <label>:2238:                                   ; preds = %2156, %2238
  %2239 = phi i64 [ 0, %2156 ], [ %2282, %2238 ]
  %2240 = phi i32* [ %2153, %2156 ], [ %2280, %2238 ]
  %2241 = phi i32* [ %2161, %2156 ], [ %2281, %2238 ]
  %2242 = phi <4 x i32> [ zeroinitializer, %2156 ], [ %2279, %2238 ]
  %2243 = phi <4 x i32> [ zeroinitializer, %2156 ], [ %2277, %2238 ]
  %2244 = phi <4 x i32> [ zeroinitializer, %2156 ], [ %2261, %2238 ]
  %2245 = phi <4 x i32> [ zeroinitializer, %2156 ], [ %2259, %2238 ]
  %2246 = bitcast i32* %2240 to <4 x i32>*
  %2247 = load <4 x i32>, <4 x i32>* %2246, align 1, !tbaa !11
  %2248 = getelementptr inbounds i32, i32* %2240, i64 4
  %2249 = bitcast i32* %2248 to <4 x i32>*
  %2250 = load <4 x i32>, <4 x i32>* %2249, align 1, !tbaa !11
  %2251 = load i32, i32* %2241, align 4, !tbaa !33
  %2252 = insertelement <4 x i32> undef, i32 %2251, i32 0
  %2253 = shufflevector <4 x i32> %2252, <4 x i32> undef, <4 x i32> zeroinitializer
  %2254 = getelementptr inbounds i32, i32* %2241, i64 1
  %2255 = load i32, i32* %2254, align 4, !tbaa !33
  %2256 = insertelement <4 x i32> undef, i32 %2255, i32 0
  %2257 = shufflevector <4 x i32> %2256, <4 x i32> undef, <4 x i32> zeroinitializer
  %2258 = mul <4 x i32> %2253, %2247
  %2259 = add <4 x i32> %2258, %2245
  %2260 = mul <4 x i32> %2257, %2250
  %2261 = add <4 x i32> %2260, %2244
  %2262 = getelementptr inbounds i32, i32* %2240, i64 8
  %2263 = bitcast i32* %2262 to <4 x i32>*
  %2264 = load <4 x i32>, <4 x i32>* %2263, align 1, !tbaa !11
  %2265 = getelementptr inbounds i32, i32* %2240, i64 12
  %2266 = bitcast i32* %2265 to <4 x i32>*
  %2267 = load <4 x i32>, <4 x i32>* %2266, align 1, !tbaa !11
  %2268 = getelementptr inbounds i32, i32* %2241, i64 2
  %2269 = load i32, i32* %2268, align 4, !tbaa !33
  %2270 = insertelement <4 x i32> undef, i32 %2269, i32 0
  %2271 = shufflevector <4 x i32> %2270, <4 x i32> undef, <4 x i32> zeroinitializer
  %2272 = getelementptr inbounds i32, i32* %2241, i64 3
  %2273 = load i32, i32* %2272, align 4, !tbaa !33
  %2274 = insertelement <4 x i32> undef, i32 %2273, i32 0
  %2275 = shufflevector <4 x i32> %2274, <4 x i32> undef, <4 x i32> zeroinitializer
  %2276 = mul <4 x i32> %2271, %2264
  %2277 = add <4 x i32> %2276, %2243
  %2278 = mul <4 x i32> %2275, %2267
  %2279 = add <4 x i32> %2278, %2242
  %2280 = getelementptr inbounds i32, i32* %2240, i64 16
  %2281 = getelementptr inbounds i32, i32* %2241, i64 4
  %2282 = add nuw nsw i64 %2239, 4
  %2283 = icmp slt i64 %2282, %1650
  br i1 %2283, label %2238, label %2284

; <label>:2284:                                   ; preds = %2238
  %2285 = add <4 x i32> %2261, %2259
  %2286 = add <4 x i32> %2285, %2277
  %2287 = add <4 x i32> %2286, %2279
  br i1 %1672, label %2288, label %2166

; <label>:2288:                                   ; preds = %2284
  br i1 %1679, label %2309, label %2289

; <label>:2289:                                   ; preds = %2288
  br label %2290

; <label>:2290:                                   ; preds = %2290, %2289
  %2291 = phi i64 [ %2305, %2290 ], [ %1671, %2289 ]
  %2292 = phi i32* [ %2303, %2290 ], [ %2149, %2289 ]
  %2293 = phi i32* [ %2304, %2290 ], [ %2157, %2289 ]
  %2294 = phi <4 x i32> [ %2302, %2290 ], [ %2287, %2289 ]
  %2295 = phi i64 [ %2306, %2290 ], [ %1678, %2289 ]
  %2296 = bitcast i32* %2292 to <4 x i32>*
  %2297 = load <4 x i32>, <4 x i32>* %2296, align 1, !tbaa !11
  %2298 = load i32, i32* %2293, align 4, !tbaa !33
  %2299 = insertelement <4 x i32> undef, i32 %2298, i32 0
  %2300 = shufflevector <4 x i32> %2299, <4 x i32> undef, <4 x i32> zeroinitializer
  %2301 = mul <4 x i32> %2300, %2297
  %2302 = add <4 x i32> %2301, %2294
  %2303 = getelementptr inbounds i32, i32* %2292, i64 4
  %2304 = getelementptr inbounds i32, i32* %2293, i64 1
  %2305 = add nsw i64 %2291, 1
  %2306 = add i64 %2295, -1
  %2307 = icmp eq i64 %2306, 0
  br i1 %2307, label %2308, label %2290, !llvm.loop !706

; <label>:2308:                                   ; preds = %2290
  br label %2309

; <label>:2309:                                   ; preds = %2288, %2308
  %2310 = phi <4 x i32> [ undef, %2288 ], [ %2302, %2308 ]
  %2311 = phi i64 [ %1671, %2288 ], [ %2305, %2308 ]
  %2312 = phi i32* [ %2149, %2288 ], [ %2303, %2308 ]
  %2313 = phi i32* [ %2157, %2288 ], [ %2304, %2308 ]
  %2314 = phi <4 x i32> [ %2287, %2288 ], [ %2302, %2308 ]
  br i1 %1680, label %2164, label %2315

; <label>:2315:                                   ; preds = %2309
  br label %2195

; <label>:2316:                                   ; preds = %2575
  br label %2317

; <label>:2317:                                   ; preds = %2316, %1645
  %2318 = icmp slt i64 %18, %6
  br i1 %2318, label %2319, label %2688

; <label>:2319:                                   ; preds = %2317
  %2320 = icmp sgt i64 %5, 0
  %2321 = getelementptr inbounds %"class.Eigen::internal::blas_data_mapper.951", %"class.Eigen::internal::blas_data_mapper.951"* %1, i64 0, i32 0
  %2322 = getelementptr inbounds %"class.Eigen::internal::blas_data_mapper.951", %"class.Eigen::internal::blas_data_mapper.951"* %1, i64 0, i32 1
  %2323 = sub i64 %4, %25
  %2324 = add i64 %4, -1
  %2325 = sub i64 %2324, %25
  %2326 = add i64 %5, -32
  %2327 = lshr i64 %2326, 5
  %2328 = icmp ult i64 %5, 32
  %2329 = and i64 %5, -32
  %2330 = icmp eq i64 %2329, 0
  %2331 = and i64 %2327, 1
  %2332 = icmp eq i64 %2331, 0
  %2333 = icmp eq i64 %2327, 0
  %2334 = icmp eq i64 %2329, %5
  %2335 = and i64 %2323, 7
  %2336 = icmp eq i64 %2335, 0
  %2337 = icmp ult i64 %2325, 7
  br label %2338

; <label>:2338:                                   ; preds = %2413, %2319
  %2339 = phi i64 [ %2414, %2413 ], [ %18, %2319 ]
  %2340 = mul nsw i64 %2339, %16
  %2341 = add nsw i64 %2340, %11
  %2342 = getelementptr inbounds i32, i32* %3, i64 %2341
  br i1 %2320, label %2359, label %2343

; <label>:2343:                                   ; preds = %2338
  br i1 %2336, label %2356, label %2344

; <label>:2344:                                   ; preds = %2343
  br label %2345

; <label>:2345:                                   ; preds = %2345, %2344
  %2346 = phi i64 [ %2352, %2345 ], [ %25, %2344 ]
  %2347 = phi i64 [ %2353, %2345 ], [ %2335, %2344 ]
  %2348 = mul nsw i64 %2346, %14
  %2349 = add nsw i64 %2348, %10
  %2350 = getelementptr inbounds i32, i32* %2, i64 %2349
  %2351 = bitcast i32* %2350 to i8*
  tail call void @llvm.prefetch(i8* %2351, i32 0, i32 3, i32 1) #11
  %2352 = add nsw i64 %2346, 1
  %2353 = add i64 %2347, -1
  %2354 = icmp eq i64 %2353, 0
  br i1 %2354, label %2355, label %2345, !llvm.loop !707

; <label>:2355:                                   ; preds = %2345
  br label %2356

; <label>:2356:                                   ; preds = %2343, %2355
  %2357 = phi i64 [ %25, %2343 ], [ %2352, %2355 ]
  br i1 %2337, label %2412, label %2358

; <label>:2358:                                   ; preds = %2356
  br label %2367

; <label>:2359:                                   ; preds = %2338
  %2360 = bitcast i32* %2342 to <8 x i32>*
  %2361 = getelementptr i32, i32* %2342, i64 8
  %2362 = bitcast i32* %2361 to <8 x i32>*
  %2363 = getelementptr i32, i32* %2342, i64 16
  %2364 = bitcast i32* %2363 to <8 x i32>*
  %2365 = getelementptr i32, i32* %2342, i64 24
  %2366 = bitcast i32* %2365 to <8 x i32>*
  br label %2416

; <label>:2367:                                   ; preds = %2367, %2358
  %2368 = phi i64 [ %2357, %2358 ], [ %2408, %2367 ]
  %2369 = mul nsw i64 %2368, %14
  %2370 = add nsw i64 %2369, %10
  %2371 = getelementptr inbounds i32, i32* %2, i64 %2370
  %2372 = bitcast i32* %2371 to i8*
  tail call void @llvm.prefetch(i8* %2372, i32 0, i32 3, i32 1) #11
  %2373 = add nsw i64 %2368, 1
  %2374 = mul nsw i64 %2373, %14
  %2375 = add nsw i64 %2374, %10
  %2376 = getelementptr inbounds i32, i32* %2, i64 %2375
  %2377 = bitcast i32* %2376 to i8*
  tail call void @llvm.prefetch(i8* %2377, i32 0, i32 3, i32 1) #11
  %2378 = add nsw i64 %2368, 2
  %2379 = mul nsw i64 %2378, %14
  %2380 = add nsw i64 %2379, %10
  %2381 = getelementptr inbounds i32, i32* %2, i64 %2380
  %2382 = bitcast i32* %2381 to i8*
  tail call void @llvm.prefetch(i8* %2382, i32 0, i32 3, i32 1) #11
  %2383 = add nsw i64 %2368, 3
  %2384 = mul nsw i64 %2383, %14
  %2385 = add nsw i64 %2384, %10
  %2386 = getelementptr inbounds i32, i32* %2, i64 %2385
  %2387 = bitcast i32* %2386 to i8*
  tail call void @llvm.prefetch(i8* %2387, i32 0, i32 3, i32 1) #11
  %2388 = add nsw i64 %2368, 4
  %2389 = mul nsw i64 %2388, %14
  %2390 = add nsw i64 %2389, %10
  %2391 = getelementptr inbounds i32, i32* %2, i64 %2390
  %2392 = bitcast i32* %2391 to i8*
  tail call void @llvm.prefetch(i8* %2392, i32 0, i32 3, i32 1) #11
  %2393 = add nsw i64 %2368, 5
  %2394 = mul nsw i64 %2393, %14
  %2395 = add nsw i64 %2394, %10
  %2396 = getelementptr inbounds i32, i32* %2, i64 %2395
  %2397 = bitcast i32* %2396 to i8*
  tail call void @llvm.prefetch(i8* %2397, i32 0, i32 3, i32 1) #11
  %2398 = add nsw i64 %2368, 6
  %2399 = mul nsw i64 %2398, %14
  %2400 = add nsw i64 %2399, %10
  %2401 = getelementptr inbounds i32, i32* %2, i64 %2400
  %2402 = bitcast i32* %2401 to i8*
  tail call void @llvm.prefetch(i8* %2402, i32 0, i32 3, i32 1) #11
  %2403 = add nsw i64 %2368, 7
  %2404 = mul nsw i64 %2403, %14
  %2405 = add nsw i64 %2404, %10
  %2406 = getelementptr inbounds i32, i32* %2, i64 %2405
  %2407 = bitcast i32* %2406 to i8*
  tail call void @llvm.prefetch(i8* %2407, i32 0, i32 3, i32 1) #11
  %2408 = add nsw i64 %2368, 8
  %2409 = icmp eq i64 %2408, %4
  br i1 %2409, label %2411, label %2367

; <label>:2410:                                   ; preds = %2550
  br label %2413

; <label>:2411:                                   ; preds = %2367
  br label %2412

; <label>:2412:                                   ; preds = %2356, %2411
  br label %2413

; <label>:2413:                                   ; preds = %2412, %2410
  %2414 = add nsw i64 %2339, 1
  %2415 = icmp eq i64 %2414, %6
  br i1 %2415, label %2687, label %2338

; <label>:2416:                                   ; preds = %2359, %2550
  %2417 = phi i64 [ %2560, %2550 ], [ %25, %2359 ]
  %2418 = mul nsw i64 %2417, %14
  %2419 = add nsw i64 %2418, %10
  %2420 = getelementptr inbounds i32, i32* %2, i64 %2419
  %2421 = bitcast i32* %2420 to i8*
  tail call void @llvm.prefetch(i8* %2421, i32 0, i32 3, i32 1) #11
  br i1 %2328, label %2422, label %2425

; <label>:2422:                                   ; preds = %2534, %2425, %2416
  %2423 = phi i64 [ 0, %2425 ], [ 0, %2416 ], [ %2329, %2534 ]
  %2424 = phi i32 [ 0, %2425 ], [ 0, %2416 ], [ %2548, %2534 ]
  br label %2562

; <label>:2425:                                   ; preds = %2416
  br i1 %2330, label %2422, label %2426

; <label>:2426:                                   ; preds = %2425
  br i1 %2332, label %2427, label %2448

; <label>:2427:                                   ; preds = %2426
  br label %2428

; <label>:2428:                                   ; preds = %2427
  %2429 = bitcast i32* %2420 to <8 x i32>*
  %2430 = load <8 x i32>, <8 x i32>* %2429, align 4, !tbaa !33
  %2431 = getelementptr i32, i32* %2420, i64 8
  %2432 = bitcast i32* %2431 to <8 x i32>*
  %2433 = load <8 x i32>, <8 x i32>* %2432, align 4, !tbaa !33
  %2434 = getelementptr i32, i32* %2420, i64 16
  %2435 = bitcast i32* %2434 to <8 x i32>*
  %2436 = load <8 x i32>, <8 x i32>* %2435, align 4, !tbaa !33
  %2437 = getelementptr i32, i32* %2420, i64 24
  %2438 = bitcast i32* %2437 to <8 x i32>*
  %2439 = load <8 x i32>, <8 x i32>* %2438, align 4, !tbaa !33
  %2440 = load <8 x i32>, <8 x i32>* %2360, align 4, !tbaa !33
  %2441 = load <8 x i32>, <8 x i32>* %2362, align 4, !tbaa !33
  %2442 = load <8 x i32>, <8 x i32>* %2364, align 4, !tbaa !33
  %2443 = load <8 x i32>, <8 x i32>* %2366, align 4, !tbaa !33
  %2444 = mul nsw <8 x i32> %2440, %2430
  %2445 = mul nsw <8 x i32> %2441, %2433
  %2446 = mul nsw <8 x i32> %2442, %2436
  %2447 = mul nsw <8 x i32> %2443, %2439
  br label %2448

; <label>:2448:                                   ; preds = %2426, %2428
  %2449 = phi <8 x i32> [ %2444, %2428 ], [ undef, %2426 ]
  %2450 = phi <8 x i32> [ %2445, %2428 ], [ undef, %2426 ]
  %2451 = phi <8 x i32> [ %2446, %2428 ], [ undef, %2426 ]
  %2452 = phi <8 x i32> [ %2447, %2428 ], [ undef, %2426 ]
  %2453 = phi i64 [ 32, %2428 ], [ 0, %2426 ]
  %2454 = phi <8 x i32> [ %2444, %2428 ], [ zeroinitializer, %2426 ]
  %2455 = phi <8 x i32> [ %2445, %2428 ], [ zeroinitializer, %2426 ]
  %2456 = phi <8 x i32> [ %2446, %2428 ], [ zeroinitializer, %2426 ]
  %2457 = phi <8 x i32> [ %2447, %2428 ], [ zeroinitializer, %2426 ]
  br label %2458

; <label>:2458:                                   ; preds = %2448
  br i1 %2333, label %2534, label %2459

; <label>:2459:                                   ; preds = %2458
  br label %2460

; <label>:2460:                                   ; preds = %2460, %2459
  %2461 = phi i64 [ %2453, %2459 ], [ %2531, %2460 ]
  %2462 = phi <8 x i32> [ %2454, %2459 ], [ %2527, %2460 ]
  %2463 = phi <8 x i32> [ %2455, %2459 ], [ %2528, %2460 ]
  %2464 = phi <8 x i32> [ %2456, %2459 ], [ %2529, %2460 ]
  %2465 = phi <8 x i32> [ %2457, %2459 ], [ %2530, %2460 ]
  %2466 = getelementptr inbounds i32, i32* %2420, i64 %2461
  %2467 = bitcast i32* %2466 to <8 x i32>*
  %2468 = load <8 x i32>, <8 x i32>* %2467, align 4, !tbaa !33
  %2469 = getelementptr i32, i32* %2466, i64 8
  %2470 = bitcast i32* %2469 to <8 x i32>*
  %2471 = load <8 x i32>, <8 x i32>* %2470, align 4, !tbaa !33
  %2472 = getelementptr i32, i32* %2466, i64 16
  %2473 = bitcast i32* %2472 to <8 x i32>*
  %2474 = load <8 x i32>, <8 x i32>* %2473, align 4, !tbaa !33
  %2475 = getelementptr i32, i32* %2466, i64 24
  %2476 = bitcast i32* %2475 to <8 x i32>*
  %2477 = load <8 x i32>, <8 x i32>* %2476, align 4, !tbaa !33
  %2478 = getelementptr inbounds i32, i32* %2342, i64 %2461
  %2479 = bitcast i32* %2478 to <8 x i32>*
  %2480 = load <8 x i32>, <8 x i32>* %2479, align 4, !tbaa !33
  %2481 = getelementptr i32, i32* %2478, i64 8
  %2482 = bitcast i32* %2481 to <8 x i32>*
  %2483 = load <8 x i32>, <8 x i32>* %2482, align 4, !tbaa !33
  %2484 = getelementptr i32, i32* %2478, i64 16
  %2485 = bitcast i32* %2484 to <8 x i32>*
  %2486 = load <8 x i32>, <8 x i32>* %2485, align 4, !tbaa !33
  %2487 = getelementptr i32, i32* %2478, i64 24
  %2488 = bitcast i32* %2487 to <8 x i32>*
  %2489 = load <8 x i32>, <8 x i32>* %2488, align 4, !tbaa !33
  %2490 = mul nsw <8 x i32> %2480, %2468
  %2491 = mul nsw <8 x i32> %2483, %2471
  %2492 = mul nsw <8 x i32> %2486, %2474
  %2493 = mul nsw <8 x i32> %2489, %2477
  %2494 = add nsw <8 x i32> %2490, %2462
  %2495 = add nsw <8 x i32> %2491, %2463
  %2496 = add nsw <8 x i32> %2492, %2464
  %2497 = add nsw <8 x i32> %2493, %2465
  %2498 = add i64 %2461, 32
  %2499 = getelementptr inbounds i32, i32* %2420, i64 %2498
  %2500 = bitcast i32* %2499 to <8 x i32>*
  %2501 = load <8 x i32>, <8 x i32>* %2500, align 4, !tbaa !33
  %2502 = getelementptr i32, i32* %2499, i64 8
  %2503 = bitcast i32* %2502 to <8 x i32>*
  %2504 = load <8 x i32>, <8 x i32>* %2503, align 4, !tbaa !33
  %2505 = getelementptr i32, i32* %2499, i64 16
  %2506 = bitcast i32* %2505 to <8 x i32>*
  %2507 = load <8 x i32>, <8 x i32>* %2506, align 4, !tbaa !33
  %2508 = getelementptr i32, i32* %2499, i64 24
  %2509 = bitcast i32* %2508 to <8 x i32>*
  %2510 = load <8 x i32>, <8 x i32>* %2509, align 4, !tbaa !33
  %2511 = getelementptr inbounds i32, i32* %2342, i64 %2498
  %2512 = bitcast i32* %2511 to <8 x i32>*
  %2513 = load <8 x i32>, <8 x i32>* %2512, align 4, !tbaa !33
  %2514 = getelementptr i32, i32* %2511, i64 8
  %2515 = bitcast i32* %2514 to <8 x i32>*
  %2516 = load <8 x i32>, <8 x i32>* %2515, align 4, !tbaa !33
  %2517 = getelementptr i32, i32* %2511, i64 16
  %2518 = bitcast i32* %2517 to <8 x i32>*
  %2519 = load <8 x i32>, <8 x i32>* %2518, align 4, !tbaa !33
  %2520 = getelementptr i32, i32* %2511, i64 24
  %2521 = bitcast i32* %2520 to <8 x i32>*
  %2522 = load <8 x i32>, <8 x i32>* %2521, align 4, !tbaa !33
  %2523 = mul nsw <8 x i32> %2513, %2501
  %2524 = mul nsw <8 x i32> %2516, %2504
  %2525 = mul nsw <8 x i32> %2519, %2507
  %2526 = mul nsw <8 x i32> %2522, %2510
  %2527 = add nsw <8 x i32> %2523, %2494
  %2528 = add nsw <8 x i32> %2524, %2495
  %2529 = add nsw <8 x i32> %2525, %2496
  %2530 = add nsw <8 x i32> %2526, %2497
  %2531 = add i64 %2461, 64
  %2532 = icmp eq i64 %2531, %2329
  br i1 %2532, label %2533, label %2460, !llvm.loop !708

; <label>:2533:                                   ; preds = %2460
  br label %2534

; <label>:2534:                                   ; preds = %2458, %2533
  %2535 = phi <8 x i32> [ %2449, %2458 ], [ %2527, %2533 ]
  %2536 = phi <8 x i32> [ %2450, %2458 ], [ %2528, %2533 ]
  %2537 = phi <8 x i32> [ %2451, %2458 ], [ %2529, %2533 ]
  %2538 = phi <8 x i32> [ %2452, %2458 ], [ %2530, %2533 ]
  %2539 = add <8 x i32> %2536, %2535
  %2540 = add <8 x i32> %2537, %2539
  %2541 = add <8 x i32> %2538, %2540
  %2542 = shufflevector <8 x i32> %2541, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %2543 = add <8 x i32> %2541, %2542
  %2544 = shufflevector <8 x i32> %2543, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2545 = add <8 x i32> %2543, %2544
  %2546 = shufflevector <8 x i32> %2545, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2547 = add <8 x i32> %2545, %2546
  %2548 = extractelement <8 x i32> %2547, i32 0
  br i1 %2334, label %2550, label %2422

; <label>:2549:                                   ; preds = %2562
  br label %2550

; <label>:2550:                                   ; preds = %2549, %2534
  %2551 = phi i32 [ %2548, %2534 ], [ %2570, %2549 ]
  %2552 = mul nsw i32 %2551, %7
  %2553 = load i32*, i32** %2321, align 8, !tbaa !529
  %2554 = load i64, i64* %2322, align 8, !tbaa !531
  %2555 = mul nsw i64 %2554, %2339
  %2556 = add nsw i64 %2555, %2417
  %2557 = getelementptr inbounds i32, i32* %2553, i64 %2556
  %2558 = load i32, i32* %2557, align 4, !tbaa !33
  %2559 = add nsw i32 %2558, %2552
  store i32 %2559, i32* %2557, align 4, !tbaa !33
  %2560 = add nsw i64 %2417, 1
  %2561 = icmp eq i64 %2560, %4
  br i1 %2561, label %2410, label %2416

; <label>:2562:                                   ; preds = %2422, %2562
  %2563 = phi i64 [ %2571, %2562 ], [ %2423, %2422 ]
  %2564 = phi i32 [ %2570, %2562 ], [ %2424, %2422 ]
  %2565 = getelementptr inbounds i32, i32* %2420, i64 %2563
  %2566 = load i32, i32* %2565, align 4, !tbaa !33
  %2567 = getelementptr inbounds i32, i32* %2342, i64 %2563
  %2568 = load i32, i32* %2567, align 4, !tbaa !33
  %2569 = mul nsw i32 %2568, %2566
  %2570 = add nsw i32 %2569, %2564
  %2571 = add nuw nsw i64 %2563, 1
  %2572 = icmp eq i64 %2571, %5
  br i1 %2572, label %2549, label %2562, !llvm.loop !709

; <label>:2573:                                   ; preds = %2166
  br label %2575

; <label>:2574:                                   ; preds = %2659
  br label %2575

; <label>:2575:                                   ; preds = %2574, %2573
  %2576 = add nuw nsw i64 %2150, 4
  %2577 = icmp slt i64 %2576, %18
  %2578 = getelementptr i32, i32* %2149, i64 %1663
  br i1 %2577, label %2148, label %2316

; <label>:2579:                                   ; preds = %2154, %2659
  %2580 = phi i64 [ %2685, %2659 ], [ %25, %2154 ]
  %2581 = mul nsw i64 %2580, %14
  %2582 = add nsw i64 %2581, %10
  %2583 = getelementptr inbounds i32, i32* %2, i64 %2582
  %2584 = bitcast i32* %2583 to i8*
  tail call void @llvm.prefetch(i8* %2584, i32 0, i32 3, i32 1) #11
  br i1 %1673, label %2585, label %2659

; <label>:2585:                                   ; preds = %2579
  br i1 %1682, label %2606, label %2586

; <label>:2586:                                   ; preds = %2585
  br label %2587

; <label>:2587:                                   ; preds = %2587, %2586
  %2588 = phi i64 [ %2602, %2587 ], [ 0, %2586 ]
  %2589 = phi i32* [ %2600, %2587 ], [ %2153, %2586 ]
  %2590 = phi i32* [ %2601, %2587 ], [ %2583, %2586 ]
  %2591 = phi <4 x i32> [ %2599, %2587 ], [ zeroinitializer, %2586 ]
  %2592 = phi i64 [ %2603, %2587 ], [ %1681, %2586 ]
  %2593 = bitcast i32* %2589 to <4 x i32>*
  %2594 = load <4 x i32>, <4 x i32>* %2593, align 1, !tbaa !11
  %2595 = load i32, i32* %2590, align 4, !tbaa !33
  %2596 = insertelement <4 x i32> undef, i32 %2595, i32 0
  %2597 = shufflevector <4 x i32> %2596, <4 x i32> undef, <4 x i32> zeroinitializer
  %2598 = mul <4 x i32> %2597, %2594
  %2599 = add <4 x i32> %2598, %2591
  %2600 = getelementptr inbounds i32, i32* %2589, i64 4
  %2601 = getelementptr inbounds i32, i32* %2590, i64 1
  %2602 = add nuw nsw i64 %2588, 1
  %2603 = add i64 %2592, -1
  %2604 = icmp eq i64 %2603, 0
  br i1 %2604, label %2605, label %2587, !llvm.loop !710

; <label>:2605:                                   ; preds = %2587
  br label %2606

; <label>:2606:                                   ; preds = %2585, %2605
  %2607 = phi <4 x i32> [ undef, %2585 ], [ %2599, %2605 ]
  %2608 = phi i64 [ 0, %2585 ], [ %2602, %2605 ]
  %2609 = phi i32* [ %2153, %2585 ], [ %2600, %2605 ]
  %2610 = phi i32* [ %2583, %2585 ], [ %2601, %2605 ]
  %2611 = phi <4 x i32> [ zeroinitializer, %2585 ], [ %2599, %2605 ]
  br i1 %1683, label %2657, label %2612

; <label>:2612:                                   ; preds = %2606
  br label %2613

; <label>:2613:                                   ; preds = %2613, %2612
  %2614 = phi i64 [ %2608, %2612 ], [ %2654, %2613 ]
  %2615 = phi i32* [ %2609, %2612 ], [ %2652, %2613 ]
  %2616 = phi i32* [ %2610, %2612 ], [ %2653, %2613 ]
  %2617 = phi <4 x i32> [ %2611, %2612 ], [ %2651, %2613 ]
  %2618 = bitcast i32* %2615 to <4 x i32>*
  %2619 = load <4 x i32>, <4 x i32>* %2618, align 1, !tbaa !11
  %2620 = load i32, i32* %2616, align 4, !tbaa !33
  %2621 = insertelement <4 x i32> undef, i32 %2620, i32 0
  %2622 = shufflevector <4 x i32> %2621, <4 x i32> undef, <4 x i32> zeroinitializer
  %2623 = mul <4 x i32> %2622, %2619
  %2624 = add <4 x i32> %2623, %2617
  %2625 = getelementptr inbounds i32, i32* %2615, i64 4
  %2626 = getelementptr inbounds i32, i32* %2616, i64 1
  %2627 = bitcast i32* %2625 to <4 x i32>*
  %2628 = load <4 x i32>, <4 x i32>* %2627, align 1, !tbaa !11
  %2629 = load i32, i32* %2626, align 4, !tbaa !33
  %2630 = insertelement <4 x i32> undef, i32 %2629, i32 0
  %2631 = shufflevector <4 x i32> %2630, <4 x i32> undef, <4 x i32> zeroinitializer
  %2632 = mul <4 x i32> %2631, %2628
  %2633 = add <4 x i32> %2632, %2624
  %2634 = getelementptr inbounds i32, i32* %2615, i64 8
  %2635 = getelementptr inbounds i32, i32* %2616, i64 2
  %2636 = bitcast i32* %2634 to <4 x i32>*
  %2637 = load <4 x i32>, <4 x i32>* %2636, align 1, !tbaa !11
  %2638 = load i32, i32* %2635, align 4, !tbaa !33
  %2639 = insertelement <4 x i32> undef, i32 %2638, i32 0
  %2640 = shufflevector <4 x i32> %2639, <4 x i32> undef, <4 x i32> zeroinitializer
  %2641 = mul <4 x i32> %2640, %2637
  %2642 = add <4 x i32> %2641, %2633
  %2643 = getelementptr inbounds i32, i32* %2615, i64 12
  %2644 = getelementptr inbounds i32, i32* %2616, i64 3
  %2645 = bitcast i32* %2643 to <4 x i32>*
  %2646 = load <4 x i32>, <4 x i32>* %2645, align 1, !tbaa !11
  %2647 = load i32, i32* %2644, align 4, !tbaa !33
  %2648 = insertelement <4 x i32> undef, i32 %2647, i32 0
  %2649 = shufflevector <4 x i32> %2648, <4 x i32> undef, <4 x i32> zeroinitializer
  %2650 = mul <4 x i32> %2649, %2646
  %2651 = add <4 x i32> %2650, %2642
  %2652 = getelementptr inbounds i32, i32* %2615, i64 16
  %2653 = getelementptr inbounds i32, i32* %2616, i64 4
  %2654 = add nsw i64 %2614, 4
  %2655 = icmp eq i64 %2654, %5
  br i1 %2655, label %2656, label %2613

; <label>:2656:                                   ; preds = %2613
  br label %2657

; <label>:2657:                                   ; preds = %2606, %2656
  %2658 = phi <4 x i32> [ %2607, %2606 ], [ %2651, %2656 ]
  br label %2659

; <label>:2659:                                   ; preds = %2657, %2579
  %2660 = phi <4 x i32> [ zeroinitializer, %2579 ], [ %2658, %2657 ]
  %2661 = load i32*, i32** %1652, align 8, !tbaa !529
  %2662 = load i64, i64* %1653, align 8, !tbaa !531
  %2663 = mul nsw i64 %2662, %2150
  %2664 = add nsw i64 %2663, %2580
  %2665 = getelementptr inbounds i32, i32* %2661, i64 %2664
  %2666 = mul nsw i64 %2662, 3
  %2667 = getelementptr inbounds i32, i32* %2665, i64 %2666
  %2668 = load i32, i32* %2667, align 4, !tbaa !33
  %2669 = shl nsw i64 %2662, 1
  %2670 = getelementptr inbounds i32, i32* %2665, i64 %2669
  %2671 = load i32, i32* %2670, align 4, !tbaa !33
  %2672 = getelementptr inbounds i32, i32* %2665, i64 %2662
  %2673 = load i32, i32* %2672, align 4, !tbaa !33
  %2674 = load i32, i32* %2665, align 4, !tbaa !33
  %2675 = insertelement <4 x i32> undef, i32 %2674, i32 0
  %2676 = insertelement <4 x i32> %2675, i32 %2673, i32 1
  %2677 = insertelement <4 x i32> %2676, i32 %2671, i32 2
  %2678 = insertelement <4 x i32> %2677, i32 %2668, i32 3
  %2679 = mul <4 x i32> %2660, %1655
  %2680 = add <4 x i32> %2678, %2679
  %2681 = extractelement <4 x i32> %2680, i32 0
  store i32 %2681, i32* %2665, align 4, !tbaa !33
  %2682 = extractelement <4 x i32> %2680, i32 1
  store i32 %2682, i32* %2672, align 4, !tbaa !33
  %2683 = extractelement <4 x i32> %2680, i32 2
  store i32 %2683, i32* %2670, align 4, !tbaa !33
  %2684 = extractelement <4 x i32> %2680, i32 3
  store i32 %2684, i32* %2667, align 4, !tbaa !33
  %2685 = add nsw i64 %2580, 1
  %2686 = icmp eq i64 %2685, %4
  br i1 %2686, label %2574, label %2579

; <label>:2687:                                   ; preds = %2413
  br label %2688

; <label>:2688:                                   ; preds = %2687, %2317, %1643
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.prefetch(i8* nocapture, i32, i32, i32) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal20generic_product_implINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS2_IiLin1ELi6ELi0ELin1ELi6EEENS_10DenseShapeES5_Li8EE6evalToINS2_IiLi47ELi6ELi0ELi47ELi6EEEEEvRT_RKS3_RKS4_(%"class.Eigen::Matrix.77"* dereferenceable(1128), %"class.Eigen::Matrix.48"* dereferenceable(16), %"class.Eigen::Matrix.123"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"struct.Eigen::internal::evaluator.961", align 8
  %5 = alloca %"struct.Eigen::internal::evaluator.545", align 8
  %6 = alloca %"class.Eigen::internal::generic_dense_assignment_kernel.964", align 8
  %7 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %8 = alloca %"struct.Eigen::internal::evaluator.1025", align 4
  %9 = alloca %"struct.Eigen::internal::evaluator.545", align 8
  %10 = alloca %"class.Eigen::internal::generic_dense_assignment_kernel.1028", align 8
  %11 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %12 = alloca i32, align 4
  %13 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %2, i64 0, i32 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8, !tbaa !43
  %15 = add nsw i64 %14, 53
  %16 = icmp slt i64 %15, 20
  %17 = icmp sgt i64 %14, 0
  %18 = and i1 %17, %16
  br i1 %18, label %19, label %50

; <label>:19:                                     ; preds = %3
  %20 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %1, i64 0, i32 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8, !tbaa !40
  %22 = icmp eq i64 %21, %14
  br i1 %22, label %24, label %23, !prof !10

; <label>:23:                                     ; preds = %19
  tail call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS1_IdLin1ELi1ELi0ELin1ELi1EEELi0EEC2ERKS2_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 97, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2, i64 0, i64 0)) #13
  unreachable

; <label>:24:                                     ; preds = %19
  %25 = ptrtoint %"class.Eigen::Matrix.48"* %1 to i64
  %26 = ptrtoint %"class.Eigen::Matrix.123"* %2 to i64
  %27 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %7, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %27) #11
  %28 = bitcast %"struct.Eigen::internal::evaluator.961"* %4 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %28) #11
  %29 = bitcast %"struct.Eigen::internal::evaluator.961"* %4 to i64*
  store i64 %25, i64* %29, align 8, !tbaa !11
  %30 = getelementptr inbounds %"struct.Eigen::internal::evaluator.961", %"struct.Eigen::internal::evaluator.961"* %4, i64 0, i32 0, i32 1
  %31 = bitcast %"class.Eigen::Matrix.123"** %30 to i64*
  store i64 %26, i64* %31, align 8, !tbaa !11
  %32 = getelementptr inbounds %"struct.Eigen::internal::evaluator.961", %"struct.Eigen::internal::evaluator.961"* %4, i64 0, i32 0, i32 2
  %33 = bitcast %"class.Eigen::Matrix.48"* %1 to i64*
  %34 = load i64, i64* %33, align 8, !tbaa !38
  %35 = bitcast %"struct.Eigen::internal::evaluator.529"* %32 to i64*
  store i64 %34, i64* %35, align 8, !tbaa !475
  %36 = getelementptr inbounds %"struct.Eigen::internal::evaluator.961", %"struct.Eigen::internal::evaluator.961"* %4, i64 0, i32 0, i32 3
  %37 = bitcast %"class.Eigen::Matrix.123"* %2 to i64*
  %38 = load i64, i64* %37, align 8, !tbaa !41
  %39 = bitcast %"struct.Eigen::internal::evaluator.569"* %36 to i64*
  store i64 %38, i64* %39, align 8, !tbaa !468
  %40 = getelementptr inbounds %"struct.Eigen::internal::evaluator.961", %"struct.Eigen::internal::evaluator.961"* %4, i64 0, i32 0, i32 3, i32 0, i32 1, i32 0
  store i64 %14, i64* %40, align 8, !tbaa !59
  %41 = getelementptr inbounds %"struct.Eigen::internal::evaluator.961", %"struct.Eigen::internal::evaluator.961"* %4, i64 0, i32 0, i32 4
  store i64 %14, i64* %41, align 8, !tbaa !711
  %42 = bitcast %"struct.Eigen::internal::evaluator.545"* %5 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42) #11
  %43 = getelementptr inbounds %"struct.Eigen::internal::evaluator.545", %"struct.Eigen::internal::evaluator.545"* %5, i64 0, i32 0, i32 0
  %44 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  store i32* %44, i32** %43, align 8, !tbaa !94
  %45 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.964"* %6 to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %45) #11
  %46 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.964", %"class.Eigen::internal::generic_dense_assignment_kernel.964"* %6, i64 0, i32 0
  store %"struct.Eigen::internal::evaluator.545"* %5, %"struct.Eigen::internal::evaluator.545"** %46, align 8, !tbaa !11
  %47 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.964", %"class.Eigen::internal::generic_dense_assignment_kernel.964"* %6, i64 0, i32 1
  store %"struct.Eigen::internal::evaluator.961"* %4, %"struct.Eigen::internal::evaluator.961"** %47, align 8, !tbaa !11
  %48 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.964", %"class.Eigen::internal::generic_dense_assignment_kernel.964"* %6, i64 0, i32 2
  store %"struct.Eigen::internal::assign_op.512"* %7, %"struct.Eigen::internal::assign_op.512"** %48, align 8, !tbaa !11
  %49 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.964", %"class.Eigen::internal::generic_dense_assignment_kernel.964"* %6, i64 0, i32 3
  store %"class.Eigen::Matrix.77"* %0, %"class.Eigen::Matrix.77"** %49, align 8, !tbaa !11
  call void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEENS3_INS_7ProductINS4_IiLi47ELin1ELi0ELi47ELin1EEENS4_IiLin1ELi6ELi0ELin1ELi6EEELi1EEEEENS0_9assign_opIiiEELi0EEELi4ELi0EE3runERSE_(%"class.Eigen::internal::generic_dense_assignment_kernel.964"* nonnull dereferenceable(32) %6) #11
  call void @llvm.lifetime.end(i64 32, i8* nonnull %45) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42) #11
  call void @llvm.lifetime.end(i64 56, i8* nonnull %28) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %27) #11
  br label %266

; <label>:50:                                     ; preds = %3
  %51 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %11, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %51) #11
  %52 = bitcast %"struct.Eigen::internal::evaluator.1025"* %8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %52) #11
  %53 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %8, i64 0, i32 0, i32 0
  store i32 0, i32* %53, align 4, !tbaa !51
  %54 = bitcast %"struct.Eigen::internal::evaluator.545"* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %54) #11
  %55 = bitcast %"struct.Eigen::internal::evaluator.545"* %9 to %"class.Eigen::Matrix.77"**
  store %"class.Eigen::Matrix.77"* %0, %"class.Eigen::Matrix.77"** %55, align 8, !tbaa !94
  %56 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1028"* %10 to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %56) #11
  %57 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1028", %"class.Eigen::internal::generic_dense_assignment_kernel.1028"* %10, i64 0, i32 0
  store %"struct.Eigen::internal::evaluator.545"* %9, %"struct.Eigen::internal::evaluator.545"** %57, align 8, !tbaa !11
  %58 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1028", %"class.Eigen::internal::generic_dense_assignment_kernel.1028"* %10, i64 0, i32 1
  store %"struct.Eigen::internal::evaluator.1025"* %8, %"struct.Eigen::internal::evaluator.1025"** %58, align 8, !tbaa !11
  %59 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1028", %"class.Eigen::internal::generic_dense_assignment_kernel.1028"* %10, i64 0, i32 2
  store %"struct.Eigen::internal::assign_op.512"* %11, %"struct.Eigen::internal::assign_op.512"** %59, align 8, !tbaa !11
  %60 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1028", %"class.Eigen::internal::generic_dense_assignment_kernel.1028"* %10, i64 0, i32 3
  store %"class.Eigen::Matrix.77"* %0, %"class.Eigen::Matrix.77"** %60, align 8, !tbaa !11
  %61 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1028"* %10 to %"struct.Eigen::internal::evaluator.546"**
  %62 = bitcast %"struct.Eigen::internal::evaluator.545"* %9 to <4 x i32>**
  %63 = load <4 x i32>*, <4 x i32>** %62, align 8, !tbaa !94
  store <4 x i32> zeroinitializer, <4 x i32>* %63, align 1, !tbaa !11
  %64 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %61, align 8, !tbaa !11
  %65 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %64, i64 0, i32 0
  %66 = load i32*, i32** %65, align 8, !tbaa !94
  %67 = getelementptr inbounds i32, i32* %66, i64 4
  %68 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %58, align 8, !tbaa !11
  %69 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %68, i64 0, i32 0, i32 0
  %70 = load i32, i32* %69, align 4, !tbaa !33
  %71 = insertelement <4 x i32> undef, i32 %70, i32 0
  %72 = shufflevector <4 x i32> %71, <4 x i32> undef, <4 x i32> zeroinitializer
  %73 = bitcast i32* %67 to <4 x i32>*
  store <4 x i32> %72, <4 x i32>* %73, align 1, !tbaa !11
  %74 = load i32*, i32** %65, align 8, !tbaa !94
  %75 = getelementptr inbounds i32, i32* %74, i64 8
  %76 = load i32, i32* %69, align 4, !tbaa !33
  %77 = insertelement <4 x i32> undef, i32 %76, i32 0
  %78 = shufflevector <4 x i32> %77, <4 x i32> undef, <4 x i32> zeroinitializer
  %79 = bitcast i32* %75 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %79, align 1, !tbaa !11
  %80 = load i32*, i32** %65, align 8, !tbaa !94
  %81 = getelementptr inbounds i32, i32* %80, i64 12
  %82 = load i32, i32* %69, align 4, !tbaa !33
  %83 = insertelement <4 x i32> undef, i32 %82, i32 0
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> zeroinitializer
  %85 = bitcast i32* %81 to <4 x i32>*
  store <4 x i32> %84, <4 x i32>* %85, align 1, !tbaa !11
  %86 = load i32*, i32** %65, align 8, !tbaa !94
  %87 = getelementptr inbounds i32, i32* %86, i64 16
  %88 = load i32, i32* %69, align 4, !tbaa !33
  %89 = insertelement <4 x i32> undef, i32 %88, i32 0
  %90 = shufflevector <4 x i32> %89, <4 x i32> undef, <4 x i32> zeroinitializer
  %91 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %90, <4 x i32>* %91, align 1, !tbaa !11
  %92 = load i32*, i32** %65, align 8, !tbaa !94
  %93 = getelementptr inbounds i32, i32* %92, i64 20
  %94 = load i32, i32* %69, align 4, !tbaa !33
  %95 = insertelement <4 x i32> undef, i32 %94, i32 0
  %96 = shufflevector <4 x i32> %95, <4 x i32> undef, <4 x i32> zeroinitializer
  %97 = bitcast i32* %93 to <4 x i32>*
  store <4 x i32> %96, <4 x i32>* %97, align 1, !tbaa !11
  %98 = load i32*, i32** %65, align 8, !tbaa !94
  %99 = getelementptr inbounds i32, i32* %98, i64 24
  %100 = load i32, i32* %69, align 4, !tbaa !33
  %101 = insertelement <4 x i32> undef, i32 %100, i32 0
  %102 = shufflevector <4 x i32> %101, <4 x i32> undef, <4 x i32> zeroinitializer
  %103 = bitcast i32* %99 to <4 x i32>*
  store <4 x i32> %102, <4 x i32>* %103, align 1, !tbaa !11
  %104 = load i32*, i32** %65, align 8, !tbaa !94
  %105 = getelementptr inbounds i32, i32* %104, i64 28
  %106 = load i32, i32* %69, align 4, !tbaa !33
  %107 = insertelement <4 x i32> undef, i32 %106, i32 0
  %108 = shufflevector <4 x i32> %107, <4 x i32> undef, <4 x i32> zeroinitializer
  %109 = bitcast i32* %105 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 1, !tbaa !11
  %110 = load i32*, i32** %65, align 8, !tbaa !94
  %111 = getelementptr inbounds i32, i32* %110, i64 32
  %112 = load i32, i32* %69, align 4, !tbaa !33
  %113 = insertelement <4 x i32> undef, i32 %112, i32 0
  %114 = shufflevector <4 x i32> %113, <4 x i32> undef, <4 x i32> zeroinitializer
  %115 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %114, <4 x i32>* %115, align 1, !tbaa !11
  %116 = load i32*, i32** %65, align 8, !tbaa !94
  %117 = getelementptr inbounds i32, i32* %116, i64 36
  %118 = load i32, i32* %69, align 4, !tbaa !33
  %119 = insertelement <4 x i32> undef, i32 %118, i32 0
  %120 = shufflevector <4 x i32> %119, <4 x i32> undef, <4 x i32> zeroinitializer
  %121 = bitcast i32* %117 to <4 x i32>*
  store <4 x i32> %120, <4 x i32>* %121, align 1, !tbaa !11
  %122 = load i32*, i32** %65, align 8, !tbaa !94
  %123 = getelementptr inbounds i32, i32* %122, i64 40
  %124 = load i32, i32* %69, align 4, !tbaa !33
  %125 = insertelement <4 x i32> undef, i32 %124, i32 0
  %126 = shufflevector <4 x i32> %125, <4 x i32> undef, <4 x i32> zeroinitializer
  %127 = bitcast i32* %123 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %127, align 1, !tbaa !11
  %128 = load i32*, i32** %65, align 8, !tbaa !94
  %129 = getelementptr inbounds i32, i32* %128, i64 44
  %130 = load i32, i32* %69, align 4, !tbaa !33
  %131 = insertelement <4 x i32> undef, i32 %130, i32 0
  %132 = shufflevector <4 x i32> %131, <4 x i32> undef, <4 x i32> zeroinitializer
  %133 = bitcast i32* %129 to <4 x i32>*
  store <4 x i32> %132, <4 x i32>* %133, align 1, !tbaa !11
  %134 = load i32*, i32** %65, align 8, !tbaa !94
  %135 = getelementptr inbounds i32, i32* %134, i64 48
  %136 = load i32, i32* %69, align 4, !tbaa !33
  %137 = insertelement <4 x i32> undef, i32 %136, i32 0
  %138 = shufflevector <4 x i32> %137, <4 x i32> undef, <4 x i32> zeroinitializer
  %139 = bitcast i32* %135 to <4 x i32>*
  store <4 x i32> %138, <4 x i32>* %139, align 1, !tbaa !11
  %140 = load i32*, i32** %65, align 8, !tbaa !94
  %141 = getelementptr inbounds i32, i32* %140, i64 52
  %142 = load i32, i32* %69, align 4, !tbaa !33
  %143 = insertelement <4 x i32> undef, i32 %142, i32 0
  %144 = shufflevector <4 x i32> %143, <4 x i32> undef, <4 x i32> zeroinitializer
  %145 = bitcast i32* %141 to <4 x i32>*
  store <4 x i32> %144, <4 x i32>* %145, align 1, !tbaa !11
  %146 = load i32*, i32** %65, align 8, !tbaa !94
  %147 = getelementptr inbounds i32, i32* %146, i64 56
  %148 = load i32, i32* %69, align 4, !tbaa !33
  %149 = insertelement <4 x i32> undef, i32 %148, i32 0
  %150 = shufflevector <4 x i32> %149, <4 x i32> undef, <4 x i32> zeroinitializer
  %151 = bitcast i32* %147 to <4 x i32>*
  store <4 x i32> %150, <4 x i32>* %151, align 1, !tbaa !11
  %152 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %61, align 8, !tbaa !11
  %153 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %152, i64 0, i32 0
  %154 = load i32*, i32** %153, align 8, !tbaa !94
  %155 = getelementptr inbounds i32, i32* %154, i64 60
  %156 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %58, align 8, !tbaa !11
  %157 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %156, i64 0, i32 0, i32 0
  %158 = load i32, i32* %157, align 4, !tbaa !33
  %159 = insertelement <4 x i32> undef, i32 %158, i32 0
  %160 = shufflevector <4 x i32> %159, <4 x i32> undef, <4 x i32> zeroinitializer
  %161 = bitcast i32* %155 to <4 x i32>*
  store <4 x i32> %160, <4 x i32>* %161, align 1, !tbaa !11
  %162 = load i32*, i32** %153, align 8, !tbaa !94
  %163 = getelementptr inbounds i32, i32* %162, i64 64
  %164 = load i32, i32* %157, align 4, !tbaa !33
  %165 = insertelement <4 x i32> undef, i32 %164, i32 0
  %166 = shufflevector <4 x i32> %165, <4 x i32> undef, <4 x i32> zeroinitializer
  %167 = bitcast i32* %163 to <4 x i32>*
  store <4 x i32> %166, <4 x i32>* %167, align 1, !tbaa !11
  %168 = load i32*, i32** %153, align 8, !tbaa !94
  %169 = getelementptr inbounds i32, i32* %168, i64 68
  %170 = load i32, i32* %157, align 4, !tbaa !33
  %171 = insertelement <4 x i32> undef, i32 %170, i32 0
  %172 = shufflevector <4 x i32> %171, <4 x i32> undef, <4 x i32> zeroinitializer
  %173 = bitcast i32* %169 to <4 x i32>*
  store <4 x i32> %172, <4 x i32>* %173, align 1, !tbaa !11
  %174 = load i32*, i32** %153, align 8, !tbaa !94
  %175 = getelementptr inbounds i32, i32* %174, i64 72
  %176 = load i32, i32* %157, align 4, !tbaa !33
  %177 = insertelement <4 x i32> undef, i32 %176, i32 0
  %178 = shufflevector <4 x i32> %177, <4 x i32> undef, <4 x i32> zeroinitializer
  %179 = bitcast i32* %175 to <4 x i32>*
  store <4 x i32> %178, <4 x i32>* %179, align 1, !tbaa !11
  %180 = load i32*, i32** %153, align 8, !tbaa !94
  %181 = getelementptr inbounds i32, i32* %180, i64 76
  %182 = load i32, i32* %157, align 4, !tbaa !33
  %183 = insertelement <4 x i32> undef, i32 %182, i32 0
  %184 = shufflevector <4 x i32> %183, <4 x i32> undef, <4 x i32> zeroinitializer
  %185 = bitcast i32* %181 to <4 x i32>*
  store <4 x i32> %184, <4 x i32>* %185, align 1, !tbaa !11
  %186 = load i32*, i32** %153, align 8, !tbaa !94
  %187 = getelementptr inbounds i32, i32* %186, i64 80
  %188 = load i32, i32* %157, align 4, !tbaa !33
  %189 = insertelement <4 x i32> undef, i32 %188, i32 0
  %190 = shufflevector <4 x i32> %189, <4 x i32> undef, <4 x i32> zeroinitializer
  %191 = bitcast i32* %187 to <4 x i32>*
  store <4 x i32> %190, <4 x i32>* %191, align 1, !tbaa !11
  %192 = load i32*, i32** %153, align 8, !tbaa !94
  %193 = getelementptr inbounds i32, i32* %192, i64 84
  %194 = load i32, i32* %157, align 4, !tbaa !33
  %195 = insertelement <4 x i32> undef, i32 %194, i32 0
  %196 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> zeroinitializer
  %197 = bitcast i32* %193 to <4 x i32>*
  store <4 x i32> %196, <4 x i32>* %197, align 1, !tbaa !11
  %198 = load i32*, i32** %153, align 8, !tbaa !94
  %199 = getelementptr inbounds i32, i32* %198, i64 88
  %200 = load i32, i32* %157, align 4, !tbaa !33
  %201 = insertelement <4 x i32> undef, i32 %200, i32 0
  %202 = shufflevector <4 x i32> %201, <4 x i32> undef, <4 x i32> zeroinitializer
  %203 = bitcast i32* %199 to <4 x i32>*
  store <4 x i32> %202, <4 x i32>* %203, align 1, !tbaa !11
  %204 = load i32*, i32** %153, align 8, !tbaa !94
  %205 = getelementptr inbounds i32, i32* %204, i64 92
  %206 = load i32, i32* %157, align 4, !tbaa !33
  %207 = insertelement <4 x i32> undef, i32 %206, i32 0
  %208 = shufflevector <4 x i32> %207, <4 x i32> undef, <4 x i32> zeroinitializer
  %209 = bitcast i32* %205 to <4 x i32>*
  store <4 x i32> %208, <4 x i32>* %209, align 1, !tbaa !11
  %210 = load i32*, i32** %153, align 8, !tbaa !94
  %211 = getelementptr inbounds i32, i32* %210, i64 96
  %212 = load i32, i32* %157, align 4, !tbaa !33
  %213 = insertelement <4 x i32> undef, i32 %212, i32 0
  %214 = shufflevector <4 x i32> %213, <4 x i32> undef, <4 x i32> zeroinitializer
  %215 = bitcast i32* %211 to <4 x i32>*
  store <4 x i32> %214, <4 x i32>* %215, align 1, !tbaa !11
  %216 = load i32*, i32** %153, align 8, !tbaa !94
  %217 = getelementptr inbounds i32, i32* %216, i64 100
  %218 = load i32, i32* %157, align 4, !tbaa !33
  %219 = insertelement <4 x i32> undef, i32 %218, i32 0
  %220 = shufflevector <4 x i32> %219, <4 x i32> undef, <4 x i32> zeroinitializer
  %221 = bitcast i32* %217 to <4 x i32>*
  store <4 x i32> %220, <4 x i32>* %221, align 1, !tbaa !11
  %222 = load i32*, i32** %153, align 8, !tbaa !94
  %223 = getelementptr inbounds i32, i32* %222, i64 104
  %224 = load i32, i32* %157, align 4, !tbaa !33
  %225 = insertelement <4 x i32> undef, i32 %224, i32 0
  %226 = shufflevector <4 x i32> %225, <4 x i32> undef, <4 x i32> zeroinitializer
  %227 = bitcast i32* %223 to <4 x i32>*
  store <4 x i32> %226, <4 x i32>* %227, align 1, !tbaa !11
  %228 = load i32*, i32** %153, align 8, !tbaa !94
  %229 = getelementptr inbounds i32, i32* %228, i64 108
  %230 = load i32, i32* %157, align 4, !tbaa !33
  %231 = insertelement <4 x i32> undef, i32 %230, i32 0
  %232 = shufflevector <4 x i32> %231, <4 x i32> undef, <4 x i32> zeroinitializer
  %233 = bitcast i32* %229 to <4 x i32>*
  store <4 x i32> %232, <4 x i32>* %233, align 1, !tbaa !11
  %234 = load i32*, i32** %153, align 8, !tbaa !94
  %235 = getelementptr inbounds i32, i32* %234, i64 112
  %236 = load i32, i32* %157, align 4, !tbaa !33
  %237 = insertelement <4 x i32> undef, i32 %236, i32 0
  %238 = shufflevector <4 x i32> %237, <4 x i32> undef, <4 x i32> zeroinitializer
  %239 = bitcast i32* %235 to <4 x i32>*
  store <4 x i32> %238, <4 x i32>* %239, align 1, !tbaa !11
  %240 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %61, align 8, !tbaa !11
  %241 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %240, i64 0, i32 0
  %242 = load i32*, i32** %241, align 8, !tbaa !94
  %243 = getelementptr inbounds i32, i32* %242, i64 116
  %244 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %58, align 8, !tbaa !11
  %245 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %244, i64 0, i32 0, i32 0
  %246 = load i32, i32* %245, align 4, !tbaa !33
  %247 = insertelement <4 x i32> undef, i32 %246, i32 0
  %248 = shufflevector <4 x i32> %247, <4 x i32> undef, <4 x i32> zeroinitializer
  %249 = bitcast i32* %243 to <4 x i32>*
  store <4 x i32> %248, <4 x i32>* %249, align 1, !tbaa !11
  %250 = load i32*, i32** %241, align 8, !tbaa !94
  %251 = getelementptr inbounds i32, i32* %250, i64 120
  %252 = load i32, i32* %245, align 4, !tbaa !33
  %253 = insertelement <4 x i32> undef, i32 %252, i32 0
  %254 = shufflevector <4 x i32> %253, <4 x i32> undef, <4 x i32> zeroinitializer
  %255 = bitcast i32* %251 to <4 x i32>*
  store <4 x i32> %254, <4 x i32>* %255, align 1, !tbaa !11
  call void @_ZN5Eigen8internal47copy_using_evaluator_innervec_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEENS3_INS_14CwiseNullaryOpINS0_18scalar_constant_opIiEES5_EEEENS0_9assign_opIiiEELi0EEELi124ELi280EE3runERSE_(%"class.Eigen::internal::generic_dense_assignment_kernel.1028"* nonnull dereferenceable(32) %10) #11
  %256 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %61, align 8, !tbaa !11
  %257 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %256, i64 0, i32 0
  %258 = load i32*, i32** %257, align 8, !tbaa !94
  %259 = getelementptr inbounds i32, i32* %258, i64 280
  %260 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %58, align 8, !tbaa !11
  %261 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %260, i64 0, i32 0, i32 0
  %262 = load i32, i32* %261, align 4, !tbaa !51
  store i32 %262, i32* %259, align 4, !tbaa !33
  %263 = getelementptr inbounds i32, i32* %258, i64 281
  %264 = load i32, i32* %261, align 4, !tbaa !51
  store i32 %264, i32* %263, align 4, !tbaa !33
  call void @llvm.lifetime.end(i64 32, i8* nonnull %56) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %54) #11
  call void @llvm.lifetime.end(i64 8, i8* nonnull %52) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %51) #11
  %265 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start(i64 4, i8* nonnull %265) #11
  store i32 1, i32* %12, align 4, !tbaa !33
  call void @_ZN5Eigen8internal20generic_product_implINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS2_IiLin1ELi6ELi0ELin1ELi6EEENS_10DenseShapeES5_Li8EE13scaleAndAddToINS2_IiLi47ELi6ELi0ELi47ELi6EEEEEvRT_RKS3_RKS4_RKi(%"class.Eigen::Matrix.77"* nonnull dereferenceable(1128) %0, %"class.Eigen::Matrix.48"* nonnull dereferenceable(16) %1, %"class.Eigen::Matrix.123"* nonnull dereferenceable(16) %2, i32* nonnull dereferenceable(4) %12)
  call void @llvm.lifetime.end(i64 4, i8* nonnull %265) #11
  br label %266

; <label>:266:                                    ; preds = %50, %24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal20generic_product_implINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS2_IiLin1ELi6ELi0ELin1ELi6EEENS_10DenseShapeES5_Li8EE13scaleAndAddToINS2_IiLi47ELi6ELi0ELi47ELi6EEEEEvRT_RKS3_RKS4_RKi(%"class.Eigen::Matrix.77"* dereferenceable(1128), %"class.Eigen::Matrix.48"* dereferenceable(16), %"class.Eigen::Matrix.123"* dereferenceable(16), i32* dereferenceable(4)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.Eigen::internal::gemm_blocking_space.1029", align 8
  %6 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %1, i64 0, i32 0, i32 0, i32 1
  %7 = load i64, i64* %6, align 8, !tbaa !40
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %48, label %9

; <label>:9:                                      ; preds = %4
  %10 = load i32, i32* %3, align 4, !tbaa !33
  %11 = bitcast %"class.Eigen::internal::gemm_blocking_space.1029"* %5 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %11) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %11, i8 0, i64 16, i32 8, i1 false) #11
  %12 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1029", %"class.Eigen::internal::gemm_blocking_space.1029"* %5, i64 0, i32 0, i32 2
  %13 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1029", %"class.Eigen::internal::gemm_blocking_space.1029"* %5, i64 0, i32 0, i32 3
  %14 = bitcast i64* %12 to <2 x i64>*
  store <2 x i64> <i64 47, i64 6>, <2 x i64>* %14, align 8, !tbaa !32
  %15 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1029", %"class.Eigen::internal::gemm_blocking_space.1029"* %5, i64 0, i32 0, i32 4
  store i64 %7, i64* %15, align 8, !tbaa !193
  call void @_ZN5Eigen8internal37evaluateProductBlockingSizesHeuristicIiiLi1ElEEvRT2_S3_S3_S2_(i64* nonnull dereferenceable(8) %15, i64* nonnull dereferenceable(8) %12, i64* nonnull dereferenceable(8) %13, i64 1) #11
  %16 = load i64, i64* %12, align 8, !tbaa !460
  %17 = load i64, i64* %15, align 8, !tbaa !193
  %18 = mul nsw i64 %17, %16
  %19 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1029", %"class.Eigen::internal::gemm_blocking_space.1029"* %5, i64 0, i32 1
  store i64 %18, i64* %19, align 8, !tbaa !715
  %20 = load i64, i64* %13, align 8, !tbaa !461
  %21 = mul nsw i64 %20, %17
  %22 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1029", %"class.Eigen::internal::gemm_blocking_space.1029"* %5, i64 0, i32 2
  store i64 %21, i64* %22, align 8, !tbaa !717
  %23 = load i64, i64* %6, align 8, !tbaa !40
  %24 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %1, i64 0, i32 0, i32 0, i32 0
  %25 = load i32*, i32** %24, align 8, !tbaa !38
  %26 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %2, i64 0, i32 0, i32 0, i32 0
  %27 = load i32*, i32** %26, align 8, !tbaa !41
  %28 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %2, i64 0, i32 0, i32 0, i32 1
  %29 = load i64, i64* %28, align 8, !tbaa !43
  %30 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %31 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1029", %"class.Eigen::internal::gemm_blocking_space.1029"* %5, i64 0, i32 0
  call void @_ZN5Eigen8internal29general_matrix_matrix_productIliLi0ELb0EiLi0ELb0ELi0EE3runElllPKilS4_lPiliRNS0_15level3_blockingIiiEEPNS0_16GemmParallelInfoIlEE(i64 47, i64 6, i64 %23, i32* nonnull %25, i64 47, i32* nonnull %27, i64 %29, i32* nonnull %30, i64 47, i32 %10, %"class.Eigen::internal::level3_blocking"* nonnull dereferenceable(40) %31, %"struct.Eigen::internal::GemmParallelInfo"* null) #11
  %32 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1029", %"class.Eigen::internal::gemm_blocking_space.1029"* %5, i64 0, i32 0, i32 0
  %33 = load i32*, i32** %32, align 8, !tbaa !195
  %34 = icmp eq i32* %33, null
  br i1 %34, label %39, label %35

; <label>:35:                                     ; preds = %9
  %36 = getelementptr inbounds i32, i32* %33, i64 -2
  %37 = bitcast i32* %36 to i8**
  %38 = load i8*, i8** %37, align 8, !tbaa !29
  call void @free(i8* %38) #11
  br label %39

; <label>:39:                                     ; preds = %35, %9
  %40 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1029", %"class.Eigen::internal::gemm_blocking_space.1029"* %5, i64 0, i32 0, i32 1
  %41 = load i32*, i32** %40, align 8, !tbaa !196
  %42 = icmp eq i32* %41, null
  br i1 %42, label %47, label %43

; <label>:43:                                     ; preds = %39
  %44 = getelementptr inbounds i32, i32* %41, i64 -2
  %45 = bitcast i32* %44 to i8**
  %46 = load i8*, i8** %45, align 8, !tbaa !29
  call void @free(i8* %46) #11
  br label %47

; <label>:47:                                     ; preds = %39, %43
  call void @llvm.lifetime.end(i64 56, i8* nonnull %11) #11
  br label %48

; <label>:48:                                     ; preds = %4, %47
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEENS3_INS_7ProductINS4_IiLi47ELin1ELi0ELi47ELin1EEENS4_IiLin1ELi6ELi0ELin1ELi6EEELi1EEEEENS0_9assign_opIiiEELi0EEELi4ELi0EE3runERSE_(%"class.Eigen::internal::generic_dense_assignment_kernel.964"* dereferenceable(32)) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.964", %"class.Eigen::internal::generic_dense_assignment_kernel.964"* %0, i64 0, i32 3
  %3 = bitcast %"class.Eigen::Matrix.77"** %2 to i64*
  %4 = load i64, i64* %3, align 8, !tbaa !11
  %5 = and i64 %4, 3
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %8, label %7

; <label>:7:                                      ; preds = %1
  tail call void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEENS3_INS_7ProductINS4_IiLi47ELin1ELi0ELi47ELin1EEENS4_IiLin1ELi6ELi0ELin1ELi6EEELi1EEEEENS0_9assign_opIiiEELi0EEELi0ELi0EE3runERSE_(%"class.Eigen::internal::generic_dense_assignment_kernel.964"* nonnull dereferenceable(32) %0)
  br label %173

; <label>:8:                                      ; preds = %1
  %9 = lshr i64 %4, 2
  %10 = sub nsw i64 0, %9
  %11 = and i64 %10, 3
  %12 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.964"* %0 to %"struct.Eigen::internal::evaluator.546"**
  %13 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.964", %"class.Eigen::internal::generic_dense_assignment_kernel.964"* %0, i64 0, i32 1
  %14 = bitcast %"struct.Eigen::internal::evaluator.961"** %13 to %"struct.Eigen::internal::product_evaluator.962"**
  br label %15

; <label>:15:                                     ; preds = %156, %8
  %16 = phi i64 [ 0, %8 ], [ %159, %156 ]
  %17 = phi i64 [ %11, %8 ], [ %158, %156 ]
  %18 = sub nsw i64 47, %17
  %19 = and i64 %18, -4
  %20 = add nsw i64 %19, %17
  %21 = icmp sgt i64 %17, 0
  br i1 %21, label %22, label %25

; <label>:22:                                     ; preds = %15
  %23 = mul nuw nsw i64 %16, 47
  br label %29

; <label>:24:                                     ; preds = %29
  br label %25

; <label>:25:                                     ; preds = %24, %15
  %26 = icmp sgt i64 %19, 0
  br i1 %26, label %27, label %41

; <label>:27:                                     ; preds = %25
  %28 = mul nuw nsw i64 %16, 47
  br label %45

; <label>:29:                                     ; preds = %29, %22
  %30 = phi i64 [ 0, %22 ], [ %38, %29 ]
  %31 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %12, align 8, !tbaa !11
  %32 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %31, i64 0, i32 0
  %33 = load i32*, i32** %32, align 8, !tbaa !94
  %34 = add nuw nsw i64 %30, %23
  %35 = getelementptr inbounds i32, i32* %33, i64 %34
  %36 = load %"struct.Eigen::internal::product_evaluator.962"*, %"struct.Eigen::internal::product_evaluator.962"** %14, align 8, !tbaa !11
  %37 = tail call i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS3_IiLin1ELi6ELi0ELin1ELi6EEELi1EEELi8ENS_10DenseShapeES7_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.962"* %36, i64 %30, i64 %16) #11
  store i32 %37, i32* %35, align 4, !tbaa !33
  %38 = add nuw nsw i64 %30, 1
  %39 = icmp eq i64 %38, %17
  br i1 %39, label %24, label %29

; <label>:40:                                     ; preds = %150
  br label %41

; <label>:41:                                     ; preds = %40, %25
  %42 = icmp slt i64 %20, 47
  br i1 %42, label %43, label %156

; <label>:43:                                     ; preds = %41
  %44 = mul nuw nsw i64 %16, 47
  br label %161

; <label>:45:                                     ; preds = %27, %150
  %46 = phi i64 [ %17, %27 ], [ %153, %150 ]
  %47 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %12, align 8, !tbaa !11
  %48 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %47, i64 0, i32 0
  %49 = load i32*, i32** %48, align 8, !tbaa !94
  %50 = add nsw i64 %46, %28
  %51 = getelementptr inbounds i32, i32* %49, i64 %50
  %52 = load %"struct.Eigen::internal::product_evaluator.962"*, %"struct.Eigen::internal::product_evaluator.962"** %14, align 8, !tbaa !11
  %53 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.962", %"struct.Eigen::internal::product_evaluator.962"* %52, i64 0, i32 4
  %54 = load i64, i64* %53, align 8, !tbaa !711
  %55 = icmp sgt i64 %54, 0
  br i1 %55, label %56, label %150

; <label>:56:                                     ; preds = %45
  %57 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.962", %"struct.Eigen::internal::product_evaluator.962"* %52, i64 0, i32 2, i32 0, i32 0
  %58 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.962", %"struct.Eigen::internal::product_evaluator.962"* %52, i64 0, i32 3, i32 0, i32 0
  %59 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.962", %"struct.Eigen::internal::product_evaluator.962"* %52, i64 0, i32 3, i32 0, i32 1, i32 0
  %60 = load i32*, i32** %57, align 8, !tbaa !475
  %61 = getelementptr inbounds i32, i32* %60, i64 %46
  %62 = load i32*, i32** %58, align 8, !tbaa !468
  %63 = load i64, i64* %59, align 8, !tbaa !59
  %64 = mul nsw i64 %63, %16
  %65 = add i64 %54, -1
  %66 = and i64 %54, 3
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %88, label %68

; <label>:68:                                     ; preds = %56
  br label %69

; <label>:69:                                     ; preds = %69, %68
  %70 = phi <4 x i32> [ zeroinitializer, %68 ], [ %83, %69 ]
  %71 = phi i64 [ 0, %68 ], [ %84, %69 ]
  %72 = phi i64 [ %66, %68 ], [ %85, %69 ]
  %73 = mul nuw nsw i64 %71, 47
  %74 = getelementptr inbounds i32, i32* %61, i64 %73
  %75 = bitcast i32* %74 to <4 x i32>*
  %76 = load <4 x i32>, <4 x i32>* %75, align 1, !tbaa !11
  %77 = add nsw i64 %71, %64
  %78 = getelementptr inbounds i32, i32* %62, i64 %77
  %79 = load i32, i32* %78, align 4, !tbaa !33
  %80 = insertelement <4 x i32> undef, i32 %79, i32 0
  %81 = shufflevector <4 x i32> %80, <4 x i32> undef, <4 x i32> zeroinitializer
  %82 = mul <4 x i32> %81, %76
  %83 = add <4 x i32> %82, %70
  %84 = add nuw nsw i64 %71, 1
  %85 = add i64 %72, -1
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %87, label %69, !llvm.loop !718

; <label>:87:                                     ; preds = %69
  br label %88

; <label>:88:                                     ; preds = %56, %87
  %89 = phi <4 x i32> [ undef, %56 ], [ %83, %87 ]
  %90 = phi <4 x i32> [ zeroinitializer, %56 ], [ %83, %87 ]
  %91 = phi i64 [ 0, %56 ], [ %84, %87 ]
  %92 = icmp ult i64 %65, 3
  br i1 %92, label %147, label %93

; <label>:93:                                     ; preds = %88
  br label %94

; <label>:94:                                     ; preds = %94, %93
  %95 = phi <4 x i32> [ %90, %93 ], [ %143, %94 ]
  %96 = phi i64 [ %91, %93 ], [ %144, %94 ]
  %97 = mul nuw nsw i64 %96, 47
  %98 = getelementptr inbounds i32, i32* %61, i64 %97
  %99 = bitcast i32* %98 to <4 x i32>*
  %100 = load <4 x i32>, <4 x i32>* %99, align 1, !tbaa !11
  %101 = add nsw i64 %96, %64
  %102 = getelementptr inbounds i32, i32* %62, i64 %101
  %103 = load i32, i32* %102, align 4, !tbaa !33
  %104 = insertelement <4 x i32> undef, i32 %103, i32 0
  %105 = shufflevector <4 x i32> %104, <4 x i32> undef, <4 x i32> zeroinitializer
  %106 = mul <4 x i32> %105, %100
  %107 = add <4 x i32> %106, %95
  %108 = add nuw nsw i64 %96, 1
  %109 = mul nuw nsw i64 %108, 47
  %110 = getelementptr inbounds i32, i32* %61, i64 %109
  %111 = bitcast i32* %110 to <4 x i32>*
  %112 = load <4 x i32>, <4 x i32>* %111, align 1, !tbaa !11
  %113 = add nsw i64 %108, %64
  %114 = getelementptr inbounds i32, i32* %62, i64 %113
  %115 = load i32, i32* %114, align 4, !tbaa !33
  %116 = insertelement <4 x i32> undef, i32 %115, i32 0
  %117 = shufflevector <4 x i32> %116, <4 x i32> undef, <4 x i32> zeroinitializer
  %118 = mul <4 x i32> %117, %112
  %119 = add <4 x i32> %118, %107
  %120 = add nsw i64 %96, 2
  %121 = mul nuw nsw i64 %120, 47
  %122 = getelementptr inbounds i32, i32* %61, i64 %121
  %123 = bitcast i32* %122 to <4 x i32>*
  %124 = load <4 x i32>, <4 x i32>* %123, align 1, !tbaa !11
  %125 = add nsw i64 %120, %64
  %126 = getelementptr inbounds i32, i32* %62, i64 %125
  %127 = load i32, i32* %126, align 4, !tbaa !33
  %128 = insertelement <4 x i32> undef, i32 %127, i32 0
  %129 = shufflevector <4 x i32> %128, <4 x i32> undef, <4 x i32> zeroinitializer
  %130 = mul <4 x i32> %129, %124
  %131 = add <4 x i32> %130, %119
  %132 = add nsw i64 %96, 3
  %133 = mul nuw nsw i64 %132, 47
  %134 = getelementptr inbounds i32, i32* %61, i64 %133
  %135 = bitcast i32* %134 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 1, !tbaa !11
  %137 = add nsw i64 %132, %64
  %138 = getelementptr inbounds i32, i32* %62, i64 %137
  %139 = load i32, i32* %138, align 4, !tbaa !33
  %140 = insertelement <4 x i32> undef, i32 %139, i32 0
  %141 = shufflevector <4 x i32> %140, <4 x i32> undef, <4 x i32> zeroinitializer
  %142 = mul <4 x i32> %141, %136
  %143 = add <4 x i32> %142, %131
  %144 = add nsw i64 %96, 4
  %145 = icmp eq i64 %144, %54
  br i1 %145, label %146, label %94

; <label>:146:                                    ; preds = %94
  br label %147

; <label>:147:                                    ; preds = %88, %146
  %148 = phi <4 x i32> [ %89, %88 ], [ %143, %146 ]
  %149 = bitcast <4 x i32> %148 to <2 x i64>
  br label %150

; <label>:150:                                    ; preds = %45, %147
  %151 = phi <2 x i64> [ zeroinitializer, %45 ], [ %149, %147 ]
  %152 = bitcast i32* %51 to <2 x i64>*
  store <2 x i64> %151, <2 x i64>* %152, align 16, !tbaa !11
  %153 = add nsw i64 %46, 4
  %154 = icmp slt i64 %153, %20
  br i1 %154, label %45, label %40

; <label>:155:                                    ; preds = %161
  br label %156

; <label>:156:                                    ; preds = %155, %41
  %157 = add nsw i64 %17, 1
  %158 = srem i64 %157, 4
  %159 = add nuw nsw i64 %16, 1
  %160 = icmp eq i64 %159, 6
  br i1 %160, label %172, label %15

; <label>:161:                                    ; preds = %161, %43
  %162 = phi i64 [ %20, %43 ], [ %170, %161 ]
  %163 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %12, align 8, !tbaa !11
  %164 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %163, i64 0, i32 0
  %165 = load i32*, i32** %164, align 8, !tbaa !94
  %166 = add nsw i64 %162, %44
  %167 = getelementptr inbounds i32, i32* %165, i64 %166
  %168 = load %"struct.Eigen::internal::product_evaluator.962"*, %"struct.Eigen::internal::product_evaluator.962"** %14, align 8, !tbaa !11
  %169 = tail call i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS3_IiLin1ELi6ELi0ELin1ELi6EEELi1EEELi8ENS_10DenseShapeES7_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.962"* %168, i64 %162, i64 %16) #11
  store i32 %169, i32* %167, align 4, !tbaa !33
  %170 = add nsw i64 %162, 1
  %171 = icmp eq i64 %170, 47
  br i1 %171, label %155, label %161

; <label>:172:                                    ; preds = %156
  br label %173

; <label>:173:                                    ; preds = %172, %7
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEENS3_INS_7ProductINS4_IiLi47ELin1ELi0ELi47ELin1EEENS4_IiLin1ELi6ELi0ELin1ELi6EEELi1EEEEENS0_9assign_opIiiEELi0EEELi0ELi0EE3runERSE_(%"class.Eigen::internal::generic_dense_assignment_kernel.964"* dereferenceable(32)) local_unnamed_addr #6 align 2 {
  %2 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.964"* %0 to %"struct.Eigen::internal::evaluator.546"**
  %3 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.964", %"class.Eigen::internal::generic_dense_assignment_kernel.964"* %0, i64 0, i32 1
  %4 = bitcast %"struct.Eigen::internal::evaluator.961"** %3 to %"struct.Eigen::internal::product_evaluator.962"**
  br label %5

; <label>:5:                                      ; preds = %5, %1
  %6 = phi i64 [ 0, %1 ], [ %13, %5 ]
  %7 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %8 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %7, i64 0, i32 0
  %9 = load i32*, i32** %8, align 8, !tbaa !94
  %10 = getelementptr inbounds i32, i32* %9, i64 %6
  %11 = load %"struct.Eigen::internal::product_evaluator.962"*, %"struct.Eigen::internal::product_evaluator.962"** %4, align 8, !tbaa !11
  %12 = tail call i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS3_IiLin1ELi6ELi0ELin1ELi6EEELi1EEELi8ENS_10DenseShapeES7_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.962"* %11, i64 %6, i64 0) #11
  store i32 %12, i32* %10, align 4, !tbaa !33
  %13 = add nuw nsw i64 %6, 1
  %14 = icmp eq i64 %13, 47
  br i1 %14, label %15, label %5

; <label>:15:                                     ; preds = %5
  br label %16

; <label>:16:                                     ; preds = %15, %16
  %17 = phi i64 [ %25, %16 ], [ 0, %15 ]
  %18 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %19 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %18, i64 0, i32 0
  %20 = load i32*, i32** %19, align 8, !tbaa !94
  %21 = add nuw nsw i64 %17, 47
  %22 = getelementptr inbounds i32, i32* %20, i64 %21
  %23 = load %"struct.Eigen::internal::product_evaluator.962"*, %"struct.Eigen::internal::product_evaluator.962"** %4, align 8, !tbaa !11
  %24 = tail call i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS3_IiLin1ELi6ELi0ELin1ELi6EEELi1EEELi8ENS_10DenseShapeES7_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.962"* %23, i64 %17, i64 1) #11
  store i32 %24, i32* %22, align 4, !tbaa !33
  %25 = add nuw nsw i64 %17, 1
  %26 = icmp eq i64 %25, 47
  br i1 %26, label %27, label %16

; <label>:27:                                     ; preds = %16
  br label %28

; <label>:28:                                     ; preds = %27, %28
  %29 = phi i64 [ %37, %28 ], [ 0, %27 ]
  %30 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %31 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %30, i64 0, i32 0
  %32 = load i32*, i32** %31, align 8, !tbaa !94
  %33 = add nuw nsw i64 %29, 94
  %34 = getelementptr inbounds i32, i32* %32, i64 %33
  %35 = load %"struct.Eigen::internal::product_evaluator.962"*, %"struct.Eigen::internal::product_evaluator.962"** %4, align 8, !tbaa !11
  %36 = tail call i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS3_IiLin1ELi6ELi0ELin1ELi6EEELi1EEELi8ENS_10DenseShapeES7_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.962"* %35, i64 %29, i64 2) #11
  store i32 %36, i32* %34, align 4, !tbaa !33
  %37 = add nuw nsw i64 %29, 1
  %38 = icmp eq i64 %37, 47
  br i1 %38, label %39, label %28

; <label>:39:                                     ; preds = %28
  br label %40

; <label>:40:                                     ; preds = %39, %40
  %41 = phi i64 [ %49, %40 ], [ 0, %39 ]
  %42 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %43 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %42, i64 0, i32 0
  %44 = load i32*, i32** %43, align 8, !tbaa !94
  %45 = add nuw nsw i64 %41, 141
  %46 = getelementptr inbounds i32, i32* %44, i64 %45
  %47 = load %"struct.Eigen::internal::product_evaluator.962"*, %"struct.Eigen::internal::product_evaluator.962"** %4, align 8, !tbaa !11
  %48 = tail call i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS3_IiLin1ELi6ELi0ELin1ELi6EEELi1EEELi8ENS_10DenseShapeES7_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.962"* %47, i64 %41, i64 3) #11
  store i32 %48, i32* %46, align 4, !tbaa !33
  %49 = add nuw nsw i64 %41, 1
  %50 = icmp eq i64 %49, 47
  br i1 %50, label %51, label %40

; <label>:51:                                     ; preds = %40
  br label %52

; <label>:52:                                     ; preds = %51, %52
  %53 = phi i64 [ %61, %52 ], [ 0, %51 ]
  %54 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %55 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %54, i64 0, i32 0
  %56 = load i32*, i32** %55, align 8, !tbaa !94
  %57 = add nuw nsw i64 %53, 188
  %58 = getelementptr inbounds i32, i32* %56, i64 %57
  %59 = load %"struct.Eigen::internal::product_evaluator.962"*, %"struct.Eigen::internal::product_evaluator.962"** %4, align 8, !tbaa !11
  %60 = tail call i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS3_IiLin1ELi6ELi0ELin1ELi6EEELi1EEELi8ENS_10DenseShapeES7_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.962"* %59, i64 %53, i64 4) #11
  store i32 %60, i32* %58, align 4, !tbaa !33
  %61 = add nuw nsw i64 %53, 1
  %62 = icmp eq i64 %61, 47
  br i1 %62, label %63, label %52

; <label>:63:                                     ; preds = %52
  br label %64

; <label>:64:                                     ; preds = %63, %64
  %65 = phi i64 [ %73, %64 ], [ 0, %63 ]
  %66 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %67 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %66, i64 0, i32 0
  %68 = load i32*, i32** %67, align 8, !tbaa !94
  %69 = add nuw nsw i64 %65, 235
  %70 = getelementptr inbounds i32, i32* %68, i64 %69
  %71 = load %"struct.Eigen::internal::product_evaluator.962"*, %"struct.Eigen::internal::product_evaluator.962"** %4, align 8, !tbaa !11
  %72 = tail call i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS3_IiLin1ELi6ELi0ELin1ELi6EEELi1EEELi8ENS_10DenseShapeES7_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.962"* %71, i64 %65, i64 5) #11
  store i32 %72, i32* %70, align 4, !tbaa !33
  %73 = add nuw nsw i64 %65, 1
  %74 = icmp eq i64 %73, 47
  br i1 %74, label %75, label %64

; <label>:75:                                     ; preds = %64
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS3_IiLin1ELi6ELi0ELin1ELi6EEELi1EEELi8ENS_10DenseShapeES7_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.962"*, i64, i64) local_unnamed_addr #6 align 2 {
  %4 = bitcast %"struct.Eigen::internal::product_evaluator.962"* %0 to %"class.Eigen::DenseBase.51"**
  %5 = load %"class.Eigen::DenseBase.51"*, %"class.Eigen::DenseBase.51"** %4, align 8, !tbaa !11
  %6 = bitcast %"class.Eigen::DenseBase.51"* %5 to i32**
  %7 = load i32*, i32** %6, align 8, !tbaa !38, !noalias !719
  %8 = getelementptr inbounds i32, i32* %7, i64 %1
  %9 = getelementptr inbounds %"class.Eigen::DenseBase.51", %"class.Eigen::DenseBase.51"* %5, i64 8
  %10 = bitcast %"class.Eigen::DenseBase.51"* %9 to i64*
  %11 = load i64, i64* %10, align 8, !tbaa !40, !noalias !719
  %12 = icmp ne i32* %8, null
  %13 = icmp slt i64 %11, 0
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %16, !prof !722

; <label>:15:                                     ; preds = %3
  tail call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEELi0EEC2EPKill, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.24, i64 0, i64 0), i32 175, i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.25, i64 0, i64 0)) #13, !noalias !719
  unreachable

; <label>:16:                                     ; preds = %3
  %17 = icmp ugt i64 %1, 46
  br i1 %17, label %18, label %19, !prof !439

; <label>:18:                                     ; preds = %16
  tail call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !719
  unreachable

; <label>:19:                                     ; preds = %16
  %20 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.962", %"struct.Eigen::internal::product_evaluator.962"* %0, i64 0, i32 1
  %21 = bitcast %"class.Eigen::Matrix.123"** %20 to %"class.Eigen::DenseBase.126"**
  %22 = load %"class.Eigen::DenseBase.126"*, %"class.Eigen::DenseBase.126"** %21, align 8, !tbaa !11
  %23 = bitcast %"class.Eigen::DenseBase.126"* %22 to i32**
  %24 = load i32*, i32** %23, align 8, !tbaa !41, !noalias !723
  %25 = getelementptr inbounds %"class.Eigen::DenseBase.126", %"class.Eigen::DenseBase.126"* %22, i64 8
  %26 = bitcast %"class.Eigen::DenseBase.126"* %25 to i64*
  %27 = load i64, i64* %26, align 8, !tbaa !43, !noalias !723
  %28 = mul nsw i64 %27, %2
  %29 = getelementptr inbounds i32, i32* %24, i64 %28
  %30 = icmp ne i32* %29, null
  %31 = icmp slt i64 %27, 0
  %32 = and i1 %31, %30
  br i1 %32, label %33, label %34, !prof !722

; <label>:33:                                     ; preds = %19
  tail call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEELi0EEC2EPKill, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.24, i64 0, i64 0), i32 175, i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.25, i64 0, i64 0)) #13, !noalias !723
  unreachable

; <label>:34:                                     ; preds = %19
  %35 = icmp ugt i64 %2, 5
  br i1 %35, label %36, label %37, !prof !439

; <label>:36:                                     ; preds = %34
  tail call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !723
  unreachable

; <label>:37:                                     ; preds = %34
  %38 = icmp eq i64 %11, %27
  br i1 %38, label %40, label %39

; <label>:39:                                     ; preds = %37
  tail call void @__assert_rtn(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__func__._ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIddEEKNS_7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS5_IdLin1ELi1ELi0ELin1ELi1EEELi0EEEKS7_EC2ERS9_RSA_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.3, i64 0, i64 0), i32 110, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.4, i64 0, i64 0)) #13, !noalias !726
  unreachable

; <label>:40:                                     ; preds = %37
  %41 = icmp eq i64 %11, 0
  br i1 %41, label %64, label %42

; <label>:42:                                     ; preds = %40
  %43 = icmp sgt i64 %11, 0
  br i1 %43, label %45, label %44

; <label>:44:                                     ; preds = %42
  tail call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZNK5Eigen9DenseBaseINS_12CwiseUnaryOpINS_8internal14scalar_abs2_opIdEEKNS_13CwiseBinaryOpINS2_20scalar_difference_opIddEEKNS_7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS9_IdLin1ELi1ELi0ELin1ELi1EEELi0EEEKSB_EEEEE5reduxINS2_13scalar_sum_opIddEEEEdRKT_, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.6, i64 0, i64 0), i32 413, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.7, i64 0, i64 0)) #13
  unreachable

; <label>:45:                                     ; preds = %42
  %46 = load i32, i32* %8, align 4, !tbaa !33
  %47 = load i32, i32* %29, align 4, !tbaa !33
  %48 = mul nsw i32 %47, %46
  %49 = icmp eq i64 %11, 1
  br i1 %49, label %64, label %50

; <label>:50:                                     ; preds = %45
  br label %51

; <label>:51:                                     ; preds = %50, %51
  %52 = phi i64 [ %61, %51 ], [ 1, %50 ]
  %53 = phi i32 [ %60, %51 ], [ %48, %50 ]
  %54 = mul nuw nsw i64 %52, 47
  %55 = getelementptr inbounds i32, i32* %8, i64 %54
  %56 = load i32, i32* %55, align 4, !tbaa !33
  %57 = getelementptr inbounds i32, i32* %29, i64 %52
  %58 = load i32, i32* %57, align 4, !tbaa !33
  %59 = mul nsw i32 %58, %56
  %60 = add nsw i32 %59, %53
  %61 = add nuw nsw i64 %52, 1
  %62 = icmp slt i64 %61, %11
  br i1 %62, label %51, label %63

; <label>:63:                                     ; preds = %51
  br label %64

; <label>:64:                                     ; preds = %63, %40, %45
  %65 = phi i32 [ 0, %40 ], [ %48, %45 ], [ %60, %63 ]
  ret i32 %65
}

; Function Attrs: inlinehint norecurse nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal47copy_using_evaluator_innervec_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEENS3_INS_14CwiseNullaryOpINS0_18scalar_constant_opIiEES5_EEEENS0_9assign_opIiiEELi0EEELi124ELi280EE3runERSE_(%"class.Eigen::internal::generic_dense_assignment_kernel.1028"* dereferenceable(32)) local_unnamed_addr #12 align 2 {
  %2 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1028"* %0 to %"struct.Eigen::internal::evaluator.546"**
  %3 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %4 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %3, i64 0, i32 0
  %5 = load i32*, i32** %4, align 8, !tbaa !94
  %6 = getelementptr inbounds i32, i32* %5, i64 124
  %7 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1028", %"class.Eigen::internal::generic_dense_assignment_kernel.1028"* %0, i64 0, i32 1
  %8 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %9 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %8, i64 0, i32 0, i32 0
  %10 = load i32, i32* %9, align 4, !tbaa !33
  %11 = insertelement <4 x i32> undef, i32 %10, i32 0
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> zeroinitializer
  %13 = bitcast i32* %6 to <4 x i32>*
  store <4 x i32> %12, <4 x i32>* %13, align 1, !tbaa !11
  %14 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %15 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %14, i64 0, i32 0
  %16 = load i32*, i32** %15, align 8, !tbaa !94
  %17 = getelementptr inbounds i32, i32* %16, i64 128
  %18 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %19 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %18, i64 0, i32 0, i32 0
  %20 = load i32, i32* %19, align 4, !tbaa !33
  %21 = insertelement <4 x i32> undef, i32 %20, i32 0
  %22 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> zeroinitializer
  %23 = bitcast i32* %17 to <4 x i32>*
  store <4 x i32> %22, <4 x i32>* %23, align 1, !tbaa !11
  %24 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %25 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %24, i64 0, i32 0
  %26 = load i32*, i32** %25, align 8, !tbaa !94
  %27 = getelementptr inbounds i32, i32* %26, i64 132
  %28 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %29 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %28, i64 0, i32 0, i32 0
  %30 = load i32, i32* %29, align 4, !tbaa !33
  %31 = insertelement <4 x i32> undef, i32 %30, i32 0
  %32 = shufflevector <4 x i32> %31, <4 x i32> undef, <4 x i32> zeroinitializer
  %33 = bitcast i32* %27 to <4 x i32>*
  store <4 x i32> %32, <4 x i32>* %33, align 1, !tbaa !11
  %34 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %35 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %34, i64 0, i32 0
  %36 = load i32*, i32** %35, align 8, !tbaa !94
  %37 = getelementptr inbounds i32, i32* %36, i64 136
  %38 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %39 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %38, i64 0, i32 0, i32 0
  %40 = load i32, i32* %39, align 4, !tbaa !33
  %41 = insertelement <4 x i32> undef, i32 %40, i32 0
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> zeroinitializer
  %43 = bitcast i32* %37 to <4 x i32>*
  store <4 x i32> %42, <4 x i32>* %43, align 1, !tbaa !11
  %44 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %45 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %44, i64 0, i32 0
  %46 = load i32*, i32** %45, align 8, !tbaa !94
  %47 = getelementptr inbounds i32, i32* %46, i64 140
  %48 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %49 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %48, i64 0, i32 0, i32 0
  %50 = load i32, i32* %49, align 4, !tbaa !33
  %51 = insertelement <4 x i32> undef, i32 %50, i32 0
  %52 = shufflevector <4 x i32> %51, <4 x i32> undef, <4 x i32> zeroinitializer
  %53 = bitcast i32* %47 to <4 x i32>*
  store <4 x i32> %52, <4 x i32>* %53, align 1, !tbaa !11
  %54 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %55 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %54, i64 0, i32 0
  %56 = load i32*, i32** %55, align 8, !tbaa !94
  %57 = getelementptr inbounds i32, i32* %56, i64 144
  %58 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %59 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %58, i64 0, i32 0, i32 0
  %60 = load i32, i32* %59, align 4, !tbaa !33
  %61 = insertelement <4 x i32> undef, i32 %60, i32 0
  %62 = shufflevector <4 x i32> %61, <4 x i32> undef, <4 x i32> zeroinitializer
  %63 = bitcast i32* %57 to <4 x i32>*
  store <4 x i32> %62, <4 x i32>* %63, align 1, !tbaa !11
  %64 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %65 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %64, i64 0, i32 0
  %66 = load i32*, i32** %65, align 8, !tbaa !94
  %67 = getelementptr inbounds i32, i32* %66, i64 148
  %68 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %69 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %68, i64 0, i32 0, i32 0
  %70 = load i32, i32* %69, align 4, !tbaa !33
  %71 = insertelement <4 x i32> undef, i32 %70, i32 0
  %72 = shufflevector <4 x i32> %71, <4 x i32> undef, <4 x i32> zeroinitializer
  %73 = bitcast i32* %67 to <4 x i32>*
  store <4 x i32> %72, <4 x i32>* %73, align 1, !tbaa !11
  %74 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %75 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %74, i64 0, i32 0
  %76 = load i32*, i32** %75, align 8, !tbaa !94
  %77 = getelementptr inbounds i32, i32* %76, i64 152
  %78 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %79 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %78, i64 0, i32 0, i32 0
  %80 = load i32, i32* %79, align 4, !tbaa !33
  %81 = insertelement <4 x i32> undef, i32 %80, i32 0
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> zeroinitializer
  %83 = bitcast i32* %77 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %83, align 1, !tbaa !11
  %84 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %85 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %84, i64 0, i32 0
  %86 = load i32*, i32** %85, align 8, !tbaa !94
  %87 = getelementptr inbounds i32, i32* %86, i64 156
  %88 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %89 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %88, i64 0, i32 0, i32 0
  %90 = load i32, i32* %89, align 4, !tbaa !33
  %91 = insertelement <4 x i32> undef, i32 %90, i32 0
  %92 = shufflevector <4 x i32> %91, <4 x i32> undef, <4 x i32> zeroinitializer
  %93 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %92, <4 x i32>* %93, align 1, !tbaa !11
  %94 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %95 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %94, i64 0, i32 0
  %96 = load i32*, i32** %95, align 8, !tbaa !94
  %97 = getelementptr inbounds i32, i32* %96, i64 160
  %98 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %99 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %98, i64 0, i32 0, i32 0
  %100 = load i32, i32* %99, align 4, !tbaa !33
  %101 = insertelement <4 x i32> undef, i32 %100, i32 0
  %102 = shufflevector <4 x i32> %101, <4 x i32> undef, <4 x i32> zeroinitializer
  %103 = bitcast i32* %97 to <4 x i32>*
  store <4 x i32> %102, <4 x i32>* %103, align 1, !tbaa !11
  %104 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %105 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %104, i64 0, i32 0
  %106 = load i32*, i32** %105, align 8, !tbaa !94
  %107 = getelementptr inbounds i32, i32* %106, i64 164
  %108 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %109 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %108, i64 0, i32 0, i32 0
  %110 = load i32, i32* %109, align 4, !tbaa !33
  %111 = insertelement <4 x i32> undef, i32 %110, i32 0
  %112 = shufflevector <4 x i32> %111, <4 x i32> undef, <4 x i32> zeroinitializer
  %113 = bitcast i32* %107 to <4 x i32>*
  store <4 x i32> %112, <4 x i32>* %113, align 1, !tbaa !11
  %114 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %115 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %114, i64 0, i32 0
  %116 = load i32*, i32** %115, align 8, !tbaa !94
  %117 = getelementptr inbounds i32, i32* %116, i64 168
  %118 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %119 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %118, i64 0, i32 0, i32 0
  %120 = load i32, i32* %119, align 4, !tbaa !33
  %121 = insertelement <4 x i32> undef, i32 %120, i32 0
  %122 = shufflevector <4 x i32> %121, <4 x i32> undef, <4 x i32> zeroinitializer
  %123 = bitcast i32* %117 to <4 x i32>*
  store <4 x i32> %122, <4 x i32>* %123, align 1, !tbaa !11
  %124 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %125 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %124, i64 0, i32 0
  %126 = load i32*, i32** %125, align 8, !tbaa !94
  %127 = getelementptr inbounds i32, i32* %126, i64 172
  %128 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %129 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %128, i64 0, i32 0, i32 0
  %130 = load i32, i32* %129, align 4, !tbaa !33
  %131 = insertelement <4 x i32> undef, i32 %130, i32 0
  %132 = shufflevector <4 x i32> %131, <4 x i32> undef, <4 x i32> zeroinitializer
  %133 = bitcast i32* %127 to <4 x i32>*
  store <4 x i32> %132, <4 x i32>* %133, align 1, !tbaa !11
  %134 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %135 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %134, i64 0, i32 0
  %136 = load i32*, i32** %135, align 8, !tbaa !94
  %137 = getelementptr inbounds i32, i32* %136, i64 176
  %138 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %139 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %138, i64 0, i32 0, i32 0
  %140 = load i32, i32* %139, align 4, !tbaa !33
  %141 = insertelement <4 x i32> undef, i32 %140, i32 0
  %142 = shufflevector <4 x i32> %141, <4 x i32> undef, <4 x i32> zeroinitializer
  %143 = bitcast i32* %137 to <4 x i32>*
  store <4 x i32> %142, <4 x i32>* %143, align 1, !tbaa !11
  %144 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %145 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %144, i64 0, i32 0
  %146 = load i32*, i32** %145, align 8, !tbaa !94
  %147 = getelementptr inbounds i32, i32* %146, i64 180
  %148 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %149 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %148, i64 0, i32 0, i32 0
  %150 = load i32, i32* %149, align 4, !tbaa !33
  %151 = insertelement <4 x i32> undef, i32 %150, i32 0
  %152 = shufflevector <4 x i32> %151, <4 x i32> undef, <4 x i32> zeroinitializer
  %153 = bitcast i32* %147 to <4 x i32>*
  store <4 x i32> %152, <4 x i32>* %153, align 1, !tbaa !11
  %154 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %155 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %154, i64 0, i32 0
  %156 = load i32*, i32** %155, align 8, !tbaa !94
  %157 = getelementptr inbounds i32, i32* %156, i64 184
  %158 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %159 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %158, i64 0, i32 0, i32 0
  %160 = load i32, i32* %159, align 4, !tbaa !33
  %161 = insertelement <4 x i32> undef, i32 %160, i32 0
  %162 = shufflevector <4 x i32> %161, <4 x i32> undef, <4 x i32> zeroinitializer
  %163 = bitcast i32* %157 to <4 x i32>*
  store <4 x i32> %162, <4 x i32>* %163, align 1, !tbaa !11
  %164 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %165 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %164, i64 0, i32 0
  %166 = load i32*, i32** %165, align 8, !tbaa !94
  %167 = getelementptr inbounds i32, i32* %166, i64 188
  %168 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %169 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %168, i64 0, i32 0, i32 0
  %170 = load i32, i32* %169, align 4, !tbaa !33
  %171 = insertelement <4 x i32> undef, i32 %170, i32 0
  %172 = shufflevector <4 x i32> %171, <4 x i32> undef, <4 x i32> zeroinitializer
  %173 = bitcast i32* %167 to <4 x i32>*
  store <4 x i32> %172, <4 x i32>* %173, align 1, !tbaa !11
  %174 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %175 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %174, i64 0, i32 0
  %176 = load i32*, i32** %175, align 8, !tbaa !94
  %177 = getelementptr inbounds i32, i32* %176, i64 192
  %178 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %179 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %178, i64 0, i32 0, i32 0
  %180 = load i32, i32* %179, align 4, !tbaa !33
  %181 = insertelement <4 x i32> undef, i32 %180, i32 0
  %182 = shufflevector <4 x i32> %181, <4 x i32> undef, <4 x i32> zeroinitializer
  %183 = bitcast i32* %177 to <4 x i32>*
  store <4 x i32> %182, <4 x i32>* %183, align 1, !tbaa !11
  %184 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %185 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %184, i64 0, i32 0
  %186 = load i32*, i32** %185, align 8, !tbaa !94
  %187 = getelementptr inbounds i32, i32* %186, i64 196
  %188 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %189 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %188, i64 0, i32 0, i32 0
  %190 = load i32, i32* %189, align 4, !tbaa !33
  %191 = insertelement <4 x i32> undef, i32 %190, i32 0
  %192 = shufflevector <4 x i32> %191, <4 x i32> undef, <4 x i32> zeroinitializer
  %193 = bitcast i32* %187 to <4 x i32>*
  store <4 x i32> %192, <4 x i32>* %193, align 1, !tbaa !11
  %194 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %195 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %194, i64 0, i32 0
  %196 = load i32*, i32** %195, align 8, !tbaa !94
  %197 = getelementptr inbounds i32, i32* %196, i64 200
  %198 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %199 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %198, i64 0, i32 0, i32 0
  %200 = load i32, i32* %199, align 4, !tbaa !33
  %201 = insertelement <4 x i32> undef, i32 %200, i32 0
  %202 = shufflevector <4 x i32> %201, <4 x i32> undef, <4 x i32> zeroinitializer
  %203 = bitcast i32* %197 to <4 x i32>*
  store <4 x i32> %202, <4 x i32>* %203, align 1, !tbaa !11
  %204 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %205 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %204, i64 0, i32 0
  %206 = load i32*, i32** %205, align 8, !tbaa !94
  %207 = getelementptr inbounds i32, i32* %206, i64 204
  %208 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %209 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %208, i64 0, i32 0, i32 0
  %210 = load i32, i32* %209, align 4, !tbaa !33
  %211 = insertelement <4 x i32> undef, i32 %210, i32 0
  %212 = shufflevector <4 x i32> %211, <4 x i32> undef, <4 x i32> zeroinitializer
  %213 = bitcast i32* %207 to <4 x i32>*
  store <4 x i32> %212, <4 x i32>* %213, align 1, !tbaa !11
  %214 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %215 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %214, i64 0, i32 0
  %216 = load i32*, i32** %215, align 8, !tbaa !94
  %217 = getelementptr inbounds i32, i32* %216, i64 208
  %218 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %219 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %218, i64 0, i32 0, i32 0
  %220 = load i32, i32* %219, align 4, !tbaa !33
  %221 = insertelement <4 x i32> undef, i32 %220, i32 0
  %222 = shufflevector <4 x i32> %221, <4 x i32> undef, <4 x i32> zeroinitializer
  %223 = bitcast i32* %217 to <4 x i32>*
  store <4 x i32> %222, <4 x i32>* %223, align 1, !tbaa !11
  %224 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %225 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %224, i64 0, i32 0
  %226 = load i32*, i32** %225, align 8, !tbaa !94
  %227 = getelementptr inbounds i32, i32* %226, i64 212
  %228 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %229 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %228, i64 0, i32 0, i32 0
  %230 = load i32, i32* %229, align 4, !tbaa !33
  %231 = insertelement <4 x i32> undef, i32 %230, i32 0
  %232 = shufflevector <4 x i32> %231, <4 x i32> undef, <4 x i32> zeroinitializer
  %233 = bitcast i32* %227 to <4 x i32>*
  store <4 x i32> %232, <4 x i32>* %233, align 1, !tbaa !11
  %234 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %235 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %234, i64 0, i32 0
  %236 = load i32*, i32** %235, align 8, !tbaa !94
  %237 = getelementptr inbounds i32, i32* %236, i64 216
  %238 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %239 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %238, i64 0, i32 0, i32 0
  %240 = load i32, i32* %239, align 4, !tbaa !33
  %241 = insertelement <4 x i32> undef, i32 %240, i32 0
  %242 = shufflevector <4 x i32> %241, <4 x i32> undef, <4 x i32> zeroinitializer
  %243 = bitcast i32* %237 to <4 x i32>*
  store <4 x i32> %242, <4 x i32>* %243, align 1, !tbaa !11
  %244 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %245 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %244, i64 0, i32 0
  %246 = load i32*, i32** %245, align 8, !tbaa !94
  %247 = getelementptr inbounds i32, i32* %246, i64 220
  %248 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %249 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %248, i64 0, i32 0, i32 0
  %250 = load i32, i32* %249, align 4, !tbaa !33
  %251 = insertelement <4 x i32> undef, i32 %250, i32 0
  %252 = shufflevector <4 x i32> %251, <4 x i32> undef, <4 x i32> zeroinitializer
  %253 = bitcast i32* %247 to <4 x i32>*
  store <4 x i32> %252, <4 x i32>* %253, align 1, !tbaa !11
  %254 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %255 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %254, i64 0, i32 0
  %256 = load i32*, i32** %255, align 8, !tbaa !94
  %257 = getelementptr inbounds i32, i32* %256, i64 224
  %258 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %259 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %258, i64 0, i32 0, i32 0
  %260 = load i32, i32* %259, align 4, !tbaa !33
  %261 = insertelement <4 x i32> undef, i32 %260, i32 0
  %262 = shufflevector <4 x i32> %261, <4 x i32> undef, <4 x i32> zeroinitializer
  %263 = bitcast i32* %257 to <4 x i32>*
  store <4 x i32> %262, <4 x i32>* %263, align 1, !tbaa !11
  %264 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %265 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %264, i64 0, i32 0
  %266 = load i32*, i32** %265, align 8, !tbaa !94
  %267 = getelementptr inbounds i32, i32* %266, i64 228
  %268 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %269 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %268, i64 0, i32 0, i32 0
  %270 = load i32, i32* %269, align 4, !tbaa !33
  %271 = insertelement <4 x i32> undef, i32 %270, i32 0
  %272 = shufflevector <4 x i32> %271, <4 x i32> undef, <4 x i32> zeroinitializer
  %273 = bitcast i32* %267 to <4 x i32>*
  store <4 x i32> %272, <4 x i32>* %273, align 1, !tbaa !11
  %274 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %275 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %274, i64 0, i32 0
  %276 = load i32*, i32** %275, align 8, !tbaa !94
  %277 = getelementptr inbounds i32, i32* %276, i64 232
  %278 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %279 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %278, i64 0, i32 0, i32 0
  %280 = load i32, i32* %279, align 4, !tbaa !33
  %281 = insertelement <4 x i32> undef, i32 %280, i32 0
  %282 = shufflevector <4 x i32> %281, <4 x i32> undef, <4 x i32> zeroinitializer
  %283 = bitcast i32* %277 to <4 x i32>*
  store <4 x i32> %282, <4 x i32>* %283, align 1, !tbaa !11
  %284 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %285 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %284, i64 0, i32 0
  %286 = load i32*, i32** %285, align 8, !tbaa !94
  %287 = getelementptr inbounds i32, i32* %286, i64 236
  %288 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %289 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %288, i64 0, i32 0, i32 0
  %290 = load i32, i32* %289, align 4, !tbaa !33
  %291 = insertelement <4 x i32> undef, i32 %290, i32 0
  %292 = shufflevector <4 x i32> %291, <4 x i32> undef, <4 x i32> zeroinitializer
  %293 = bitcast i32* %287 to <4 x i32>*
  store <4 x i32> %292, <4 x i32>* %293, align 1, !tbaa !11
  %294 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %295 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %294, i64 0, i32 0
  %296 = load i32*, i32** %295, align 8, !tbaa !94
  %297 = getelementptr inbounds i32, i32* %296, i64 240
  %298 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %299 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %298, i64 0, i32 0, i32 0
  %300 = load i32, i32* %299, align 4, !tbaa !33
  %301 = insertelement <4 x i32> undef, i32 %300, i32 0
  %302 = shufflevector <4 x i32> %301, <4 x i32> undef, <4 x i32> zeroinitializer
  %303 = bitcast i32* %297 to <4 x i32>*
  store <4 x i32> %302, <4 x i32>* %303, align 1, !tbaa !11
  %304 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %305 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %304, i64 0, i32 0
  %306 = load i32*, i32** %305, align 8, !tbaa !94
  %307 = getelementptr inbounds i32, i32* %306, i64 244
  %308 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %309 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %308, i64 0, i32 0, i32 0
  %310 = load i32, i32* %309, align 4, !tbaa !33
  %311 = insertelement <4 x i32> undef, i32 %310, i32 0
  %312 = shufflevector <4 x i32> %311, <4 x i32> undef, <4 x i32> zeroinitializer
  %313 = bitcast i32* %307 to <4 x i32>*
  store <4 x i32> %312, <4 x i32>* %313, align 1, !tbaa !11
  %314 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %315 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %314, i64 0, i32 0
  %316 = load i32*, i32** %315, align 8, !tbaa !94
  %317 = getelementptr inbounds i32, i32* %316, i64 248
  %318 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %319 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %318, i64 0, i32 0, i32 0
  %320 = load i32, i32* %319, align 4, !tbaa !33
  %321 = insertelement <4 x i32> undef, i32 %320, i32 0
  %322 = shufflevector <4 x i32> %321, <4 x i32> undef, <4 x i32> zeroinitializer
  %323 = bitcast i32* %317 to <4 x i32>*
  store <4 x i32> %322, <4 x i32>* %323, align 1, !tbaa !11
  %324 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %325 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %324, i64 0, i32 0
  %326 = load i32*, i32** %325, align 8, !tbaa !94
  %327 = getelementptr inbounds i32, i32* %326, i64 252
  %328 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %329 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %328, i64 0, i32 0, i32 0
  %330 = load i32, i32* %329, align 4, !tbaa !33
  %331 = insertelement <4 x i32> undef, i32 %330, i32 0
  %332 = shufflevector <4 x i32> %331, <4 x i32> undef, <4 x i32> zeroinitializer
  %333 = bitcast i32* %327 to <4 x i32>*
  store <4 x i32> %332, <4 x i32>* %333, align 1, !tbaa !11
  %334 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %335 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %334, i64 0, i32 0
  %336 = load i32*, i32** %335, align 8, !tbaa !94
  %337 = getelementptr inbounds i32, i32* %336, i64 256
  %338 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %339 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %338, i64 0, i32 0, i32 0
  %340 = load i32, i32* %339, align 4, !tbaa !33
  %341 = insertelement <4 x i32> undef, i32 %340, i32 0
  %342 = shufflevector <4 x i32> %341, <4 x i32> undef, <4 x i32> zeroinitializer
  %343 = bitcast i32* %337 to <4 x i32>*
  store <4 x i32> %342, <4 x i32>* %343, align 1, !tbaa !11
  %344 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %345 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %344, i64 0, i32 0
  %346 = load i32*, i32** %345, align 8, !tbaa !94
  %347 = getelementptr inbounds i32, i32* %346, i64 260
  %348 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %349 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %348, i64 0, i32 0, i32 0
  %350 = load i32, i32* %349, align 4, !tbaa !33
  %351 = insertelement <4 x i32> undef, i32 %350, i32 0
  %352 = shufflevector <4 x i32> %351, <4 x i32> undef, <4 x i32> zeroinitializer
  %353 = bitcast i32* %347 to <4 x i32>*
  store <4 x i32> %352, <4 x i32>* %353, align 1, !tbaa !11
  %354 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %355 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %354, i64 0, i32 0
  %356 = load i32*, i32** %355, align 8, !tbaa !94
  %357 = getelementptr inbounds i32, i32* %356, i64 264
  %358 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %359 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %358, i64 0, i32 0, i32 0
  %360 = load i32, i32* %359, align 4, !tbaa !33
  %361 = insertelement <4 x i32> undef, i32 %360, i32 0
  %362 = shufflevector <4 x i32> %361, <4 x i32> undef, <4 x i32> zeroinitializer
  %363 = bitcast i32* %357 to <4 x i32>*
  store <4 x i32> %362, <4 x i32>* %363, align 1, !tbaa !11
  %364 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %365 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %364, i64 0, i32 0
  %366 = load i32*, i32** %365, align 8, !tbaa !94
  %367 = getelementptr inbounds i32, i32* %366, i64 268
  %368 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %369 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %368, i64 0, i32 0, i32 0
  %370 = load i32, i32* %369, align 4, !tbaa !33
  %371 = insertelement <4 x i32> undef, i32 %370, i32 0
  %372 = shufflevector <4 x i32> %371, <4 x i32> undef, <4 x i32> zeroinitializer
  %373 = bitcast i32* %367 to <4 x i32>*
  store <4 x i32> %372, <4 x i32>* %373, align 1, !tbaa !11
  %374 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %375 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %374, i64 0, i32 0
  %376 = load i32*, i32** %375, align 8, !tbaa !94
  %377 = getelementptr inbounds i32, i32* %376, i64 272
  %378 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %379 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %378, i64 0, i32 0, i32 0
  %380 = load i32, i32* %379, align 4, !tbaa !33
  %381 = insertelement <4 x i32> undef, i32 %380, i32 0
  %382 = shufflevector <4 x i32> %381, <4 x i32> undef, <4 x i32> zeroinitializer
  %383 = bitcast i32* %377 to <4 x i32>*
  store <4 x i32> %382, <4 x i32>* %383, align 1, !tbaa !11
  %384 = load %"struct.Eigen::internal::evaluator.546"*, %"struct.Eigen::internal::evaluator.546"** %2, align 8, !tbaa !11
  %385 = getelementptr inbounds %"struct.Eigen::internal::evaluator.546", %"struct.Eigen::internal::evaluator.546"* %384, i64 0, i32 0
  %386 = load i32*, i32** %385, align 8, !tbaa !94
  %387 = getelementptr inbounds i32, i32* %386, i64 276
  %388 = load %"struct.Eigen::internal::evaluator.1025"*, %"struct.Eigen::internal::evaluator.1025"** %7, align 8, !tbaa !11
  %389 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1025", %"struct.Eigen::internal::evaluator.1025"* %388, i64 0, i32 0, i32 0
  %390 = load i32, i32* %389, align 4, !tbaa !33
  %391 = insertelement <4 x i32> undef, i32 %390, i32 0
  %392 = shufflevector <4 x i32> %391, <4 x i32> undef, <4 x i32> zeroinitializer
  %393 = bitcast i32* %387 to <4 x i32>*
  store <4 x i32> %392, <4 x i32>* %393, align 1, !tbaa !11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal29general_matrix_matrix_productIliLi0ELb0EiLi0ELb0ELi0EE3runElllPKilS4_lPiliRNS0_15level3_blockingIiiEEPNS0_16GemmParallelInfoIlEE(i64, i64, i64, i32*, i64, i32*, i64, i32*, i64, i32, %"class.Eigen::internal::level3_blocking"* dereferenceable(40), %"struct.Eigen::internal::GemmParallelInfo"*) local_unnamed_addr #0 align 2 {
  %13 = alloca %"struct.Eigen::internal::gemm_pack_lhs", align 1
  %14 = alloca %"struct.Eigen::internal::gemm_pack_rhs.1031", align 1
  %15 = alloca %"struct.Eigen::internal::gebp_kernel", align 1
  %16 = alloca %"class.Eigen::internal::const_blas_data_mapper.717", align 8
  %17 = alloca %"class.Eigen::internal::const_blas_data_mapper.717", align 8
  %18 = alloca %"class.Eigen::internal::blas_data_mapper.951", align 8
  %19 = getelementptr inbounds %"class.Eigen::internal::level3_blocking", %"class.Eigen::internal::level3_blocking"* %10, i64 0, i32 4
  %20 = load i64, i64* %19, align 8, !tbaa !193
  %21 = getelementptr inbounds %"class.Eigen::internal::level3_blocking", %"class.Eigen::internal::level3_blocking"* %10, i64 0, i32 2
  %22 = load i64, i64* %21, align 8, !tbaa !460
  %23 = icmp slt i64 %22, %0
  %24 = select i1 %23, i64 %22, i64 %0
  %25 = getelementptr inbounds %"class.Eigen::internal::level3_blocking", %"class.Eigen::internal::level3_blocking"* %10, i64 0, i32 3
  %26 = load i64, i64* %25, align 8, !tbaa !461
  %27 = icmp slt i64 %26, %1
  %28 = select i1 %27, i64 %26, i64 %1
  %29 = getelementptr inbounds %"struct.Eigen::internal::gemm_pack_lhs", %"struct.Eigen::internal::gemm_pack_lhs"* %13, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %29) #11
  %30 = getelementptr inbounds %"struct.Eigen::internal::gemm_pack_rhs.1031", %"struct.Eigen::internal::gemm_pack_rhs.1031"* %14, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %30) #11
  %31 = getelementptr inbounds %"struct.Eigen::internal::gebp_kernel", %"struct.Eigen::internal::gebp_kernel"* %15, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %31) #11
  %32 = mul nsw i64 %24, %20
  %33 = mul nsw i64 %28, %20
  %34 = getelementptr inbounds %"class.Eigen::internal::level3_blocking", %"class.Eigen::internal::level3_blocking"* %10, i64 0, i32 0
  %35 = load i32*, i32** %34, align 8, !tbaa !195
  %36 = icmp eq i32* %35, null
  %37 = shl i64 %32, 2
  br i1 %36, label %38, label %63

; <label>:38:                                     ; preds = %12
  %39 = icmp ult i64 %37, 131073
  br i1 %39, label %40, label %47

; <label>:40:                                     ; preds = %38
  %41 = add i64 %37, 31
  %42 = alloca i8, i64 %41, align 16
  %43 = ptrtoint i8* %42 to i64
  %44 = add i64 %43, 31
  %45 = and i64 %44, -32
  %46 = inttoptr i64 %45 to i8*
  br label %59

; <label>:47:                                     ; preds = %38
  %48 = add i64 %37, 32
  %49 = tail call i8* @malloc(i64 %48) #14
  %50 = icmp eq i8* %49, null
  br i1 %50, label %59, label %51

; <label>:51:                                     ; preds = %47
  %52 = ptrtoint i8* %49 to i64
  %53 = add i64 %52, 32
  %54 = and i64 %53, -32
  %55 = inttoptr i64 %54 to i8*
  %56 = inttoptr i64 %54 to i8**
  %57 = getelementptr inbounds i8*, i8** %56, i64 -1
  store i8* %49, i8** %57, align 8, !tbaa !29
  %58 = load i32*, i32** %34, align 8, !tbaa !195
  br label %59

; <label>:59:                                     ; preds = %51, %47, %40
  %60 = phi i32* [ null, %40 ], [ %58, %51 ], [ null, %47 ]
  %61 = phi i8* [ %46, %40 ], [ %55, %51 ], [ null, %47 ]
  %62 = bitcast i8* %61 to i32*
  br label %63

; <label>:63:                                     ; preds = %12, %59
  %64 = phi i32* [ %60, %59 ], [ %35, %12 ]
  %65 = phi i32* [ %62, %59 ], [ %35, %12 ]
  %66 = icmp ugt i64 %37, 131072
  %67 = getelementptr inbounds %"class.Eigen::internal::level3_blocking", %"class.Eigen::internal::level3_blocking"* %10, i64 0, i32 1
  %68 = load i32*, i32** %67, align 8, !tbaa !196
  %69 = icmp eq i32* %68, null
  %70 = shl i64 %33, 2
  br i1 %69, label %71, label %96

; <label>:71:                                     ; preds = %63
  %72 = icmp ult i64 %70, 131073
  br i1 %72, label %73, label %80

; <label>:73:                                     ; preds = %71
  %74 = add i64 %70, 31
  %75 = alloca i8, i64 %74, align 16
  %76 = ptrtoint i8* %75 to i64
  %77 = add i64 %76, 31
  %78 = and i64 %77, -32
  %79 = inttoptr i64 %78 to i8*
  br label %92

; <label>:80:                                     ; preds = %71
  %81 = add i64 %70, 32
  %82 = call i8* @malloc(i64 %81) #14
  %83 = icmp eq i8* %82, null
  br i1 %83, label %92, label %84

; <label>:84:                                     ; preds = %80
  %85 = ptrtoint i8* %82 to i64
  %86 = add i64 %85, 32
  %87 = and i64 %86, -32
  %88 = inttoptr i64 %87 to i8*
  %89 = inttoptr i64 %87 to i8**
  %90 = getelementptr inbounds i8*, i8** %89, i64 -1
  store i8* %82, i8** %90, align 8, !tbaa !29
  %91 = load i32*, i32** %67, align 8, !tbaa !196
  br label %92

; <label>:92:                                     ; preds = %84, %80, %73
  %93 = phi i32* [ null, %73 ], [ %91, %84 ], [ null, %80 ]
  %94 = phi i8* [ %79, %73 ], [ %88, %84 ], [ null, %80 ]
  %95 = bitcast i8* %94 to i32*
  br label %96

; <label>:96:                                     ; preds = %63, %92
  %97 = phi i32* [ %93, %92 ], [ %68, %63 ]
  %98 = phi i32* [ %95, %92 ], [ %68, %63 ]
  %99 = icmp ugt i64 %70, 131072
  %100 = icmp eq i64 %20, %2
  %101 = and i1 %100, %23
  %102 = xor i1 %101, true
  %103 = or i1 %27, %102
  %104 = icmp sgt i64 %0, 0
  br i1 %104, label %105, label %122

; <label>:105:                                    ; preds = %96
  %106 = icmp sgt i64 %2, 0
  %107 = bitcast %"class.Eigen::internal::const_blas_data_mapper.717"* %16 to i8*
  %108 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.717", %"class.Eigen::internal::const_blas_data_mapper.717"* %16, i64 0, i32 0, i32 0
  %109 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.717", %"class.Eigen::internal::const_blas_data_mapper.717"* %16, i64 0, i32 0, i32 1
  %110 = icmp sgt i64 %1, 0
  %111 = bitcast %"class.Eigen::internal::const_blas_data_mapper.717"* %17 to i8*
  %112 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.717", %"class.Eigen::internal::const_blas_data_mapper.717"* %17, i64 0, i32 0, i32 0
  %113 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.717", %"class.Eigen::internal::const_blas_data_mapper.717"* %17, i64 0, i32 0, i32 1
  %114 = bitcast %"class.Eigen::internal::blas_data_mapper.951"* %18 to i8*
  %115 = getelementptr inbounds %"class.Eigen::internal::blas_data_mapper.951", %"class.Eigen::internal::blas_data_mapper.951"* %18, i64 0, i32 0
  %116 = getelementptr inbounds %"class.Eigen::internal::blas_data_mapper.951", %"class.Eigen::internal::blas_data_mapper.951"* %18, i64 0, i32 1
  br label %141

; <label>:117:                                    ; preds = %175
  br label %119

; <label>:118:                                    ; preds = %190
  br label %119

; <label>:119:                                    ; preds = %118, %117, %141
  %120 = icmp slt i64 %143, %0
  br i1 %120, label %141, label %121

; <label>:121:                                    ; preds = %119
  br label %122

; <label>:122:                                    ; preds = %121, %96
  br i1 %99, label %123, label %131

; <label>:123:                                    ; preds = %122
  %124 = icmp eq i32* %98, null
  %125 = icmp ne i32* %97, null
  %126 = or i1 %124, %125
  br i1 %126, label %131, label %127

; <label>:127:                                    ; preds = %123
  %128 = getelementptr inbounds i32, i32* %98, i64 -2
  %129 = bitcast i32* %128 to i8**
  %130 = load i8*, i8** %129, align 8, !tbaa !29
  call void @free(i8* %130) #11
  br label %131

; <label>:131:                                    ; preds = %122, %123, %127
  br i1 %66, label %132, label %140

; <label>:132:                                    ; preds = %131
  %133 = icmp eq i32* %65, null
  %134 = icmp ne i32* %64, null
  %135 = or i1 %133, %134
  br i1 %135, label %140, label %136

; <label>:136:                                    ; preds = %132
  %137 = getelementptr inbounds i32, i32* %65, i64 -2
  %138 = bitcast i32* %137 to i8**
  %139 = load i8*, i8** %138, align 8, !tbaa !29
  call void @free(i8* %139) #11
  br label %140

; <label>:140:                                    ; preds = %131, %132, %136
  call void @llvm.lifetime.end(i64 1, i8* nonnull %31) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %30) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %29) #11
  ret void

; <label>:141:                                    ; preds = %105, %119
  %142 = phi i64 [ 0, %105 ], [ %143, %119 ]
  %143 = add nsw i64 %142, %24
  %144 = icmp sgt i64 %143, %0
  %145 = select i1 %144, i64 %0, i64 %143
  %146 = sub nsw i64 %145, %142
  br i1 %106, label %147, label %119

; <label>:147:                                    ; preds = %141
  %148 = icmp eq i64 %142, 0
  %149 = or i1 %103, %148
  br i1 %110, label %151, label %150

; <label>:150:                                    ; preds = %147
  br label %190

; <label>:151:                                    ; preds = %147
  br label %152

; <label>:152:                                    ; preds = %151, %175
  %153 = phi i64 [ %154, %175 ], [ 0, %151 ]
  %154 = add nsw i64 %153, %20
  %155 = icmp sgt i64 %154, %2
  %156 = select i1 %155, i64 %2, i64 %154
  %157 = sub nsw i64 %156, %153
  call void @llvm.lifetime.start(i64 16, i8* nonnull %107) #11
  %158 = mul nsw i64 %153, %4
  %159 = add nsw i64 %158, %142
  %160 = getelementptr inbounds i32, i32* %3, i64 %159
  store i32* %160, i32** %108, align 8
  store i64 %4, i64* %109, align 8
  call void @_ZN5Eigen8internal13gemm_pack_lhsIilNS0_22const_blas_data_mapperIilLi0EEELi12ELi4ELi0ELb0ELb0EEclEPiRKS3_llll(%"struct.Eigen::internal::gemm_pack_lhs"* nonnull %13, i32* %65, %"class.Eigen::internal::const_blas_data_mapper.717"* nonnull dereferenceable(16) %16, i64 %157, i64 %146, i64 0, i64 0)
  call void @llvm.lifetime.end(i64 16, i8* nonnull %107) #11
  br i1 %149, label %162, label %161

; <label>:161:                                    ; preds = %152
  br label %163

; <label>:162:                                    ; preds = %152
  br label %177

; <label>:163:                                    ; preds = %161, %163
  %164 = phi i64 [ %165, %163 ], [ 0, %161 ]
  %165 = add nsw i64 %164, %28
  %166 = icmp sgt i64 %165, %1
  %167 = select i1 %166, i64 %1, i64 %165
  %168 = sub nsw i64 %167, %164
  call void @llvm.lifetime.start(i64 16, i8* nonnull %114) #11
  %169 = mul nsw i64 %164, %8
  %170 = add nsw i64 %169, %142
  %171 = getelementptr inbounds i32, i32* %7, i64 %170
  store i32* %171, i32** %115, align 8
  store i64 %8, i64* %116, align 8
  call void @_ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0EEELi12ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll(%"struct.Eigen::internal::gebp_kernel"* nonnull %15, %"class.Eigen::internal::blas_data_mapper.951"* nonnull dereferenceable(16) %18, i32* %65, i32* %98, i64 %146, i64 %157, i64 %168, i32 %9, i64 -1, i64 -1, i64 0, i64 0)
  call void @llvm.lifetime.end(i64 16, i8* nonnull %114) #11
  %172 = icmp slt i64 %165, %1
  br i1 %172, label %163, label %174

; <label>:173:                                    ; preds = %177
  br label %175

; <label>:174:                                    ; preds = %163
  br label %175

; <label>:175:                                    ; preds = %174, %173
  %176 = icmp slt i64 %154, %2
  br i1 %176, label %152, label %117

; <label>:177:                                    ; preds = %162, %177
  %178 = phi i64 [ %179, %177 ], [ 0, %162 ]
  %179 = add nsw i64 %178, %28
  %180 = icmp sgt i64 %179, %1
  %181 = select i1 %180, i64 %1, i64 %179
  %182 = sub nsw i64 %181, %178
  call void @llvm.lifetime.start(i64 16, i8* nonnull %111) #11
  %183 = mul nsw i64 %178, %6
  %184 = add nsw i64 %183, %153
  %185 = getelementptr inbounds i32, i32* %5, i64 %184
  store i32* %185, i32** %112, align 8
  store i64 %6, i64* %113, align 8
  call void @_ZN5Eigen8internal13gemm_pack_rhsIilNS0_22const_blas_data_mapperIilLi0EEELi4ELi0ELb0ELb0EEclEPiRKS3_llll(%"struct.Eigen::internal::gemm_pack_rhs.1031"* nonnull %14, i32* %98, %"class.Eigen::internal::const_blas_data_mapper.717"* nonnull dereferenceable(16) %17, i64 %157, i64 %182, i64 0, i64 0)
  call void @llvm.lifetime.end(i64 16, i8* nonnull %111) #11
  call void @llvm.lifetime.start(i64 16, i8* nonnull %114) #11
  %186 = mul nsw i64 %178, %8
  %187 = add nsw i64 %186, %142
  %188 = getelementptr inbounds i32, i32* %7, i64 %187
  store i32* %188, i32** %115, align 8
  store i64 %8, i64* %116, align 8
  call void @_ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0EEELi12ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll(%"struct.Eigen::internal::gebp_kernel"* nonnull %15, %"class.Eigen::internal::blas_data_mapper.951"* nonnull dereferenceable(16) %18, i32* %65, i32* %98, i64 %146, i64 %157, i64 %182, i32 %9, i64 -1, i64 -1, i64 0, i64 0)
  call void @llvm.lifetime.end(i64 16, i8* nonnull %114) #11
  %189 = icmp slt i64 %179, %1
  br i1 %189, label %177, label %173

; <label>:190:                                    ; preds = %150, %190
  %191 = phi i64 [ %192, %190 ], [ 0, %150 ]
  %192 = add nsw i64 %191, %20
  %193 = icmp sgt i64 %192, %2
  %194 = select i1 %193, i64 %2, i64 %192
  %195 = sub nsw i64 %194, %191
  call void @llvm.lifetime.start(i64 16, i8* nonnull %107) #11
  %196 = mul nsw i64 %191, %4
  %197 = add nsw i64 %196, %142
  %198 = getelementptr inbounds i32, i32* %3, i64 %197
  store i32* %198, i32** %108, align 8
  store i64 %4, i64* %109, align 8
  call void @_ZN5Eigen8internal13gemm_pack_lhsIilNS0_22const_blas_data_mapperIilLi0EEELi12ELi4ELi0ELb0ELb0EEclEPiRKS3_llll(%"struct.Eigen::internal::gemm_pack_lhs"* nonnull %13, i32* %65, %"class.Eigen::internal::const_blas_data_mapper.717"* nonnull dereferenceable(16) %16, i64 %195, i64 %146, i64 0, i64 0)
  call void @llvm.lifetime.end(i64 16, i8* nonnull %107) #11
  %199 = icmp slt i64 %192, %2
  br i1 %199, label %190, label %118
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal13gemm_pack_rhsIilNS0_22const_blas_data_mapperIilLi0EEELi4ELi0ELb0ELb0EEclEPiRKS3_llll(%"struct.Eigen::internal::gemm_pack_rhs.1031"*, i32*, %"class.Eigen::internal::const_blas_data_mapper.717"* dereferenceable(16), i64, i64, i64, i64) local_unnamed_addr #8 align 2 {
  tail call void asm sideeffect "#EIGEN PRODUCT PACK RHS COLMAJOR", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !729
  %8 = or i64 %6, %5
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %11, label %10, !prof !10

; <label>:10:                                     ; preds = %7
  tail call void @__assert_rtn(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__func__._ZN5Eigen8internal13gemm_pack_lhsIilNS0_22const_blas_data_mapperIilLi0EEELi12ELi4ELi0ELb0ELb0EEclEPiRKS3_llll, i64 0, i64 0), i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.35, i64 0, i64 0), i32 1906, i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.36, i64 0, i64 0)) #13
  unreachable

; <label>:11:                                     ; preds = %7
  %12 = sdiv i64 %4, 4
  %13 = shl nsw i64 %12, 2
  %14 = sdiv i64 %3, 4
  %15 = shl nsw i64 %14, 2
  %16 = icmp sgt i64 %4, 3
  br i1 %16, label %17, label %365

; <label>:17:                                     ; preds = %11
  %18 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.717", %"class.Eigen::internal::const_blas_data_mapper.717"* %2, i64 0, i32 0, i32 0
  %19 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.717", %"class.Eigen::internal::const_blas_data_mapper.717"* %2, i64 0, i32 0, i32 1
  %20 = icmp sgt i64 %3, 3
  br i1 %20, label %40, label %21

; <label>:21:                                     ; preds = %17
  %22 = shl i64 %3, 2
  %23 = load i32*, i32** %18, align 8, !tbaa !362
  %24 = load i64, i64* %19, align 8, !tbaa !364
  %25 = icmp sgt i64 %3, 0
  %26 = getelementptr i32, i32* %1, i64 %22
  %27 = mul i64 %24, 3
  %28 = shl i64 %24, 2
  %29 = add i64 %27, %3
  %30 = shl i64 %24, 1
  %31 = add i64 %30, %3
  %32 = add i64 %24, %3
  %33 = add i64 %3, -1
  %34 = icmp ult i64 %3, 8
  %35 = and i64 %3, 7
  %36 = sub i64 %3, %35
  %37 = icmp eq i64 %36, 0
  %38 = shl nuw nsw i64 %35, 2
  %39 = icmp eq i64 %35, 0
  br label %614

; <label>:40:                                     ; preds = %17
  %41 = icmp sgt i64 %15, 4
  %42 = select i1 %41, i64 %15, i64 4
  %43 = add nsw i64 %42, -1
  %44 = lshr i64 %43, 2
  %45 = shl i64 %44, 4
  %46 = add i64 %45, 16
  %47 = shl nuw i64 %44, 2
  %48 = add i64 %47, 4
  %49 = shl i64 %3, 2
  %50 = icmp slt i64 %48, %3
  %51 = add i64 %3, -4
  %52 = sub i64 %51, %47
  %53 = add i64 %45, 16
  %54 = getelementptr i32, i32* %1, i64 %53
  %55 = getelementptr i32, i32* %1, i64 %49
  %56 = add i64 %45, 16
  %57 = icmp sgt i64 %15, 4
  %58 = select i1 %57, i64 %15, i64 4
  %59 = add nsw i64 %58, -1
  %60 = lshr i64 %59, 2
  %61 = add i64 %3, -1
  %62 = and i64 %60, 1
  %63 = icmp eq i64 %62, 0
  %64 = icmp eq i64 %60, 0
  %65 = icmp ult i64 %52, 8
  %66 = and i64 %52, 7
  %67 = sub i64 %52, %66
  %68 = icmp eq i64 %67, 0
  %69 = add i64 %48, %67
  %70 = shl nuw nsw i64 %66, 2
  %71 = icmp eq i64 %66, 0
  br label %72

; <label>:72:                                     ; preds = %40, %133
  %73 = phi i64 [ 0, %40 ], [ %137, %133 ]
  %74 = phi i64 [ 0, %40 ], [ %135, %133 ]
  %75 = phi i64 [ 0, %40 ], [ %134, %133 ]
  %76 = shl i64 %73, 4
  %77 = or i64 %76, 12
  %78 = or i64 %76, 8
  %79 = or i64 %76, 4
  %80 = load i32*, i32** %18, align 8, !tbaa !362
  %81 = load i64, i64* %19, align 8, !tbaa !364
  %82 = mul nsw i64 %81, %74
  %83 = getelementptr inbounds i32, i32* %80, i64 %82
  %84 = or i64 %74, 1
  %85 = mul nsw i64 %81, %84
  %86 = getelementptr inbounds i32, i32* %80, i64 %85
  %87 = or i64 %74, 2
  %88 = mul nsw i64 %81, %87
  %89 = getelementptr inbounds i32, i32* %80, i64 %88
  %90 = or i64 %74, 3
  %91 = mul nsw i64 %81, %90
  %92 = getelementptr inbounds i32, i32* %80, i64 %91
  br i1 %63, label %93, label %124

; <label>:93:                                     ; preds = %72
  br label %94

; <label>:94:                                     ; preds = %93
  %95 = bitcast i32* %83 to <4 x i32>*
  %96 = load <4 x i32>, <4 x i32>* %95, align 1, !tbaa !11
  %97 = bitcast i32* %86 to <4 x i32>*
  %98 = load <4 x i32>, <4 x i32>* %97, align 1, !tbaa !11
  %99 = bitcast i32* %89 to <4 x i32>*
  %100 = load <4 x i32>, <4 x i32>* %99, align 1, !tbaa !11
  %101 = bitcast i32* %92 to <4 x i32>*
  %102 = load <4 x i32>, <4 x i32>* %101, align 1, !tbaa !11
  %103 = shufflevector <4 x i32> %96, <4 x i32> %98, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %104 = bitcast <4 x i32> %103 to <2 x i64>
  %105 = shufflevector <4 x i32> %100, <4 x i32> %102, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %106 = bitcast <4 x i32> %105 to <2 x i64>
  %107 = shufflevector <4 x i32> %96, <4 x i32> %98, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %108 = bitcast <4 x i32> %107 to <2 x i64>
  %109 = shufflevector <4 x i32> %100, <4 x i32> %102, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %110 = bitcast <4 x i32> %109 to <2 x i64>
  %111 = shufflevector <2 x i64> %104, <2 x i64> %106, <2 x i32> <i32 0, i32 2>
  %112 = shufflevector <2 x i64> %104, <2 x i64> %106, <2 x i32> <i32 1, i32 3>
  %113 = shufflevector <2 x i64> %108, <2 x i64> %110, <2 x i32> <i32 0, i32 2>
  %114 = shufflevector <2 x i64> %108, <2 x i64> %110, <2 x i32> <i32 1, i32 3>
  %115 = getelementptr inbounds i32, i32* %1, i64 %75
  %116 = bitcast i32* %115 to <2 x i64>*
  store <2 x i64> %111, <2 x i64>* %116, align 1, !tbaa !11
  %117 = getelementptr inbounds i32, i32* %115, i64 4
  %118 = bitcast i32* %117 to <2 x i64>*
  store <2 x i64> %112, <2 x i64>* %118, align 1, !tbaa !11
  %119 = getelementptr inbounds i32, i32* %115, i64 8
  %120 = bitcast i32* %119 to <2 x i64>*
  store <2 x i64> %113, <2 x i64>* %120, align 1, !tbaa !11
  %121 = getelementptr inbounds i32, i32* %115, i64 12
  %122 = bitcast i32* %121 to <2 x i64>*
  store <2 x i64> %114, <2 x i64>* %122, align 1, !tbaa !11
  %123 = add nsw i64 %75, 16
  br label %124

; <label>:124:                                    ; preds = %72, %94
  %125 = phi i64 [ 4, %94 ], [ 0, %72 ]
  %126 = phi i64 [ %123, %94 ], [ %75, %72 ]
  br label %127

; <label>:127:                                    ; preds = %124
  br i1 %64, label %249, label %128

; <label>:128:                                    ; preds = %127
  br label %176

; <label>:129:                                    ; preds = %138
  br label %130

; <label>:130:                                    ; preds = %280, %129
  br label %131

; <label>:131:                                    ; preds = %130, %362
  %132 = add i64 %49, %75
  br label %133

; <label>:133:                                    ; preds = %131, %249
  %134 = phi i64 [ %250, %249 ], [ %132, %131 ]
  %135 = add nuw nsw i64 %74, 4
  %136 = icmp slt i64 %135, %13
  %137 = add i64 %73, 1
  br i1 %136, label %72, label %363

; <label>:138:                                    ; preds = %138, %282
  %139 = phi i64 [ %278, %282 ], [ %174, %138 ]
  %140 = phi i64 [ %279, %282 ], [ %173, %138 ]
  %141 = getelementptr inbounds i32, i32* %83, i64 %139
  %142 = load i32, i32* %141, align 4, !tbaa !33
  %143 = getelementptr inbounds i32, i32* %1, i64 %140
  store i32 %142, i32* %143, align 4, !tbaa !33
  %144 = getelementptr inbounds i32, i32* %86, i64 %139
  %145 = load i32, i32* %144, align 4, !tbaa !33
  %146 = add nsw i64 %140, 1
  %147 = getelementptr inbounds i32, i32* %1, i64 %146
  store i32 %145, i32* %147, align 4, !tbaa !33
  %148 = getelementptr inbounds i32, i32* %89, i64 %139
  %149 = load i32, i32* %148, align 4, !tbaa !33
  %150 = add nsw i64 %140, 2
  %151 = getelementptr inbounds i32, i32* %1, i64 %150
  store i32 %149, i32* %151, align 4, !tbaa !33
  %152 = getelementptr inbounds i32, i32* %92, i64 %139
  %153 = load i32, i32* %152, align 4, !tbaa !33
  %154 = add nsw i64 %140, 3
  %155 = getelementptr inbounds i32, i32* %1, i64 %154
  store i32 %153, i32* %155, align 4, !tbaa !33
  %156 = add nsw i64 %140, 4
  %157 = add nsw i64 %139, 1
  %158 = getelementptr inbounds i32, i32* %83, i64 %157
  %159 = load i32, i32* %158, align 4, !tbaa !33
  %160 = getelementptr inbounds i32, i32* %1, i64 %156
  store i32 %159, i32* %160, align 4, !tbaa !33
  %161 = getelementptr inbounds i32, i32* %86, i64 %157
  %162 = load i32, i32* %161, align 4, !tbaa !33
  %163 = add nsw i64 %140, 5
  %164 = getelementptr inbounds i32, i32* %1, i64 %163
  store i32 %162, i32* %164, align 4, !tbaa !33
  %165 = getelementptr inbounds i32, i32* %89, i64 %157
  %166 = load i32, i32* %165, align 4, !tbaa !33
  %167 = add nsw i64 %140, 6
  %168 = getelementptr inbounds i32, i32* %1, i64 %167
  store i32 %166, i32* %168, align 4, !tbaa !33
  %169 = getelementptr inbounds i32, i32* %92, i64 %157
  %170 = load i32, i32* %169, align 4, !tbaa !33
  %171 = add nsw i64 %140, 7
  %172 = getelementptr inbounds i32, i32* %1, i64 %171
  store i32 %170, i32* %172, align 4, !tbaa !33
  %173 = add nsw i64 %140, 8
  %174 = add nsw i64 %139, 2
  %175 = icmp eq i64 %174, %3
  br i1 %175, label %129, label %138, !llvm.loop !730

; <label>:176:                                    ; preds = %176, %128
  %177 = phi i64 [ %125, %128 ], [ %246, %176 ]
  %178 = phi i64 [ %126, %128 ], [ %245, %176 ]
  %179 = getelementptr inbounds i32, i32* %83, i64 %177
  %180 = bitcast i32* %179 to <4 x i32>*
  %181 = load <4 x i32>, <4 x i32>* %180, align 1, !tbaa !11
  %182 = getelementptr inbounds i32, i32* %86, i64 %177
  %183 = bitcast i32* %182 to <4 x i32>*
  %184 = load <4 x i32>, <4 x i32>* %183, align 1, !tbaa !11
  %185 = getelementptr inbounds i32, i32* %89, i64 %177
  %186 = bitcast i32* %185 to <4 x i32>*
  %187 = load <4 x i32>, <4 x i32>* %186, align 1, !tbaa !11
  %188 = getelementptr inbounds i32, i32* %92, i64 %177
  %189 = bitcast i32* %188 to <4 x i32>*
  %190 = load <4 x i32>, <4 x i32>* %189, align 1, !tbaa !11
  %191 = shufflevector <4 x i32> %181, <4 x i32> %184, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %192 = bitcast <4 x i32> %191 to <2 x i64>
  %193 = shufflevector <4 x i32> %187, <4 x i32> %190, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %194 = bitcast <4 x i32> %193 to <2 x i64>
  %195 = shufflevector <4 x i32> %181, <4 x i32> %184, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %196 = bitcast <4 x i32> %195 to <2 x i64>
  %197 = shufflevector <4 x i32> %187, <4 x i32> %190, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %198 = bitcast <4 x i32> %197 to <2 x i64>
  %199 = shufflevector <2 x i64> %192, <2 x i64> %194, <2 x i32> <i32 0, i32 2>
  %200 = shufflevector <2 x i64> %192, <2 x i64> %194, <2 x i32> <i32 1, i32 3>
  %201 = shufflevector <2 x i64> %196, <2 x i64> %198, <2 x i32> <i32 0, i32 2>
  %202 = shufflevector <2 x i64> %196, <2 x i64> %198, <2 x i32> <i32 1, i32 3>
  %203 = getelementptr inbounds i32, i32* %1, i64 %178
  %204 = bitcast i32* %203 to <2 x i64>*
  store <2 x i64> %199, <2 x i64>* %204, align 1, !tbaa !11
  %205 = getelementptr inbounds i32, i32* %203, i64 4
  %206 = bitcast i32* %205 to <2 x i64>*
  store <2 x i64> %200, <2 x i64>* %206, align 1, !tbaa !11
  %207 = getelementptr inbounds i32, i32* %203, i64 8
  %208 = bitcast i32* %207 to <2 x i64>*
  store <2 x i64> %201, <2 x i64>* %208, align 1, !tbaa !11
  %209 = getelementptr inbounds i32, i32* %203, i64 12
  %210 = bitcast i32* %209 to <2 x i64>*
  store <2 x i64> %202, <2 x i64>* %210, align 1, !tbaa !11
  %211 = add nsw i64 %178, 16
  %212 = add nuw nsw i64 %177, 4
  %213 = getelementptr inbounds i32, i32* %83, i64 %212
  %214 = bitcast i32* %213 to <4 x i32>*
  %215 = load <4 x i32>, <4 x i32>* %214, align 1, !tbaa !11
  %216 = getelementptr inbounds i32, i32* %86, i64 %212
  %217 = bitcast i32* %216 to <4 x i32>*
  %218 = load <4 x i32>, <4 x i32>* %217, align 1, !tbaa !11
  %219 = getelementptr inbounds i32, i32* %89, i64 %212
  %220 = bitcast i32* %219 to <4 x i32>*
  %221 = load <4 x i32>, <4 x i32>* %220, align 1, !tbaa !11
  %222 = getelementptr inbounds i32, i32* %92, i64 %212
  %223 = bitcast i32* %222 to <4 x i32>*
  %224 = load <4 x i32>, <4 x i32>* %223, align 1, !tbaa !11
  %225 = shufflevector <4 x i32> %215, <4 x i32> %218, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %226 = bitcast <4 x i32> %225 to <2 x i64>
  %227 = shufflevector <4 x i32> %221, <4 x i32> %224, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %228 = bitcast <4 x i32> %227 to <2 x i64>
  %229 = shufflevector <4 x i32> %215, <4 x i32> %218, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %230 = bitcast <4 x i32> %229 to <2 x i64>
  %231 = shufflevector <4 x i32> %221, <4 x i32> %224, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %232 = bitcast <4 x i32> %231 to <2 x i64>
  %233 = shufflevector <2 x i64> %226, <2 x i64> %228, <2 x i32> <i32 0, i32 2>
  %234 = shufflevector <2 x i64> %226, <2 x i64> %228, <2 x i32> <i32 1, i32 3>
  %235 = shufflevector <2 x i64> %230, <2 x i64> %232, <2 x i32> <i32 0, i32 2>
  %236 = shufflevector <2 x i64> %230, <2 x i64> %232, <2 x i32> <i32 1, i32 3>
  %237 = getelementptr inbounds i32, i32* %1, i64 %211
  %238 = bitcast i32* %237 to <2 x i64>*
  store <2 x i64> %233, <2 x i64>* %238, align 1, !tbaa !11
  %239 = getelementptr inbounds i32, i32* %237, i64 4
  %240 = bitcast i32* %239 to <2 x i64>*
  store <2 x i64> %234, <2 x i64>* %240, align 1, !tbaa !11
  %241 = getelementptr inbounds i32, i32* %237, i64 8
  %242 = bitcast i32* %241 to <2 x i64>*
  store <2 x i64> %235, <2 x i64>* %242, align 1, !tbaa !11
  %243 = getelementptr inbounds i32, i32* %237, i64 12
  %244 = bitcast i32* %243 to <2 x i64>*
  store <2 x i64> %236, <2 x i64>* %244, align 1, !tbaa !11
  %245 = add nsw i64 %178, 32
  %246 = add nsw i64 %177, 8
  %247 = icmp slt i64 %246, %15
  br i1 %247, label %176, label %248

; <label>:248:                                    ; preds = %176
  br label %249

; <label>:249:                                    ; preds = %127, %248
  %250 = add i64 %46, %75
  br i1 %50, label %251, label %133

; <label>:251:                                    ; preds = %249
  br i1 %65, label %252, label %283

; <label>:252:                                    ; preds = %362, %284, %283, %251
  %253 = phi i64 [ %48, %284 ], [ %48, %283 ], [ %48, %251 ], [ %69, %362 ]
  %254 = phi i64 [ %250, %284 ], [ %250, %283 ], [ %250, %251 ], [ %333, %362 ]
  %255 = sub i64 %3, %253
  %256 = and i64 %255, 1
  %257 = icmp eq i64 %256, 0
  br i1 %257, label %277, label %258

; <label>:258:                                    ; preds = %252
  br label %259

; <label>:259:                                    ; preds = %258
  %260 = getelementptr inbounds i32, i32* %83, i64 %253
  %261 = load i32, i32* %260, align 4, !tbaa !33
  %262 = getelementptr inbounds i32, i32* %1, i64 %254
  store i32 %261, i32* %262, align 4, !tbaa !33
  %263 = getelementptr inbounds i32, i32* %86, i64 %253
  %264 = load i32, i32* %263, align 4, !tbaa !33
  %265 = add nsw i64 %254, 1
  %266 = getelementptr inbounds i32, i32* %1, i64 %265
  store i32 %264, i32* %266, align 4, !tbaa !33
  %267 = getelementptr inbounds i32, i32* %89, i64 %253
  %268 = load i32, i32* %267, align 4, !tbaa !33
  %269 = add nsw i64 %254, 2
  %270 = getelementptr inbounds i32, i32* %1, i64 %269
  store i32 %268, i32* %270, align 4, !tbaa !33
  %271 = getelementptr inbounds i32, i32* %92, i64 %253
  %272 = load i32, i32* %271, align 4, !tbaa !33
  %273 = add nsw i64 %254, 3
  %274 = getelementptr inbounds i32, i32* %1, i64 %273
  store i32 %272, i32* %274, align 4, !tbaa !33
  %275 = add nsw i64 %254, 4
  %276 = add nsw i64 %253, 1
  br label %277

; <label>:277:                                    ; preds = %252, %259
  %278 = phi i64 [ %276, %259 ], [ %253, %252 ]
  %279 = phi i64 [ %275, %259 ], [ %254, %252 ]
  br label %280

; <label>:280:                                    ; preds = %277
  %281 = icmp eq i64 %61, %253
  br i1 %281, label %130, label %282

; <label>:282:                                    ; preds = %280
  br label %138

; <label>:283:                                    ; preds = %251
  br i1 %68, label %252, label %284

; <label>:284:                                    ; preds = %283
  %285 = getelementptr i32, i32* %54, i64 %75
  %286 = bitcast i32* %285 to i8*
  %287 = getelementptr i32, i32* %55, i64 %75
  %288 = bitcast i32* %287 to i8*
  %289 = getelementptr i32, i32* %80, i64 %48
  %290 = bitcast i32* %289 to i8*
  %291 = mul i64 %81, %77
  %292 = getelementptr i8, i8* %290, i64 %291
  %293 = getelementptr i32, i32* %80, i64 %3
  %294 = bitcast i32* %293 to i8*
  %295 = getelementptr i8, i8* %294, i64 %291
  %296 = getelementptr i32, i32* %80, i64 %48
  %297 = bitcast i32* %296 to i8*
  %298 = mul i64 %81, %78
  %299 = getelementptr i8, i8* %297, i64 %298
  %300 = getelementptr i32, i32* %80, i64 %3
  %301 = bitcast i32* %300 to i8*
  %302 = getelementptr i8, i8* %301, i64 %298
  %303 = getelementptr i32, i32* %80, i64 %48
  %304 = bitcast i32* %303 to i8*
  %305 = mul i64 %81, %79
  %306 = getelementptr i8, i8* %304, i64 %305
  %307 = getelementptr i32, i32* %80, i64 %3
  %308 = bitcast i32* %307 to i8*
  %309 = getelementptr i8, i8* %308, i64 %305
  %310 = getelementptr i32, i32* %80, i64 %48
  %311 = bitcast i32* %310 to i8*
  %312 = mul i64 %81, %76
  %313 = getelementptr i8, i8* %311, i64 %312
  %314 = getelementptr i32, i32* %80, i64 %3
  %315 = bitcast i32* %314 to i8*
  %316 = getelementptr i8, i8* %315, i64 %312
  %317 = icmp ult i8* %286, %295
  %318 = icmp ult i8* %292, %288
  %319 = and i1 %317, %318
  %320 = icmp ult i8* %286, %302
  %321 = icmp ult i8* %299, %288
  %322 = and i1 %320, %321
  %323 = or i1 %319, %322
  %324 = icmp ult i8* %286, %309
  %325 = icmp ult i8* %306, %288
  %326 = and i1 %324, %325
  %327 = or i1 %323, %326
  %328 = icmp ult i8* %286, %316
  %329 = icmp ult i8* %313, %288
  %330 = and i1 %328, %329
  %331 = or i1 %327, %330
  %332 = add i64 %49, %75
  %333 = sub i64 %332, %70
  br i1 %331, label %252, label %334

; <label>:334:                                    ; preds = %284
  %335 = add i64 %56, %75
  br label %336

; <label>:336:                                    ; preds = %336, %334
  %337 = phi i64 [ 0, %334 ], [ %360, %336 ]
  %338 = add i64 %48, %337
  %339 = shl i64 %337, 2
  %340 = add i64 %335, %339
  %341 = getelementptr inbounds i32, i32* %83, i64 %338
  %342 = bitcast i32* %341 to <8 x i32>*
  %343 = load <8 x i32>, <8 x i32>* %342, align 4, !tbaa !33, !alias.scope !731
  %344 = getelementptr inbounds i32, i32* %86, i64 %338
  %345 = bitcast i32* %344 to <8 x i32>*
  %346 = load <8 x i32>, <8 x i32>* %345, align 4, !tbaa !33, !alias.scope !734
  %347 = getelementptr inbounds i32, i32* %89, i64 %338
  %348 = bitcast i32* %347 to <8 x i32>*
  %349 = load <8 x i32>, <8 x i32>* %348, align 4, !tbaa !33, !alias.scope !736
  %350 = getelementptr inbounds i32, i32* %92, i64 %338
  %351 = bitcast i32* %350 to <8 x i32>*
  %352 = load <8 x i32>, <8 x i32>* %351, align 4, !tbaa !33, !alias.scope !738
  %353 = add nsw i64 %340, 3
  %354 = getelementptr inbounds i32, i32* %1, i64 %353
  %355 = getelementptr i32, i32* %354, i64 -3
  %356 = bitcast i32* %355 to <32 x i32>*
  %357 = shufflevector <8 x i32> %343, <8 x i32> %346, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %358 = shufflevector <8 x i32> %349, <8 x i32> %352, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %359 = shufflevector <16 x i32> %357, <16 x i32> %358, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i32> %359, <32 x i32>* %356, align 4, !tbaa !33, !alias.scope !740, !noalias !742
  %360 = add i64 %337, 8
  %361 = icmp eq i64 %360, %67
  br i1 %361, label %362, label %336, !llvm.loop !743

; <label>:362:                                    ; preds = %336
  br i1 %71, label %131, label %252

; <label>:363:                                    ; preds = %133
  br label %365

; <label>:364:                                    ; preds = %767
  br label %365

; <label>:365:                                    ; preds = %364, %363, %11
  %366 = phi i64 [ 0, %11 ], [ %134, %363 ], [ %768, %364 ]
  %367 = icmp slt i64 %13, %4
  br i1 %367, label %368, label %773

; <label>:368:                                    ; preds = %365
  %369 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.717", %"class.Eigen::internal::const_blas_data_mapper.717"* %2, i64 0, i32 0, i32 0
  %370 = load i32*, i32** %369, align 8, !tbaa !362
  %371 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.717", %"class.Eigen::internal::const_blas_data_mapper.717"* %2, i64 0, i32 0, i32 1
  %372 = load i64, i64* %371, align 8, !tbaa !364
  %373 = icmp sgt i64 %3, 0
  br i1 %373, label %374, label %773

; <label>:374:                                    ; preds = %368
  %375 = add i64 %366, %3
  %376 = mul i64 %372, %12
  %377 = shl i64 %376, 2
  %378 = add i64 %377, %3
  %379 = add i64 %3, -32
  %380 = lshr i64 %379, 5
  %381 = add nuw nsw i64 %380, 1
  %382 = add i64 %3, -1
  %383 = icmp ult i64 %3, 32
  %384 = and i64 %3, -32
  %385 = icmp eq i64 %384, 0
  %386 = and i64 %381, 3
  %387 = icmp eq i64 %386, 0
  %388 = icmp ult i64 %379, 96
  %389 = icmp eq i64 %384, %3
  br label %390

; <label>:390:                                    ; preds = %374, %609
  %391 = phi i64 [ 0, %374 ], [ %613, %609 ]
  %392 = phi i64 [ %13, %374 ], [ %611, %609 ]
  %393 = phi i64 [ %366, %374 ], [ %610, %609 ]
  %394 = mul i64 %391, %3
  %395 = add i64 %366, %394
  %396 = getelementptr i32, i32* %1, i64 %395
  %397 = add i64 %375, %394
  %398 = getelementptr i32, i32* %1, i64 %397
  %399 = mul i64 %372, %391
  %400 = add i64 %377, %399
  %401 = getelementptr i32, i32* %370, i64 %400
  %402 = add i64 %378, %399
  %403 = getelementptr i32, i32* %370, i64 %402
  %404 = mul nsw i64 %372, %392
  %405 = getelementptr inbounds i32, i32* %370, i64 %404
  br i1 %383, label %538, label %406

; <label>:406:                                    ; preds = %390
  br i1 %385, label %538, label %407

; <label>:407:                                    ; preds = %406
  %408 = icmp ult i32* %396, %403
  %409 = icmp ult i32* %401, %398
  %410 = and i1 %408, %409
  %411 = add i64 %393, %384
  br i1 %410, label %538, label %412

; <label>:412:                                    ; preds = %407
  br i1 %387, label %442, label %413

; <label>:413:                                    ; preds = %412
  br label %414

; <label>:414:                                    ; preds = %414, %413
  %415 = phi i64 [ %438, %414 ], [ 0, %413 ]
  %416 = phi i64 [ %439, %414 ], [ %386, %413 ]
  %417 = add i64 %393, %415
  %418 = getelementptr inbounds i32, i32* %405, i64 %415
  %419 = bitcast i32* %418 to <8 x i32>*
  %420 = load <8 x i32>, <8 x i32>* %419, align 4, !tbaa !33, !alias.scope !744
  %421 = getelementptr i32, i32* %418, i64 8
  %422 = bitcast i32* %421 to <8 x i32>*
  %423 = load <8 x i32>, <8 x i32>* %422, align 4, !tbaa !33, !alias.scope !744
  %424 = getelementptr i32, i32* %418, i64 16
  %425 = bitcast i32* %424 to <8 x i32>*
  %426 = load <8 x i32>, <8 x i32>* %425, align 4, !tbaa !33, !alias.scope !744
  %427 = getelementptr i32, i32* %418, i64 24
  %428 = bitcast i32* %427 to <8 x i32>*
  %429 = load <8 x i32>, <8 x i32>* %428, align 4, !tbaa !33, !alias.scope !744
  %430 = getelementptr inbounds i32, i32* %1, i64 %417
  %431 = bitcast i32* %430 to <8 x i32>*
  store <8 x i32> %420, <8 x i32>* %431, align 4, !tbaa !33, !alias.scope !747, !noalias !744
  %432 = getelementptr i32, i32* %430, i64 8
  %433 = bitcast i32* %432 to <8 x i32>*
  store <8 x i32> %423, <8 x i32>* %433, align 4, !tbaa !33, !alias.scope !747, !noalias !744
  %434 = getelementptr i32, i32* %430, i64 16
  %435 = bitcast i32* %434 to <8 x i32>*
  store <8 x i32> %426, <8 x i32>* %435, align 4, !tbaa !33, !alias.scope !747, !noalias !744
  %436 = getelementptr i32, i32* %430, i64 24
  %437 = bitcast i32* %436 to <8 x i32>*
  store <8 x i32> %429, <8 x i32>* %437, align 4, !tbaa !33, !alias.scope !747, !noalias !744
  %438 = add i64 %415, 32
  %439 = add i64 %416, -1
  %440 = icmp eq i64 %439, 0
  br i1 %440, label %441, label %414, !llvm.loop !749

; <label>:441:                                    ; preds = %414
  br label %442

; <label>:442:                                    ; preds = %412, %441
  %443 = phi i64 [ 0, %412 ], [ %438, %441 ]
  br i1 %388, label %537, label %444

; <label>:444:                                    ; preds = %442
  br label %445

; <label>:445:                                    ; preds = %445, %444
  %446 = phi i64 [ %443, %444 ], [ %534, %445 ]
  %447 = add i64 %393, %446
  %448 = getelementptr inbounds i32, i32* %405, i64 %446
  %449 = bitcast i32* %448 to <8 x i32>*
  %450 = load <8 x i32>, <8 x i32>* %449, align 4, !tbaa !33, !alias.scope !744
  %451 = getelementptr i32, i32* %448, i64 8
  %452 = bitcast i32* %451 to <8 x i32>*
  %453 = load <8 x i32>, <8 x i32>* %452, align 4, !tbaa !33, !alias.scope !744
  %454 = getelementptr i32, i32* %448, i64 16
  %455 = bitcast i32* %454 to <8 x i32>*
  %456 = load <8 x i32>, <8 x i32>* %455, align 4, !tbaa !33, !alias.scope !744
  %457 = getelementptr i32, i32* %448, i64 24
  %458 = bitcast i32* %457 to <8 x i32>*
  %459 = load <8 x i32>, <8 x i32>* %458, align 4, !tbaa !33, !alias.scope !744
  %460 = getelementptr inbounds i32, i32* %1, i64 %447
  %461 = bitcast i32* %460 to <8 x i32>*
  store <8 x i32> %450, <8 x i32>* %461, align 4, !tbaa !33, !alias.scope !747, !noalias !744
  %462 = getelementptr i32, i32* %460, i64 8
  %463 = bitcast i32* %462 to <8 x i32>*
  store <8 x i32> %453, <8 x i32>* %463, align 4, !tbaa !33, !alias.scope !747, !noalias !744
  %464 = getelementptr i32, i32* %460, i64 16
  %465 = bitcast i32* %464 to <8 x i32>*
  store <8 x i32> %456, <8 x i32>* %465, align 4, !tbaa !33, !alias.scope !747, !noalias !744
  %466 = getelementptr i32, i32* %460, i64 24
  %467 = bitcast i32* %466 to <8 x i32>*
  store <8 x i32> %459, <8 x i32>* %467, align 4, !tbaa !33, !alias.scope !747, !noalias !744
  %468 = add i64 %446, 32
  %469 = add i64 %393, %468
  %470 = getelementptr inbounds i32, i32* %405, i64 %468
  %471 = bitcast i32* %470 to <8 x i32>*
  %472 = load <8 x i32>, <8 x i32>* %471, align 4, !tbaa !33, !alias.scope !744
  %473 = getelementptr i32, i32* %470, i64 8
  %474 = bitcast i32* %473 to <8 x i32>*
  %475 = load <8 x i32>, <8 x i32>* %474, align 4, !tbaa !33, !alias.scope !744
  %476 = getelementptr i32, i32* %470, i64 16
  %477 = bitcast i32* %476 to <8 x i32>*
  %478 = load <8 x i32>, <8 x i32>* %477, align 4, !tbaa !33, !alias.scope !744
  %479 = getelementptr i32, i32* %470, i64 24
  %480 = bitcast i32* %479 to <8 x i32>*
  %481 = load <8 x i32>, <8 x i32>* %480, align 4, !tbaa !33, !alias.scope !744
  %482 = getelementptr inbounds i32, i32* %1, i64 %469
  %483 = bitcast i32* %482 to <8 x i32>*
  store <8 x i32> %472, <8 x i32>* %483, align 4, !tbaa !33, !alias.scope !747, !noalias !744
  %484 = getelementptr i32, i32* %482, i64 8
  %485 = bitcast i32* %484 to <8 x i32>*
  store <8 x i32> %475, <8 x i32>* %485, align 4, !tbaa !33, !alias.scope !747, !noalias !744
  %486 = getelementptr i32, i32* %482, i64 16
  %487 = bitcast i32* %486 to <8 x i32>*
  store <8 x i32> %478, <8 x i32>* %487, align 4, !tbaa !33, !alias.scope !747, !noalias !744
  %488 = getelementptr i32, i32* %482, i64 24
  %489 = bitcast i32* %488 to <8 x i32>*
  store <8 x i32> %481, <8 x i32>* %489, align 4, !tbaa !33, !alias.scope !747, !noalias !744
  %490 = add i64 %446, 64
  %491 = add i64 %393, %490
  %492 = getelementptr inbounds i32, i32* %405, i64 %490
  %493 = bitcast i32* %492 to <8 x i32>*
  %494 = load <8 x i32>, <8 x i32>* %493, align 4, !tbaa !33, !alias.scope !744
  %495 = getelementptr i32, i32* %492, i64 8
  %496 = bitcast i32* %495 to <8 x i32>*
  %497 = load <8 x i32>, <8 x i32>* %496, align 4, !tbaa !33, !alias.scope !744
  %498 = getelementptr i32, i32* %492, i64 16
  %499 = bitcast i32* %498 to <8 x i32>*
  %500 = load <8 x i32>, <8 x i32>* %499, align 4, !tbaa !33, !alias.scope !744
  %501 = getelementptr i32, i32* %492, i64 24
  %502 = bitcast i32* %501 to <8 x i32>*
  %503 = load <8 x i32>, <8 x i32>* %502, align 4, !tbaa !33, !alias.scope !744
  %504 = getelementptr inbounds i32, i32* %1, i64 %491
  %505 = bitcast i32* %504 to <8 x i32>*
  store <8 x i32> %494, <8 x i32>* %505, align 4, !tbaa !33, !alias.scope !747, !noalias !744
  %506 = getelementptr i32, i32* %504, i64 8
  %507 = bitcast i32* %506 to <8 x i32>*
  store <8 x i32> %497, <8 x i32>* %507, align 4, !tbaa !33, !alias.scope !747, !noalias !744
  %508 = getelementptr i32, i32* %504, i64 16
  %509 = bitcast i32* %508 to <8 x i32>*
  store <8 x i32> %500, <8 x i32>* %509, align 4, !tbaa !33, !alias.scope !747, !noalias !744
  %510 = getelementptr i32, i32* %504, i64 24
  %511 = bitcast i32* %510 to <8 x i32>*
  store <8 x i32> %503, <8 x i32>* %511, align 4, !tbaa !33, !alias.scope !747, !noalias !744
  %512 = add i64 %446, 96
  %513 = add i64 %393, %512
  %514 = getelementptr inbounds i32, i32* %405, i64 %512
  %515 = bitcast i32* %514 to <8 x i32>*
  %516 = load <8 x i32>, <8 x i32>* %515, align 4, !tbaa !33, !alias.scope !744
  %517 = getelementptr i32, i32* %514, i64 8
  %518 = bitcast i32* %517 to <8 x i32>*
  %519 = load <8 x i32>, <8 x i32>* %518, align 4, !tbaa !33, !alias.scope !744
  %520 = getelementptr i32, i32* %514, i64 16
  %521 = bitcast i32* %520 to <8 x i32>*
  %522 = load <8 x i32>, <8 x i32>* %521, align 4, !tbaa !33, !alias.scope !744
  %523 = getelementptr i32, i32* %514, i64 24
  %524 = bitcast i32* %523 to <8 x i32>*
  %525 = load <8 x i32>, <8 x i32>* %524, align 4, !tbaa !33, !alias.scope !744
  %526 = getelementptr inbounds i32, i32* %1, i64 %513
  %527 = bitcast i32* %526 to <8 x i32>*
  store <8 x i32> %516, <8 x i32>* %527, align 4, !tbaa !33, !alias.scope !747, !noalias !744
  %528 = getelementptr i32, i32* %526, i64 8
  %529 = bitcast i32* %528 to <8 x i32>*
  store <8 x i32> %519, <8 x i32>* %529, align 4, !tbaa !33, !alias.scope !747, !noalias !744
  %530 = getelementptr i32, i32* %526, i64 16
  %531 = bitcast i32* %530 to <8 x i32>*
  store <8 x i32> %522, <8 x i32>* %531, align 4, !tbaa !33, !alias.scope !747, !noalias !744
  %532 = getelementptr i32, i32* %526, i64 24
  %533 = bitcast i32* %532 to <8 x i32>*
  store <8 x i32> %525, <8 x i32>* %533, align 4, !tbaa !33, !alias.scope !747, !noalias !744
  %534 = add i64 %446, 128
  %535 = icmp eq i64 %534, %384
  br i1 %535, label %536, label %445, !llvm.loop !750

; <label>:536:                                    ; preds = %445
  br label %537

; <label>:537:                                    ; preds = %442, %536
  br i1 %389, label %609, label %538

; <label>:538:                                    ; preds = %537, %407, %406, %390
  %539 = phi i64 [ 0, %407 ], [ 0, %406 ], [ 0, %390 ], [ %384, %537 ]
  %540 = phi i64 [ %393, %407 ], [ %393, %406 ], [ %393, %390 ], [ %411, %537 ]
  %541 = sub i64 %3, %539
  %542 = sub i64 %382, %539
  %543 = and i64 %541, 7
  %544 = icmp eq i64 %543, 0
  br i1 %544, label %558, label %545

; <label>:545:                                    ; preds = %538
  br label %546

; <label>:546:                                    ; preds = %546, %545
  %547 = phi i64 [ %554, %546 ], [ %539, %545 ]
  %548 = phi i64 [ %553, %546 ], [ %540, %545 ]
  %549 = phi i64 [ %555, %546 ], [ %543, %545 ]
  %550 = getelementptr inbounds i32, i32* %405, i64 %547
  %551 = load i32, i32* %550, align 4, !tbaa !33
  %552 = getelementptr inbounds i32, i32* %1, i64 %548
  store i32 %551, i32* %552, align 4, !tbaa !33
  %553 = add nsw i64 %548, 1
  %554 = add nuw nsw i64 %547, 1
  %555 = add i64 %549, -1
  %556 = icmp eq i64 %555, 0
  br i1 %556, label %557, label %546, !llvm.loop !751

; <label>:557:                                    ; preds = %546
  br label %558

; <label>:558:                                    ; preds = %538, %557
  %559 = phi i64 [ %539, %538 ], [ %554, %557 ]
  %560 = phi i64 [ %540, %538 ], [ %553, %557 ]
  %561 = icmp ult i64 %542, 7
  br i1 %561, label %608, label %562

; <label>:562:                                    ; preds = %558
  br label %563

; <label>:563:                                    ; preds = %563, %562
  %564 = phi i64 [ %559, %562 ], [ %605, %563 ]
  %565 = phi i64 [ %560, %562 ], [ %604, %563 ]
  %566 = getelementptr inbounds i32, i32* %405, i64 %564
  %567 = load i32, i32* %566, align 4, !tbaa !33
  %568 = getelementptr inbounds i32, i32* %1, i64 %565
  store i32 %567, i32* %568, align 4, !tbaa !33
  %569 = add nsw i64 %565, 1
  %570 = add nuw nsw i64 %564, 1
  %571 = getelementptr inbounds i32, i32* %405, i64 %570
  %572 = load i32, i32* %571, align 4, !tbaa !33
  %573 = getelementptr inbounds i32, i32* %1, i64 %569
  store i32 %572, i32* %573, align 4, !tbaa !33
  %574 = add nsw i64 %565, 2
  %575 = add nsw i64 %564, 2
  %576 = getelementptr inbounds i32, i32* %405, i64 %575
  %577 = load i32, i32* %576, align 4, !tbaa !33
  %578 = getelementptr inbounds i32, i32* %1, i64 %574
  store i32 %577, i32* %578, align 4, !tbaa !33
  %579 = add nsw i64 %565, 3
  %580 = add nsw i64 %564, 3
  %581 = getelementptr inbounds i32, i32* %405, i64 %580
  %582 = load i32, i32* %581, align 4, !tbaa !33
  %583 = getelementptr inbounds i32, i32* %1, i64 %579
  store i32 %582, i32* %583, align 4, !tbaa !33
  %584 = add nsw i64 %565, 4
  %585 = add nsw i64 %564, 4
  %586 = getelementptr inbounds i32, i32* %405, i64 %585
  %587 = load i32, i32* %586, align 4, !tbaa !33
  %588 = getelementptr inbounds i32, i32* %1, i64 %584
  store i32 %587, i32* %588, align 4, !tbaa !33
  %589 = add nsw i64 %565, 5
  %590 = add nsw i64 %564, 5
  %591 = getelementptr inbounds i32, i32* %405, i64 %590
  %592 = load i32, i32* %591, align 4, !tbaa !33
  %593 = getelementptr inbounds i32, i32* %1, i64 %589
  store i32 %592, i32* %593, align 4, !tbaa !33
  %594 = add nsw i64 %565, 6
  %595 = add nsw i64 %564, 6
  %596 = getelementptr inbounds i32, i32* %405, i64 %595
  %597 = load i32, i32* %596, align 4, !tbaa !33
  %598 = getelementptr inbounds i32, i32* %1, i64 %594
  store i32 %597, i32* %598, align 4, !tbaa !33
  %599 = add nsw i64 %565, 7
  %600 = add nsw i64 %564, 7
  %601 = getelementptr inbounds i32, i32* %405, i64 %600
  %602 = load i32, i32* %601, align 4, !tbaa !33
  %603 = getelementptr inbounds i32, i32* %1, i64 %599
  store i32 %602, i32* %603, align 4, !tbaa !33
  %604 = add nsw i64 %565, 8
  %605 = add nsw i64 %564, 8
  %606 = icmp eq i64 %605, %3
  br i1 %606, label %607, label %563, !llvm.loop !752

; <label>:607:                                    ; preds = %563
  br label %608

; <label>:608:                                    ; preds = %558, %607
  br label %609

; <label>:609:                                    ; preds = %608, %537
  %610 = add i64 %393, %3
  %611 = add nsw i64 %392, 1
  %612 = icmp eq i64 %611, %4
  %613 = add i64 %391, 1
  br i1 %612, label %772, label %390

; <label>:614:                                    ; preds = %21, %767
  %615 = phi i64 [ 0, %21 ], [ %771, %767 ]
  %616 = phi i64 [ 0, %21 ], [ %769, %767 ]
  %617 = phi i64 [ 0, %21 ], [ %768, %767 ]
  %618 = mul i64 %28, %615
  %619 = add i64 %27, %618
  %620 = getelementptr i32, i32* %23, i64 %619
  %621 = add i64 %29, %618
  %622 = getelementptr i32, i32* %23, i64 %621
  %623 = add i64 %30, %618
  %624 = getelementptr i32, i32* %23, i64 %623
  %625 = add i64 %31, %618
  %626 = getelementptr i32, i32* %23, i64 %625
  %627 = add i64 %24, %618
  %628 = getelementptr i32, i32* %23, i64 %627
  %629 = add i64 %32, %618
  %630 = getelementptr i32, i32* %23, i64 %629
  %631 = getelementptr i32, i32* %23, i64 %618
  %632 = add i64 %618, %3
  %633 = getelementptr i32, i32* %23, i64 %632
  %634 = mul nsw i64 %24, %616
  %635 = getelementptr inbounds i32, i32* %23, i64 %634
  %636 = or i64 %616, 1
  %637 = mul nsw i64 %24, %636
  %638 = getelementptr inbounds i32, i32* %23, i64 %637
  %639 = or i64 %616, 2
  %640 = mul nsw i64 %24, %639
  %641 = getelementptr inbounds i32, i32* %23, i64 %640
  %642 = or i64 %616, 3
  %643 = mul nsw i64 %24, %642
  %644 = getelementptr inbounds i32, i32* %23, i64 %643
  br i1 %25, label %645, label %767

; <label>:645:                                    ; preds = %614
  br i1 %34, label %694, label %646

; <label>:646:                                    ; preds = %645
  br i1 %37, label %694, label %647

; <label>:647:                                    ; preds = %646
  %648 = getelementptr i32, i32* %1, i64 %617
  %649 = getelementptr i32, i32* %26, i64 %617
  %650 = icmp ult i32* %648, %622
  %651 = icmp ult i32* %620, %649
  %652 = and i1 %650, %651
  %653 = icmp ult i32* %648, %626
  %654 = icmp ult i32* %624, %649
  %655 = and i1 %653, %654
  %656 = or i1 %652, %655
  %657 = icmp ult i32* %648, %630
  %658 = icmp ult i32* %628, %649
  %659 = and i1 %657, %658
  %660 = or i1 %656, %659
  %661 = icmp ult i32* %648, %633
  %662 = icmp ult i32* %631, %649
  %663 = and i1 %661, %662
  %664 = or i1 %660, %663
  %665 = add i64 %22, %617
  %666 = sub i64 %665, %38
  br i1 %664, label %694, label %667

; <label>:667:                                    ; preds = %647
  br label %668

; <label>:668:                                    ; preds = %667, %668
  %669 = phi i64 [ %691, %668 ], [ 0, %667 ]
  %670 = shl i64 %669, 2
  %671 = add i64 %617, %670
  %672 = getelementptr inbounds i32, i32* %635, i64 %669
  %673 = bitcast i32* %672 to <8 x i32>*
  %674 = load <8 x i32>, <8 x i32>* %673, align 4, !tbaa !33, !alias.scope !753
  %675 = getelementptr inbounds i32, i32* %638, i64 %669
  %676 = bitcast i32* %675 to <8 x i32>*
  %677 = load <8 x i32>, <8 x i32>* %676, align 4, !tbaa !33, !alias.scope !756
  %678 = getelementptr inbounds i32, i32* %641, i64 %669
  %679 = bitcast i32* %678 to <8 x i32>*
  %680 = load <8 x i32>, <8 x i32>* %679, align 4, !tbaa !33, !alias.scope !758
  %681 = getelementptr inbounds i32, i32* %644, i64 %669
  %682 = bitcast i32* %681 to <8 x i32>*
  %683 = load <8 x i32>, <8 x i32>* %682, align 4, !tbaa !33, !alias.scope !760
  %684 = add nsw i64 %671, 3
  %685 = getelementptr inbounds i32, i32* %1, i64 %684
  %686 = getelementptr i32, i32* %685, i64 -3
  %687 = bitcast i32* %686 to <32 x i32>*
  %688 = shufflevector <8 x i32> %674, <8 x i32> %677, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %689 = shufflevector <8 x i32> %680, <8 x i32> %683, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %690 = shufflevector <16 x i32> %688, <16 x i32> %689, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i32> %690, <32 x i32>* %687, align 4, !tbaa !33, !alias.scope !762, !noalias !764
  %691 = add i64 %669, 8
  %692 = icmp eq i64 %691, %36
  br i1 %692, label %693, label %668, !llvm.loop !765

; <label>:693:                                    ; preds = %668
  br i1 %39, label %765, label %694

; <label>:694:                                    ; preds = %693, %647, %646, %645
  %695 = phi i64 [ 0, %647 ], [ 0, %646 ], [ 0, %645 ], [ %36, %693 ]
  %696 = phi i64 [ %617, %647 ], [ %617, %646 ], [ %617, %645 ], [ %666, %693 ]
  %697 = sub i64 %3, %695
  %698 = and i64 %697, 1
  %699 = icmp eq i64 %698, 0
  br i1 %699, label %719, label %700

; <label>:700:                                    ; preds = %694
  br label %701

; <label>:701:                                    ; preds = %700
  %702 = getelementptr inbounds i32, i32* %635, i64 %695
  %703 = load i32, i32* %702, align 4, !tbaa !33
  %704 = getelementptr inbounds i32, i32* %1, i64 %696
  store i32 %703, i32* %704, align 4, !tbaa !33
  %705 = getelementptr inbounds i32, i32* %638, i64 %695
  %706 = load i32, i32* %705, align 4, !tbaa !33
  %707 = add nsw i64 %696, 1
  %708 = getelementptr inbounds i32, i32* %1, i64 %707
  store i32 %706, i32* %708, align 4, !tbaa !33
  %709 = getelementptr inbounds i32, i32* %641, i64 %695
  %710 = load i32, i32* %709, align 4, !tbaa !33
  %711 = add nsw i64 %696, 2
  %712 = getelementptr inbounds i32, i32* %1, i64 %711
  store i32 %710, i32* %712, align 4, !tbaa !33
  %713 = getelementptr inbounds i32, i32* %644, i64 %695
  %714 = load i32, i32* %713, align 4, !tbaa !33
  %715 = add nsw i64 %696, 3
  %716 = getelementptr inbounds i32, i32* %1, i64 %715
  store i32 %714, i32* %716, align 4, !tbaa !33
  %717 = add nsw i64 %696, 4
  %718 = add nuw nsw i64 %695, 1
  br label %719

; <label>:719:                                    ; preds = %694, %701
  %720 = phi i64 [ %718, %701 ], [ %695, %694 ]
  %721 = phi i64 [ %717, %701 ], [ %696, %694 ]
  br label %722

; <label>:722:                                    ; preds = %719
  %723 = icmp eq i64 %33, %695
  br i1 %723, label %764, label %724

; <label>:724:                                    ; preds = %722
  br label %725

; <label>:725:                                    ; preds = %725, %724
  %726 = phi i64 [ %720, %724 ], [ %761, %725 ]
  %727 = phi i64 [ %721, %724 ], [ %760, %725 ]
  %728 = getelementptr inbounds i32, i32* %635, i64 %726
  %729 = load i32, i32* %728, align 4, !tbaa !33
  %730 = getelementptr inbounds i32, i32* %1, i64 %727
  store i32 %729, i32* %730, align 4, !tbaa !33
  %731 = getelementptr inbounds i32, i32* %638, i64 %726
  %732 = load i32, i32* %731, align 4, !tbaa !33
  %733 = add nsw i64 %727, 1
  %734 = getelementptr inbounds i32, i32* %1, i64 %733
  store i32 %732, i32* %734, align 4, !tbaa !33
  %735 = getelementptr inbounds i32, i32* %641, i64 %726
  %736 = load i32, i32* %735, align 4, !tbaa !33
  %737 = add nsw i64 %727, 2
  %738 = getelementptr inbounds i32, i32* %1, i64 %737
  store i32 %736, i32* %738, align 4, !tbaa !33
  %739 = getelementptr inbounds i32, i32* %644, i64 %726
  %740 = load i32, i32* %739, align 4, !tbaa !33
  %741 = add nsw i64 %727, 3
  %742 = getelementptr inbounds i32, i32* %1, i64 %741
  store i32 %740, i32* %742, align 4, !tbaa !33
  %743 = add nsw i64 %727, 4
  %744 = add nuw nsw i64 %726, 1
  %745 = getelementptr inbounds i32, i32* %635, i64 %744
  %746 = load i32, i32* %745, align 4, !tbaa !33
  %747 = getelementptr inbounds i32, i32* %1, i64 %743
  store i32 %746, i32* %747, align 4, !tbaa !33
  %748 = getelementptr inbounds i32, i32* %638, i64 %744
  %749 = load i32, i32* %748, align 4, !tbaa !33
  %750 = add nsw i64 %727, 5
  %751 = getelementptr inbounds i32, i32* %1, i64 %750
  store i32 %749, i32* %751, align 4, !tbaa !33
  %752 = getelementptr inbounds i32, i32* %641, i64 %744
  %753 = load i32, i32* %752, align 4, !tbaa !33
  %754 = add nsw i64 %727, 6
  %755 = getelementptr inbounds i32, i32* %1, i64 %754
  store i32 %753, i32* %755, align 4, !tbaa !33
  %756 = getelementptr inbounds i32, i32* %644, i64 %744
  %757 = load i32, i32* %756, align 4, !tbaa !33
  %758 = add nsw i64 %727, 7
  %759 = getelementptr inbounds i32, i32* %1, i64 %758
  store i32 %757, i32* %759, align 4, !tbaa !33
  %760 = add nsw i64 %727, 8
  %761 = add nsw i64 %726, 2
  %762 = icmp eq i64 %761, %3
  br i1 %762, label %763, label %725, !llvm.loop !766

; <label>:763:                                    ; preds = %725
  br label %764

; <label>:764:                                    ; preds = %722, %763
  br label %765

; <label>:765:                                    ; preds = %764, %693
  %766 = add i64 %22, %617
  br label %767

; <label>:767:                                    ; preds = %765, %614
  %768 = phi i64 [ %617, %614 ], [ %766, %765 ]
  %769 = add nuw nsw i64 %616, 4
  %770 = icmp slt i64 %769, %13
  %771 = add i64 %615, 1
  br i1 %770, label %614, label %364

; <label>:772:                                    ; preds = %609
  br label %773

; <label>:773:                                    ; preds = %772, %368, %365
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal15call_assignmentINS_6MatrixIiLin1ELin1ELi0ELin1ELin1EEENS_7ProductINS4_INS2_IiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS0_13sub_assign_opIiiEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsr25evaluator_assume_aliasingISH_EE5valueEPvE4typeE(%"class.Eigen::Matrix.19"* dereferenceable(24), %"class.Eigen::Product.310"* dereferenceable(24), %"struct.Eigen::internal::sub_assign_op"* dereferenceable(1), i8*) local_unnamed_addr #6 {
  %5 = alloca %"class.Eigen::Matrix.1034", align 8
  %6 = bitcast %"class.Eigen::Matrix.1034"* %5 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %6) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %6, i8 0, i64 24, i32 8, i1 false) #11
  %7 = bitcast %"class.Eigen::Product.310"* %1 to %"class.Eigen::PlainObjectBase.33"**
  %8 = load %"class.Eigen::PlainObjectBase.33"*, %"class.Eigen::PlainObjectBase.33"** %7, align 8, !tbaa !11
  %9 = getelementptr inbounds %"class.Eigen::PlainObjectBase.33", %"class.Eigen::PlainObjectBase.33"* %8, i64 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !37
  %11 = getelementptr inbounds %"class.Eigen::Product.310", %"class.Eigen::Product.310"* %1, i64 0, i32 1
  %12 = bitcast %"class.Eigen::Transpose.296"* %11 to %"class.Eigen::PlainObjectBase.124"**
  %13 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %12, align 8, !tbaa !11
  %14 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %13, i64 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8, !tbaa !43
  %16 = or i64 %15, %10
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %18, label %21

; <label>:18:                                     ; preds = %4
  %19 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %5, i64 0, i32 0, i32 0, i32 2
  %20 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %5, i64 0, i32 0, i32 0, i32 1
  br label %45

; <label>:21:                                     ; preds = %4
  %22 = icmp slt i64 %16, 0
  br i1 %22, label %23, label %24, !prof !50

; <label>:23:                                     ; preds = %21
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:24:                                     ; preds = %21
  %25 = mul nsw i64 %15, %10
  %26 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %5, i64 0, i32 0, i32 0, i32 1
  %27 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %5, i64 0, i32 0, i32 0, i32 2
  %28 = icmp eq i64 %25, 0
  br i1 %28, label %44, label %29

; <label>:29:                                     ; preds = %24
  %30 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %5, i64 0, i32 0, i32 0, i32 0
  %31 = shl i64 %25, 2
  %32 = add i64 %31, 32
  %33 = tail call i8* @malloc(i64 %32) #14
  %34 = icmp eq i8* %33, null
  br i1 %34, label %42, label %35

; <label>:35:                                     ; preds = %29
  %36 = ptrtoint i8* %33 to i64
  %37 = add i64 %36, 32
  %38 = and i64 %37, -32
  %39 = inttoptr i64 %38 to i8**
  %40 = getelementptr inbounds i8*, i8** %39, i64 -1
  store i8* %33, i8** %40, align 8, !tbaa !29
  %41 = inttoptr i64 %38 to i32*
  br label %42

; <label>:42:                                     ; preds = %35, %29
  %43 = phi i32* [ %41, %35 ], [ null, %29 ]
  store i32* %43, i32** %30, align 8, !tbaa !767
  br label %44

; <label>:44:                                     ; preds = %42, %24
  store i64 %10, i64* %26, align 8, !tbaa !769
  store i64 %15, i64* %27, align 8, !tbaa !770
  br label %45

; <label>:45:                                     ; preds = %18, %44
  %46 = phi i64* [ %20, %18 ], [ %26, %44 ]
  %47 = phi i64* [ %19, %18 ], [ %27, %44 ]
  %48 = getelementptr inbounds %"class.Eigen::Product.310", %"class.Eigen::Product.310"* %1, i64 0, i32 0
  call void @_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS3_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS_9TransposeIKNS3_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeESB_Li8EE6evalToINS3_IiLin1ELin1ELi1ELin1ELin1EEEEEvRT_RKS6_RKSA_(%"class.Eigen::Matrix.1034"* nonnull dereferenceable(24) %5, %"class.Eigen::Product.317"* nonnull dereferenceable(16) %48, %"class.Eigen::Transpose.296"* nonnull dereferenceable(8) %11) #11
  %49 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %5, i64 0, i32 0, i32 0, i32 0
  %50 = load i32*, i32** %49, align 8, !tbaa !767
  %51 = load i64, i64* %47, align 8, !tbaa !770
  %52 = getelementptr inbounds %"class.Eigen::Matrix.19", %"class.Eigen::Matrix.19"* %0, i64 0, i32 0, i32 0, i32 1
  %53 = load i64, i64* %52, align 8, !tbaa !771
  %54 = load i64, i64* %46, align 8, !tbaa !769
  %55 = icmp eq i64 %53, %54
  br i1 %55, label %56, label %60

; <label>:56:                                     ; preds = %45
  %57 = getelementptr inbounds %"class.Eigen::Matrix.19", %"class.Eigen::Matrix.19"* %0, i64 0, i32 0, i32 0, i32 2
  %58 = load i64, i64* %57, align 8, !tbaa !772
  %59 = icmp eq i64 %58, %51
  br i1 %59, label %61, label %60, !prof !10

; <label>:60:                                     ; preds = %56, %45
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__._ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEENS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES3_EEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.15, i64 0, i64 0), i32 710, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.29, i64 0, i64 0)) #13
  unreachable

; <label>:61:                                     ; preds = %56
  %62 = getelementptr inbounds %"class.Eigen::Matrix.19", %"class.Eigen::Matrix.19"* %0, i64 0, i32 0, i32 0, i32 0
  %63 = load i32*, i32** %62, align 8, !tbaa !30
  %64 = icmp sgt i64 %51, 0
  %65 = icmp sgt i64 %53, 0
  %66 = and i1 %64, %65
  br i1 %66, label %67, label %282

; <label>:67:                                     ; preds = %61
  %68 = add i64 %53, -16
  %69 = lshr i64 %68, 4
  %70 = add nuw nsw i64 %69, 1
  %71 = add i64 %53, -1
  %72 = icmp ult i64 %53, 16
  %73 = and i64 %53, -16
  %74 = icmp ne i64 %73, 0
  %75 = icmp eq i64 %51, 1
  %76 = and i1 %74, %75
  %77 = and i64 %70, 3
  %78 = icmp eq i64 %77, 0
  %79 = icmp ult i64 %68, 48
  %80 = icmp eq i64 %53, %73
  br label %81

; <label>:81:                                     ; preds = %67, %279
  %82 = phi i64 [ %280, %279 ], [ 0, %67 ]
  %83 = mul i64 %53, %82
  %84 = getelementptr i32, i32* %63, i64 %83
  %85 = add i64 %53, %83
  %86 = getelementptr i32, i32* %63, i64 %85
  %87 = getelementptr i32, i32* %50, i64 %82
  %88 = add i64 %53, %82
  %89 = getelementptr i32, i32* %50, i64 %88
  %90 = mul nsw i64 %82, %53
  br i1 %72, label %212, label %91

; <label>:91:                                     ; preds = %81
  br i1 %76, label %92, label %212

; <label>:92:                                     ; preds = %91
  %93 = icmp ult i32* %84, %89
  %94 = icmp ult i32* %87, %86
  %95 = and i1 %93, %94
  br i1 %95, label %212, label %96

; <label>:96:                                     ; preds = %92
  br i1 %78, label %124, label %97

; <label>:97:                                     ; preds = %96
  br label %98

; <label>:98:                                     ; preds = %98, %97
  %99 = phi i64 [ %120, %98 ], [ 0, %97 ]
  %100 = phi i64 [ %121, %98 ], [ %77, %97 ]
  %101 = add nsw i64 %99, %90
  %102 = getelementptr inbounds i32, i32* %63, i64 %101
  %103 = mul nsw i64 %99, %51
  %104 = add nsw i64 %103, %82
  %105 = getelementptr inbounds i32, i32* %50, i64 %104
  %106 = bitcast i32* %105 to <8 x i32>*
  %107 = load <8 x i32>, <8 x i32>* %106, align 4, !tbaa !33, !alias.scope !773
  %108 = getelementptr i32, i32* %105, i64 8
  %109 = bitcast i32* %108 to <8 x i32>*
  %110 = load <8 x i32>, <8 x i32>* %109, align 4, !tbaa !33, !alias.scope !773
  %111 = bitcast i32* %102 to <8 x i32>*
  %112 = load <8 x i32>, <8 x i32>* %111, align 4, !tbaa !33, !alias.scope !776, !noalias !773
  %113 = getelementptr i32, i32* %102, i64 8
  %114 = bitcast i32* %113 to <8 x i32>*
  %115 = load <8 x i32>, <8 x i32>* %114, align 4, !tbaa !33, !alias.scope !776, !noalias !773
  %116 = sub nsw <8 x i32> %112, %107
  %117 = sub nsw <8 x i32> %115, %110
  %118 = bitcast i32* %102 to <8 x i32>*
  store <8 x i32> %116, <8 x i32>* %118, align 4, !tbaa !33, !alias.scope !776, !noalias !773
  %119 = bitcast i32* %113 to <8 x i32>*
  store <8 x i32> %117, <8 x i32>* %119, align 4, !tbaa !33, !alias.scope !776, !noalias !773
  %120 = add i64 %99, 16
  %121 = add i64 %100, -1
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %123, label %98, !llvm.loop !778

; <label>:123:                                    ; preds = %98
  br label %124

; <label>:124:                                    ; preds = %96, %123
  %125 = phi i64 [ 0, %96 ], [ %120, %123 ]
  br i1 %79, label %211, label %126

; <label>:126:                                    ; preds = %124
  br label %127

; <label>:127:                                    ; preds = %127, %126
  %128 = phi i64 [ %125, %126 ], [ %208, %127 ]
  %129 = add nsw i64 %128, %90
  %130 = getelementptr inbounds i32, i32* %63, i64 %129
  %131 = mul nsw i64 %128, %51
  %132 = add nsw i64 %131, %82
  %133 = getelementptr inbounds i32, i32* %50, i64 %132
  %134 = bitcast i32* %133 to <8 x i32>*
  %135 = load <8 x i32>, <8 x i32>* %134, align 4, !tbaa !33, !alias.scope !773
  %136 = getelementptr i32, i32* %133, i64 8
  %137 = bitcast i32* %136 to <8 x i32>*
  %138 = load <8 x i32>, <8 x i32>* %137, align 4, !tbaa !33, !alias.scope !773
  %139 = bitcast i32* %130 to <8 x i32>*
  %140 = load <8 x i32>, <8 x i32>* %139, align 4, !tbaa !33, !alias.scope !776, !noalias !773
  %141 = getelementptr i32, i32* %130, i64 8
  %142 = bitcast i32* %141 to <8 x i32>*
  %143 = load <8 x i32>, <8 x i32>* %142, align 4, !tbaa !33, !alias.scope !776, !noalias !773
  %144 = sub nsw <8 x i32> %140, %135
  %145 = sub nsw <8 x i32> %143, %138
  %146 = bitcast i32* %130 to <8 x i32>*
  store <8 x i32> %144, <8 x i32>* %146, align 4, !tbaa !33, !alias.scope !776, !noalias !773
  %147 = bitcast i32* %141 to <8 x i32>*
  store <8 x i32> %145, <8 x i32>* %147, align 4, !tbaa !33, !alias.scope !776, !noalias !773
  %148 = add i64 %128, 16
  %149 = add nsw i64 %148, %90
  %150 = getelementptr inbounds i32, i32* %63, i64 %149
  %151 = mul nsw i64 %148, %51
  %152 = add nsw i64 %151, %82
  %153 = getelementptr inbounds i32, i32* %50, i64 %152
  %154 = bitcast i32* %153 to <8 x i32>*
  %155 = load <8 x i32>, <8 x i32>* %154, align 4, !tbaa !33, !alias.scope !773
  %156 = getelementptr i32, i32* %153, i64 8
  %157 = bitcast i32* %156 to <8 x i32>*
  %158 = load <8 x i32>, <8 x i32>* %157, align 4, !tbaa !33, !alias.scope !773
  %159 = bitcast i32* %150 to <8 x i32>*
  %160 = load <8 x i32>, <8 x i32>* %159, align 4, !tbaa !33, !alias.scope !776, !noalias !773
  %161 = getelementptr i32, i32* %150, i64 8
  %162 = bitcast i32* %161 to <8 x i32>*
  %163 = load <8 x i32>, <8 x i32>* %162, align 4, !tbaa !33, !alias.scope !776, !noalias !773
  %164 = sub nsw <8 x i32> %160, %155
  %165 = sub nsw <8 x i32> %163, %158
  %166 = bitcast i32* %150 to <8 x i32>*
  store <8 x i32> %164, <8 x i32>* %166, align 4, !tbaa !33, !alias.scope !776, !noalias !773
  %167 = bitcast i32* %161 to <8 x i32>*
  store <8 x i32> %165, <8 x i32>* %167, align 4, !tbaa !33, !alias.scope !776, !noalias !773
  %168 = add i64 %128, 32
  %169 = add nsw i64 %168, %90
  %170 = getelementptr inbounds i32, i32* %63, i64 %169
  %171 = mul nsw i64 %168, %51
  %172 = add nsw i64 %171, %82
  %173 = getelementptr inbounds i32, i32* %50, i64 %172
  %174 = bitcast i32* %173 to <8 x i32>*
  %175 = load <8 x i32>, <8 x i32>* %174, align 4, !tbaa !33, !alias.scope !773
  %176 = getelementptr i32, i32* %173, i64 8
  %177 = bitcast i32* %176 to <8 x i32>*
  %178 = load <8 x i32>, <8 x i32>* %177, align 4, !tbaa !33, !alias.scope !773
  %179 = bitcast i32* %170 to <8 x i32>*
  %180 = load <8 x i32>, <8 x i32>* %179, align 4, !tbaa !33, !alias.scope !776, !noalias !773
  %181 = getelementptr i32, i32* %170, i64 8
  %182 = bitcast i32* %181 to <8 x i32>*
  %183 = load <8 x i32>, <8 x i32>* %182, align 4, !tbaa !33, !alias.scope !776, !noalias !773
  %184 = sub nsw <8 x i32> %180, %175
  %185 = sub nsw <8 x i32> %183, %178
  %186 = bitcast i32* %170 to <8 x i32>*
  store <8 x i32> %184, <8 x i32>* %186, align 4, !tbaa !33, !alias.scope !776, !noalias !773
  %187 = bitcast i32* %181 to <8 x i32>*
  store <8 x i32> %185, <8 x i32>* %187, align 4, !tbaa !33, !alias.scope !776, !noalias !773
  %188 = add i64 %128, 48
  %189 = add nsw i64 %188, %90
  %190 = getelementptr inbounds i32, i32* %63, i64 %189
  %191 = mul nsw i64 %188, %51
  %192 = add nsw i64 %191, %82
  %193 = getelementptr inbounds i32, i32* %50, i64 %192
  %194 = bitcast i32* %193 to <8 x i32>*
  %195 = load <8 x i32>, <8 x i32>* %194, align 4, !tbaa !33, !alias.scope !773
  %196 = getelementptr i32, i32* %193, i64 8
  %197 = bitcast i32* %196 to <8 x i32>*
  %198 = load <8 x i32>, <8 x i32>* %197, align 4, !tbaa !33, !alias.scope !773
  %199 = bitcast i32* %190 to <8 x i32>*
  %200 = load <8 x i32>, <8 x i32>* %199, align 4, !tbaa !33, !alias.scope !776, !noalias !773
  %201 = getelementptr i32, i32* %190, i64 8
  %202 = bitcast i32* %201 to <8 x i32>*
  %203 = load <8 x i32>, <8 x i32>* %202, align 4, !tbaa !33, !alias.scope !776, !noalias !773
  %204 = sub nsw <8 x i32> %200, %195
  %205 = sub nsw <8 x i32> %203, %198
  %206 = bitcast i32* %190 to <8 x i32>*
  store <8 x i32> %204, <8 x i32>* %206, align 4, !tbaa !33, !alias.scope !776, !noalias !773
  %207 = bitcast i32* %201 to <8 x i32>*
  store <8 x i32> %205, <8 x i32>* %207, align 4, !tbaa !33, !alias.scope !776, !noalias !773
  %208 = add i64 %128, 64
  %209 = icmp eq i64 %208, %73
  br i1 %209, label %210, label %127, !llvm.loop !779

; <label>:210:                                    ; preds = %127
  br label %211

; <label>:211:                                    ; preds = %124, %210
  br i1 %80, label %279, label %212

; <label>:212:                                    ; preds = %91, %211, %92, %81
  %213 = phi i64 [ 0, %92 ], [ 0, %91 ], [ 0, %81 ], [ %73, %211 ]
  %214 = sub i64 %53, %213
  %215 = sub i64 %71, %213
  %216 = and i64 %214, 3
  %217 = icmp eq i64 %216, 0
  br i1 %217, label %234, label %218

; <label>:218:                                    ; preds = %212
  br label %219

; <label>:219:                                    ; preds = %219, %218
  %220 = phi i64 [ %230, %219 ], [ %213, %218 ]
  %221 = phi i64 [ %231, %219 ], [ %216, %218 ]
  %222 = add nsw i64 %220, %90
  %223 = getelementptr inbounds i32, i32* %63, i64 %222
  %224 = mul nsw i64 %220, %51
  %225 = add nsw i64 %224, %82
  %226 = getelementptr inbounds i32, i32* %50, i64 %225
  %227 = load i32, i32* %226, align 4, !tbaa !33
  %228 = load i32, i32* %223, align 4, !tbaa !33
  %229 = sub nsw i32 %228, %227
  store i32 %229, i32* %223, align 4, !tbaa !33
  %230 = add nuw nsw i64 %220, 1
  %231 = add i64 %221, -1
  %232 = icmp eq i64 %231, 0
  br i1 %232, label %233, label %219, !llvm.loop !780

; <label>:233:                                    ; preds = %219
  br label %234

; <label>:234:                                    ; preds = %212, %233
  %235 = phi i64 [ %213, %212 ], [ %230, %233 ]
  %236 = icmp ult i64 %215, 3
  br i1 %236, label %278, label %237

; <label>:237:                                    ; preds = %234
  br label %238

; <label>:238:                                    ; preds = %238, %237
  %239 = phi i64 [ %235, %237 ], [ %275, %238 ]
  %240 = add nsw i64 %239, %90
  %241 = getelementptr inbounds i32, i32* %63, i64 %240
  %242 = mul nsw i64 %239, %51
  %243 = add nsw i64 %242, %82
  %244 = getelementptr inbounds i32, i32* %50, i64 %243
  %245 = load i32, i32* %244, align 4, !tbaa !33
  %246 = load i32, i32* %241, align 4, !tbaa !33
  %247 = sub nsw i32 %246, %245
  store i32 %247, i32* %241, align 4, !tbaa !33
  %248 = add nuw nsw i64 %239, 1
  %249 = add nsw i64 %248, %90
  %250 = getelementptr inbounds i32, i32* %63, i64 %249
  %251 = mul nsw i64 %248, %51
  %252 = add nsw i64 %251, %82
  %253 = getelementptr inbounds i32, i32* %50, i64 %252
  %254 = load i32, i32* %253, align 4, !tbaa !33
  %255 = load i32, i32* %250, align 4, !tbaa !33
  %256 = sub nsw i32 %255, %254
  store i32 %256, i32* %250, align 4, !tbaa !33
  %257 = add nsw i64 %239, 2
  %258 = add nsw i64 %257, %90
  %259 = getelementptr inbounds i32, i32* %63, i64 %258
  %260 = mul nsw i64 %257, %51
  %261 = add nsw i64 %260, %82
  %262 = getelementptr inbounds i32, i32* %50, i64 %261
  %263 = load i32, i32* %262, align 4, !tbaa !33
  %264 = load i32, i32* %259, align 4, !tbaa !33
  %265 = sub nsw i32 %264, %263
  store i32 %265, i32* %259, align 4, !tbaa !33
  %266 = add nsw i64 %239, 3
  %267 = add nsw i64 %266, %90
  %268 = getelementptr inbounds i32, i32* %63, i64 %267
  %269 = mul nsw i64 %266, %51
  %270 = add nsw i64 %269, %82
  %271 = getelementptr inbounds i32, i32* %50, i64 %270
  %272 = load i32, i32* %271, align 4, !tbaa !33
  %273 = load i32, i32* %268, align 4, !tbaa !33
  %274 = sub nsw i32 %273, %272
  store i32 %274, i32* %268, align 4, !tbaa !33
  %275 = add nsw i64 %239, 4
  %276 = icmp eq i64 %275, %53
  br i1 %276, label %277, label %238, !llvm.loop !781

; <label>:277:                                    ; preds = %238
  br label %278

; <label>:278:                                    ; preds = %234, %277
  br label %279

; <label>:279:                                    ; preds = %278, %211
  %280 = add nuw nsw i64 %82, 1
  %281 = icmp eq i64 %280, %51
  br i1 %281, label %284, label %81

; <label>:282:                                    ; preds = %61
  %283 = icmp eq i32* %50, null
  br i1 %283, label %289, label %285

; <label>:284:                                    ; preds = %279
  br label %285

; <label>:285:                                    ; preds = %284, %282
  %286 = getelementptr inbounds i32, i32* %50, i64 -2
  %287 = bitcast i32* %286 to i8**
  %288 = load i8*, i8** %287, align 8, !tbaa !29
  call void @free(i8* %288) #11
  br label %289

; <label>:289:                                    ; preds = %282, %285
  call void @llvm.lifetime.end(i64 24, i8* nonnull %6) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS3_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS_9TransposeIKNS3_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeESB_Li8EE6evalToINS3_IiLin1ELin1ELi1ELin1ELin1EEEEEvRT_RKS6_RKSA_(%"class.Eigen::Matrix.1034"* dereferenceable(24), %"class.Eigen::Product.317"* dereferenceable(16), %"class.Eigen::Transpose.296"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.Eigen::Product.1043", align 8
  %5 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8, !tbaa !769
  %9 = add nsw i64 %8, 6
  %10 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %0, i64 0, i32 0, i32 0, i32 2
  %11 = load i64, i64* %10, align 8, !tbaa !770
  %12 = add nsw i64 %9, %11
  %13 = icmp slt i64 %12, 20
  br i1 %13, label %14, label %22

; <label>:14:                                     ; preds = %3
  %15 = bitcast %"class.Eigen::Product.1043"* %4 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %15) #11
  %16 = bitcast %"class.Eigen::Product.317"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %15, i8* nonnull %16, i64 16, i32 8, i1 false) #11
  %17 = getelementptr inbounds %"class.Eigen::Product.1043", %"class.Eigen::Product.1043"* %4, i64 0, i32 1
  %18 = bitcast %"class.Eigen::Transpose.296"* %2 to i64*
  %19 = load i64, i64* %18, align 8, !noalias !782
  %20 = bitcast %"class.Eigen::Transpose.296"* %17 to i64*
  store i64 %19, i64* %20, align 8, !alias.scope !782
  %21 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %5, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %21) #11
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLin1ELin1ELi1ELin1ELin1EEENS_7ProductINS4_INS2_IiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.1034"* nonnull dereferenceable(24) %0, %"class.Eigen::Product.1043"* nonnull dereferenceable(24) %4, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %5) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %21) #11
  call void @llvm.lifetime.end(i64 24, i8* nonnull %15) #11
  br label %52

; <label>:22:                                     ; preds = %3
  %23 = or i64 %11, %8
  %24 = icmp slt i64 %23, 0
  br i1 %24, label %25, label %26, !prof !50

; <label>:25:                                     ; preds = %22
  tail call void @__assert_rtn(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__._ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEENS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEC2EllRKS3_, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.13, i64 0, i64 0), i32 74, i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.14, i64 0, i64 0)) #13, !noalias !785
  unreachable

; <label>:26:                                     ; preds = %22
  %27 = mul i64 %11, %8
  %28 = bitcast %"class.Eigen::Matrix.1034"* %0 to i64*
  %29 = load i64, i64* %28, align 8, !tbaa !767
  %30 = sdiv i64 %27, 4
  %31 = shl nsw i64 %30, 2
  %32 = icmp sgt i64 %27, 3
  br i1 %32, label %33, label %41

; <label>:33:                                     ; preds = %26
  %34 = inttoptr i64 %29 to i8*
  %35 = icmp sgt i64 %31, 4
  %36 = select i1 %35, i64 %31, i64 4
  %37 = add nuw i64 %36, 4611686018427387903
  %38 = lshr i64 %37, 2
  %39 = shl i64 %38, 4
  %40 = add i64 %39, 16
  tail call void @llvm.memset.p0i8.i64(i8* %34, i8 0, i64 %40, i32 16, i1 false) #11
  br label %41

; <label>:41:                                     ; preds = %33, %26
  %42 = icmp slt i64 %31, %27
  br i1 %42, label %43, label %50

; <label>:43:                                     ; preds = %41
  %44 = inttoptr i64 %29 to i32*
  %45 = getelementptr i32, i32* %44, i64 %31
  %46 = bitcast i32* %45 to i8*
  %47 = shl i64 %27, 2
  %48 = shl i64 %30, 4
  %49 = sub i64 %47, %48
  tail call void @llvm.memset.p0i8.i64(i8* %46, i8 0, i64 %49, i32 4, i1 false) #11
  br label %50

; <label>:50:                                     ; preds = %41, %43
  %51 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start(i64 4, i8* nonnull %51) #11
  store i32 1, i32* %6, align 4, !tbaa !33
  call void @_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS3_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS_9TransposeIKNS3_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeESB_Li8EE13scaleAndAddToINS3_IiLin1ELin1ELi1ELin1ELin1EEEEEvRT_RKS6_RKSA_RKi(%"class.Eigen::Matrix.1034"* nonnull dereferenceable(24) %0, %"class.Eigen::Product.317"* nonnull dereferenceable(16) %1, %"class.Eigen::Transpose.296"* nonnull dereferenceable(8) %2, i32* nonnull dereferenceable(4) %6)
  call void @llvm.lifetime.end(i64 4, i8* nonnull %51) #11
  br label %52

; <label>:52:                                     ; preds = %50, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS3_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS_9TransposeIKNS3_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeESB_Li8EE13scaleAndAddToINS3_IiLin1ELin1ELi1ELin1ELin1EEEEEvRT_RKS6_RKSA_RKi(%"class.Eigen::Matrix.1034"* dereferenceable(24), %"class.Eigen::Product.317"* dereferenceable(16), %"class.Eigen::Transpose.296"* dereferenceable(8), i32* dereferenceable(4)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %6 = alloca %"class.Eigen::Matrix.123", align 8
  %7 = alloca %"class.Eigen::internal::gemm_blocking_space.1160", align 8
  %8 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8, !tbaa !769
  %10 = bitcast %"class.Eigen::Product.317"* %1 to %"class.Eigen::PlainObjectBase.33"**
  %11 = load %"class.Eigen::PlainObjectBase.33"*, %"class.Eigen::PlainObjectBase.33"** %10, align 8, !tbaa !11
  %12 = getelementptr inbounds %"class.Eigen::PlainObjectBase.33", %"class.Eigen::PlainObjectBase.33"* %11, i64 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8, !tbaa !37
  %14 = icmp eq i64 %9, %13
  br i1 %14, label %15, label %23

; <label>:15:                                     ; preds = %4
  %16 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %0, i64 0, i32 0, i32 0, i32 2
  %17 = load i64, i64* %16, align 8, !tbaa !770
  %18 = bitcast %"class.Eigen::Transpose.296"* %2 to %"class.Eigen::PlainObjectBase.124"**
  %19 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %18, align 8, !tbaa !11
  %20 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %19, i64 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8, !tbaa !43
  %22 = icmp eq i64 %17, %21
  br i1 %22, label %24, label %23, !prof !10

; <label>:23:                                     ; preds = %15, %4
  tail call void @__assert_rtn(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__func__._ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EENS_9TransposeIKNS8_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeESI_Li8EE13scaleAndAddToINS8_IiLi47ELin1ELi0ELi47ELin1EEEEEvRT_RKSD_RKSH_RKi, i64 0, i64 0), i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.33, i64 0, i64 0), i32 460, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.34, i64 0, i64 0)) #13
  unreachable

; <label>:24:                                     ; preds = %15
  %25 = icmp eq i64 %9, 0
  %26 = icmp eq i64 %17, 0
  %27 = or i1 %25, %26
  br i1 %27, label %115, label %28

; <label>:28:                                     ; preds = %24
  %29 = bitcast %"class.Eigen::Matrix.123"* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %29) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %29, i8 0, i64 16, i32 8, i1 false) #11
  %30 = load i64, i64* %12, align 8, !tbaa !37
  %31 = icmp sgt i64 %30, -1
  br i1 %31, label %33, label %32, !prof !10

; <label>:32:                                     ; preds = %28
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:33:                                     ; preds = %28
  %34 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %6, i64 0, i32 0, i32 0, i32 1
  %35 = and i64 %30, 9223372036854775807
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %55, label %37

; <label>:37:                                     ; preds = %33
  %38 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %6, i64 0, i32 0, i32 0, i32 0
  %39 = icmp eq i64 %30, 0
  br i1 %39, label %54, label %40

; <label>:40:                                     ; preds = %37
  %41 = mul i64 %30, 24
  %42 = add i64 %41, 32
  %43 = tail call i8* @malloc(i64 %42) #14
  %44 = icmp eq i8* %43, null
  br i1 %44, label %52, label %45

; <label>:45:                                     ; preds = %40
  %46 = ptrtoint i8* %43 to i64
  %47 = add i64 %46, 32
  %48 = and i64 %47, -32
  %49 = inttoptr i64 %48 to i8**
  %50 = getelementptr inbounds i8*, i8** %49, i64 -1
  store i8* %43, i8** %50, align 8, !tbaa !29
  %51 = inttoptr i64 %48 to i32*
  br label %52

; <label>:52:                                     ; preds = %45, %40
  %53 = phi i32* [ %51, %45 ], [ null, %40 ]
  store i32* %53, i32** %38, align 8, !tbaa !41
  br label %55

; <label>:54:                                     ; preds = %37
  store i32* null, i32** %38, align 8, !tbaa !41
  br label %55

; <label>:55:                                     ; preds = %33, %52, %54
  store i64 %30, i64* %34, align 8, !tbaa !43
  %56 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %5, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %56) #11
  call void @_ZN5Eigen8internal10AssignmentINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEENS_7ProductINS2_IiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS0_9assign_opIiiEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_(%"class.Eigen::Matrix.123"* nonnull dereferenceable(16) %6, %"class.Eigen::Product.317"* nonnull dereferenceable(16) %1, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %5) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %56) #11
  %57 = getelementptr inbounds %"class.Eigen::Transpose.296", %"class.Eigen::Transpose.296"* %2, i64 0, i32 0
  %58 = load %"class.Eigen::Matrix.123"*, %"class.Eigen::Matrix.123"** %57, align 8, !tbaa !11
  %59 = load i32, i32* %3, align 4, !tbaa !33
  %60 = bitcast %"class.Eigen::internal::gemm_blocking_space.1160"* %7 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %60) #11
  %61 = load i64, i64* %8, align 8, !tbaa !769
  %62 = load i64, i64* %16, align 8, !tbaa !770
  call void @llvm.memset.p0i8.i64(i8* nonnull %60, i8 0, i64 16, i32 8, i1 false) #11
  %63 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1160", %"class.Eigen::internal::gemm_blocking_space.1160"* %7, i64 0, i32 0, i32 2
  store i64 %62, i64* %63, align 8, !tbaa !460
  %64 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1160", %"class.Eigen::internal::gemm_blocking_space.1160"* %7, i64 0, i32 0, i32 3
  store i64 %61, i64* %64, align 8, !tbaa !461
  %65 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1160", %"class.Eigen::internal::gemm_blocking_space.1160"* %7, i64 0, i32 0, i32 4
  store i64 6, i64* %65, align 8, !tbaa !193
  call void @_ZN5Eigen8internal37evaluateProductBlockingSizesHeuristicIiiLi1ElEEvRT2_S3_S3_S2_(i64* nonnull dereferenceable(8) %65, i64* nonnull dereferenceable(8) %63, i64* nonnull dereferenceable(8) %64, i64 1) #11
  %66 = load i64, i64* %63, align 8, !tbaa !460
  %67 = load i64, i64* %65, align 8, !tbaa !193
  %68 = mul nsw i64 %67, %66
  %69 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1160", %"class.Eigen::internal::gemm_blocking_space.1160"* %7, i64 0, i32 1
  store i64 %68, i64* %69, align 8, !tbaa !790
  %70 = load i64, i64* %64, align 8, !tbaa !461
  %71 = mul nsw i64 %70, %67
  %72 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1160", %"class.Eigen::internal::gemm_blocking_space.1160"* %7, i64 0, i32 2
  store i64 %71, i64* %72, align 8, !tbaa !792
  %73 = load %"class.Eigen::PlainObjectBase.33"*, %"class.Eigen::PlainObjectBase.33"** %10, align 8, !tbaa !11
  %74 = getelementptr inbounds %"class.Eigen::PlainObjectBase.33", %"class.Eigen::PlainObjectBase.33"* %73, i64 0, i32 0, i32 1
  %75 = load i64, i64* %74, align 8, !tbaa !37
  %76 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %18, align 8, !tbaa !11
  %77 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %76, i64 0, i32 0, i32 1
  %78 = load i64, i64* %77, align 8, !tbaa !43
  %79 = icmp eq i64 %78, -1
  %80 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %58, i64 0, i32 0, i32 0, i32 1
  %81 = load i64, i64* %80, align 8, !tbaa !43
  %82 = select i1 %79, i64 %81, i64 %78
  %83 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %6, i64 0, i32 0, i32 0, i32 0
  %84 = load i32*, i32** %83, align 8, !tbaa !41
  %85 = load i64, i64* %34, align 8, !tbaa !43
  %86 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %58, i64 0, i32 0, i32 0, i32 0
  %87 = load i32*, i32** %86, align 8, !tbaa !41
  %88 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %0, i64 0, i32 0, i32 0, i32 0
  %89 = load i32*, i32** %88, align 8, !tbaa !767
  %90 = load i64, i64* %16, align 8, !tbaa !770
  %91 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1160", %"class.Eigen::internal::gemm_blocking_space.1160"* %7, i64 0, i32 0
  call void @_ZN5Eigen8internal29general_matrix_matrix_productIliLi0ELb0EiLi1ELb0ELi0EE3runElllPKilS4_lPiliRNS0_15level3_blockingIiiEEPNS0_16GemmParallelInfoIlEE(i64 %82, i64 %75, i64 6, i32* %87, i64 %81, i32* %84, i64 %85, i32* %89, i64 %90, i32 %59, %"class.Eigen::internal::level3_blocking"* nonnull dereferenceable(40) %91, %"struct.Eigen::internal::GemmParallelInfo"* null) #11
  %92 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1160", %"class.Eigen::internal::gemm_blocking_space.1160"* %7, i64 0, i32 0, i32 0
  %93 = load i32*, i32** %92, align 8, !tbaa !195
  %94 = icmp eq i32* %93, null
  br i1 %94, label %99, label %95

; <label>:95:                                     ; preds = %55
  %96 = getelementptr inbounds i32, i32* %93, i64 -2
  %97 = bitcast i32* %96 to i8**
  %98 = load i8*, i8** %97, align 8, !tbaa !29
  call void @free(i8* %98) #11
  br label %99

; <label>:99:                                     ; preds = %95, %55
  %100 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1160", %"class.Eigen::internal::gemm_blocking_space.1160"* %7, i64 0, i32 0, i32 1
  %101 = load i32*, i32** %100, align 8, !tbaa !196
  %102 = icmp eq i32* %101, null
  br i1 %102, label %107, label %103

; <label>:103:                                    ; preds = %99
  %104 = getelementptr inbounds i32, i32* %101, i64 -2
  %105 = bitcast i32* %104 to i8**
  %106 = load i8*, i8** %105, align 8, !tbaa !29
  call void @free(i8* %106) #11
  br label %107

; <label>:107:                                    ; preds = %99, %103
  call void @llvm.lifetime.end(i64 56, i8* nonnull %60) #11
  %108 = load i32*, i32** %83, align 8, !tbaa !41
  %109 = icmp eq i32* %108, null
  br i1 %109, label %114, label %110

; <label>:110:                                    ; preds = %107
  %111 = getelementptr inbounds i32, i32* %108, i64 -2
  %112 = bitcast i32* %111 to i8**
  %113 = load i8*, i8** %112, align 8, !tbaa !29
  call void @free(i8* %113) #11
  br label %114

; <label>:114:                                    ; preds = %107, %110
  call void @llvm.lifetime.end(i64 16, i8* nonnull %29) #11
  br label %115

; <label>:115:                                    ; preds = %24, %114
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLin1ELin1ELi1ELin1ELin1EEENS_7ProductINS4_INS2_IiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.1034"* dereferenceable(24), %"class.Eigen::Product.1043"* dereferenceable(24), %"struct.Eigen::internal::assign_op.512"* dereferenceable(1)) local_unnamed_addr #6 {
  %4 = alloca %"struct.Eigen::internal::scalar_sum_op", align 1
  %5 = alloca %"class.Eigen::CwiseBinaryOp.1139", align 8
  %6 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %7 = alloca %"struct.Eigen::internal::evaluator.1050", align 16
  %8 = bitcast %"struct.Eigen::internal::evaluator.1050"* %7 to i8*
  call void @llvm.lifetime.start(i64 72, i8* nonnull %8) #11
  %9 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1050", %"struct.Eigen::internal::evaluator.1050"* %7, i64 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.Eigen::Product.1043", %"class.Eigen::Product.1043"* %1, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull %8, i8 0, i64 16, i32 16, i1 false) #11
  %11 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %6, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %11) #11
  call void @_ZN5Eigen8internal10AssignmentINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEENS_7ProductINS2_IiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS0_9assign_opIiiEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_(%"class.Eigen::Matrix.123"* nonnull dereferenceable(16) %9, %"class.Eigen::Product.317"* nonnull dereferenceable(16) %10, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %6) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %11) #11
  %12 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1050", %"struct.Eigen::internal::evaluator.1050"* %7, i64 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.Eigen::Product.1043", %"class.Eigen::Product.1043"* %1, i64 0, i32 1
  %14 = bitcast %"class.Eigen::Transpose.296"* %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.Eigen::Transpose.296"* %12 to i64*
  store i64 %15, i64* %16, align 16
  %17 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1050", %"struct.Eigen::internal::evaluator.1050"* %7, i64 0, i32 0, i32 2
  %18 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1050", %"struct.Eigen::internal::evaluator.1050"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %19 = bitcast %"struct.Eigen::internal::evaluator.1050"* %7 to <2 x i64>*
  %20 = load <2 x i64>, <2 x i64>* %19, align 16, !tbaa !11
  %21 = bitcast %"struct.Eigen::internal::evaluator.569"* %17 to <2 x i64>*
  store <2 x i64> %20, <2 x i64>* %21, align 8, !tbaa !11
  %22 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1050", %"struct.Eigen::internal::evaluator.1050"* %7, i64 0, i32 0, i32 3, i32 0, i32 1
  %23 = inttoptr i64 %15 to %"class.Eigen::Matrix.123"*
  %24 = inttoptr i64 %15 to i64*
  %25 = load i64, i64* %24, align 8, !tbaa !41
  %26 = bitcast %"struct.Eigen::internal::evaluator.898"* %22 to i64*
  store i64 %25, i64* %26, align 8, !tbaa !468
  %27 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %23, i64 0, i32 0, i32 0, i32 1
  %28 = load i64, i64* %27, align 8, !tbaa !43
  %29 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1050", %"struct.Eigen::internal::evaluator.1050"* %7, i64 0, i32 0, i32 3, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0
  store i64 %28, i64* %29, align 8, !tbaa !59
  %30 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1050", %"struct.Eigen::internal::evaluator.1050"* %7, i64 0, i32 0, i32 4
  store i64 6, i64* %30, align 16, !tbaa !793
  %31 = bitcast %"class.Eigen::Product.1043"* %1 to %"class.Eigen::PlainObjectBase.33"**
  %32 = load %"class.Eigen::PlainObjectBase.33"*, %"class.Eigen::PlainObjectBase.33"** %31, align 8, !tbaa !11
  %33 = getelementptr inbounds %"class.Eigen::PlainObjectBase.33", %"class.Eigen::PlainObjectBase.33"* %32, i64 0, i32 0, i32 1
  %34 = load i64, i64* %33, align 8, !tbaa !37
  %35 = inttoptr i64 %15 to %"class.Eigen::PlainObjectBase.124"*
  %36 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %35, i64 0, i32 0, i32 1
  %37 = load i64, i64* %36, align 8, !tbaa !43
  %38 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %0, i64 0, i32 0, i32 0, i32 1
  %39 = load i64, i64* %38, align 8, !tbaa !769
  %40 = icmp eq i64 %39, %34
  br i1 %40, label %41, label %45

; <label>:41:                                     ; preds = %3
  %42 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %0, i64 0, i32 0, i32 0, i32 2
  %43 = load i64, i64* %42, align 8, !tbaa !770
  %44 = icmp eq i64 %43, %37
  br i1 %44, label %81, label %45

; <label>:45:                                     ; preds = %41, %3
  %46 = or i64 %37, %34
  %47 = icmp slt i64 %46, 0
  br i1 %47, label %48, label %49, !prof !50

; <label>:48:                                     ; preds = %45
  call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:49:                                     ; preds = %45
  %50 = mul nsw i64 %37, %34
  %51 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %0, i64 0, i32 0, i32 0, i32 2
  %52 = load i64, i64* %51, align 8, !tbaa !770
  %53 = mul nsw i64 %52, %39
  %54 = icmp eq i64 %53, %50
  br i1 %54, label %80, label %55

; <label>:55:                                     ; preds = %49
  %56 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %0, i64 0, i32 0, i32 0, i32 0
  %57 = load i32*, i32** %56, align 8, !tbaa !767
  %58 = icmp eq i32* %57, null
  br i1 %58, label %63, label %59

; <label>:59:                                     ; preds = %55
  %60 = getelementptr inbounds i32, i32* %57, i64 -2
  %61 = bitcast i32* %60 to i8**
  %62 = load i8*, i8** %61, align 8, !tbaa !29
  call void @free(i8* %62) #11
  br label %63

; <label>:63:                                     ; preds = %59, %55
  %64 = icmp eq i64 %50, 0
  br i1 %64, label %79, label %65

; <label>:65:                                     ; preds = %63
  %66 = shl i64 %50, 2
  %67 = add i64 %66, 32
  %68 = call i8* @malloc(i64 %67) #14
  %69 = icmp eq i8* %68, null
  br i1 %69, label %77, label %70

; <label>:70:                                     ; preds = %65
  %71 = ptrtoint i8* %68 to i64
  %72 = add i64 %71, 32
  %73 = and i64 %72, -32
  %74 = inttoptr i64 %73 to i8**
  %75 = getelementptr inbounds i8*, i8** %74, i64 -1
  store i8* %68, i8** %75, align 8, !tbaa !29
  %76 = inttoptr i64 %73 to i32*
  br label %77

; <label>:77:                                     ; preds = %70, %65
  %78 = phi i32* [ %76, %70 ], [ null, %65 ]
  store i32* %78, i32** %56, align 8, !tbaa !767
  br label %80

; <label>:79:                                     ; preds = %63
  store i32* null, i32** %56, align 8, !tbaa !767
  br label %80

; <label>:80:                                     ; preds = %79, %77, %49
  store i64 %34, i64* %38, align 8, !tbaa !769
  store i64 %37, i64* %51, align 8, !tbaa !770
  br label %81

; <label>:81:                                     ; preds = %41, %80
  %82 = phi i64* [ %42, %41 ], [ %51, %80 ]
  %83 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %0, i64 0, i32 0, i32 0, i32 0
  %84 = load i32*, i32** %83, align 8, !tbaa !767
  %85 = icmp sgt i64 %34, 0
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %81
  %87 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1050", %"struct.Eigen::internal::evaluator.1050"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %149

; <label>:88:                                     ; preds = %81
  %89 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1050", %"struct.Eigen::internal::evaluator.1050"* %7, i64 0, i32 0
  %90 = bitcast %"class.Eigen::CwiseBinaryOp.1139"* %5 to i8*
  %91 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1050", %"struct.Eigen::internal::evaluator.1050"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1050", %"struct.Eigen::internal::evaluator.1050"* %7, i64 0, i32 0, i32 1, i32 0
  %93 = bitcast %"class.Eigen::CwiseBinaryOp.1139"* %5 to i64*
  %94 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1139", %"class.Eigen::CwiseBinaryOp.1139"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %95 = bitcast %"class.Eigen::Matrix.123"** %94 to %"struct.Eigen::internal::product_evaluator.1051"**
  %96 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1139", %"class.Eigen::CwiseBinaryOp.1139"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  %97 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1139", %"class.Eigen::CwiseBinaryOp.1139"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 0
  %98 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1139", %"class.Eigen::CwiseBinaryOp.1139"* %5, i64 0, i32 1
  %99 = bitcast %"class.Eigen::Block.922"* %98 to i64*
  %100 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1139", %"class.Eigen::CwiseBinaryOp.1139"* %5, i64 0, i32 1, i32 0, i32 0, i32 1
  %101 = bitcast %"class.Eigen::Transpose.296"* %100 to i64*
  %102 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1139", %"class.Eigen::CwiseBinaryOp.1139"* %5, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0
  %103 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1139", %"class.Eigen::CwiseBinaryOp.1139"* %5, i64 0, i32 1, i32 0, i32 0, i32 3, i32 0
  %104 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1139", %"class.Eigen::CwiseBinaryOp.1139"* %5, i64 0, i32 1, i32 0, i32 0, i32 4
  %105 = bitcast %"class.Eigen::CwiseBinaryOp.1139"* %5 to %"class.Eigen::DenseBase.1142"*
  %106 = getelementptr inbounds %"struct.Eigen::internal::scalar_sum_op", %"struct.Eigen::internal::scalar_sum_op"* %4, i64 0, i32 0
  %107 = bitcast i64* %97 to <2 x i64>*
  br label %108

; <label>:108:                                    ; preds = %88, %141
  %109 = phi i64 [ %142, %141 ], [ %34, %88 ]
  %110 = phi i64 [ %143, %141 ], [ %37, %88 ]
  %111 = phi i64 [ %144, %141 ], [ 0, %88 ]
  %112 = icmp sgt i64 %110, 0
  br i1 %112, label %113, label %141

; <label>:113:                                    ; preds = %108
  %114 = mul nsw i64 %111, %37
  br label %115

; <label>:115:                                    ; preds = %113, %129
  %116 = phi i64 [ %136, %129 ], [ 0, %113 ]
  %117 = add nsw i64 %116, %114
  %118 = getelementptr inbounds i32, i32* %84, i64 %117
  call void @llvm.lifetime.start(i64 104, i8* nonnull %90) #11
  %119 = load i32*, i32** %91, align 16, !tbaa !41, !noalias !796
  %120 = getelementptr inbounds i32, i32* %119, i64 %111
  %121 = ptrtoint i32* %120 to i64
  %122 = load i64, i64* %18, align 8, !tbaa !43, !noalias !796
  %123 = icmp sgt i64 %122, %111
  br i1 %123, label %124, label %146, !prof !10

; <label>:124:                                    ; preds = %115
  %125 = load %"class.Eigen::Matrix.123"*, %"class.Eigen::Matrix.123"** %92, align 16, !tbaa !11, !noalias !799
  %126 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %125, i64 0, i32 0, i32 0, i32 1
  %127 = load i64, i64* %126, align 8, !tbaa !43, !noalias !799
  %128 = icmp sgt i64 %127, %116
  br i1 %128, label %129, label %147, !prof !10

; <label>:129:                                    ; preds = %124
  %130 = ptrtoint %"class.Eigen::Matrix.123"* %125 to i64
  %131 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %125, i64 0, i32 0, i32 0, i32 0
  %132 = load i32*, i32** %131, align 8, !tbaa !41, !noalias !799
  %133 = getelementptr inbounds i32, i32* %132, i64 %116
  %134 = ptrtoint i32* %133 to i64
  store i64 %121, i64* %93, align 8, !tbaa !350, !alias.scope !802
  store %"struct.Eigen::internal::product_evaluator.1051"* %89, %"struct.Eigen::internal::product_evaluator.1051"** %95, align 8
  store i64 %111, i64* %96, align 8
  store <2 x i64> <i64 0, i64 1>, <2 x i64>* %107, align 8
  store i64 %134, i64* %99, align 8, !tbaa !485, !alias.scope !802
  store i64 %130, i64* %101, align 8
  store i64 0, i64* %102, align 8
  store i64 %116, i64* %103, align 8
  store i64 1, i64* %104, align 8
  call void @llvm.lifetime.start(i64 1, i8* nonnull %106) #11
  %135 = call i32 @_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEEEEKNS6_IKNS5_IS9_EELi6ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIiiEEEEiRKT_(%"class.Eigen::DenseBase.1142"* nonnull %105, %"struct.Eigen::internal::scalar_sum_op"* nonnull dereferenceable(1) %4) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %106) #11
  call void @llvm.lifetime.end(i64 104, i8* nonnull %90) #11
  store i32 %135, i32* %118, align 4, !tbaa !33
  %136 = add nuw nsw i64 %116, 1
  %137 = load i64, i64* %82, align 8, !tbaa !770
  %138 = icmp slt i64 %136, %137
  br i1 %138, label %115, label %139

; <label>:139:                                    ; preds = %129
  %140 = load i64, i64* %38, align 8, !tbaa !769
  br label %141

; <label>:141:                                    ; preds = %139, %108
  %142 = phi i64 [ %140, %139 ], [ %109, %108 ]
  %143 = phi i64 [ %137, %139 ], [ %110, %108 ]
  %144 = add nuw nsw i64 %111, 1
  %145 = icmp slt i64 %144, %142
  br i1 %145, label %108, label %148

; <label>:146:                                    ; preds = %115
  call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !796
  unreachable

; <label>:147:                                    ; preds = %124
  call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !799
  unreachable

; <label>:148:                                    ; preds = %141
  br label %149

; <label>:149:                                    ; preds = %148, %86
  %150 = phi i32** [ %87, %86 ], [ %91, %148 ]
  %151 = load i32*, i32** %150, align 8, !tbaa !41
  %152 = icmp eq i32* %151, null
  br i1 %152, label %157, label %153

; <label>:153:                                    ; preds = %149
  %154 = getelementptr inbounds i32, i32* %151, i64 -2
  %155 = bitcast i32* %154 to i8**
  %156 = load i8*, i8** %155, align 8, !tbaa !29
  call void @free(i8* %156) #11
  br label %157

; <label>:157:                                    ; preds = %149, %153
  call void @llvm.lifetime.end(i64 72, i8* nonnull %8) #11
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal10AssignmentINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEENS_7ProductINS2_IiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS0_9assign_opIiiEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_(%"class.Eigen::Matrix.123"* dereferenceable(16), %"class.Eigen::Product.317"* dereferenceable(16), %"struct.Eigen::internal::assign_op.512"* dereferenceable(1)) local_unnamed_addr #6 align 2 {
  %4 = alloca %"class.Eigen::Product.1057", align 8
  %5 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %6 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %7 = alloca %"class.Eigen::CwiseNullaryOp.1128", align 8
  %8 = alloca i32, align 4
  %9 = bitcast %"class.Eigen::Product.317"* %1 to %"class.Eigen::PlainObjectBase.33"**
  %10 = load %"class.Eigen::PlainObjectBase.33"*, %"class.Eigen::PlainObjectBase.33"** %9, align 8, !tbaa !11
  %11 = getelementptr inbounds %"class.Eigen::PlainObjectBase.33", %"class.Eigen::PlainObjectBase.33"* %10, i64 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8, !tbaa !37
  %13 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %0, i64 0, i32 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8, !tbaa !43
  %15 = icmp eq i64 %14, %12
  br i1 %15, label %16, label %18

; <label>:16:                                     ; preds = %3
  %17 = bitcast %"class.Eigen::PlainObjectBase.33"* %10 to %"class.Eigen::Matrix.32"*
  br label %53

; <label>:18:                                     ; preds = %3
  %19 = icmp sgt i64 %12, -1
  br i1 %19, label %21, label %20, !prof !10

; <label>:20:                                     ; preds = %18
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:21:                                     ; preds = %18
  %22 = xor i64 %14, %12
  %23 = and i64 %22, 9223372036854775807
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %50, label %25

; <label>:25:                                     ; preds = %21
  %26 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %0, i64 0, i32 0, i32 0, i32 0
  %27 = load i32*, i32** %26, align 8, !tbaa !41
  %28 = icmp eq i32* %27, null
  br i1 %28, label %33, label %29

; <label>:29:                                     ; preds = %25
  %30 = getelementptr inbounds i32, i32* %27, i64 -2
  %31 = bitcast i32* %30 to i8**
  %32 = load i8*, i8** %31, align 8, !tbaa !29
  tail call void @free(i8* %32) #11
  br label %33

; <label>:33:                                     ; preds = %29, %25
  %34 = icmp eq i64 %12, 0
  br i1 %34, label %49, label %35

; <label>:35:                                     ; preds = %33
  %36 = mul i64 %12, 24
  %37 = add i64 %36, 32
  %38 = tail call i8* @malloc(i64 %37) #14
  %39 = icmp eq i8* %38, null
  br i1 %39, label %47, label %40

; <label>:40:                                     ; preds = %35
  %41 = ptrtoint i8* %38 to i64
  %42 = add i64 %41, 32
  %43 = and i64 %42, -32
  %44 = inttoptr i64 %43 to i8**
  %45 = getelementptr inbounds i8*, i8** %44, i64 -1
  store i8* %38, i8** %45, align 8, !tbaa !29
  %46 = inttoptr i64 %43 to i32*
  br label %47

; <label>:47:                                     ; preds = %40, %35
  %48 = phi i32* [ %46, %40 ], [ null, %35 ]
  store i32* %48, i32** %26, align 8, !tbaa !41
  br label %50

; <label>:49:                                     ; preds = %33
  store i32* null, i32** %26, align 8, !tbaa !41
  br label %50

; <label>:50:                                     ; preds = %21, %47, %49
  store i64 %12, i64* %13, align 8, !tbaa !43
  %51 = getelementptr inbounds %"class.Eigen::Product.317", %"class.Eigen::Product.317"* %1, i64 0, i32 0
  %52 = load %"class.Eigen::Matrix.32"*, %"class.Eigen::Matrix.32"** %51, align 8, !tbaa !11
  br label %53

; <label>:53:                                     ; preds = %16, %50
  %54 = phi %"class.Eigen::Matrix.32"* [ %17, %16 ], [ %52, %50 ]
  %55 = getelementptr inbounds %"class.Eigen::Product.317", %"class.Eigen::Product.317"* %1, i64 0, i32 1
  %56 = load %"class.Eigen::Matrix.77"*, %"class.Eigen::Matrix.77"** %55, align 8, !tbaa !11
  %57 = add nsw i64 %12, 53
  %58 = icmp slt i64 %57, 20
  br i1 %58, label %59, label %64

; <label>:59:                                     ; preds = %53
  %60 = bitcast %"class.Eigen::Product.1057"* %4 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %60) #11
  %61 = getelementptr inbounds %"class.Eigen::Product.1057", %"class.Eigen::Product.1057"* %4, i64 0, i32 0
  store %"class.Eigen::Matrix.32"* %54, %"class.Eigen::Matrix.32"** %61, align 8
  %62 = getelementptr inbounds %"class.Eigen::Product.1057", %"class.Eigen::Product.1057"* %4, i64 0, i32 1
  store %"class.Eigen::Matrix.77"* %56, %"class.Eigen::Matrix.77"** %62, align 8
  %63 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %5, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %63) #11
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEENS_7ProductINS2_IiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi1EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.123"* nonnull dereferenceable(16) %0, %"class.Eigen::Product.1057"* nonnull dereferenceable(16) %4, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %5) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %63) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %60) #11
  br label %73

; <label>:64:                                     ; preds = %53
  %65 = bitcast %"class.Eigen::CwiseNullaryOp.1128"* %7 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %65) #11
  %66 = getelementptr inbounds %"class.Eigen::CwiseNullaryOp.1128", %"class.Eigen::CwiseNullaryOp.1128"* %7, i64 0, i32 0, i32 0
  store i64 %12, i64* %66, align 8, !tbaa !59, !alias.scope !805
  %67 = getelementptr inbounds %"class.Eigen::CwiseNullaryOp.1128", %"class.Eigen::CwiseNullaryOp.1128"* %7, i64 0, i32 2, i32 0
  store i32 0, i32* %67, align 4, !tbaa !51, !alias.scope !805
  %68 = icmp slt i64 %12, 0
  br i1 %68, label %69, label %70, !prof !50

; <label>:69:                                     ; preds = %64
  tail call void @__assert_rtn(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__._ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEENS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEC2EllRKS3_, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.13, i64 0, i64 0), i32 74, i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.14, i64 0, i64 0)) #13, !noalias !805
  unreachable

; <label>:70:                                     ; preds = %64
  %71 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %6, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %71) #11
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEENS_14CwiseNullaryOpINS0_18scalar_constant_opIiEES3_EENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.123"* nonnull dereferenceable(16) %0, %"class.Eigen::CwiseNullaryOp.1128"* nonnull dereferenceable(16) %7, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %6) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %71) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %65) #11
  %72 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start(i64 4, i8* nonnull %72) #11
  store i32 1, i32* %8, align 4, !tbaa !33
  call void @_ZN5Eigen8internal20generic_product_implINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEENS_10DenseShapeES5_Li8EE13scaleAndAddToINS2_IiLin1ELi6ELi0ELin1ELi6EEEEEvRT_RKS3_RKS4_RKi(%"class.Eigen::Matrix.123"* nonnull dereferenceable(16) %0, %"class.Eigen::Matrix.32"* nonnull dereferenceable(16) %54, %"class.Eigen::Matrix.77"* nonnull dereferenceable(1128) %56, i32* nonnull dereferenceable(4) %8) #11
  call void @llvm.lifetime.end(i64 4, i8* nonnull %72) #11
  br label %73

; <label>:73:                                     ; preds = %59, %70
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal20generic_product_implINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEENS_10DenseShapeES5_Li8EE13scaleAndAddToINS2_IiLin1ELi6ELi0ELin1ELi6EEEEEvRT_RKS3_RKS4_RKi(%"class.Eigen::Matrix.123"* dereferenceable(16), %"class.Eigen::Matrix.32"* dereferenceable(16), %"class.Eigen::Matrix.77"* dereferenceable(1128), i32* dereferenceable(4)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.Eigen::internal::gemm_blocking_space.1137", align 8
  %6 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i64, i64* %6, align 8, !tbaa !43
  %8 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %1, i64 0, i32 0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8, !tbaa !37
  %10 = icmp eq i64 %7, %9
  br i1 %10, label %12, label %11

; <label>:11:                                     ; preds = %4
  tail call void @__assert_rtn(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__func__._ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EENS_9TransposeIKNS8_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeESI_Li8EE13scaleAndAddToINS8_IiLi47ELin1ELi0ELi47ELin1EEEEEvRT_RKSD_RKSH_RKi, i64 0, i64 0), i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.33, i64 0, i64 0), i32 460, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.34, i64 0, i64 0)) #13
  unreachable

; <label>:12:                                     ; preds = %4
  %13 = icmp eq i64 %7, 0
  br i1 %13, label %52, label %14

; <label>:14:                                     ; preds = %12
  %15 = load i32, i32* %3, align 4, !tbaa !33
  %16 = bitcast %"class.Eigen::internal::gemm_blocking_space.1137"* %5 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %16) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %16, i8 0, i64 16, i32 8, i1 false) #11
  %17 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1137", %"class.Eigen::internal::gemm_blocking_space.1137"* %5, i64 0, i32 0, i32 2
  store i64 %7, i64* %17, align 8, !tbaa !460
  %18 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1137", %"class.Eigen::internal::gemm_blocking_space.1137"* %5, i64 0, i32 0, i32 3
  %19 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1137", %"class.Eigen::internal::gemm_blocking_space.1137"* %5, i64 0, i32 0, i32 4
  %20 = bitcast i64* %18 to <2 x i64>*
  store <2 x i64> <i64 6, i64 47>, <2 x i64>* %20, align 8, !tbaa !32
  call void @_ZN5Eigen8internal37evaluateProductBlockingSizesHeuristicIiiLi1ElEEvRT2_S3_S3_S2_(i64* nonnull dereferenceable(8) %19, i64* nonnull dereferenceable(8) %17, i64* nonnull dereferenceable(8) %18, i64 1) #11
  %21 = load i64, i64* %17, align 8, !tbaa !460
  %22 = load i64, i64* %19, align 8, !tbaa !193
  %23 = mul nsw i64 %22, %21
  %24 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1137", %"class.Eigen::internal::gemm_blocking_space.1137"* %5, i64 0, i32 1
  store i64 %23, i64* %24, align 8, !tbaa !810
  %25 = load i64, i64* %18, align 8, !tbaa !461
  %26 = mul nsw i64 %25, %22
  %27 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1137", %"class.Eigen::internal::gemm_blocking_space.1137"* %5, i64 0, i32 2
  store i64 %26, i64* %27, align 8, !tbaa !812
  %28 = load i64, i64* %8, align 8, !tbaa !37
  %29 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %1, i64 0, i32 0, i32 0, i32 0
  %30 = load i32*, i32** %29, align 8, !tbaa !35
  %31 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %32 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %0, i64 0, i32 0, i32 0, i32 0
  %33 = load i32*, i32** %32, align 8, !tbaa !41
  %34 = load i64, i64* %6, align 8, !tbaa !43
  %35 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1137", %"class.Eigen::internal::gemm_blocking_space.1137"* %5, i64 0, i32 0
  call void @_ZN5Eigen8internal29general_matrix_matrix_productIliLi0ELb0EiLi0ELb0ELi0EE3runElllPKilS4_lPiliRNS0_15level3_blockingIiiEEPNS0_16GemmParallelInfoIlEE(i64 %28, i64 6, i64 47, i32* nonnull %30, i64 %28, i32* nonnull %31, i64 47, i32* nonnull %33, i64 %34, i32 %15, %"class.Eigen::internal::level3_blocking"* nonnull dereferenceable(40) %35, %"struct.Eigen::internal::GemmParallelInfo"* null) #11
  %36 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1137", %"class.Eigen::internal::gemm_blocking_space.1137"* %5, i64 0, i32 0, i32 0
  %37 = load i32*, i32** %36, align 8, !tbaa !195
  %38 = icmp eq i32* %37, null
  br i1 %38, label %43, label %39

; <label>:39:                                     ; preds = %14
  %40 = getelementptr inbounds i32, i32* %37, i64 -2
  %41 = bitcast i32* %40 to i8**
  %42 = load i8*, i8** %41, align 8, !tbaa !29
  call void @free(i8* %42) #11
  br label %43

; <label>:43:                                     ; preds = %39, %14
  %44 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1137", %"class.Eigen::internal::gemm_blocking_space.1137"* %5, i64 0, i32 0, i32 1
  %45 = load i32*, i32** %44, align 8, !tbaa !196
  %46 = icmp eq i32* %45, null
  br i1 %46, label %51, label %47

; <label>:47:                                     ; preds = %43
  %48 = getelementptr inbounds i32, i32* %45, i64 -2
  %49 = bitcast i32* %48 to i8**
  %50 = load i8*, i8** %49, align 8, !tbaa !29
  call void @free(i8* %50) #11
  br label %51

; <label>:51:                                     ; preds = %43, %47
  call void @llvm.lifetime.end(i64 56, i8* nonnull %16) #11
  br label %52

; <label>:52:                                     ; preds = %12, %51
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEENS_7ProductINS2_IiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi1EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.123"* dereferenceable(16), %"class.Eigen::Product.1057"* dereferenceable(16), %"struct.Eigen::internal::assign_op.512"* dereferenceable(1)) local_unnamed_addr #6 {
  %4 = alloca %"struct.Eigen::internal::evaluator.1064", align 8
  %5 = alloca %"struct.Eigen::internal::evaluator.569", align 8
  %6 = alloca %"class.Eigen::internal::generic_dense_assignment_kernel.1067", align 8
  %7 = bitcast %"struct.Eigen::internal::evaluator.1064"* %4 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %7) #11
  %8 = bitcast %"class.Eigen::Product.1057"* %1 to i64*
  %9 = load i64, i64* %8, align 8, !tbaa !11
  %10 = bitcast %"struct.Eigen::internal::evaluator.1064"* %4 to i64*
  store i64 %9, i64* %10, align 8, !tbaa !11
  %11 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1064", %"struct.Eigen::internal::evaluator.1064"* %4, i64 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.Eigen::Product.1057", %"class.Eigen::Product.1057"* %1, i64 0, i32 1
  %13 = bitcast %"class.Eigen::Matrix.77"** %12 to i64*
  %14 = load i64, i64* %13, align 8, !tbaa !11
  %15 = bitcast %"class.Eigen::Matrix.77"** %11 to i64*
  store i64 %14, i64* %15, align 8, !tbaa !11
  %16 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1064", %"struct.Eigen::internal::evaluator.1064"* %4, i64 0, i32 0, i32 2
  %17 = inttoptr i64 %9 to %"class.Eigen::Matrix.32"*
  %18 = inttoptr i64 %9 to i64*
  %19 = load i64, i64* %18, align 8, !tbaa !35
  %20 = bitcast %"struct.Eigen::internal::evaluator.523"* %16 to i64*
  store i64 %19, i64* %20, align 8, !tbaa !813
  %21 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %17, i64 0, i32 0, i32 0, i32 1
  %22 = load i64, i64* %21, align 8, !tbaa !37
  %23 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1064", %"struct.Eigen::internal::evaluator.1064"* %4, i64 0, i32 0, i32 2, i32 0, i32 1, i32 0
  store i64 %22, i64* %23, align 8, !tbaa !59
  %24 = inttoptr i64 %14 to %"class.Eigen::Matrix.77"*
  %25 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1064", %"struct.Eigen::internal::evaluator.1064"* %4, i64 0, i32 0, i32 3, i32 0, i32 0
  %26 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  store i32* %26, i32** %25, align 8, !tbaa !94
  %27 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1064", %"struct.Eigen::internal::evaluator.1064"* %4, i64 0, i32 0, i32 4
  store i64 47, i64* %27, align 8, !tbaa !815
  %28 = inttoptr i64 %9 to %"class.Eigen::PlainObjectBase.33"*
  %29 = getelementptr inbounds %"class.Eigen::PlainObjectBase.33", %"class.Eigen::PlainObjectBase.33"* %28, i64 0, i32 0, i32 1
  %30 = load i64, i64* %29, align 8, !tbaa !37
  %31 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %0, i64 0, i32 0, i32 0, i32 1
  %32 = load i64, i64* %31, align 8, !tbaa !43
  %33 = icmp eq i64 %32, %30
  br i1 %33, label %67, label %34

; <label>:34:                                     ; preds = %3
  %35 = icmp sgt i64 %30, -1
  br i1 %35, label %37, label %36, !prof !10

; <label>:36:                                     ; preds = %34
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:37:                                     ; preds = %34
  %38 = xor i64 %32, %30
  %39 = and i64 %38, 9223372036854775807
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %66, label %41

; <label>:41:                                     ; preds = %37
  %42 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %0, i64 0, i32 0, i32 0, i32 0
  %43 = load i32*, i32** %42, align 8, !tbaa !41
  %44 = icmp eq i32* %43, null
  br i1 %44, label %49, label %45

; <label>:45:                                     ; preds = %41
  %46 = getelementptr inbounds i32, i32* %43, i64 -2
  %47 = bitcast i32* %46 to i8**
  %48 = load i8*, i8** %47, align 8, !tbaa !29
  tail call void @free(i8* %48) #11
  br label %49

; <label>:49:                                     ; preds = %45, %41
  %50 = icmp eq i64 %30, 0
  br i1 %50, label %65, label %51

; <label>:51:                                     ; preds = %49
  %52 = mul i64 %30, 24
  %53 = add i64 %52, 32
  %54 = tail call i8* @malloc(i64 %53) #14
  %55 = icmp eq i8* %54, null
  br i1 %55, label %63, label %56

; <label>:56:                                     ; preds = %51
  %57 = ptrtoint i8* %54 to i64
  %58 = add i64 %57, 32
  %59 = and i64 %58, -32
  %60 = inttoptr i64 %59 to i8**
  %61 = getelementptr inbounds i8*, i8** %60, i64 -1
  store i8* %54, i8** %61, align 8, !tbaa !29
  %62 = inttoptr i64 %59 to i32*
  br label %63

; <label>:63:                                     ; preds = %56, %51
  %64 = phi i32* [ %62, %56 ], [ null, %51 ]
  store i32* %64, i32** %42, align 8, !tbaa !41
  br label %66

; <label>:65:                                     ; preds = %49
  store i32* null, i32** %42, align 8, !tbaa !41
  br label %66

; <label>:66:                                     ; preds = %65, %63, %37
  store i64 %30, i64* %31, align 8, !tbaa !43
  br label %67

; <label>:67:                                     ; preds = %3, %66
  %68 = bitcast %"struct.Eigen::internal::evaluator.569"* %5 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %68) #11
  %69 = bitcast %"class.Eigen::Matrix.123"* %0 to i64*
  %70 = load i64, i64* %69, align 8, !tbaa !41
  %71 = bitcast %"struct.Eigen::internal::evaluator.569"* %5 to i64*
  store i64 %70, i64* %71, align 8, !tbaa !468
  %72 = getelementptr inbounds %"struct.Eigen::internal::evaluator.569", %"struct.Eigen::internal::evaluator.569"* %5, i64 0, i32 0, i32 1, i32 0
  store i64 %30, i64* %72, align 8, !tbaa !59
  %73 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1067"* %6 to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %73) #11
  %74 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1067", %"class.Eigen::internal::generic_dense_assignment_kernel.1067"* %6, i64 0, i32 0
  store %"struct.Eigen::internal::evaluator.569"* %5, %"struct.Eigen::internal::evaluator.569"** %74, align 8, !tbaa !11
  %75 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1067", %"class.Eigen::internal::generic_dense_assignment_kernel.1067"* %6, i64 0, i32 1
  store %"struct.Eigen::internal::evaluator.1064"* %4, %"struct.Eigen::internal::evaluator.1064"** %75, align 8, !tbaa !11
  %76 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1067", %"class.Eigen::internal::generic_dense_assignment_kernel.1067"* %6, i64 0, i32 2
  store %"struct.Eigen::internal::assign_op.512"* %2, %"struct.Eigen::internal::assign_op.512"** %76, align 8, !tbaa !11
  %77 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1067", %"class.Eigen::internal::generic_dense_assignment_kernel.1067"* %6, i64 0, i32 3
  store %"class.Eigen::Matrix.123"* %0, %"class.Eigen::Matrix.123"** %77, align 8, !tbaa !11
  call void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS3_INS_7ProductINS4_IiLin1ELi47ELi0ELin1ELi47EEENS4_IiLi47ELi6ELi0ELi47ELi6EEELi1EEEEENS0_9assign_opIiiEELi0EEELi4ELi0EE3runERSE_(%"class.Eigen::internal::generic_dense_assignment_kernel.1067"* nonnull dereferenceable(32) %6)
  call void @llvm.lifetime.end(i64 32, i8* nonnull %73) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %68) #11
  call void @llvm.lifetime.end(i64 56, i8* nonnull %7) #11
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS3_INS_7ProductINS4_IiLin1ELi47ELi0ELin1ELi47EEENS4_IiLi47ELi6ELi0ELi47ELi6EEELi1EEEEENS0_9assign_opIiiEELi0EEELi4ELi0EE3runERSE_(%"class.Eigen::internal::generic_dense_assignment_kernel.1067"* dereferenceable(32)) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1067", %"class.Eigen::internal::generic_dense_assignment_kernel.1067"* %0, i64 0, i32 3
  %3 = bitcast %"class.Eigen::Matrix.123"** %2 to %"class.Eigen::DenseBase.126"**
  %4 = load %"class.Eigen::DenseBase.126"*, %"class.Eigen::DenseBase.126"** %3, align 8, !tbaa !11
  %5 = getelementptr inbounds %"class.Eigen::DenseBase.126", %"class.Eigen::DenseBase.126"* %4, i64 8
  %6 = bitcast %"class.Eigen::DenseBase.126"* %5 to i64*
  %7 = load i64, i64* %6, align 8, !tbaa !43
  %8 = sub i64 0, %7
  %9 = and i64 %8, 3
  %10 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1067"* %0 to %"struct.Eigen::internal::evaluator.570"**
  %11 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1067", %"class.Eigen::internal::generic_dense_assignment_kernel.1067"* %0, i64 0, i32 1
  %12 = bitcast %"struct.Eigen::internal::evaluator.1064"** %11 to %"struct.Eigen::internal::product_evaluator.1065"**
  br label %14

; <label>:13:                                     ; preds = %329
  ret void

; <label>:14:                                     ; preds = %1, %329
  %15 = phi i64 [ 0, %1 ], [ %333, %329 ]
  %16 = phi i64 [ 0, %1 ], [ %334, %329 ]
  %17 = sub nsw i64 %7, %15
  %18 = and i64 %17, -4
  %19 = add nsw i64 %18, %15
  %20 = icmp sgt i64 %15, 0
  br i1 %20, label %21, label %24

; <label>:21:                                     ; preds = %14
  %22 = mul nuw nsw i64 %16, 47
  br label %28

; <label>:23:                                     ; preds = %206
  br label %24

; <label>:24:                                     ; preds = %23, %14
  %25 = icmp sgt i64 %18, 0
  br i1 %25, label %26, label %211

; <label>:26:                                     ; preds = %24
  %27 = mul nuw nsw i64 %16, 47
  br label %216

; <label>:28:                                     ; preds = %206, %21
  %29 = phi i64 [ %208, %206 ], [ 0, %21 ]
  %30 = load %"struct.Eigen::internal::evaluator.570"*, %"struct.Eigen::internal::evaluator.570"** %10, align 8, !tbaa !11
  %31 = getelementptr inbounds %"struct.Eigen::internal::evaluator.570", %"struct.Eigen::internal::evaluator.570"* %30, i64 0, i32 0
  %32 = load i32*, i32** %31, align 8, !tbaa !468
  %33 = getelementptr inbounds %"struct.Eigen::internal::evaluator.570", %"struct.Eigen::internal::evaluator.570"* %30, i64 0, i32 1, i32 0
  %34 = load i64, i64* %33, align 8, !tbaa !59
  %35 = mul nsw i64 %34, %16
  %36 = add nsw i64 %35, %29
  %37 = getelementptr inbounds i32, i32* %32, i64 %36
  %38 = load %"struct.Eigen::internal::product_evaluator.1065"*, %"struct.Eigen::internal::product_evaluator.1065"** %12, align 8, !tbaa !11
  %39 = bitcast %"struct.Eigen::internal::product_evaluator.1065"* %38 to %"class.Eigen::DenseBase.35"**
  %40 = load %"class.Eigen::DenseBase.35"*, %"class.Eigen::DenseBase.35"** %39, align 8, !tbaa !11
  %41 = bitcast %"class.Eigen::DenseBase.35"* %40 to i32**
  %42 = load i32*, i32** %41, align 8, !tbaa !35, !noalias !818
  %43 = getelementptr inbounds i32, i32* %42, i64 %29
  %44 = getelementptr inbounds %"class.Eigen::DenseBase.35", %"class.Eigen::DenseBase.35"* %40, i64 8
  %45 = bitcast %"class.Eigen::DenseBase.35"* %44 to i64*
  %46 = load i64, i64* %45, align 8, !tbaa !37, !noalias !818
  %47 = icmp sgt i64 %46, %29
  br i1 %47, label %49, label %48, !prof !10

; <label>:48:                                     ; preds = %28
  tail call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !818
  unreachable

; <label>:49:                                     ; preds = %28
  %50 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1065", %"struct.Eigen::internal::product_evaluator.1065"* %38, i64 0, i32 1
  %51 = load %"class.Eigen::Matrix.77"*, %"class.Eigen::Matrix.77"** %50, align 8, !tbaa !11
  %52 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %51, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %22
  %53 = load i32, i32* %43, align 4, !tbaa !33
  %54 = load i32, i32* %52, align 4, !tbaa !33
  %55 = mul nsw i32 %54, %53
  %56 = insertelement <8 x i32> <i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %55, i32 0
  %57 = icmp eq i64 %46, 1
  br i1 %57, label %58, label %111

; <label>:58:                                     ; preds = %49
  br label %59

; <label>:59:                                     ; preds = %58
  %60 = getelementptr inbounds i32, i32* %43, i64 %46
  %61 = bitcast i32* %60 to <8 x i32>*
  %62 = load <8 x i32>, <8 x i32>* %61, align 4, !tbaa !33
  %63 = getelementptr inbounds i32, i32* %52, i64 1
  %64 = bitcast i32* %63 to <8 x i32>*
  %65 = load <8 x i32>, <8 x i32>* %64, align 4, !tbaa !33
  %66 = mul nsw <8 x i32> %65, %62
  %67 = add nsw <8 x i32> %66, %56
  %68 = mul nsw i64 %46, 9
  %69 = getelementptr inbounds i32, i32* %43, i64 %68
  %70 = bitcast i32* %69 to <8 x i32>*
  %71 = load <8 x i32>, <8 x i32>* %70, align 4, !tbaa !33
  %72 = getelementptr inbounds i32, i32* %52, i64 9
  %73 = bitcast i32* %72 to <8 x i32>*
  %74 = load <8 x i32>, <8 x i32>* %73, align 4, !tbaa !33
  %75 = mul nsw <8 x i32> %74, %71
  %76 = add nsw <8 x i32> %75, %67
  %77 = mul nsw i64 %46, 17
  %78 = getelementptr inbounds i32, i32* %43, i64 %77
  %79 = bitcast i32* %78 to <8 x i32>*
  %80 = load <8 x i32>, <8 x i32>* %79, align 4, !tbaa !33
  %81 = getelementptr inbounds i32, i32* %52, i64 17
  %82 = bitcast i32* %81 to <8 x i32>*
  %83 = load <8 x i32>, <8 x i32>* %82, align 4, !tbaa !33
  %84 = mul nsw <8 x i32> %83, %80
  %85 = add nsw <8 x i32> %84, %76
  %86 = mul nsw i64 %46, 25
  %87 = getelementptr inbounds i32, i32* %43, i64 %86
  %88 = bitcast i32* %87 to <8 x i32>*
  %89 = load <8 x i32>, <8 x i32>* %88, align 4, !tbaa !33
  %90 = getelementptr inbounds i32, i32* %52, i64 25
  %91 = bitcast i32* %90 to <8 x i32>*
  %92 = load <8 x i32>, <8 x i32>* %91, align 4, !tbaa !33
  %93 = mul nsw <8 x i32> %92, %89
  %94 = add nsw <8 x i32> %93, %85
  %95 = mul nsw i64 %46, 33
  %96 = getelementptr inbounds i32, i32* %43, i64 %95
  %97 = bitcast i32* %96 to <8 x i32>*
  %98 = load <8 x i32>, <8 x i32>* %97, align 4, !tbaa !33
  %99 = getelementptr inbounds i32, i32* %52, i64 33
  %100 = bitcast i32* %99 to <8 x i32>*
  %101 = load <8 x i32>, <8 x i32>* %100, align 4, !tbaa !33
  %102 = mul nsw <8 x i32> %101, %98
  %103 = add nsw <8 x i32> %102, %94
  %104 = shufflevector <8 x i32> %103, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %105 = add <8 x i32> %103, %104
  %106 = shufflevector <8 x i32> %105, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %107 = add <8 x i32> %105, %106
  %108 = shufflevector <8 x i32> %107, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %109 = add <8 x i32> %107, %108
  %110 = extractelement <8 x i32> %109, i32 0
  br label %111

; <label>:111:                                    ; preds = %59, %49
  %112 = phi i64 [ 1, %49 ], [ 41, %59 ]
  %113 = phi i32 [ %55, %49 ], [ %110, %59 ]
  %114 = sub nsw i64 46, %112
  br i1 true, label %115, label %131

; <label>:115:                                    ; preds = %111
  br label %116

; <label>:116:                                    ; preds = %116, %115
  %117 = phi i64 [ %127, %116 ], [ %112, %115 ]
  %118 = phi i32 [ %126, %116 ], [ %113, %115 ]
  %119 = phi i64 [ %128, %116 ], [ 6, %115 ]
  %120 = mul nsw i64 %117, %46
  %121 = getelementptr inbounds i32, i32* %43, i64 %120
  %122 = load i32, i32* %121, align 4, !tbaa !33
  %123 = getelementptr inbounds i32, i32* %52, i64 %117
  %124 = load i32, i32* %123, align 4, !tbaa !33
  %125 = mul nsw i32 %124, %122
  %126 = add nsw i32 %125, %118
  %127 = add nuw nsw i64 %117, 1
  %128 = add i64 %119, -1
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %130, label %116, !llvm.loop !821

; <label>:130:                                    ; preds = %116
  br label %131

; <label>:131:                                    ; preds = %130, %111
  %132 = phi i32 [ undef, %111 ], [ %126, %130 ]
  %133 = phi i64 [ %112, %111 ], [ %127, %130 ]
  %134 = phi i32 [ %113, %111 ], [ %126, %130 ]
  %135 = icmp ult i64 %114, 7
  br i1 %135, label %206, label %136

; <label>:136:                                    ; preds = %131
  br label %137

; <label>:137:                                    ; preds = %137, %136
  %138 = phi i64 [ %133, %136 ], [ %203, %137 ]
  %139 = phi i32 [ %134, %136 ], [ %202, %137 ]
  %140 = mul nsw i64 %138, %46
  %141 = getelementptr inbounds i32, i32* %43, i64 %140
  %142 = load i32, i32* %141, align 4, !tbaa !33
  %143 = getelementptr inbounds i32, i32* %52, i64 %138
  %144 = load i32, i32* %143, align 4, !tbaa !33
  %145 = mul nsw i32 %144, %142
  %146 = add nsw i32 %145, %139
  %147 = add nuw nsw i64 %138, 1
  %148 = mul nsw i64 %147, %46
  %149 = getelementptr inbounds i32, i32* %43, i64 %148
  %150 = load i32, i32* %149, align 4, !tbaa !33
  %151 = getelementptr inbounds i32, i32* %52, i64 %147
  %152 = load i32, i32* %151, align 4, !tbaa !33
  %153 = mul nsw i32 %152, %150
  %154 = add nsw i32 %153, %146
  %155 = add nsw i64 %138, 2
  %156 = mul nsw i64 %155, %46
  %157 = getelementptr inbounds i32, i32* %43, i64 %156
  %158 = load i32, i32* %157, align 4, !tbaa !33
  %159 = getelementptr inbounds i32, i32* %52, i64 %155
  %160 = load i32, i32* %159, align 4, !tbaa !33
  %161 = mul nsw i32 %160, %158
  %162 = add nsw i32 %161, %154
  %163 = add nsw i64 %138, 3
  %164 = mul nsw i64 %163, %46
  %165 = getelementptr inbounds i32, i32* %43, i64 %164
  %166 = load i32, i32* %165, align 4, !tbaa !33
  %167 = getelementptr inbounds i32, i32* %52, i64 %163
  %168 = load i32, i32* %167, align 4, !tbaa !33
  %169 = mul nsw i32 %168, %166
  %170 = add nsw i32 %169, %162
  %171 = add nsw i64 %138, 4
  %172 = mul nsw i64 %171, %46
  %173 = getelementptr inbounds i32, i32* %43, i64 %172
  %174 = load i32, i32* %173, align 4, !tbaa !33
  %175 = getelementptr inbounds i32, i32* %52, i64 %171
  %176 = load i32, i32* %175, align 4, !tbaa !33
  %177 = mul nsw i32 %176, %174
  %178 = add nsw i32 %177, %170
  %179 = add nsw i64 %138, 5
  %180 = mul nsw i64 %179, %46
  %181 = getelementptr inbounds i32, i32* %43, i64 %180
  %182 = load i32, i32* %181, align 4, !tbaa !33
  %183 = getelementptr inbounds i32, i32* %52, i64 %179
  %184 = load i32, i32* %183, align 4, !tbaa !33
  %185 = mul nsw i32 %184, %182
  %186 = add nsw i32 %185, %178
  %187 = add nsw i64 %138, 6
  %188 = mul nsw i64 %187, %46
  %189 = getelementptr inbounds i32, i32* %43, i64 %188
  %190 = load i32, i32* %189, align 4, !tbaa !33
  %191 = getelementptr inbounds i32, i32* %52, i64 %187
  %192 = load i32, i32* %191, align 4, !tbaa !33
  %193 = mul nsw i32 %192, %190
  %194 = add nsw i32 %193, %186
  %195 = add nsw i64 %138, 7
  %196 = mul nsw i64 %195, %46
  %197 = getelementptr inbounds i32, i32* %43, i64 %196
  %198 = load i32, i32* %197, align 4, !tbaa !33
  %199 = getelementptr inbounds i32, i32* %52, i64 %195
  %200 = load i32, i32* %199, align 4, !tbaa !33
  %201 = mul nsw i32 %200, %198
  %202 = add nsw i32 %201, %194
  %203 = add nsw i64 %138, 8
  %204 = icmp eq i64 %203, 47
  br i1 %204, label %205, label %137, !llvm.loop !822

; <label>:205:                                    ; preds = %137
  br label %206

; <label>:206:                                    ; preds = %131, %205
  %207 = phi i32 [ %132, %131 ], [ %202, %205 ]
  store i32 %207, i32* %37, align 4, !tbaa !33
  %208 = add nuw nsw i64 %29, 1
  %209 = icmp slt i64 %208, %15
  br i1 %209, label %28, label %23

; <label>:210:                                    ; preds = %323
  br label %211

; <label>:211:                                    ; preds = %210, %24
  %212 = icmp slt i64 %19, %7
  br i1 %212, label %213, label %329

; <label>:213:                                    ; preds = %211
  %214 = mul nuw nsw i64 %16, 47
  %215 = icmp sgt i64 %19, -1
  br label %336

; <label>:216:                                    ; preds = %26, %323
  %217 = phi i64 [ %15, %26 ], [ %326, %323 ]
  %218 = load %"struct.Eigen::internal::evaluator.570"*, %"struct.Eigen::internal::evaluator.570"** %10, align 8, !tbaa !11
  %219 = getelementptr inbounds %"struct.Eigen::internal::evaluator.570", %"struct.Eigen::internal::evaluator.570"* %218, i64 0, i32 0
  %220 = load i32*, i32** %219, align 8, !tbaa !468
  %221 = getelementptr inbounds %"struct.Eigen::internal::evaluator.570", %"struct.Eigen::internal::evaluator.570"* %218, i64 0, i32 1, i32 0
  %222 = load i64, i64* %221, align 8, !tbaa !59
  %223 = mul nsw i64 %222, %16
  %224 = add nsw i64 %223, %217
  %225 = getelementptr inbounds i32, i32* %220, i64 %224
  %226 = load %"struct.Eigen::internal::product_evaluator.1065"*, %"struct.Eigen::internal::product_evaluator.1065"** %12, align 8, !tbaa !11
  %227 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1065", %"struct.Eigen::internal::product_evaluator.1065"* %226, i64 0, i32 4
  %228 = load i64, i64* %227, align 8, !tbaa !815
  %229 = icmp sgt i64 %228, 0
  br i1 %229, label %230, label %323

; <label>:230:                                    ; preds = %216
  %231 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1065", %"struct.Eigen::internal::product_evaluator.1065"* %226, i64 0, i32 2, i32 0, i32 0
  %232 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1065", %"struct.Eigen::internal::product_evaluator.1065"* %226, i64 0, i32 2, i32 0, i32 1, i32 0
  %233 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1065", %"struct.Eigen::internal::product_evaluator.1065"* %226, i64 0, i32 3, i32 0, i32 0
  %234 = load i32*, i32** %231, align 8, !tbaa !813
  %235 = getelementptr inbounds i32, i32* %234, i64 %217
  %236 = load i64, i64* %232, align 8, !tbaa !59
  %237 = load i32*, i32** %233, align 8, !tbaa !94
  %238 = add i64 %228, -1
  %239 = and i64 %228, 3
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %261, label %241

; <label>:241:                                    ; preds = %230
  br label %242

; <label>:242:                                    ; preds = %242, %241
  %243 = phi <4 x i32> [ zeroinitializer, %241 ], [ %256, %242 ]
  %244 = phi i64 [ 0, %241 ], [ %257, %242 ]
  %245 = phi i64 [ %239, %241 ], [ %258, %242 ]
  %246 = mul nsw i64 %244, %236
  %247 = getelementptr inbounds i32, i32* %235, i64 %246
  %248 = bitcast i32* %247 to <4 x i32>*
  %249 = load <4 x i32>, <4 x i32>* %248, align 1, !tbaa !11
  %250 = add nuw nsw i64 %244, %27
  %251 = getelementptr inbounds i32, i32* %237, i64 %250
  %252 = load i32, i32* %251, align 4, !tbaa !33
  %253 = insertelement <4 x i32> undef, i32 %252, i32 0
  %254 = shufflevector <4 x i32> %253, <4 x i32> undef, <4 x i32> zeroinitializer
  %255 = mul <4 x i32> %254, %249
  %256 = add <4 x i32> %255, %243
  %257 = add nuw nsw i64 %244, 1
  %258 = add i64 %245, -1
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %260, label %242, !llvm.loop !823

; <label>:260:                                    ; preds = %242
  br label %261

; <label>:261:                                    ; preds = %230, %260
  %262 = phi <4 x i32> [ undef, %230 ], [ %256, %260 ]
  %263 = phi <4 x i32> [ zeroinitializer, %230 ], [ %256, %260 ]
  %264 = phi i64 [ 0, %230 ], [ %257, %260 ]
  %265 = icmp ult i64 %238, 3
  br i1 %265, label %320, label %266

; <label>:266:                                    ; preds = %261
  br label %267

; <label>:267:                                    ; preds = %267, %266
  %268 = phi <4 x i32> [ %263, %266 ], [ %316, %267 ]
  %269 = phi i64 [ %264, %266 ], [ %317, %267 ]
  %270 = mul nsw i64 %269, %236
  %271 = getelementptr inbounds i32, i32* %235, i64 %270
  %272 = bitcast i32* %271 to <4 x i32>*
  %273 = load <4 x i32>, <4 x i32>* %272, align 1, !tbaa !11
  %274 = add nuw nsw i64 %269, %27
  %275 = getelementptr inbounds i32, i32* %237, i64 %274
  %276 = load i32, i32* %275, align 4, !tbaa !33
  %277 = insertelement <4 x i32> undef, i32 %276, i32 0
  %278 = shufflevector <4 x i32> %277, <4 x i32> undef, <4 x i32> zeroinitializer
  %279 = mul <4 x i32> %278, %273
  %280 = add <4 x i32> %279, %268
  %281 = add nuw nsw i64 %269, 1
  %282 = mul nsw i64 %281, %236
  %283 = getelementptr inbounds i32, i32* %235, i64 %282
  %284 = bitcast i32* %283 to <4 x i32>*
  %285 = load <4 x i32>, <4 x i32>* %284, align 1, !tbaa !11
  %286 = add nuw nsw i64 %281, %27
  %287 = getelementptr inbounds i32, i32* %237, i64 %286
  %288 = load i32, i32* %287, align 4, !tbaa !33
  %289 = insertelement <4 x i32> undef, i32 %288, i32 0
  %290 = shufflevector <4 x i32> %289, <4 x i32> undef, <4 x i32> zeroinitializer
  %291 = mul <4 x i32> %290, %285
  %292 = add <4 x i32> %291, %280
  %293 = add nsw i64 %269, 2
  %294 = mul nsw i64 %293, %236
  %295 = getelementptr inbounds i32, i32* %235, i64 %294
  %296 = bitcast i32* %295 to <4 x i32>*
  %297 = load <4 x i32>, <4 x i32>* %296, align 1, !tbaa !11
  %298 = add nuw nsw i64 %293, %27
  %299 = getelementptr inbounds i32, i32* %237, i64 %298
  %300 = load i32, i32* %299, align 4, !tbaa !33
  %301 = insertelement <4 x i32> undef, i32 %300, i32 0
  %302 = shufflevector <4 x i32> %301, <4 x i32> undef, <4 x i32> zeroinitializer
  %303 = mul <4 x i32> %302, %297
  %304 = add <4 x i32> %303, %292
  %305 = add nsw i64 %269, 3
  %306 = mul nsw i64 %305, %236
  %307 = getelementptr inbounds i32, i32* %235, i64 %306
  %308 = bitcast i32* %307 to <4 x i32>*
  %309 = load <4 x i32>, <4 x i32>* %308, align 1, !tbaa !11
  %310 = add nuw nsw i64 %305, %27
  %311 = getelementptr inbounds i32, i32* %237, i64 %310
  %312 = load i32, i32* %311, align 4, !tbaa !33
  %313 = insertelement <4 x i32> undef, i32 %312, i32 0
  %314 = shufflevector <4 x i32> %313, <4 x i32> undef, <4 x i32> zeroinitializer
  %315 = mul <4 x i32> %314, %309
  %316 = add <4 x i32> %315, %304
  %317 = add nsw i64 %269, 4
  %318 = icmp eq i64 %317, %228
  br i1 %318, label %319, label %267

; <label>:319:                                    ; preds = %267
  br label %320

; <label>:320:                                    ; preds = %261, %319
  %321 = phi <4 x i32> [ %262, %261 ], [ %316, %319 ]
  %322 = bitcast <4 x i32> %321 to <2 x i64>
  br label %323

; <label>:323:                                    ; preds = %216, %320
  %324 = phi <2 x i64> [ zeroinitializer, %216 ], [ %322, %320 ]
  %325 = bitcast i32* %225 to <2 x i64>*
  store <2 x i64> %324, <2 x i64>* %325, align 16, !tbaa !11
  %326 = add nsw i64 %217, 4
  %327 = icmp slt i64 %326, %19
  br i1 %327, label %216, label %210

; <label>:328:                                    ; preds = %515
  br label %329

; <label>:329:                                    ; preds = %328, %211
  %330 = add nsw i64 %15, %9
  %331 = srem i64 %330, 4
  %332 = icmp slt i64 %7, %331
  %333 = select i1 %332, i64 %7, i64 %331
  %334 = add nuw nsw i64 %16, 1
  %335 = icmp slt i64 %334, 6
  br i1 %335, label %14, label %13

; <label>:336:                                    ; preds = %213, %515
  %337 = phi i64 [ %517, %515 ], [ %19, %213 ]
  %338 = load %"struct.Eigen::internal::evaluator.570"*, %"struct.Eigen::internal::evaluator.570"** %10, align 8, !tbaa !11
  %339 = getelementptr inbounds %"struct.Eigen::internal::evaluator.570", %"struct.Eigen::internal::evaluator.570"* %338, i64 0, i32 0
  %340 = load i32*, i32** %339, align 8, !tbaa !468
  %341 = getelementptr inbounds %"struct.Eigen::internal::evaluator.570", %"struct.Eigen::internal::evaluator.570"* %338, i64 0, i32 1, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !59
  %343 = mul nsw i64 %342, %16
  %344 = add nsw i64 %343, %337
  %345 = getelementptr inbounds i32, i32* %340, i64 %344
  %346 = load %"struct.Eigen::internal::product_evaluator.1065"*, %"struct.Eigen::internal::product_evaluator.1065"** %12, align 8, !tbaa !11
  %347 = bitcast %"struct.Eigen::internal::product_evaluator.1065"* %346 to %"class.Eigen::DenseBase.35"**
  %348 = load %"class.Eigen::DenseBase.35"*, %"class.Eigen::DenseBase.35"** %347, align 8, !tbaa !11
  %349 = bitcast %"class.Eigen::DenseBase.35"* %348 to i32**
  %350 = load i32*, i32** %349, align 8, !tbaa !35, !noalias !824
  %351 = getelementptr inbounds i32, i32* %350, i64 %337
  br i1 %215, label %352, label %357

; <label>:352:                                    ; preds = %336
  %353 = getelementptr inbounds %"class.Eigen::DenseBase.35", %"class.Eigen::DenseBase.35"* %348, i64 8
  %354 = bitcast %"class.Eigen::DenseBase.35"* %353 to i64*
  %355 = load i64, i64* %354, align 8, !tbaa !37, !noalias !824
  %356 = icmp sgt i64 %355, %337
  br i1 %356, label %358, label %357, !prof !10

; <label>:357:                                    ; preds = %352, %336
  tail call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !824
  unreachable

; <label>:358:                                    ; preds = %352
  %359 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1065", %"struct.Eigen::internal::product_evaluator.1065"* %346, i64 0, i32 1
  %360 = load %"class.Eigen::Matrix.77"*, %"class.Eigen::Matrix.77"** %359, align 8, !tbaa !11
  %361 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %360, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %214
  %362 = load i32, i32* %351, align 4, !tbaa !33
  %363 = load i32, i32* %361, align 4, !tbaa !33
  %364 = mul nsw i32 %363, %362
  %365 = insertelement <8 x i32> <i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %364, i32 0
  %366 = icmp eq i64 %355, 1
  br i1 %366, label %367, label %420

; <label>:367:                                    ; preds = %358
  br label %368

; <label>:368:                                    ; preds = %367
  %369 = getelementptr inbounds i32, i32* %351, i64 %355
  %370 = bitcast i32* %369 to <8 x i32>*
  %371 = load <8 x i32>, <8 x i32>* %370, align 4, !tbaa !33
  %372 = getelementptr inbounds i32, i32* %361, i64 1
  %373 = bitcast i32* %372 to <8 x i32>*
  %374 = load <8 x i32>, <8 x i32>* %373, align 4, !tbaa !33
  %375 = mul nsw <8 x i32> %374, %371
  %376 = add nsw <8 x i32> %375, %365
  %377 = mul nsw i64 %355, 9
  %378 = getelementptr inbounds i32, i32* %351, i64 %377
  %379 = bitcast i32* %378 to <8 x i32>*
  %380 = load <8 x i32>, <8 x i32>* %379, align 4, !tbaa !33
  %381 = getelementptr inbounds i32, i32* %361, i64 9
  %382 = bitcast i32* %381 to <8 x i32>*
  %383 = load <8 x i32>, <8 x i32>* %382, align 4, !tbaa !33
  %384 = mul nsw <8 x i32> %383, %380
  %385 = add nsw <8 x i32> %384, %376
  %386 = mul nsw i64 %355, 17
  %387 = getelementptr inbounds i32, i32* %351, i64 %386
  %388 = bitcast i32* %387 to <8 x i32>*
  %389 = load <8 x i32>, <8 x i32>* %388, align 4, !tbaa !33
  %390 = getelementptr inbounds i32, i32* %361, i64 17
  %391 = bitcast i32* %390 to <8 x i32>*
  %392 = load <8 x i32>, <8 x i32>* %391, align 4, !tbaa !33
  %393 = mul nsw <8 x i32> %392, %389
  %394 = add nsw <8 x i32> %393, %385
  %395 = mul nsw i64 %355, 25
  %396 = getelementptr inbounds i32, i32* %351, i64 %395
  %397 = bitcast i32* %396 to <8 x i32>*
  %398 = load <8 x i32>, <8 x i32>* %397, align 4, !tbaa !33
  %399 = getelementptr inbounds i32, i32* %361, i64 25
  %400 = bitcast i32* %399 to <8 x i32>*
  %401 = load <8 x i32>, <8 x i32>* %400, align 4, !tbaa !33
  %402 = mul nsw <8 x i32> %401, %398
  %403 = add nsw <8 x i32> %402, %394
  %404 = mul nsw i64 %355, 33
  %405 = getelementptr inbounds i32, i32* %351, i64 %404
  %406 = bitcast i32* %405 to <8 x i32>*
  %407 = load <8 x i32>, <8 x i32>* %406, align 4, !tbaa !33
  %408 = getelementptr inbounds i32, i32* %361, i64 33
  %409 = bitcast i32* %408 to <8 x i32>*
  %410 = load <8 x i32>, <8 x i32>* %409, align 4, !tbaa !33
  %411 = mul nsw <8 x i32> %410, %407
  %412 = add nsw <8 x i32> %411, %403
  %413 = shufflevector <8 x i32> %412, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %414 = add <8 x i32> %412, %413
  %415 = shufflevector <8 x i32> %414, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %416 = add <8 x i32> %414, %415
  %417 = shufflevector <8 x i32> %416, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %418 = add <8 x i32> %416, %417
  %419 = extractelement <8 x i32> %418, i32 0
  br label %420

; <label>:420:                                    ; preds = %368, %358
  %421 = phi i64 [ 1, %358 ], [ 41, %368 ]
  %422 = phi i32 [ %364, %358 ], [ %419, %368 ]
  %423 = sub nsw i64 46, %421
  br i1 true, label %424, label %440

; <label>:424:                                    ; preds = %420
  br label %425

; <label>:425:                                    ; preds = %425, %424
  %426 = phi i64 [ %436, %425 ], [ %421, %424 ]
  %427 = phi i32 [ %435, %425 ], [ %422, %424 ]
  %428 = phi i64 [ %437, %425 ], [ 6, %424 ]
  %429 = mul nsw i64 %426, %355
  %430 = getelementptr inbounds i32, i32* %351, i64 %429
  %431 = load i32, i32* %430, align 4, !tbaa !33
  %432 = getelementptr inbounds i32, i32* %361, i64 %426
  %433 = load i32, i32* %432, align 4, !tbaa !33
  %434 = mul nsw i32 %433, %431
  %435 = add nsw i32 %434, %427
  %436 = add nuw nsw i64 %426, 1
  %437 = add i64 %428, -1
  %438 = icmp eq i64 %437, 0
  br i1 %438, label %439, label %425, !llvm.loop !827

; <label>:439:                                    ; preds = %425
  br label %440

; <label>:440:                                    ; preds = %439, %420
  %441 = phi i32 [ undef, %420 ], [ %435, %439 ]
  %442 = phi i64 [ %421, %420 ], [ %436, %439 ]
  %443 = phi i32 [ %422, %420 ], [ %435, %439 ]
  %444 = icmp ult i64 %423, 7
  br i1 %444, label %515, label %445

; <label>:445:                                    ; preds = %440
  br label %446

; <label>:446:                                    ; preds = %446, %445
  %447 = phi i64 [ %442, %445 ], [ %512, %446 ]
  %448 = phi i32 [ %443, %445 ], [ %511, %446 ]
  %449 = mul nsw i64 %447, %355
  %450 = getelementptr inbounds i32, i32* %351, i64 %449
  %451 = load i32, i32* %450, align 4, !tbaa !33
  %452 = getelementptr inbounds i32, i32* %361, i64 %447
  %453 = load i32, i32* %452, align 4, !tbaa !33
  %454 = mul nsw i32 %453, %451
  %455 = add nsw i32 %454, %448
  %456 = add nuw nsw i64 %447, 1
  %457 = mul nsw i64 %456, %355
  %458 = getelementptr inbounds i32, i32* %351, i64 %457
  %459 = load i32, i32* %458, align 4, !tbaa !33
  %460 = getelementptr inbounds i32, i32* %361, i64 %456
  %461 = load i32, i32* %460, align 4, !tbaa !33
  %462 = mul nsw i32 %461, %459
  %463 = add nsw i32 %462, %455
  %464 = add nsw i64 %447, 2
  %465 = mul nsw i64 %464, %355
  %466 = getelementptr inbounds i32, i32* %351, i64 %465
  %467 = load i32, i32* %466, align 4, !tbaa !33
  %468 = getelementptr inbounds i32, i32* %361, i64 %464
  %469 = load i32, i32* %468, align 4, !tbaa !33
  %470 = mul nsw i32 %469, %467
  %471 = add nsw i32 %470, %463
  %472 = add nsw i64 %447, 3
  %473 = mul nsw i64 %472, %355
  %474 = getelementptr inbounds i32, i32* %351, i64 %473
  %475 = load i32, i32* %474, align 4, !tbaa !33
  %476 = getelementptr inbounds i32, i32* %361, i64 %472
  %477 = load i32, i32* %476, align 4, !tbaa !33
  %478 = mul nsw i32 %477, %475
  %479 = add nsw i32 %478, %471
  %480 = add nsw i64 %447, 4
  %481 = mul nsw i64 %480, %355
  %482 = getelementptr inbounds i32, i32* %351, i64 %481
  %483 = load i32, i32* %482, align 4, !tbaa !33
  %484 = getelementptr inbounds i32, i32* %361, i64 %480
  %485 = load i32, i32* %484, align 4, !tbaa !33
  %486 = mul nsw i32 %485, %483
  %487 = add nsw i32 %486, %479
  %488 = add nsw i64 %447, 5
  %489 = mul nsw i64 %488, %355
  %490 = getelementptr inbounds i32, i32* %351, i64 %489
  %491 = load i32, i32* %490, align 4, !tbaa !33
  %492 = getelementptr inbounds i32, i32* %361, i64 %488
  %493 = load i32, i32* %492, align 4, !tbaa !33
  %494 = mul nsw i32 %493, %491
  %495 = add nsw i32 %494, %487
  %496 = add nsw i64 %447, 6
  %497 = mul nsw i64 %496, %355
  %498 = getelementptr inbounds i32, i32* %351, i64 %497
  %499 = load i32, i32* %498, align 4, !tbaa !33
  %500 = getelementptr inbounds i32, i32* %361, i64 %496
  %501 = load i32, i32* %500, align 4, !tbaa !33
  %502 = mul nsw i32 %501, %499
  %503 = add nsw i32 %502, %495
  %504 = add nsw i64 %447, 7
  %505 = mul nsw i64 %504, %355
  %506 = getelementptr inbounds i32, i32* %351, i64 %505
  %507 = load i32, i32* %506, align 4, !tbaa !33
  %508 = getelementptr inbounds i32, i32* %361, i64 %504
  %509 = load i32, i32* %508, align 4, !tbaa !33
  %510 = mul nsw i32 %509, %507
  %511 = add nsw i32 %510, %503
  %512 = add nsw i64 %447, 8
  %513 = icmp eq i64 %512, 47
  br i1 %513, label %514, label %446, !llvm.loop !828

; <label>:514:                                    ; preds = %446
  br label %515

; <label>:515:                                    ; preds = %440, %514
  %516 = phi i32 [ %441, %440 ], [ %511, %514 ]
  store i32 %516, i32* %345, align 4, !tbaa !33
  %517 = add nsw i64 %337, 1
  %518 = icmp slt i64 %517, %7
  br i1 %518, label %336, label %328
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEENS_14CwiseNullaryOpINS0_18scalar_constant_opIiEES3_EENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.123"* dereferenceable(16), %"class.Eigen::CwiseNullaryOp.1128"* dereferenceable(16), %"struct.Eigen::internal::assign_op.512"* dereferenceable(1)) local_unnamed_addr #6 {
  %4 = getelementptr inbounds %"class.Eigen::CwiseNullaryOp.1128", %"class.Eigen::CwiseNullaryOp.1128"* %1, i64 0, i32 2, i32 0
  %5 = load i32, i32* %4, align 4, !tbaa !51
  %6 = getelementptr inbounds %"class.Eigen::CwiseNullaryOp.1128", %"class.Eigen::CwiseNullaryOp.1128"* %1, i64 0, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !59
  %8 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8, !tbaa !43
  %10 = icmp eq i64 %9, %7
  br i1 %10, label %44, label %11

; <label>:11:                                     ; preds = %3
  %12 = icmp sgt i64 %7, -1
  br i1 %12, label %14, label %13, !prof !10

; <label>:13:                                     ; preds = %11
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:14:                                     ; preds = %11
  %15 = xor i64 %9, %7
  %16 = and i64 %15, 9223372036854775807
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %43, label %18

; <label>:18:                                     ; preds = %14
  %19 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %0, i64 0, i32 0, i32 0, i32 0
  %20 = load i32*, i32** %19, align 8, !tbaa !41
  %21 = icmp eq i32* %20, null
  br i1 %21, label %26, label %22

; <label>:22:                                     ; preds = %18
  %23 = getelementptr inbounds i32, i32* %20, i64 -2
  %24 = bitcast i32* %23 to i8**
  %25 = load i8*, i8** %24, align 8, !tbaa !29
  tail call void @free(i8* %25) #11
  br label %26

; <label>:26:                                     ; preds = %22, %18
  %27 = icmp eq i64 %7, 0
  br i1 %27, label %42, label %28

; <label>:28:                                     ; preds = %26
  %29 = mul i64 %7, 24
  %30 = add i64 %29, 32
  %31 = tail call i8* @malloc(i64 %30) #14
  %32 = icmp eq i8* %31, null
  br i1 %32, label %40, label %33

; <label>:33:                                     ; preds = %28
  %34 = ptrtoint i8* %31 to i64
  %35 = add i64 %34, 32
  %36 = and i64 %35, -32
  %37 = inttoptr i64 %36 to i8**
  %38 = getelementptr inbounds i8*, i8** %37, i64 -1
  store i8* %31, i8** %38, align 8, !tbaa !29
  %39 = inttoptr i64 %36 to i32*
  br label %40

; <label>:40:                                     ; preds = %33, %28
  %41 = phi i32* [ %39, %33 ], [ null, %28 ]
  store i32* %41, i32** %19, align 8, !tbaa !41
  br label %43

; <label>:42:                                     ; preds = %26
  store i32* null, i32** %19, align 8, !tbaa !41
  br label %43

; <label>:43:                                     ; preds = %42, %40, %14
  store i64 %7, i64* %8, align 8, !tbaa !43
  br label %44

; <label>:44:                                     ; preds = %3, %43
  %45 = bitcast %"class.Eigen::Matrix.123"* %0 to i64*
  %46 = load i64, i64* %45, align 8, !tbaa !41
  %47 = mul nsw i64 %7, 6
  %48 = sdiv i64 %47, 4
  %49 = shl nsw i64 %48, 2
  %50 = icmp sgt i64 %47, 3
  br i1 %50, label %51, label %78

; <label>:51:                                     ; preds = %44
  %52 = inttoptr i64 %46 to i32*
  %53 = insertelement <4 x i32> undef, i32 %5, i32 0
  %54 = shufflevector <4 x i32> %53, <4 x i32> undef, <4 x i32> zeroinitializer
  %55 = icmp sgt i64 %49, 4
  %56 = select i1 %55, i64 %49, i64 4
  %57 = add nsw i64 %56, -1
  %58 = lshr i64 %57, 2
  %59 = add nuw nsw i64 %58, 1
  %60 = and i64 %59, 7
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %72, label %62

; <label>:62:                                     ; preds = %51
  br label %63

; <label>:63:                                     ; preds = %63, %62
  %64 = phi i64 [ %68, %63 ], [ 0, %62 ]
  %65 = phi i64 [ %69, %63 ], [ %60, %62 ]
  %66 = getelementptr inbounds i32, i32* %52, i64 %64
  %67 = bitcast i32* %66 to <4 x i32>*
  store <4 x i32> %54, <4 x i32>* %67, align 16, !tbaa !11
  %68 = add nuw nsw i64 %64, 4
  %69 = add i64 %65, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %63, !llvm.loop !829

; <label>:71:                                     ; preds = %63
  br label %72

; <label>:72:                                     ; preds = %51, %71
  %73 = phi i64 [ 0, %51 ], [ %68, %71 ]
  %74 = icmp ult i64 %57, 28
  br i1 %74, label %77, label %75

; <label>:75:                                     ; preds = %72
  br label %210

; <label>:76:                                     ; preds = %210
  br label %77

; <label>:77:                                     ; preds = %72, %76
  br label %78

; <label>:78:                                     ; preds = %77, %44
  %79 = icmp sgt i64 %47, %49
  br i1 %79, label %80, label %238

; <label>:80:                                     ; preds = %78
  %81 = inttoptr i64 %46 to i32*
  %82 = sub i64 %47, %49
  %83 = icmp ult i64 %82, 32
  br i1 %83, label %203, label %84

; <label>:84:                                     ; preds = %80
  %85 = and i64 %82, -32
  %86 = icmp eq i64 %85, 0
  %87 = add i64 %49, %85
  br i1 %86, label %203, label %88

; <label>:88:                                     ; preds = %84
  %89 = insertelement <8 x i32> undef, i32 %5, i32 0
  %90 = shufflevector <8 x i32> %89, <8 x i32> undef, <8 x i32> zeroinitializer
  %91 = add i64 %85, -32
  %92 = lshr exact i64 %91, 5
  %93 = add nuw nsw i64 %92, 1
  %94 = and i64 %93, 7
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %113, label %96

; <label>:96:                                     ; preds = %88
  br label %97

; <label>:97:                                     ; preds = %97, %96
  %98 = phi i64 [ 0, %96 ], [ %109, %97 ]
  %99 = phi i64 [ %94, %96 ], [ %110, %97 ]
  %100 = add i64 %49, %98
  %101 = getelementptr inbounds i32, i32* %81, i64 %100
  %102 = bitcast i32* %101 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %102, align 4, !tbaa !33
  %103 = getelementptr i32, i32* %101, i64 8
  %104 = bitcast i32* %103 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %104, align 4, !tbaa !33
  %105 = getelementptr i32, i32* %101, i64 16
  %106 = bitcast i32* %105 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %106, align 4, !tbaa !33
  %107 = getelementptr i32, i32* %101, i64 24
  %108 = bitcast i32* %107 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %108, align 4, !tbaa !33
  %109 = add i64 %98, 32
  %110 = add i64 %99, -1
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %112, label %97, !llvm.loop !830

; <label>:112:                                    ; preds = %97
  br label %113

; <label>:113:                                    ; preds = %88, %112
  %114 = phi i64 [ 0, %88 ], [ %109, %112 ]
  %115 = icmp ult i64 %91, 224
  br i1 %115, label %201, label %116

; <label>:116:                                    ; preds = %113
  br label %117

; <label>:117:                                    ; preds = %117, %116
  %118 = phi i64 [ %114, %116 ], [ %198, %117 ]
  %119 = add i64 %49, %118
  %120 = getelementptr inbounds i32, i32* %81, i64 %119
  %121 = bitcast i32* %120 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %121, align 4, !tbaa !33
  %122 = getelementptr i32, i32* %120, i64 8
  %123 = bitcast i32* %122 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %123, align 4, !tbaa !33
  %124 = getelementptr i32, i32* %120, i64 16
  %125 = bitcast i32* %124 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %125, align 4, !tbaa !33
  %126 = getelementptr i32, i32* %120, i64 24
  %127 = bitcast i32* %126 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %127, align 4, !tbaa !33
  %128 = add i64 %118, 32
  %129 = add i64 %49, %128
  %130 = getelementptr inbounds i32, i32* %81, i64 %129
  %131 = bitcast i32* %130 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %131, align 4, !tbaa !33
  %132 = getelementptr i32, i32* %130, i64 8
  %133 = bitcast i32* %132 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %133, align 4, !tbaa !33
  %134 = getelementptr i32, i32* %130, i64 16
  %135 = bitcast i32* %134 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %135, align 4, !tbaa !33
  %136 = getelementptr i32, i32* %130, i64 24
  %137 = bitcast i32* %136 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %137, align 4, !tbaa !33
  %138 = add i64 %118, 64
  %139 = add i64 %49, %138
  %140 = getelementptr inbounds i32, i32* %81, i64 %139
  %141 = bitcast i32* %140 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %141, align 4, !tbaa !33
  %142 = getelementptr i32, i32* %140, i64 8
  %143 = bitcast i32* %142 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %143, align 4, !tbaa !33
  %144 = getelementptr i32, i32* %140, i64 16
  %145 = bitcast i32* %144 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %145, align 4, !tbaa !33
  %146 = getelementptr i32, i32* %140, i64 24
  %147 = bitcast i32* %146 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %147, align 4, !tbaa !33
  %148 = add i64 %118, 96
  %149 = add i64 %49, %148
  %150 = getelementptr inbounds i32, i32* %81, i64 %149
  %151 = bitcast i32* %150 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %151, align 4, !tbaa !33
  %152 = getelementptr i32, i32* %150, i64 8
  %153 = bitcast i32* %152 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %153, align 4, !tbaa !33
  %154 = getelementptr i32, i32* %150, i64 16
  %155 = bitcast i32* %154 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %155, align 4, !tbaa !33
  %156 = getelementptr i32, i32* %150, i64 24
  %157 = bitcast i32* %156 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %157, align 4, !tbaa !33
  %158 = add i64 %118, 128
  %159 = add i64 %49, %158
  %160 = getelementptr inbounds i32, i32* %81, i64 %159
  %161 = bitcast i32* %160 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %161, align 4, !tbaa !33
  %162 = getelementptr i32, i32* %160, i64 8
  %163 = bitcast i32* %162 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %163, align 4, !tbaa !33
  %164 = getelementptr i32, i32* %160, i64 16
  %165 = bitcast i32* %164 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %165, align 4, !tbaa !33
  %166 = getelementptr i32, i32* %160, i64 24
  %167 = bitcast i32* %166 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %167, align 4, !tbaa !33
  %168 = add i64 %118, 160
  %169 = add i64 %49, %168
  %170 = getelementptr inbounds i32, i32* %81, i64 %169
  %171 = bitcast i32* %170 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %171, align 4, !tbaa !33
  %172 = getelementptr i32, i32* %170, i64 8
  %173 = bitcast i32* %172 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %173, align 4, !tbaa !33
  %174 = getelementptr i32, i32* %170, i64 16
  %175 = bitcast i32* %174 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %175, align 4, !tbaa !33
  %176 = getelementptr i32, i32* %170, i64 24
  %177 = bitcast i32* %176 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %177, align 4, !tbaa !33
  %178 = add i64 %118, 192
  %179 = add i64 %49, %178
  %180 = getelementptr inbounds i32, i32* %81, i64 %179
  %181 = bitcast i32* %180 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %181, align 4, !tbaa !33
  %182 = getelementptr i32, i32* %180, i64 8
  %183 = bitcast i32* %182 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %183, align 4, !tbaa !33
  %184 = getelementptr i32, i32* %180, i64 16
  %185 = bitcast i32* %184 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %185, align 4, !tbaa !33
  %186 = getelementptr i32, i32* %180, i64 24
  %187 = bitcast i32* %186 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %187, align 4, !tbaa !33
  %188 = add i64 %118, 224
  %189 = add i64 %49, %188
  %190 = getelementptr inbounds i32, i32* %81, i64 %189
  %191 = bitcast i32* %190 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %191, align 4, !tbaa !33
  %192 = getelementptr i32, i32* %190, i64 8
  %193 = bitcast i32* %192 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %193, align 4, !tbaa !33
  %194 = getelementptr i32, i32* %190, i64 16
  %195 = bitcast i32* %194 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %195, align 4, !tbaa !33
  %196 = getelementptr i32, i32* %190, i64 24
  %197 = bitcast i32* %196 to <8 x i32>*
  store <8 x i32> %90, <8 x i32>* %197, align 4, !tbaa !33
  %198 = add i64 %118, 256
  %199 = icmp eq i64 %198, %85
  br i1 %199, label %200, label %117, !llvm.loop !831

; <label>:200:                                    ; preds = %117
  br label %201

; <label>:201:                                    ; preds = %113, %200
  %202 = icmp eq i64 %82, %85
  br i1 %202, label %238, label %203

; <label>:203:                                    ; preds = %201, %84, %80
  %204 = phi i64 [ %49, %84 ], [ %49, %80 ], [ %87, %201 ]
  br label %205

; <label>:205:                                    ; preds = %203, %205
  %206 = phi i64 [ %208, %205 ], [ %204, %203 ]
  %207 = getelementptr inbounds i32, i32* %81, i64 %206
  store i32 %5, i32* %207, align 4, !tbaa !33
  %208 = add nsw i64 %206, 1
  %209 = icmp eq i64 %208, %47
  br i1 %209, label %237, label %205, !llvm.loop !832

; <label>:210:                                    ; preds = %210, %75
  %211 = phi i64 [ %73, %75 ], [ %235, %210 ]
  %212 = getelementptr inbounds i32, i32* %52, i64 %211
  %213 = bitcast i32* %212 to <4 x i32>*
  store <4 x i32> %54, <4 x i32>* %213, align 16, !tbaa !11
  %214 = add nuw nsw i64 %211, 4
  %215 = getelementptr inbounds i32, i32* %52, i64 %214
  %216 = bitcast i32* %215 to <4 x i32>*
  store <4 x i32> %54, <4 x i32>* %216, align 16, !tbaa !11
  %217 = add nsw i64 %211, 8
  %218 = getelementptr inbounds i32, i32* %52, i64 %217
  %219 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> %54, <4 x i32>* %219, align 16, !tbaa !11
  %220 = add nsw i64 %211, 12
  %221 = getelementptr inbounds i32, i32* %52, i64 %220
  %222 = bitcast i32* %221 to <4 x i32>*
  store <4 x i32> %54, <4 x i32>* %222, align 16, !tbaa !11
  %223 = add nsw i64 %211, 16
  %224 = getelementptr inbounds i32, i32* %52, i64 %223
  %225 = bitcast i32* %224 to <4 x i32>*
  store <4 x i32> %54, <4 x i32>* %225, align 16, !tbaa !11
  %226 = add nsw i64 %211, 20
  %227 = getelementptr inbounds i32, i32* %52, i64 %226
  %228 = bitcast i32* %227 to <4 x i32>*
  store <4 x i32> %54, <4 x i32>* %228, align 16, !tbaa !11
  %229 = add nsw i64 %211, 24
  %230 = getelementptr inbounds i32, i32* %52, i64 %229
  %231 = bitcast i32* %230 to <4 x i32>*
  store <4 x i32> %54, <4 x i32>* %231, align 16, !tbaa !11
  %232 = add nsw i64 %211, 28
  %233 = getelementptr inbounds i32, i32* %52, i64 %232
  %234 = bitcast i32* %233 to <4 x i32>*
  store <4 x i32> %54, <4 x i32>* %234, align 16, !tbaa !11
  %235 = add nsw i64 %211, 32
  %236 = icmp slt i64 %235, %49
  br i1 %236, label %210, label %76

; <label>:237:                                    ; preds = %205
  br label %238

; <label>:238:                                    ; preds = %237, %201, %78
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr i32 @_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEEEEKNS6_IKNS5_IS9_EELi6ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIiiEEEEiRKT_(%"class.Eigen::DenseBase.1142"*, %"struct.Eigen::internal::scalar_sum_op"* dereferenceable(1)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.Eigen::DenseBase.1142"* %0 to i32**
  %4 = load i32*, i32** %3, align 8, !tbaa !350
  %5 = getelementptr inbounds %"class.Eigen::DenseBase.1142", %"class.Eigen::DenseBase.1142"* %0, i64 16
  %6 = bitcast %"class.Eigen::DenseBase.1142"* %5 to %"class.Eigen::Matrix.123"**
  %7 = load %"class.Eigen::Matrix.123"*, %"class.Eigen::Matrix.123"** %6, align 8, !tbaa !11
  %8 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %7, i64 0, i32 0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8, !tbaa !43
  %10 = getelementptr inbounds %"class.Eigen::DenseBase.1142", %"class.Eigen::DenseBase.1142"* %0, i64 40
  %11 = bitcast %"class.Eigen::DenseBase.1142"* %10 to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !360
  %13 = icmp eq i64 %12, 1
  br i1 %13, label %15, label %14, !prof !10

; <label>:14:                                     ; preds = %2
  tail call void @__assert_rtn(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__func__._ZN5Eigen8internal19variable_if_dynamicIlLi0EEC2El, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.8, i64 0, i64 0), i32 110, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0)) #13
  unreachable

; <label>:15:                                     ; preds = %2
  %16 = getelementptr inbounds %"class.Eigen::DenseBase.1142", %"class.Eigen::DenseBase.1142"* %0, i64 64
  %17 = bitcast %"class.Eigen::DenseBase.1142"* %16 to %"class.Eigen::Matrix.123"**
  %18 = load %"class.Eigen::Matrix.123"*, %"class.Eigen::Matrix.123"** %17, align 8, !tbaa !11
  %19 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %18, i64 0, i32 0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8, !tbaa !43
  %21 = getelementptr inbounds %"class.Eigen::DenseBase.1142", %"class.Eigen::DenseBase.1142"* %0, i64 88
  %22 = bitcast %"class.Eigen::DenseBase.1142"* %21 to i64*
  %23 = load i64, i64* %22, align 8, !tbaa !495
  %24 = icmp eq i64 %23, 1
  br i1 %24, label %26, label %25, !prof !10

; <label>:25:                                     ; preds = %15
  tail call void @__assert_rtn(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__func__._ZN5Eigen8internal19variable_if_dynamicIlLi0EEC2El, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.8, i64 0, i64 0), i32 110, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0)) #13
  unreachable

; <label>:26:                                     ; preds = %15
  %27 = getelementptr inbounds %"class.Eigen::DenseBase.1142", %"class.Eigen::DenseBase.1142"* %0, i64 48
  %28 = bitcast %"class.Eigen::DenseBase.1142"* %27 to i32**
  %29 = load i32*, i32** %28, align 8, !tbaa !485
  %30 = load i32, i32* %4, align 4, !tbaa !33
  %31 = load i32, i32* %29, align 4, !tbaa !33
  %32 = mul nsw i32 %31, %30
  %33 = getelementptr inbounds i32, i32* %4, i64 %9
  %34 = load i32, i32* %33, align 4, !tbaa !33
  %35 = getelementptr inbounds i32, i32* %29, i64 %20
  %36 = load i32, i32* %35, align 4, !tbaa !33
  %37 = mul nsw i32 %36, %34
  %38 = shl nsw i64 %9, 1
  %39 = getelementptr inbounds i32, i32* %4, i64 %38
  %40 = load i32, i32* %39, align 4, !tbaa !33
  %41 = shl nsw i64 %20, 1
  %42 = getelementptr inbounds i32, i32* %29, i64 %41
  %43 = load i32, i32* %42, align 4, !tbaa !33
  %44 = mul nsw i32 %43, %40
  %45 = mul nsw i64 %9, 3
  %46 = getelementptr inbounds i32, i32* %4, i64 %45
  %47 = load i32, i32* %46, align 4, !tbaa !33
  %48 = mul nsw i64 %20, 3
  %49 = getelementptr inbounds i32, i32* %29, i64 %48
  %50 = load i32, i32* %49, align 4, !tbaa !33
  %51 = mul nsw i32 %50, %47
  %52 = shl nsw i64 %9, 2
  %53 = getelementptr inbounds i32, i32* %4, i64 %52
  %54 = load i32, i32* %53, align 4, !tbaa !33
  %55 = shl nsw i64 %20, 2
  %56 = getelementptr inbounds i32, i32* %29, i64 %55
  %57 = load i32, i32* %56, align 4, !tbaa !33
  %58 = mul nsw i32 %57, %54
  %59 = mul nsw i64 %9, 5
  %60 = getelementptr inbounds i32, i32* %4, i64 %59
  %61 = load i32, i32* %60, align 4, !tbaa !33
  %62 = mul nsw i64 %20, 5
  %63 = getelementptr inbounds i32, i32* %29, i64 %62
  %64 = load i32, i32* %63, align 4, !tbaa !33
  %65 = mul nsw i32 %64, %61
  %66 = add i32 %37, %32
  %67 = add i32 %66, %44
  %68 = add i32 %67, %51
  %69 = add i32 %68, %58
  %70 = add i32 %69, %65
  ret i32 %70
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal15call_assignmentINS_6MatrixIiLin1ELin1ELi0ELin1ELin1EEENS_7ProductINS4_INS2_IiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS0_13add_assign_opIiiEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsr25evaluator_assume_aliasingISG_EE5valueEPvE4typeE(%"class.Eigen::Matrix.19"* dereferenceable(24), %"class.Eigen::Product.324"* dereferenceable(24), %"struct.Eigen::internal::add_assign_op"* dereferenceable(1), i8*) local_unnamed_addr #6 {
  %5 = alloca %"class.Eigen::Matrix.1034", align 8
  %6 = bitcast %"class.Eigen::Matrix.1034"* %5 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %6) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %6, i8 0, i64 24, i32 8, i1 false) #11
  %7 = bitcast %"class.Eigen::Product.324"* %1 to %"class.Eigen::PlainObjectBase.33"**
  %8 = load %"class.Eigen::PlainObjectBase.33"*, %"class.Eigen::PlainObjectBase.33"** %7, align 8, !tbaa !11
  %9 = getelementptr inbounds %"class.Eigen::PlainObjectBase.33", %"class.Eigen::PlainObjectBase.33"* %8, i64 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !37
  %11 = getelementptr inbounds %"class.Eigen::Product.324", %"class.Eigen::Product.324"* %1, i64 0, i32 1
  %12 = bitcast %"class.Eigen::Transpose.331"* %11 to %"class.Eigen::PlainObjectBase.124"**
  %13 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %12, align 8, !tbaa !11
  %14 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %13, i64 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8, !tbaa !43
  %16 = or i64 %15, %10
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %18, label %21

; <label>:18:                                     ; preds = %4
  %19 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %5, i64 0, i32 0, i32 0, i32 2
  %20 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %5, i64 0, i32 0, i32 0, i32 1
  br label %45

; <label>:21:                                     ; preds = %4
  %22 = icmp slt i64 %16, 0
  br i1 %22, label %23, label %24, !prof !50

; <label>:23:                                     ; preds = %21
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:24:                                     ; preds = %21
  %25 = mul nsw i64 %15, %10
  %26 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %5, i64 0, i32 0, i32 0, i32 1
  %27 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %5, i64 0, i32 0, i32 0, i32 2
  %28 = icmp eq i64 %25, 0
  br i1 %28, label %44, label %29

; <label>:29:                                     ; preds = %24
  %30 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %5, i64 0, i32 0, i32 0, i32 0
  %31 = shl i64 %25, 2
  %32 = add i64 %31, 32
  %33 = tail call i8* @malloc(i64 %32) #14
  %34 = icmp eq i8* %33, null
  br i1 %34, label %42, label %35

; <label>:35:                                     ; preds = %29
  %36 = ptrtoint i8* %33 to i64
  %37 = add i64 %36, 32
  %38 = and i64 %37, -32
  %39 = inttoptr i64 %38 to i8**
  %40 = getelementptr inbounds i8*, i8** %39, i64 -1
  store i8* %33, i8** %40, align 8, !tbaa !29
  %41 = inttoptr i64 %38 to i32*
  br label %42

; <label>:42:                                     ; preds = %35, %29
  %43 = phi i32* [ %41, %35 ], [ null, %29 ]
  store i32* %43, i32** %30, align 8, !tbaa !767
  br label %44

; <label>:44:                                     ; preds = %42, %24
  store i64 %10, i64* %26, align 8, !tbaa !769
  store i64 %15, i64* %27, align 8, !tbaa !770
  br label %45

; <label>:45:                                     ; preds = %18, %44
  %46 = phi i64* [ %20, %18 ], [ %26, %44 ]
  %47 = phi i64* [ %19, %18 ], [ %27, %44 ]
  %48 = getelementptr inbounds %"class.Eigen::Product.324", %"class.Eigen::Product.324"* %1, i64 0, i32 0
  call void @_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS3_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS_9TransposeINS3_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeESA_Li8EE6evalToINS3_IiLin1ELin1ELi1ELin1ELin1EEEEEvRT_RKS6_RKS9_(%"class.Eigen::Matrix.1034"* nonnull dereferenceable(24) %5, %"class.Eigen::Product.317"* nonnull dereferenceable(16) %48, %"class.Eigen::Transpose.331"* nonnull dereferenceable(8) %11) #11
  %49 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %5, i64 0, i32 0, i32 0, i32 0
  %50 = load i32*, i32** %49, align 8, !tbaa !767
  %51 = load i64, i64* %47, align 8, !tbaa !770
  %52 = getelementptr inbounds %"class.Eigen::Matrix.19", %"class.Eigen::Matrix.19"* %0, i64 0, i32 0, i32 0, i32 1
  %53 = load i64, i64* %52, align 8, !tbaa !771
  %54 = load i64, i64* %46, align 8, !tbaa !769
  %55 = icmp eq i64 %53, %54
  br i1 %55, label %56, label %60

; <label>:56:                                     ; preds = %45
  %57 = getelementptr inbounds %"class.Eigen::Matrix.19", %"class.Eigen::Matrix.19"* %0, i64 0, i32 0, i32 0, i32 2
  %58 = load i64, i64* %57, align 8, !tbaa !772
  %59 = icmp eq i64 %58, %51
  br i1 %59, label %61, label %60, !prof !10

; <label>:60:                                     ; preds = %56, %45
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__._ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEENS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES3_EEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.15, i64 0, i64 0), i32 710, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.29, i64 0, i64 0)) #13
  unreachable

; <label>:61:                                     ; preds = %56
  %62 = getelementptr inbounds %"class.Eigen::Matrix.19", %"class.Eigen::Matrix.19"* %0, i64 0, i32 0, i32 0, i32 0
  %63 = load i32*, i32** %62, align 8, !tbaa !30
  %64 = icmp sgt i64 %51, 0
  %65 = icmp sgt i64 %53, 0
  %66 = and i1 %64, %65
  br i1 %66, label %67, label %282

; <label>:67:                                     ; preds = %61
  %68 = add i64 %53, -16
  %69 = lshr i64 %68, 4
  %70 = add nuw nsw i64 %69, 1
  %71 = add i64 %53, -1
  %72 = icmp ult i64 %53, 16
  %73 = and i64 %53, -16
  %74 = icmp ne i64 %73, 0
  %75 = icmp eq i64 %51, 1
  %76 = and i1 %74, %75
  %77 = and i64 %70, 3
  %78 = icmp eq i64 %77, 0
  %79 = icmp ult i64 %68, 48
  %80 = icmp eq i64 %53, %73
  br label %81

; <label>:81:                                     ; preds = %67, %279
  %82 = phi i64 [ %280, %279 ], [ 0, %67 ]
  %83 = mul i64 %53, %82
  %84 = getelementptr i32, i32* %63, i64 %83
  %85 = add i64 %53, %83
  %86 = getelementptr i32, i32* %63, i64 %85
  %87 = getelementptr i32, i32* %50, i64 %82
  %88 = add i64 %53, %82
  %89 = getelementptr i32, i32* %50, i64 %88
  %90 = mul nsw i64 %82, %53
  br i1 %72, label %212, label %91

; <label>:91:                                     ; preds = %81
  br i1 %76, label %92, label %212

; <label>:92:                                     ; preds = %91
  %93 = icmp ult i32* %84, %89
  %94 = icmp ult i32* %87, %86
  %95 = and i1 %93, %94
  br i1 %95, label %212, label %96

; <label>:96:                                     ; preds = %92
  br i1 %78, label %124, label %97

; <label>:97:                                     ; preds = %96
  br label %98

; <label>:98:                                     ; preds = %98, %97
  %99 = phi i64 [ %120, %98 ], [ 0, %97 ]
  %100 = phi i64 [ %121, %98 ], [ %77, %97 ]
  %101 = add nsw i64 %99, %90
  %102 = getelementptr inbounds i32, i32* %63, i64 %101
  %103 = mul nsw i64 %99, %51
  %104 = add nsw i64 %103, %82
  %105 = getelementptr inbounds i32, i32* %50, i64 %104
  %106 = bitcast i32* %105 to <8 x i32>*
  %107 = load <8 x i32>, <8 x i32>* %106, align 4, !tbaa !33, !alias.scope !833
  %108 = getelementptr i32, i32* %105, i64 8
  %109 = bitcast i32* %108 to <8 x i32>*
  %110 = load <8 x i32>, <8 x i32>* %109, align 4, !tbaa !33, !alias.scope !833
  %111 = bitcast i32* %102 to <8 x i32>*
  %112 = load <8 x i32>, <8 x i32>* %111, align 4, !tbaa !33, !alias.scope !836, !noalias !833
  %113 = getelementptr i32, i32* %102, i64 8
  %114 = bitcast i32* %113 to <8 x i32>*
  %115 = load <8 x i32>, <8 x i32>* %114, align 4, !tbaa !33, !alias.scope !836, !noalias !833
  %116 = add nsw <8 x i32> %112, %107
  %117 = add nsw <8 x i32> %115, %110
  %118 = bitcast i32* %102 to <8 x i32>*
  store <8 x i32> %116, <8 x i32>* %118, align 4, !tbaa !33, !alias.scope !836, !noalias !833
  %119 = bitcast i32* %113 to <8 x i32>*
  store <8 x i32> %117, <8 x i32>* %119, align 4, !tbaa !33, !alias.scope !836, !noalias !833
  %120 = add i64 %99, 16
  %121 = add i64 %100, -1
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %123, label %98, !llvm.loop !838

; <label>:123:                                    ; preds = %98
  br label %124

; <label>:124:                                    ; preds = %96, %123
  %125 = phi i64 [ 0, %96 ], [ %120, %123 ]
  br i1 %79, label %211, label %126

; <label>:126:                                    ; preds = %124
  br label %127

; <label>:127:                                    ; preds = %127, %126
  %128 = phi i64 [ %125, %126 ], [ %208, %127 ]
  %129 = add nsw i64 %128, %90
  %130 = getelementptr inbounds i32, i32* %63, i64 %129
  %131 = mul nsw i64 %128, %51
  %132 = add nsw i64 %131, %82
  %133 = getelementptr inbounds i32, i32* %50, i64 %132
  %134 = bitcast i32* %133 to <8 x i32>*
  %135 = load <8 x i32>, <8 x i32>* %134, align 4, !tbaa !33, !alias.scope !833
  %136 = getelementptr i32, i32* %133, i64 8
  %137 = bitcast i32* %136 to <8 x i32>*
  %138 = load <8 x i32>, <8 x i32>* %137, align 4, !tbaa !33, !alias.scope !833
  %139 = bitcast i32* %130 to <8 x i32>*
  %140 = load <8 x i32>, <8 x i32>* %139, align 4, !tbaa !33, !alias.scope !836, !noalias !833
  %141 = getelementptr i32, i32* %130, i64 8
  %142 = bitcast i32* %141 to <8 x i32>*
  %143 = load <8 x i32>, <8 x i32>* %142, align 4, !tbaa !33, !alias.scope !836, !noalias !833
  %144 = add nsw <8 x i32> %140, %135
  %145 = add nsw <8 x i32> %143, %138
  %146 = bitcast i32* %130 to <8 x i32>*
  store <8 x i32> %144, <8 x i32>* %146, align 4, !tbaa !33, !alias.scope !836, !noalias !833
  %147 = bitcast i32* %141 to <8 x i32>*
  store <8 x i32> %145, <8 x i32>* %147, align 4, !tbaa !33, !alias.scope !836, !noalias !833
  %148 = add i64 %128, 16
  %149 = add nsw i64 %148, %90
  %150 = getelementptr inbounds i32, i32* %63, i64 %149
  %151 = mul nsw i64 %148, %51
  %152 = add nsw i64 %151, %82
  %153 = getelementptr inbounds i32, i32* %50, i64 %152
  %154 = bitcast i32* %153 to <8 x i32>*
  %155 = load <8 x i32>, <8 x i32>* %154, align 4, !tbaa !33, !alias.scope !833
  %156 = getelementptr i32, i32* %153, i64 8
  %157 = bitcast i32* %156 to <8 x i32>*
  %158 = load <8 x i32>, <8 x i32>* %157, align 4, !tbaa !33, !alias.scope !833
  %159 = bitcast i32* %150 to <8 x i32>*
  %160 = load <8 x i32>, <8 x i32>* %159, align 4, !tbaa !33, !alias.scope !836, !noalias !833
  %161 = getelementptr i32, i32* %150, i64 8
  %162 = bitcast i32* %161 to <8 x i32>*
  %163 = load <8 x i32>, <8 x i32>* %162, align 4, !tbaa !33, !alias.scope !836, !noalias !833
  %164 = add nsw <8 x i32> %160, %155
  %165 = add nsw <8 x i32> %163, %158
  %166 = bitcast i32* %150 to <8 x i32>*
  store <8 x i32> %164, <8 x i32>* %166, align 4, !tbaa !33, !alias.scope !836, !noalias !833
  %167 = bitcast i32* %161 to <8 x i32>*
  store <8 x i32> %165, <8 x i32>* %167, align 4, !tbaa !33, !alias.scope !836, !noalias !833
  %168 = add i64 %128, 32
  %169 = add nsw i64 %168, %90
  %170 = getelementptr inbounds i32, i32* %63, i64 %169
  %171 = mul nsw i64 %168, %51
  %172 = add nsw i64 %171, %82
  %173 = getelementptr inbounds i32, i32* %50, i64 %172
  %174 = bitcast i32* %173 to <8 x i32>*
  %175 = load <8 x i32>, <8 x i32>* %174, align 4, !tbaa !33, !alias.scope !833
  %176 = getelementptr i32, i32* %173, i64 8
  %177 = bitcast i32* %176 to <8 x i32>*
  %178 = load <8 x i32>, <8 x i32>* %177, align 4, !tbaa !33, !alias.scope !833
  %179 = bitcast i32* %170 to <8 x i32>*
  %180 = load <8 x i32>, <8 x i32>* %179, align 4, !tbaa !33, !alias.scope !836, !noalias !833
  %181 = getelementptr i32, i32* %170, i64 8
  %182 = bitcast i32* %181 to <8 x i32>*
  %183 = load <8 x i32>, <8 x i32>* %182, align 4, !tbaa !33, !alias.scope !836, !noalias !833
  %184 = add nsw <8 x i32> %180, %175
  %185 = add nsw <8 x i32> %183, %178
  %186 = bitcast i32* %170 to <8 x i32>*
  store <8 x i32> %184, <8 x i32>* %186, align 4, !tbaa !33, !alias.scope !836, !noalias !833
  %187 = bitcast i32* %181 to <8 x i32>*
  store <8 x i32> %185, <8 x i32>* %187, align 4, !tbaa !33, !alias.scope !836, !noalias !833
  %188 = add i64 %128, 48
  %189 = add nsw i64 %188, %90
  %190 = getelementptr inbounds i32, i32* %63, i64 %189
  %191 = mul nsw i64 %188, %51
  %192 = add nsw i64 %191, %82
  %193 = getelementptr inbounds i32, i32* %50, i64 %192
  %194 = bitcast i32* %193 to <8 x i32>*
  %195 = load <8 x i32>, <8 x i32>* %194, align 4, !tbaa !33, !alias.scope !833
  %196 = getelementptr i32, i32* %193, i64 8
  %197 = bitcast i32* %196 to <8 x i32>*
  %198 = load <8 x i32>, <8 x i32>* %197, align 4, !tbaa !33, !alias.scope !833
  %199 = bitcast i32* %190 to <8 x i32>*
  %200 = load <8 x i32>, <8 x i32>* %199, align 4, !tbaa !33, !alias.scope !836, !noalias !833
  %201 = getelementptr i32, i32* %190, i64 8
  %202 = bitcast i32* %201 to <8 x i32>*
  %203 = load <8 x i32>, <8 x i32>* %202, align 4, !tbaa !33, !alias.scope !836, !noalias !833
  %204 = add nsw <8 x i32> %200, %195
  %205 = add nsw <8 x i32> %203, %198
  %206 = bitcast i32* %190 to <8 x i32>*
  store <8 x i32> %204, <8 x i32>* %206, align 4, !tbaa !33, !alias.scope !836, !noalias !833
  %207 = bitcast i32* %201 to <8 x i32>*
  store <8 x i32> %205, <8 x i32>* %207, align 4, !tbaa !33, !alias.scope !836, !noalias !833
  %208 = add i64 %128, 64
  %209 = icmp eq i64 %208, %73
  br i1 %209, label %210, label %127, !llvm.loop !839

; <label>:210:                                    ; preds = %127
  br label %211

; <label>:211:                                    ; preds = %124, %210
  br i1 %80, label %279, label %212

; <label>:212:                                    ; preds = %91, %211, %92, %81
  %213 = phi i64 [ 0, %92 ], [ 0, %91 ], [ 0, %81 ], [ %73, %211 ]
  %214 = sub i64 %53, %213
  %215 = sub i64 %71, %213
  %216 = and i64 %214, 3
  %217 = icmp eq i64 %216, 0
  br i1 %217, label %234, label %218

; <label>:218:                                    ; preds = %212
  br label %219

; <label>:219:                                    ; preds = %219, %218
  %220 = phi i64 [ %230, %219 ], [ %213, %218 ]
  %221 = phi i64 [ %231, %219 ], [ %216, %218 ]
  %222 = add nsw i64 %220, %90
  %223 = getelementptr inbounds i32, i32* %63, i64 %222
  %224 = mul nsw i64 %220, %51
  %225 = add nsw i64 %224, %82
  %226 = getelementptr inbounds i32, i32* %50, i64 %225
  %227 = load i32, i32* %226, align 4, !tbaa !33
  %228 = load i32, i32* %223, align 4, !tbaa !33
  %229 = add nsw i32 %228, %227
  store i32 %229, i32* %223, align 4, !tbaa !33
  %230 = add nuw nsw i64 %220, 1
  %231 = add i64 %221, -1
  %232 = icmp eq i64 %231, 0
  br i1 %232, label %233, label %219, !llvm.loop !840

; <label>:233:                                    ; preds = %219
  br label %234

; <label>:234:                                    ; preds = %212, %233
  %235 = phi i64 [ %213, %212 ], [ %230, %233 ]
  %236 = icmp ult i64 %215, 3
  br i1 %236, label %278, label %237

; <label>:237:                                    ; preds = %234
  br label %238

; <label>:238:                                    ; preds = %238, %237
  %239 = phi i64 [ %235, %237 ], [ %275, %238 ]
  %240 = add nsw i64 %239, %90
  %241 = getelementptr inbounds i32, i32* %63, i64 %240
  %242 = mul nsw i64 %239, %51
  %243 = add nsw i64 %242, %82
  %244 = getelementptr inbounds i32, i32* %50, i64 %243
  %245 = load i32, i32* %244, align 4, !tbaa !33
  %246 = load i32, i32* %241, align 4, !tbaa !33
  %247 = add nsw i32 %246, %245
  store i32 %247, i32* %241, align 4, !tbaa !33
  %248 = add nuw nsw i64 %239, 1
  %249 = add nsw i64 %248, %90
  %250 = getelementptr inbounds i32, i32* %63, i64 %249
  %251 = mul nsw i64 %248, %51
  %252 = add nsw i64 %251, %82
  %253 = getelementptr inbounds i32, i32* %50, i64 %252
  %254 = load i32, i32* %253, align 4, !tbaa !33
  %255 = load i32, i32* %250, align 4, !tbaa !33
  %256 = add nsw i32 %255, %254
  store i32 %256, i32* %250, align 4, !tbaa !33
  %257 = add nsw i64 %239, 2
  %258 = add nsw i64 %257, %90
  %259 = getelementptr inbounds i32, i32* %63, i64 %258
  %260 = mul nsw i64 %257, %51
  %261 = add nsw i64 %260, %82
  %262 = getelementptr inbounds i32, i32* %50, i64 %261
  %263 = load i32, i32* %262, align 4, !tbaa !33
  %264 = load i32, i32* %259, align 4, !tbaa !33
  %265 = add nsw i32 %264, %263
  store i32 %265, i32* %259, align 4, !tbaa !33
  %266 = add nsw i64 %239, 3
  %267 = add nsw i64 %266, %90
  %268 = getelementptr inbounds i32, i32* %63, i64 %267
  %269 = mul nsw i64 %266, %51
  %270 = add nsw i64 %269, %82
  %271 = getelementptr inbounds i32, i32* %50, i64 %270
  %272 = load i32, i32* %271, align 4, !tbaa !33
  %273 = load i32, i32* %268, align 4, !tbaa !33
  %274 = add nsw i32 %273, %272
  store i32 %274, i32* %268, align 4, !tbaa !33
  %275 = add nsw i64 %239, 4
  %276 = icmp eq i64 %275, %53
  br i1 %276, label %277, label %238, !llvm.loop !841

; <label>:277:                                    ; preds = %238
  br label %278

; <label>:278:                                    ; preds = %234, %277
  br label %279

; <label>:279:                                    ; preds = %278, %211
  %280 = add nuw nsw i64 %82, 1
  %281 = icmp eq i64 %280, %51
  br i1 %281, label %284, label %81

; <label>:282:                                    ; preds = %61
  %283 = icmp eq i32* %50, null
  br i1 %283, label %289, label %285

; <label>:284:                                    ; preds = %279
  br label %285

; <label>:285:                                    ; preds = %284, %282
  %286 = getelementptr inbounds i32, i32* %50, i64 -2
  %287 = bitcast i32* %286 to i8**
  %288 = load i8*, i8** %287, align 8, !tbaa !29
  call void @free(i8* %288) #11
  br label %289

; <label>:289:                                    ; preds = %282, %285
  call void @llvm.lifetime.end(i64 24, i8* nonnull %6) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS3_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS_9TransposeINS3_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeESA_Li8EE6evalToINS3_IiLin1ELin1ELi1ELin1ELin1EEEEEvRT_RKS6_RKS9_(%"class.Eigen::Matrix.1034"* dereferenceable(24), %"class.Eigen::Product.317"* dereferenceable(16), %"class.Eigen::Transpose.331"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.Eigen::Product.1164", align 8
  %5 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8, !tbaa !769
  %9 = add nsw i64 %8, 6
  %10 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %0, i64 0, i32 0, i32 0, i32 2
  %11 = load i64, i64* %10, align 8, !tbaa !770
  %12 = add nsw i64 %9, %11
  %13 = icmp slt i64 %12, 20
  br i1 %13, label %14, label %22

; <label>:14:                                     ; preds = %3
  %15 = bitcast %"class.Eigen::Product.1164"* %4 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %15) #11
  %16 = bitcast %"class.Eigen::Product.317"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %15, i8* nonnull %16, i64 16, i32 8, i1 false) #11
  %17 = getelementptr inbounds %"class.Eigen::Product.1164", %"class.Eigen::Product.1164"* %4, i64 0, i32 1
  %18 = bitcast %"class.Eigen::Transpose.331"* %2 to i64*
  %19 = load i64, i64* %18, align 8, !noalias !842
  %20 = bitcast %"class.Eigen::Transpose.331"* %17 to i64*
  store i64 %19, i64* %20, align 8, !alias.scope !842
  %21 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %5, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %21) #11
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLin1ELin1ELi1ELin1ELin1EEENS_7ProductINS4_INS2_IiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.1034"* nonnull dereferenceable(24) %0, %"class.Eigen::Product.1164"* nonnull dereferenceable(24) %4, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %5) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %21) #11
  call void @llvm.lifetime.end(i64 24, i8* nonnull %15) #11
  br label %52

; <label>:22:                                     ; preds = %3
  %23 = or i64 %11, %8
  %24 = icmp slt i64 %23, 0
  br i1 %24, label %25, label %26, !prof !50

; <label>:25:                                     ; preds = %22
  tail call void @__assert_rtn(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__._ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEENS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEC2EllRKS3_, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.13, i64 0, i64 0), i32 74, i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.14, i64 0, i64 0)) #13, !noalias !845
  unreachable

; <label>:26:                                     ; preds = %22
  %27 = mul i64 %11, %8
  %28 = bitcast %"class.Eigen::Matrix.1034"* %0 to i64*
  %29 = load i64, i64* %28, align 8, !tbaa !767
  %30 = sdiv i64 %27, 4
  %31 = shl nsw i64 %30, 2
  %32 = icmp sgt i64 %27, 3
  br i1 %32, label %33, label %41

; <label>:33:                                     ; preds = %26
  %34 = inttoptr i64 %29 to i8*
  %35 = icmp sgt i64 %31, 4
  %36 = select i1 %35, i64 %31, i64 4
  %37 = add nuw i64 %36, 4611686018427387903
  %38 = lshr i64 %37, 2
  %39 = shl i64 %38, 4
  %40 = add i64 %39, 16
  tail call void @llvm.memset.p0i8.i64(i8* %34, i8 0, i64 %40, i32 16, i1 false) #11
  br label %41

; <label>:41:                                     ; preds = %33, %26
  %42 = icmp slt i64 %31, %27
  br i1 %42, label %43, label %50

; <label>:43:                                     ; preds = %41
  %44 = inttoptr i64 %29 to i32*
  %45 = getelementptr i32, i32* %44, i64 %31
  %46 = bitcast i32* %45 to i8*
  %47 = shl i64 %27, 2
  %48 = shl i64 %30, 4
  %49 = sub i64 %47, %48
  tail call void @llvm.memset.p0i8.i64(i8* %46, i8 0, i64 %49, i32 4, i1 false) #11
  br label %50

; <label>:50:                                     ; preds = %41, %43
  %51 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start(i64 4, i8* nonnull %51) #11
  store i32 1, i32* %6, align 4, !tbaa !33
  call void @_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS3_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS_9TransposeINS3_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeESA_Li8EE13scaleAndAddToINS3_IiLin1ELin1ELi1ELin1ELin1EEEEEvRT_RKS6_RKS9_RKi(%"class.Eigen::Matrix.1034"* nonnull dereferenceable(24) %0, %"class.Eigen::Product.317"* nonnull dereferenceable(16) %1, %"class.Eigen::Transpose.331"* nonnull dereferenceable(8) %2, i32* nonnull dereferenceable(4) %6)
  call void @llvm.lifetime.end(i64 4, i8* nonnull %51) #11
  br label %52

; <label>:52:                                     ; preds = %50, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS3_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS_9TransposeINS3_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeESA_Li8EE13scaleAndAddToINS3_IiLin1ELin1ELi1ELin1ELin1EEEEEvRT_RKS6_RKS9_RKi(%"class.Eigen::Matrix.1034"* dereferenceable(24), %"class.Eigen::Product.317"* dereferenceable(16), %"class.Eigen::Transpose.331"* dereferenceable(8), i32* dereferenceable(4)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %6 = alloca %"class.Eigen::Matrix.123", align 8
  %7 = alloca %"class.Eigen::internal::gemm_blocking_space.1160", align 8
  %8 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8, !tbaa !769
  %10 = bitcast %"class.Eigen::Product.317"* %1 to %"class.Eigen::PlainObjectBase.33"**
  %11 = load %"class.Eigen::PlainObjectBase.33"*, %"class.Eigen::PlainObjectBase.33"** %10, align 8, !tbaa !11
  %12 = getelementptr inbounds %"class.Eigen::PlainObjectBase.33", %"class.Eigen::PlainObjectBase.33"* %11, i64 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8, !tbaa !37
  %14 = icmp eq i64 %9, %13
  br i1 %14, label %15, label %23

; <label>:15:                                     ; preds = %4
  %16 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %0, i64 0, i32 0, i32 0, i32 2
  %17 = load i64, i64* %16, align 8, !tbaa !770
  %18 = bitcast %"class.Eigen::Transpose.331"* %2 to %"class.Eigen::PlainObjectBase.124"**
  %19 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %18, align 8, !tbaa !11
  %20 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %19, i64 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8, !tbaa !43
  %22 = icmp eq i64 %17, %21
  br i1 %22, label %24, label %23, !prof !10

; <label>:23:                                     ; preds = %15, %4
  tail call void @__assert_rtn(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__func__._ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EENS_9TransposeIKNS8_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeESI_Li8EE13scaleAndAddToINS8_IiLi47ELin1ELi0ELi47ELin1EEEEEvRT_RKSD_RKSH_RKi, i64 0, i64 0), i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.33, i64 0, i64 0), i32 460, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.34, i64 0, i64 0)) #13
  unreachable

; <label>:24:                                     ; preds = %15
  %25 = icmp eq i64 %9, 0
  %26 = icmp eq i64 %17, 0
  %27 = or i1 %25, %26
  br i1 %27, label %115, label %28

; <label>:28:                                     ; preds = %24
  %29 = bitcast %"class.Eigen::Matrix.123"* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %29) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %29, i8 0, i64 16, i32 8, i1 false) #11
  %30 = load i64, i64* %12, align 8, !tbaa !37
  %31 = icmp sgt i64 %30, -1
  br i1 %31, label %33, label %32, !prof !10

; <label>:32:                                     ; preds = %28
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:33:                                     ; preds = %28
  %34 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %6, i64 0, i32 0, i32 0, i32 1
  %35 = and i64 %30, 9223372036854775807
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %55, label %37

; <label>:37:                                     ; preds = %33
  %38 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %6, i64 0, i32 0, i32 0, i32 0
  %39 = icmp eq i64 %30, 0
  br i1 %39, label %54, label %40

; <label>:40:                                     ; preds = %37
  %41 = mul i64 %30, 24
  %42 = add i64 %41, 32
  %43 = tail call i8* @malloc(i64 %42) #14
  %44 = icmp eq i8* %43, null
  br i1 %44, label %52, label %45

; <label>:45:                                     ; preds = %40
  %46 = ptrtoint i8* %43 to i64
  %47 = add i64 %46, 32
  %48 = and i64 %47, -32
  %49 = inttoptr i64 %48 to i8**
  %50 = getelementptr inbounds i8*, i8** %49, i64 -1
  store i8* %43, i8** %50, align 8, !tbaa !29
  %51 = inttoptr i64 %48 to i32*
  br label %52

; <label>:52:                                     ; preds = %45, %40
  %53 = phi i32* [ %51, %45 ], [ null, %40 ]
  store i32* %53, i32** %38, align 8, !tbaa !41
  br label %55

; <label>:54:                                     ; preds = %37
  store i32* null, i32** %38, align 8, !tbaa !41
  br label %55

; <label>:55:                                     ; preds = %33, %52, %54
  store i64 %30, i64* %34, align 8, !tbaa !43
  %56 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %5, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %56) #11
  call void @_ZN5Eigen8internal10AssignmentINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEENS_7ProductINS2_IiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS0_9assign_opIiiEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_(%"class.Eigen::Matrix.123"* nonnull dereferenceable(16) %6, %"class.Eigen::Product.317"* nonnull dereferenceable(16) %1, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %5) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %56) #11
  %57 = getelementptr inbounds %"class.Eigen::Transpose.331", %"class.Eigen::Transpose.331"* %2, i64 0, i32 0
  %58 = load %"class.Eigen::Matrix.123"*, %"class.Eigen::Matrix.123"** %57, align 8, !tbaa !11
  %59 = load i32, i32* %3, align 4, !tbaa !33
  %60 = bitcast %"class.Eigen::internal::gemm_blocking_space.1160"* %7 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %60) #11
  %61 = load i64, i64* %8, align 8, !tbaa !769
  %62 = load i64, i64* %16, align 8, !tbaa !770
  call void @llvm.memset.p0i8.i64(i8* nonnull %60, i8 0, i64 16, i32 8, i1 false) #11
  %63 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1160", %"class.Eigen::internal::gemm_blocking_space.1160"* %7, i64 0, i32 0, i32 2
  store i64 %62, i64* %63, align 8, !tbaa !460
  %64 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1160", %"class.Eigen::internal::gemm_blocking_space.1160"* %7, i64 0, i32 0, i32 3
  store i64 %61, i64* %64, align 8, !tbaa !461
  %65 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1160", %"class.Eigen::internal::gemm_blocking_space.1160"* %7, i64 0, i32 0, i32 4
  store i64 6, i64* %65, align 8, !tbaa !193
  call void @_ZN5Eigen8internal37evaluateProductBlockingSizesHeuristicIiiLi1ElEEvRT2_S3_S3_S2_(i64* nonnull dereferenceable(8) %65, i64* nonnull dereferenceable(8) %63, i64* nonnull dereferenceable(8) %64, i64 1) #11
  %66 = load i64, i64* %63, align 8, !tbaa !460
  %67 = load i64, i64* %65, align 8, !tbaa !193
  %68 = mul nsw i64 %67, %66
  %69 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1160", %"class.Eigen::internal::gemm_blocking_space.1160"* %7, i64 0, i32 1
  store i64 %68, i64* %69, align 8, !tbaa !790
  %70 = load i64, i64* %64, align 8, !tbaa !461
  %71 = mul nsw i64 %70, %67
  %72 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1160", %"class.Eigen::internal::gemm_blocking_space.1160"* %7, i64 0, i32 2
  store i64 %71, i64* %72, align 8, !tbaa !792
  %73 = load %"class.Eigen::PlainObjectBase.33"*, %"class.Eigen::PlainObjectBase.33"** %10, align 8, !tbaa !11
  %74 = getelementptr inbounds %"class.Eigen::PlainObjectBase.33", %"class.Eigen::PlainObjectBase.33"* %73, i64 0, i32 0, i32 1
  %75 = load i64, i64* %74, align 8, !tbaa !37
  %76 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %18, align 8, !tbaa !11
  %77 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %76, i64 0, i32 0, i32 1
  %78 = load i64, i64* %77, align 8, !tbaa !43
  %79 = icmp eq i64 %78, -1
  %80 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %58, i64 0, i32 0, i32 0, i32 1
  %81 = load i64, i64* %80, align 8, !tbaa !43
  %82 = select i1 %79, i64 %81, i64 %78
  %83 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %6, i64 0, i32 0, i32 0, i32 0
  %84 = load i32*, i32** %83, align 8, !tbaa !41
  %85 = load i64, i64* %34, align 8, !tbaa !43
  %86 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %58, i64 0, i32 0, i32 0, i32 0
  %87 = load i32*, i32** %86, align 8, !tbaa !41
  %88 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %0, i64 0, i32 0, i32 0, i32 0
  %89 = load i32*, i32** %88, align 8, !tbaa !767
  %90 = load i64, i64* %16, align 8, !tbaa !770
  %91 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1160", %"class.Eigen::internal::gemm_blocking_space.1160"* %7, i64 0, i32 0
  call void @_ZN5Eigen8internal29general_matrix_matrix_productIliLi0ELb0EiLi1ELb0ELi0EE3runElllPKilS4_lPiliRNS0_15level3_blockingIiiEEPNS0_16GemmParallelInfoIlEE(i64 %82, i64 %75, i64 6, i32* %87, i64 %81, i32* %84, i64 %85, i32* %89, i64 %90, i32 %59, %"class.Eigen::internal::level3_blocking"* nonnull dereferenceable(40) %91, %"struct.Eigen::internal::GemmParallelInfo"* null) #11
  %92 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1160", %"class.Eigen::internal::gemm_blocking_space.1160"* %7, i64 0, i32 0, i32 0
  %93 = load i32*, i32** %92, align 8, !tbaa !195
  %94 = icmp eq i32* %93, null
  br i1 %94, label %99, label %95

; <label>:95:                                     ; preds = %55
  %96 = getelementptr inbounds i32, i32* %93, i64 -2
  %97 = bitcast i32* %96 to i8**
  %98 = load i8*, i8** %97, align 8, !tbaa !29
  call void @free(i8* %98) #11
  br label %99

; <label>:99:                                     ; preds = %95, %55
  %100 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1160", %"class.Eigen::internal::gemm_blocking_space.1160"* %7, i64 0, i32 0, i32 1
  %101 = load i32*, i32** %100, align 8, !tbaa !196
  %102 = icmp eq i32* %101, null
  br i1 %102, label %107, label %103

; <label>:103:                                    ; preds = %99
  %104 = getelementptr inbounds i32, i32* %101, i64 -2
  %105 = bitcast i32* %104 to i8**
  %106 = load i8*, i8** %105, align 8, !tbaa !29
  call void @free(i8* %106) #11
  br label %107

; <label>:107:                                    ; preds = %99, %103
  call void @llvm.lifetime.end(i64 56, i8* nonnull %60) #11
  %108 = load i32*, i32** %83, align 8, !tbaa !41
  %109 = icmp eq i32* %108, null
  br i1 %109, label %114, label %110

; <label>:110:                                    ; preds = %107
  %111 = getelementptr inbounds i32, i32* %108, i64 -2
  %112 = bitcast i32* %111 to i8**
  %113 = load i8*, i8** %112, align 8, !tbaa !29
  call void @free(i8* %113) #11
  br label %114

; <label>:114:                                    ; preds = %107, %110
  call void @llvm.lifetime.end(i64 16, i8* nonnull %29) #11
  br label %115

; <label>:115:                                    ; preds = %24, %114
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLin1ELin1ELi1ELin1ELin1EEENS_7ProductINS4_INS2_IiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.1034"* dereferenceable(24), %"class.Eigen::Product.1164"* dereferenceable(24), %"struct.Eigen::internal::assign_op.512"* dereferenceable(1)) local_unnamed_addr #6 {
  %4 = alloca %"struct.Eigen::internal::scalar_sum_op", align 1
  %5 = alloca %"class.Eigen::CwiseBinaryOp.1183", align 8
  %6 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %7 = alloca %"struct.Eigen::internal::evaluator.1171", align 16
  %8 = bitcast %"struct.Eigen::internal::evaluator.1171"* %7 to i8*
  call void @llvm.lifetime.start(i64 72, i8* nonnull %8) #11
  %9 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1171", %"struct.Eigen::internal::evaluator.1171"* %7, i64 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.Eigen::Product.1164", %"class.Eigen::Product.1164"* %1, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull %8, i8 0, i64 16, i32 16, i1 false) #11
  %11 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %6, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %11) #11
  call void @_ZN5Eigen8internal10AssignmentINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEENS_7ProductINS2_IiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS0_9assign_opIiiEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_(%"class.Eigen::Matrix.123"* nonnull dereferenceable(16) %9, %"class.Eigen::Product.317"* nonnull dereferenceable(16) %10, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %6) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %11) #11
  %12 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1171", %"struct.Eigen::internal::evaluator.1171"* %7, i64 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.Eigen::Product.1164", %"class.Eigen::Product.1164"* %1, i64 0, i32 1
  %14 = bitcast %"class.Eigen::Transpose.331"* %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.Eigen::Transpose.331"* %12 to i64*
  store i64 %15, i64* %16, align 16
  %17 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1171", %"struct.Eigen::internal::evaluator.1171"* %7, i64 0, i32 0, i32 2
  %18 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1171", %"struct.Eigen::internal::evaluator.1171"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %19 = bitcast %"struct.Eigen::internal::evaluator.1171"* %7 to <2 x i64>*
  %20 = load <2 x i64>, <2 x i64>* %19, align 16, !tbaa !11
  %21 = bitcast %"struct.Eigen::internal::evaluator.569"* %17 to <2 x i64>*
  store <2 x i64> %20, <2 x i64>* %21, align 8, !tbaa !11
  %22 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1171", %"struct.Eigen::internal::evaluator.1171"* %7, i64 0, i32 0, i32 3, i32 0, i32 1
  %23 = inttoptr i64 %15 to %"class.Eigen::Matrix.123"*
  %24 = inttoptr i64 %15 to i64*
  %25 = load i64, i64* %24, align 8, !tbaa !41
  %26 = bitcast %"struct.Eigen::internal::evaluator.569"* %22 to i64*
  store i64 %25, i64* %26, align 8, !tbaa !468
  %27 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %23, i64 0, i32 0, i32 0, i32 1
  %28 = load i64, i64* %27, align 8, !tbaa !43
  %29 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1171", %"struct.Eigen::internal::evaluator.1171"* %7, i64 0, i32 0, i32 3, i32 0, i32 1, i32 0, i32 1, i32 0
  store i64 %28, i64* %29, align 8, !tbaa !59
  %30 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1171", %"struct.Eigen::internal::evaluator.1171"* %7, i64 0, i32 0, i32 4
  store i64 6, i64* %30, align 16, !tbaa !850
  %31 = bitcast %"class.Eigen::Product.1164"* %1 to %"class.Eigen::PlainObjectBase.33"**
  %32 = load %"class.Eigen::PlainObjectBase.33"*, %"class.Eigen::PlainObjectBase.33"** %31, align 8, !tbaa !11
  %33 = getelementptr inbounds %"class.Eigen::PlainObjectBase.33", %"class.Eigen::PlainObjectBase.33"* %32, i64 0, i32 0, i32 1
  %34 = load i64, i64* %33, align 8, !tbaa !37
  %35 = inttoptr i64 %15 to %"class.Eigen::PlainObjectBase.124"*
  %36 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %35, i64 0, i32 0, i32 1
  %37 = load i64, i64* %36, align 8, !tbaa !43
  %38 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %0, i64 0, i32 0, i32 0, i32 1
  %39 = load i64, i64* %38, align 8, !tbaa !769
  %40 = icmp eq i64 %39, %34
  br i1 %40, label %41, label %45

; <label>:41:                                     ; preds = %3
  %42 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %0, i64 0, i32 0, i32 0, i32 2
  %43 = load i64, i64* %42, align 8, !tbaa !770
  %44 = icmp eq i64 %43, %37
  br i1 %44, label %81, label %45

; <label>:45:                                     ; preds = %41, %3
  %46 = or i64 %37, %34
  %47 = icmp slt i64 %46, 0
  br i1 %47, label %48, label %49, !prof !50

; <label>:48:                                     ; preds = %45
  call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:49:                                     ; preds = %45
  %50 = mul nsw i64 %37, %34
  %51 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %0, i64 0, i32 0, i32 0, i32 2
  %52 = load i64, i64* %51, align 8, !tbaa !770
  %53 = mul nsw i64 %52, %39
  %54 = icmp eq i64 %53, %50
  br i1 %54, label %80, label %55

; <label>:55:                                     ; preds = %49
  %56 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %0, i64 0, i32 0, i32 0, i32 0
  %57 = load i32*, i32** %56, align 8, !tbaa !767
  %58 = icmp eq i32* %57, null
  br i1 %58, label %63, label %59

; <label>:59:                                     ; preds = %55
  %60 = getelementptr inbounds i32, i32* %57, i64 -2
  %61 = bitcast i32* %60 to i8**
  %62 = load i8*, i8** %61, align 8, !tbaa !29
  call void @free(i8* %62) #11
  br label %63

; <label>:63:                                     ; preds = %59, %55
  %64 = icmp eq i64 %50, 0
  br i1 %64, label %79, label %65

; <label>:65:                                     ; preds = %63
  %66 = shl i64 %50, 2
  %67 = add i64 %66, 32
  %68 = call i8* @malloc(i64 %67) #14
  %69 = icmp eq i8* %68, null
  br i1 %69, label %77, label %70

; <label>:70:                                     ; preds = %65
  %71 = ptrtoint i8* %68 to i64
  %72 = add i64 %71, 32
  %73 = and i64 %72, -32
  %74 = inttoptr i64 %73 to i8**
  %75 = getelementptr inbounds i8*, i8** %74, i64 -1
  store i8* %68, i8** %75, align 8, !tbaa !29
  %76 = inttoptr i64 %73 to i32*
  br label %77

; <label>:77:                                     ; preds = %70, %65
  %78 = phi i32* [ %76, %70 ], [ null, %65 ]
  store i32* %78, i32** %56, align 8, !tbaa !767
  br label %80

; <label>:79:                                     ; preds = %63
  store i32* null, i32** %56, align 8, !tbaa !767
  br label %80

; <label>:80:                                     ; preds = %79, %77, %49
  store i64 %34, i64* %38, align 8, !tbaa !769
  store i64 %37, i64* %51, align 8, !tbaa !770
  br label %81

; <label>:81:                                     ; preds = %41, %80
  %82 = phi i64* [ %42, %41 ], [ %51, %80 ]
  %83 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %0, i64 0, i32 0, i32 0, i32 0
  %84 = load i32*, i32** %83, align 8, !tbaa !767
  %85 = icmp sgt i64 %34, 0
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %81
  %87 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1171", %"struct.Eigen::internal::evaluator.1171"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %149

; <label>:88:                                     ; preds = %81
  %89 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1171", %"struct.Eigen::internal::evaluator.1171"* %7, i64 0, i32 0
  %90 = bitcast %"class.Eigen::CwiseBinaryOp.1183"* %5 to i8*
  %91 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1171", %"struct.Eigen::internal::evaluator.1171"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1171", %"struct.Eigen::internal::evaluator.1171"* %7, i64 0, i32 0, i32 1, i32 0
  %93 = bitcast %"class.Eigen::CwiseBinaryOp.1183"* %5 to i64*
  %94 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1183", %"class.Eigen::CwiseBinaryOp.1183"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %95 = bitcast %"class.Eigen::Matrix.123"** %94 to %"struct.Eigen::internal::product_evaluator.1172"**
  %96 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1183", %"class.Eigen::CwiseBinaryOp.1183"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  %97 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1183", %"class.Eigen::CwiseBinaryOp.1183"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 0
  %98 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1183", %"class.Eigen::CwiseBinaryOp.1183"* %5, i64 0, i32 1
  %99 = bitcast %"class.Eigen::Block.1189"* %98 to i64*
  %100 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1183", %"class.Eigen::CwiseBinaryOp.1183"* %5, i64 0, i32 1, i32 0, i32 0, i32 1
  %101 = bitcast %"class.Eigen::Transpose.331"* %100 to i64*
  %102 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1183", %"class.Eigen::CwiseBinaryOp.1183"* %5, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0
  %103 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1183", %"class.Eigen::CwiseBinaryOp.1183"* %5, i64 0, i32 1, i32 0, i32 0, i32 3, i32 0
  %104 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1183", %"class.Eigen::CwiseBinaryOp.1183"* %5, i64 0, i32 1, i32 0, i32 0, i32 4
  %105 = bitcast %"class.Eigen::CwiseBinaryOp.1183"* %5 to %"class.Eigen::DenseBase.1186"*
  %106 = getelementptr inbounds %"struct.Eigen::internal::scalar_sum_op", %"struct.Eigen::internal::scalar_sum_op"* %4, i64 0, i32 0
  %107 = bitcast i64* %97 to <2 x i64>*
  br label %108

; <label>:108:                                    ; preds = %88, %141
  %109 = phi i64 [ %142, %141 ], [ %34, %88 ]
  %110 = phi i64 [ %143, %141 ], [ %37, %88 ]
  %111 = phi i64 [ %144, %141 ], [ 0, %88 ]
  %112 = icmp sgt i64 %110, 0
  br i1 %112, label %113, label %141

; <label>:113:                                    ; preds = %108
  %114 = mul nsw i64 %111, %37
  br label %115

; <label>:115:                                    ; preds = %113, %129
  %116 = phi i64 [ %136, %129 ], [ 0, %113 ]
  %117 = add nsw i64 %116, %114
  %118 = getelementptr inbounds i32, i32* %84, i64 %117
  call void @llvm.lifetime.start(i64 104, i8* nonnull %90) #11
  %119 = load i32*, i32** %91, align 16, !tbaa !41, !noalias !854
  %120 = getelementptr inbounds i32, i32* %119, i64 %111
  %121 = ptrtoint i32* %120 to i64
  %122 = load i64, i64* %18, align 8, !tbaa !43, !noalias !854
  %123 = icmp sgt i64 %122, %111
  br i1 %123, label %124, label %146, !prof !10

; <label>:124:                                    ; preds = %115
  %125 = load %"class.Eigen::Matrix.123"*, %"class.Eigen::Matrix.123"** %92, align 16, !tbaa !11, !noalias !857
  %126 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %125, i64 0, i32 0, i32 0, i32 1
  %127 = load i64, i64* %126, align 8, !tbaa !43, !noalias !857
  %128 = icmp sgt i64 %127, %116
  br i1 %128, label %129, label %147, !prof !10

; <label>:129:                                    ; preds = %124
  %130 = ptrtoint %"class.Eigen::Matrix.123"* %125 to i64
  %131 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %125, i64 0, i32 0, i32 0, i32 0
  %132 = load i32*, i32** %131, align 8, !tbaa !41, !noalias !857
  %133 = getelementptr inbounds i32, i32* %132, i64 %116
  %134 = ptrtoint i32* %133 to i64
  store i64 %121, i64* %93, align 8, !tbaa !350, !alias.scope !860
  store %"struct.Eigen::internal::product_evaluator.1172"* %89, %"struct.Eigen::internal::product_evaluator.1172"** %95, align 8
  store i64 %111, i64* %96, align 8
  store <2 x i64> <i64 0, i64 1>, <2 x i64>* %107, align 8
  store i64 %134, i64* %99, align 8, !tbaa !863, !alias.scope !860
  store i64 %130, i64* %101, align 8
  store i64 0, i64* %102, align 8
  store i64 %116, i64* %103, align 8
  store i64 1, i64* %104, align 8
  call void @llvm.lifetime.start(i64 1, i8* nonnull %106) #11
  %135 = call i32 @_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEEEEKNS6_IKNS5_IS8_EELi6ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIiiEEEEiRKT_(%"class.Eigen::DenseBase.1186"* nonnull %105, %"struct.Eigen::internal::scalar_sum_op"* nonnull dereferenceable(1) %4) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %106) #11
  call void @llvm.lifetime.end(i64 104, i8* nonnull %90) #11
  store i32 %135, i32* %118, align 4, !tbaa !33
  %136 = add nuw nsw i64 %116, 1
  %137 = load i64, i64* %82, align 8, !tbaa !770
  %138 = icmp slt i64 %136, %137
  br i1 %138, label %115, label %139

; <label>:139:                                    ; preds = %129
  %140 = load i64, i64* %38, align 8, !tbaa !769
  br label %141

; <label>:141:                                    ; preds = %139, %108
  %142 = phi i64 [ %140, %139 ], [ %109, %108 ]
  %143 = phi i64 [ %137, %139 ], [ %110, %108 ]
  %144 = add nuw nsw i64 %111, 1
  %145 = icmp slt i64 %144, %142
  br i1 %145, label %108, label %148

; <label>:146:                                    ; preds = %115
  call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !854
  unreachable

; <label>:147:                                    ; preds = %124
  call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !857
  unreachable

; <label>:148:                                    ; preds = %141
  br label %149

; <label>:149:                                    ; preds = %148, %86
  %150 = phi i32** [ %87, %86 ], [ %91, %148 ]
  %151 = load i32*, i32** %150, align 8, !tbaa !41
  %152 = icmp eq i32* %151, null
  br i1 %152, label %157, label %153

; <label>:153:                                    ; preds = %149
  %154 = getelementptr inbounds i32, i32* %151, i64 -2
  %155 = bitcast i32* %154 to i8**
  %156 = load i8*, i8** %155, align 8, !tbaa !29
  call void @free(i8* %156) #11
  br label %157

; <label>:157:                                    ; preds = %149, %153
  call void @llvm.lifetime.end(i64 72, i8* nonnull %8) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr i32 @_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEEEEKNS6_IKNS5_IS8_EELi6ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIiiEEEEiRKT_(%"class.Eigen::DenseBase.1186"*, %"struct.Eigen::internal::scalar_sum_op"* dereferenceable(1)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.Eigen::DenseBase.1186"* %0 to i32**
  %4 = load i32*, i32** %3, align 8, !tbaa !350
  %5 = getelementptr inbounds %"class.Eigen::DenseBase.1186", %"class.Eigen::DenseBase.1186"* %0, i64 16
  %6 = bitcast %"class.Eigen::DenseBase.1186"* %5 to %"class.Eigen::Matrix.123"**
  %7 = load %"class.Eigen::Matrix.123"*, %"class.Eigen::Matrix.123"** %6, align 8, !tbaa !11
  %8 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %7, i64 0, i32 0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8, !tbaa !43
  %10 = getelementptr inbounds %"class.Eigen::DenseBase.1186", %"class.Eigen::DenseBase.1186"* %0, i64 40
  %11 = bitcast %"class.Eigen::DenseBase.1186"* %10 to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !360
  %13 = icmp eq i64 %12, 1
  br i1 %13, label %15, label %14, !prof !10

; <label>:14:                                     ; preds = %2
  tail call void @__assert_rtn(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__func__._ZN5Eigen8internal19variable_if_dynamicIlLi0EEC2El, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.8, i64 0, i64 0), i32 110, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0)) #13
  unreachable

; <label>:15:                                     ; preds = %2
  %16 = getelementptr inbounds %"class.Eigen::DenseBase.1186", %"class.Eigen::DenseBase.1186"* %0, i64 64
  %17 = bitcast %"class.Eigen::DenseBase.1186"* %16 to %"class.Eigen::Matrix.123"**
  %18 = load %"class.Eigen::Matrix.123"*, %"class.Eigen::Matrix.123"** %17, align 8, !tbaa !11
  %19 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %18, i64 0, i32 0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8, !tbaa !43
  %21 = getelementptr inbounds %"class.Eigen::DenseBase.1186", %"class.Eigen::DenseBase.1186"* %0, i64 88
  %22 = bitcast %"class.Eigen::DenseBase.1186"* %21 to i64*
  %23 = load i64, i64* %22, align 8, !tbaa !865
  %24 = icmp eq i64 %23, 1
  br i1 %24, label %26, label %25, !prof !10

; <label>:25:                                     ; preds = %15
  tail call void @__assert_rtn(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__func__._ZN5Eigen8internal19variable_if_dynamicIlLi0EEC2El, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.8, i64 0, i64 0), i32 110, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0)) #13
  unreachable

; <label>:26:                                     ; preds = %15
  %27 = getelementptr inbounds %"class.Eigen::DenseBase.1186", %"class.Eigen::DenseBase.1186"* %0, i64 48
  %28 = bitcast %"class.Eigen::DenseBase.1186"* %27 to i32**
  %29 = load i32*, i32** %28, align 8, !tbaa !863
  %30 = load i32, i32* %4, align 4, !tbaa !33
  %31 = load i32, i32* %29, align 4, !tbaa !33
  %32 = mul nsw i32 %31, %30
  %33 = getelementptr inbounds i32, i32* %4, i64 %9
  %34 = load i32, i32* %33, align 4, !tbaa !33
  %35 = getelementptr inbounds i32, i32* %29, i64 %20
  %36 = load i32, i32* %35, align 4, !tbaa !33
  %37 = mul nsw i32 %36, %34
  %38 = shl nsw i64 %9, 1
  %39 = getelementptr inbounds i32, i32* %4, i64 %38
  %40 = load i32, i32* %39, align 4, !tbaa !33
  %41 = shl nsw i64 %20, 1
  %42 = getelementptr inbounds i32, i32* %29, i64 %41
  %43 = load i32, i32* %42, align 4, !tbaa !33
  %44 = mul nsw i32 %43, %40
  %45 = mul nsw i64 %9, 3
  %46 = getelementptr inbounds i32, i32* %4, i64 %45
  %47 = load i32, i32* %46, align 4, !tbaa !33
  %48 = mul nsw i64 %20, 3
  %49 = getelementptr inbounds i32, i32* %29, i64 %48
  %50 = load i32, i32* %49, align 4, !tbaa !33
  %51 = mul nsw i32 %50, %47
  %52 = shl nsw i64 %9, 2
  %53 = getelementptr inbounds i32, i32* %4, i64 %52
  %54 = load i32, i32* %53, align 4, !tbaa !33
  %55 = shl nsw i64 %20, 2
  %56 = getelementptr inbounds i32, i32* %29, i64 %55
  %57 = load i32, i32* %56, align 4, !tbaa !33
  %58 = mul nsw i32 %57, %54
  %59 = mul nsw i64 %9, 5
  %60 = getelementptr inbounds i32, i32* %4, i64 %59
  %61 = load i32, i32* %60, align 4, !tbaa !33
  %62 = mul nsw i64 %20, 5
  %63 = getelementptr inbounds i32, i32* %29, i64 %62
  %64 = load i32, i32* %63, align 4, !tbaa !33
  %65 = mul nsw i32 %64, %61
  %66 = add i32 %37, %32
  %67 = add i32 %66, %44
  %68 = add i32 %67, %51
  %69 = add i32 %68, %58
  %70 = add i32 %69, %65
  ret i32 %70
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi1ELi47ELi1ELi1ELi47EEEEENS3_INS_7ProductINS_9TransposeINS4_IiLi6ELi1ELi0ELi6ELi1EEEEENS8_INS4_IiLi47ELi6ELi0ELi47ELi6EEEEELi1EEEEENS0_9assign_opIiiEELi0EEELi3ELi0EE3runERSH_(%"class.Eigen::internal::generic_dense_assignment_kernel.1241"* dereferenceable(32)) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1241", %"class.Eigen::internal::generic_dense_assignment_kernel.1241"* %0, i64 0, i32 3
  %3 = bitcast %"class.Eigen::Matrix.1210"** %2 to i64*
  %4 = load i64, i64* %3, align 8, !tbaa !11
  %5 = and i64 %4, 3
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %13

; <label>:7:                                      ; preds = %1
  %8 = lshr i64 %4, 2
  %9 = sub nsw i64 0, %8
  %10 = and i64 %9, 3
  %11 = or i64 %10, 44
  %12 = icmp eq i64 %10, 0
  br i1 %12, label %72, label %13

; <label>:13:                                     ; preds = %1, %7
  %14 = phi i64 [ %11, %7 ], [ 47, %1 ]
  %15 = phi i64 [ %10, %7 ], [ 47, %1 ]
  %16 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1241", %"class.Eigen::internal::generic_dense_assignment_kernel.1241"* %0, i64 0, i32 1
  %17 = bitcast %"struct.Eigen::internal::evaluator.1227"** %16 to %"struct.Eigen::internal::product_evaluator.1228"**
  %18 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1241"* %0 to %"struct.Eigen::internal::evaluator.1237"**
  br label %19

; <label>:19:                                     ; preds = %29, %13
  %20 = phi i64 [ 0, %13 ], [ %68, %29 ]
  %21 = load %"struct.Eigen::internal::product_evaluator.1228"*, %"struct.Eigen::internal::product_evaluator.1228"** %17, align 8, !tbaa !11
  %22 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1228", %"struct.Eigen::internal::product_evaluator.1228"* %21, i64 0, i32 0, i32 0
  %23 = load %"class.Eigen::Matrix.185"*, %"class.Eigen::Matrix.185"** %22, align 8, !tbaa !11, !noalias !867
  %24 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1228", %"struct.Eigen::internal::product_evaluator.1228"* %21, i64 0, i32 1, i32 0
  %25 = load %"class.Eigen::Matrix.77"*, %"class.Eigen::Matrix.77"** %24, align 8, !noalias !870
  %26 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %25, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %20
  %27 = icmp ugt i64 %20, 46
  br i1 %27, label %28, label %29, !prof !439

; <label>:28:                                     ; preds = %19
  tail call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !870
  unreachable

; <label>:29:                                     ; preds = %19
  %30 = load %"struct.Eigen::internal::evaluator.1237"*, %"struct.Eigen::internal::evaluator.1237"** %18, align 8, !tbaa !11
  %31 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1237", %"struct.Eigen::internal::evaluator.1237"* %30, i64 0, i32 0
  %32 = load i32*, i32** %31, align 8, !tbaa !131
  %33 = getelementptr inbounds i32, i32* %32, i64 %20
  %34 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %35 = load i32, i32* %34, align 4, !tbaa !33
  %36 = load i32, i32* %26, align 4, !tbaa !33
  %37 = mul nsw i32 %36, %35
  %38 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %39 = load i32, i32* %38, align 4, !tbaa !33
  %40 = getelementptr inbounds i32, i32* %26, i64 47
  %41 = load i32, i32* %40, align 4, !tbaa !33
  %42 = mul nsw i32 %41, %39
  %43 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %44 = load i32, i32* %43, align 4, !tbaa !33
  %45 = getelementptr inbounds i32, i32* %26, i64 94
  %46 = load i32, i32* %45, align 4, !tbaa !33
  %47 = mul nsw i32 %46, %44
  %48 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i64 3
  %49 = load i32, i32* %48, align 4, !tbaa !33
  %50 = getelementptr inbounds i32, i32* %26, i64 141
  %51 = load i32, i32* %50, align 4, !tbaa !33
  %52 = mul nsw i32 %51, %49
  %53 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %54 = load i32, i32* %53, align 4, !tbaa !33
  %55 = getelementptr inbounds i32, i32* %26, i64 188
  %56 = load i32, i32* %55, align 4, !tbaa !33
  %57 = mul nsw i32 %56, %54
  %58 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i64 5
  %59 = load i32, i32* %58, align 4, !tbaa !33
  %60 = getelementptr inbounds i32, i32* %26, i64 235
  %61 = load i32, i32* %60, align 4, !tbaa !33
  %62 = mul nsw i32 %61, %59
  %63 = add i32 %42, %37
  %64 = add i32 %63, %47
  %65 = add i32 %64, %52
  %66 = add i32 %65, %57
  %67 = add i32 %66, %62
  store i32 %67, i32* %33, align 4, !tbaa !33
  %68 = add nuw nsw i64 %20, 1
  %69 = icmp slt i64 %68, %15
  br i1 %69, label %19, label %70

; <label>:70:                                     ; preds = %29
  %71 = icmp slt i64 %15, %14
  br i1 %71, label %72, label %79

; <label>:72:                                     ; preds = %7, %70
  %73 = phi i64 [ %15, %70 ], [ 0, %7 ]
  %74 = phi i64 [ %14, %70 ], [ %11, %7 ]
  %75 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1241"* %0 to %"struct.Eigen::internal::evaluator.1237"**
  %76 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1241", %"class.Eigen::internal::generic_dense_assignment_kernel.1241"* %0, i64 0, i32 1
  %77 = bitcast %"struct.Eigen::internal::evaluator.1227"** %76 to %"struct.Eigen::internal::product_evaluator.1228"**
  br label %136

; <label>:78:                                     ; preds = %136
  br label %79

; <label>:79:                                     ; preds = %78, %70
  %80 = phi i64 [ %14, %70 ], [ %74, %78 ]
  %81 = icmp ult i64 %80, 47
  br i1 %81, label %82, label %135

; <label>:82:                                     ; preds = %79
  %83 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1241", %"class.Eigen::internal::generic_dense_assignment_kernel.1241"* %0, i64 0, i32 1
  %84 = bitcast %"struct.Eigen::internal::evaluator.1227"** %83 to %"struct.Eigen::internal::product_evaluator.1228"**
  %85 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1241"* %0 to %"struct.Eigen::internal::evaluator.1237"**
  br label %86

; <label>:86:                                     ; preds = %82, %86
  %87 = phi i64 [ %80, %82 ], [ %132, %86 ]
  %88 = load %"struct.Eigen::internal::product_evaluator.1228"*, %"struct.Eigen::internal::product_evaluator.1228"** %84, align 8, !tbaa !11
  %89 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1228", %"struct.Eigen::internal::product_evaluator.1228"* %88, i64 0, i32 0, i32 0
  %90 = load %"class.Eigen::Matrix.185"*, %"class.Eigen::Matrix.185"** %89, align 8, !tbaa !11, !noalias !873
  %91 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1228", %"struct.Eigen::internal::product_evaluator.1228"* %88, i64 0, i32 1, i32 0
  %92 = load %"class.Eigen::Matrix.77"*, %"class.Eigen::Matrix.77"** %91, align 8, !noalias !876
  %93 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %92, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %87
  %94 = load %"struct.Eigen::internal::evaluator.1237"*, %"struct.Eigen::internal::evaluator.1237"** %85, align 8, !tbaa !11
  %95 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1237", %"struct.Eigen::internal::evaluator.1237"* %94, i64 0, i32 0
  %96 = load i32*, i32** %95, align 8, !tbaa !131
  %97 = getelementptr inbounds i32, i32* %96, i64 %87
  %98 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %90, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %99 = load i32, i32* %98, align 4, !tbaa !33
  %100 = load i32, i32* %93, align 4, !tbaa !33
  %101 = mul nsw i32 %100, %99
  %102 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %90, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %103 = load i32, i32* %102, align 4, !tbaa !33
  %104 = getelementptr inbounds i32, i32* %93, i64 47
  %105 = load i32, i32* %104, align 4, !tbaa !33
  %106 = mul nsw i32 %105, %103
  %107 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %90, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %108 = load i32, i32* %107, align 4, !tbaa !33
  %109 = getelementptr inbounds i32, i32* %93, i64 94
  %110 = load i32, i32* %109, align 4, !tbaa !33
  %111 = mul nsw i32 %110, %108
  %112 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %90, i64 0, i32 0, i32 0, i32 0, i32 0, i64 3
  %113 = load i32, i32* %112, align 4, !tbaa !33
  %114 = getelementptr inbounds i32, i32* %93, i64 141
  %115 = load i32, i32* %114, align 4, !tbaa !33
  %116 = mul nsw i32 %115, %113
  %117 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %90, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %118 = load i32, i32* %117, align 4, !tbaa !33
  %119 = getelementptr inbounds i32, i32* %93, i64 188
  %120 = load i32, i32* %119, align 4, !tbaa !33
  %121 = mul nsw i32 %120, %118
  %122 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %90, i64 0, i32 0, i32 0, i32 0, i32 0, i64 5
  %123 = load i32, i32* %122, align 4, !tbaa !33
  %124 = getelementptr inbounds i32, i32* %93, i64 235
  %125 = load i32, i32* %124, align 4, !tbaa !33
  %126 = mul nsw i32 %125, %123
  %127 = add i32 %106, %101
  %128 = add i32 %127, %111
  %129 = add i32 %128, %116
  %130 = add i32 %129, %121
  %131 = add i32 %130, %126
  store i32 %131, i32* %97, align 4, !tbaa !33
  %132 = add nuw nsw i64 %87, 1
  %133 = icmp slt i64 %132, 47
  br i1 %133, label %86, label %134

; <label>:134:                                    ; preds = %86
  br label %135

; <label>:135:                                    ; preds = %134, %79
  ret void

; <label>:136:                                    ; preds = %72, %136
  %137 = phi i64 [ %73, %72 ], [ %200, %136 ]
  %138 = load %"struct.Eigen::internal::evaluator.1237"*, %"struct.Eigen::internal::evaluator.1237"** %75, align 8, !tbaa !11
  %139 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1237", %"struct.Eigen::internal::evaluator.1237"* %138, i64 0, i32 0
  %140 = load i32*, i32** %139, align 8, !tbaa !131
  %141 = getelementptr inbounds i32, i32* %140, i64 %137
  %142 = load %"struct.Eigen::internal::product_evaluator.1228"*, %"struct.Eigen::internal::product_evaluator.1228"** %77, align 8, !tbaa !11
  %143 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1228", %"struct.Eigen::internal::product_evaluator.1228"* %142, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %144 = load i32*, i32** %143, align 8, !tbaa !97
  %145 = load i32, i32* %144, align 4, !tbaa !33
  %146 = insertelement <4 x i32> undef, i32 %145, i32 0
  %147 = shufflevector <4 x i32> %146, <4 x i32> undef, <4 x i32> zeroinitializer
  %148 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1228", %"struct.Eigen::internal::product_evaluator.1228"* %142, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %149 = load i32*, i32** %148, align 8, !tbaa !94
  %150 = getelementptr inbounds i32, i32* %149, i64 %137
  %151 = bitcast i32* %150 to <4 x i32>*
  %152 = load <4 x i32>, <4 x i32>* %151, align 1, !tbaa !11
  %153 = mul <4 x i32> %152, %147
  %154 = getelementptr inbounds i32, i32* %144, i64 1
  %155 = load i32, i32* %154, align 4, !tbaa !33
  %156 = insertelement <4 x i32> undef, i32 %155, i32 0
  %157 = shufflevector <4 x i32> %156, <4 x i32> undef, <4 x i32> zeroinitializer
  %158 = getelementptr inbounds i32, i32* %150, i64 47
  %159 = bitcast i32* %158 to <4 x i32>*
  %160 = load <4 x i32>, <4 x i32>* %159, align 1, !tbaa !11
  %161 = mul <4 x i32> %157, %160
  %162 = add <4 x i32> %161, %153
  %163 = getelementptr inbounds i32, i32* %144, i64 2
  %164 = load i32, i32* %163, align 4, !tbaa !33
  %165 = insertelement <4 x i32> undef, i32 %164, i32 0
  %166 = shufflevector <4 x i32> %165, <4 x i32> undef, <4 x i32> zeroinitializer
  %167 = getelementptr inbounds i32, i32* %150, i64 94
  %168 = bitcast i32* %167 to <4 x i32>*
  %169 = load <4 x i32>, <4 x i32>* %168, align 1, !tbaa !11
  %170 = mul <4 x i32> %166, %169
  %171 = add <4 x i32> %162, %170
  %172 = getelementptr inbounds i32, i32* %144, i64 3
  %173 = load i32, i32* %172, align 4, !tbaa !33
  %174 = insertelement <4 x i32> undef, i32 %173, i32 0
  %175 = shufflevector <4 x i32> %174, <4 x i32> undef, <4 x i32> zeroinitializer
  %176 = getelementptr inbounds i32, i32* %150, i64 141
  %177 = bitcast i32* %176 to <4 x i32>*
  %178 = load <4 x i32>, <4 x i32>* %177, align 1, !tbaa !11
  %179 = mul <4 x i32> %175, %178
  %180 = add <4 x i32> %171, %179
  %181 = getelementptr inbounds i32, i32* %144, i64 4
  %182 = load i32, i32* %181, align 4, !tbaa !33
  %183 = insertelement <4 x i32> undef, i32 %182, i32 0
  %184 = shufflevector <4 x i32> %183, <4 x i32> undef, <4 x i32> zeroinitializer
  %185 = getelementptr inbounds i32, i32* %150, i64 188
  %186 = bitcast i32* %185 to <4 x i32>*
  %187 = load <4 x i32>, <4 x i32>* %186, align 1, !tbaa !11
  %188 = mul <4 x i32> %184, %187
  %189 = add <4 x i32> %180, %188
  %190 = getelementptr inbounds i32, i32* %144, i64 5
  %191 = load i32, i32* %190, align 4, !tbaa !33
  %192 = insertelement <4 x i32> undef, i32 %191, i32 0
  %193 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> zeroinitializer
  %194 = getelementptr inbounds i32, i32* %150, i64 235
  %195 = bitcast i32* %194 to <4 x i32>*
  %196 = load <4 x i32>, <4 x i32>* %195, align 1, !tbaa !11
  %197 = mul <4 x i32> %193, %196
  %198 = add <4 x i32> %189, %197
  %199 = bitcast i32* %141 to <4 x i32>*
  store <4 x i32> %198, <4 x i32>* %199, align 16, !tbaa !11
  %200 = add nsw i64 %137, 4
  %201 = icmp slt i64 %200, %74
  br i1 %201, label %136, label %78
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal15call_assignmentINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEENS_7ProductINS_9TransposeINS2_IiLi6ELi1ELi0ELi6ELi1EEEEENS5_INS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS0_13sub_assign_opIiiEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsr25evaluator_assume_aliasingISF_EE5valueEPvE4typeE(%"class.Eigen::Matrix.170"* dereferenceable(16), %"class.Eigen::Product.362"* dereferenceable(16), %"struct.Eigen::internal::sub_assign_op"* dereferenceable(1), i8*) local_unnamed_addr #6 {
  %5 = alloca %"class.Eigen::Product.1306", align 8
  %6 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %7 = alloca %"class.Eigen::Matrix.724", align 8
  %8 = bitcast %"class.Eigen::Matrix.724"* %7 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %8) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %8, i8 0, i64 16, i32 8, i1 false) #11
  %9 = getelementptr inbounds %"class.Eigen::Product.362", %"class.Eigen::Product.362"* %1, i64 0, i32 1
  %10 = bitcast %"class.Eigen::Transpose.331"* %9 to %"class.Eigen::PlainObjectBase.124"**
  %11 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %10, align 8, !tbaa !11
  %12 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %11, i64 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8, !tbaa !43
  %14 = icmp eq i64 %13, 0
  %15 = ptrtoint %"class.Eigen::PlainObjectBase.124"* %11 to i64
  br i1 %14, label %38, label %16

; <label>:16:                                     ; preds = %4
  %17 = icmp sgt i64 %13, -1
  br i1 %17, label %19, label %18, !prof !10

; <label>:18:                                     ; preds = %16
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:19:                                     ; preds = %16
  %20 = getelementptr inbounds %"class.Eigen::Matrix.724", %"class.Eigen::Matrix.724"* %7, i64 0, i32 0, i32 0, i32 1
  %21 = getelementptr inbounds %"class.Eigen::Matrix.724", %"class.Eigen::Matrix.724"* %7, i64 0, i32 0, i32 0, i32 0
  %22 = shl i64 %13, 2
  %23 = add i64 %22, 32
  %24 = tail call i8* @malloc(i64 %23) #14
  %25 = icmp eq i8* %24, null
  br i1 %25, label %35, label %26

; <label>:26:                                     ; preds = %19
  %27 = ptrtoint i8* %24 to i64
  %28 = add i64 %27, 32
  %29 = and i64 %28, -32
  %30 = inttoptr i64 %29 to i8**
  %31 = getelementptr inbounds i8*, i8** %30, i64 -1
  store i8* %24, i8** %31, align 8, !tbaa !29
  %32 = inttoptr i64 %29 to i32*
  %33 = bitcast %"class.Eigen::Transpose.331"* %9 to i64*
  %34 = load i64, i64* %33, align 8
  br label %35

; <label>:35:                                     ; preds = %26, %19
  %36 = phi i64 [ %34, %26 ], [ %15, %19 ]
  %37 = phi i32* [ %32, %26 ], [ null, %19 ]
  store i32* %37, i32** %21, align 8, !tbaa !197
  store i64 %13, i64* %20, align 8, !tbaa !424
  br label %38

; <label>:38:                                     ; preds = %4, %35
  %39 = phi i64 [ %36, %35 ], [ %15, %4 ]
  %40 = bitcast %"class.Eigen::Product.1306"* %5 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %40) #11
  %41 = bitcast %"class.Eigen::Product.362"* %1 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %"class.Eigen::Product.1306"* %5 to i64*
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %"class.Eigen::Product.1306", %"class.Eigen::Product.1306"* %5, i64 0, i32 1, i32 0
  %45 = bitcast %"class.Eigen::Matrix.123"** %44 to i64*
  store i64 %39, i64* %45, align 8
  %46 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %6, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %46) #11
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLi1ELin1ELi1ELi1ELin1EEENS_7ProductINS_9TransposeINS2_IiLi6ELi1ELi0ELi6ELi1EEEEENS5_INS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.724"* nonnull dereferenceable(16) %7, %"class.Eigen::Product.1306"* nonnull dereferenceable(16) %5, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %6) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %46) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %40) #11
  %47 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %0, i64 0, i32 0, i32 0, i32 0
  %48 = load i32*, i32** %47, align 8, !tbaa !44
  %49 = getelementptr inbounds %"class.Eigen::Matrix.724", %"class.Eigen::Matrix.724"* %7, i64 0, i32 0, i32 0, i32 0
  %50 = load i32*, i32** %49, align 8
  %51 = icmp eq i32* %50, %48
  %52 = icmp ne i32* %48, null
  %53 = and i1 %52, %51
  br i1 %53, label %54, label %55, !prof !50

; <label>:54:                                     ; preds = %38
  call void @__assert_rtn(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__func__._ZN5Eigen8internal10redux_implINS0_17scalar_product_opIiiEENS0_15redux_evaluatorINS_6MatrixIiLi6ELi1ELi0ELi6ELi1EEEEELi3ELi2EE3runERKS7_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.31, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([275 x i8], [275 x i8]* @.str.32, i64 0, i64 0)) #13
  unreachable

; <label>:55:                                     ; preds = %38
  %56 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %0, i64 0, i32 0, i32 0, i32 1
  %57 = load i64, i64* %56, align 8, !tbaa !46
  %58 = getelementptr inbounds %"class.Eigen::Matrix.724", %"class.Eigen::Matrix.724"* %7, i64 0, i32 0, i32 0, i32 1
  %59 = load i64, i64* %58, align 8, !tbaa !424
  %60 = icmp eq i64 %57, %59
  br i1 %60, label %62, label %61, !prof !10

; <label>:61:                                     ; preds = %55
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__._ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEENS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES3_EEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.15, i64 0, i64 0), i32 710, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.29, i64 0, i64 0)) #13
  unreachable

; <label>:62:                                     ; preds = %55
  %63 = sdiv i64 %57, 4
  %64 = shl nsw i64 %63, 2
  %65 = icmp sgt i64 %57, 3
  br i1 %65, label %66, label %95

; <label>:66:                                     ; preds = %62
  %67 = icmp sgt i64 %64, 4
  %68 = select i1 %67, i64 %64, i64 4
  %69 = add nsw i64 %68, -1
  %70 = lshr i64 %69, 2
  %71 = add nuw nsw i64 %70, 1
  %72 = and i64 %71, 7
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %89, label %74

; <label>:74:                                     ; preds = %66
  br label %75

; <label>:75:                                     ; preds = %75, %74
  %76 = phi i64 [ %85, %75 ], [ 0, %74 ]
  %77 = phi i64 [ %86, %75 ], [ %72, %74 ]
  %78 = getelementptr inbounds i32, i32* %48, i64 %76
  %79 = getelementptr inbounds i32, i32* %50, i64 %76
  %80 = bitcast i32* %79 to <4 x i32>*
  %81 = load <4 x i32>, <4 x i32>* %80, align 16, !tbaa !11
  %82 = bitcast i32* %78 to <4 x i32>*
  %83 = load <4 x i32>, <4 x i32>* %82, align 16, !tbaa !11
  %84 = sub <4 x i32> %83, %81
  store <4 x i32> %84, <4 x i32>* %82, align 16, !tbaa !11
  %85 = add nuw nsw i64 %76, 4
  %86 = add i64 %77, -1
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %75, !llvm.loop !879

; <label>:88:                                     ; preds = %75
  br label %89

; <label>:89:                                     ; preds = %66, %88
  %90 = phi i64 [ 0, %66 ], [ %85, %88 ]
  %91 = icmp ult i64 %69, 28
  br i1 %91, label %94, label %92

; <label>:92:                                     ; preds = %89
  br label %304

; <label>:93:                                     ; preds = %304
  br label %94

; <label>:94:                                     ; preds = %89, %93
  br label %95

; <label>:95:                                     ; preds = %94, %62
  %96 = icmp sgt i64 %57, %64
  br i1 %96, label %97, label %373

; <label>:97:                                     ; preds = %95
  %98 = sub i64 %57, %64
  %99 = icmp ult i64 %98, 32
  br i1 %99, label %229, label %100

; <label>:100:                                    ; preds = %97
  %101 = and i64 %98, -32
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %229, label %103

; <label>:103:                                    ; preds = %100
  %104 = getelementptr i32, i32* %48, i64 %64
  %105 = getelementptr i32, i32* %48, i64 %57
  %106 = getelementptr i32, i32* %50, i64 %64
  %107 = getelementptr i32, i32* %50, i64 %57
  %108 = icmp ult i32* %104, %107
  %109 = icmp ult i32* %106, %105
  %110 = and i1 %108, %109
  %111 = add i64 %64, %101
  br i1 %110, label %229, label %112

; <label>:112:                                    ; preds = %103
  %113 = add i64 %101, -32
  %114 = lshr exact i64 %113, 5
  %115 = and i64 %114, 1
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %117, label %151

; <label>:117:                                    ; preds = %112
  br label %118

; <label>:118:                                    ; preds = %117
  %119 = getelementptr inbounds i32, i32* %48, i64 %64
  %120 = getelementptr inbounds i32, i32* %50, i64 %64
  %121 = bitcast i32* %120 to <8 x i32>*
  %122 = load <8 x i32>, <8 x i32>* %121, align 4, !tbaa !33, !alias.scope !880
  %123 = getelementptr i32, i32* %120, i64 8
  %124 = bitcast i32* %123 to <8 x i32>*
  %125 = load <8 x i32>, <8 x i32>* %124, align 4, !tbaa !33, !alias.scope !880
  %126 = getelementptr i32, i32* %120, i64 16
  %127 = bitcast i32* %126 to <8 x i32>*
  %128 = load <8 x i32>, <8 x i32>* %127, align 4, !tbaa !33, !alias.scope !880
  %129 = getelementptr i32, i32* %120, i64 24
  %130 = bitcast i32* %129 to <8 x i32>*
  %131 = load <8 x i32>, <8 x i32>* %130, align 4, !tbaa !33, !alias.scope !880
  %132 = bitcast i32* %119 to <8 x i32>*
  %133 = load <8 x i32>, <8 x i32>* %132, align 4, !tbaa !33, !alias.scope !883, !noalias !880
  %134 = getelementptr i32, i32* %119, i64 8
  %135 = bitcast i32* %134 to <8 x i32>*
  %136 = load <8 x i32>, <8 x i32>* %135, align 4, !tbaa !33, !alias.scope !883, !noalias !880
  %137 = getelementptr i32, i32* %119, i64 16
  %138 = bitcast i32* %137 to <8 x i32>*
  %139 = load <8 x i32>, <8 x i32>* %138, align 4, !tbaa !33, !alias.scope !883, !noalias !880
  %140 = getelementptr i32, i32* %119, i64 24
  %141 = bitcast i32* %140 to <8 x i32>*
  %142 = load <8 x i32>, <8 x i32>* %141, align 4, !tbaa !33, !alias.scope !883, !noalias !880
  %143 = sub nsw <8 x i32> %133, %122
  %144 = sub nsw <8 x i32> %136, %125
  %145 = sub nsw <8 x i32> %139, %128
  %146 = sub nsw <8 x i32> %142, %131
  %147 = bitcast i32* %119 to <8 x i32>*
  store <8 x i32> %143, <8 x i32>* %147, align 4, !tbaa !33, !alias.scope !883, !noalias !880
  %148 = bitcast i32* %134 to <8 x i32>*
  store <8 x i32> %144, <8 x i32>* %148, align 4, !tbaa !33, !alias.scope !883, !noalias !880
  %149 = bitcast i32* %137 to <8 x i32>*
  store <8 x i32> %145, <8 x i32>* %149, align 4, !tbaa !33, !alias.scope !883, !noalias !880
  %150 = bitcast i32* %140 to <8 x i32>*
  store <8 x i32> %146, <8 x i32>* %150, align 4, !tbaa !33, !alias.scope !883, !noalias !880
  br label %151

; <label>:151:                                    ; preds = %118, %112
  %152 = phi i64 [ 0, %112 ], [ 32, %118 ]
  %153 = icmp eq i64 %114, 0
  br i1 %153, label %227, label %154

; <label>:154:                                    ; preds = %151
  br label %155

; <label>:155:                                    ; preds = %155, %154
  %156 = phi i64 [ %152, %154 ], [ %224, %155 ]
  %157 = add i64 %64, %156
  %158 = getelementptr inbounds i32, i32* %48, i64 %157
  %159 = getelementptr inbounds i32, i32* %50, i64 %157
  %160 = bitcast i32* %159 to <8 x i32>*
  %161 = load <8 x i32>, <8 x i32>* %160, align 4, !tbaa !33, !alias.scope !880
  %162 = getelementptr i32, i32* %159, i64 8
  %163 = bitcast i32* %162 to <8 x i32>*
  %164 = load <8 x i32>, <8 x i32>* %163, align 4, !tbaa !33, !alias.scope !880
  %165 = getelementptr i32, i32* %159, i64 16
  %166 = bitcast i32* %165 to <8 x i32>*
  %167 = load <8 x i32>, <8 x i32>* %166, align 4, !tbaa !33, !alias.scope !880
  %168 = getelementptr i32, i32* %159, i64 24
  %169 = bitcast i32* %168 to <8 x i32>*
  %170 = load <8 x i32>, <8 x i32>* %169, align 4, !tbaa !33, !alias.scope !880
  %171 = bitcast i32* %158 to <8 x i32>*
  %172 = load <8 x i32>, <8 x i32>* %171, align 4, !tbaa !33, !alias.scope !883, !noalias !880
  %173 = getelementptr i32, i32* %158, i64 8
  %174 = bitcast i32* %173 to <8 x i32>*
  %175 = load <8 x i32>, <8 x i32>* %174, align 4, !tbaa !33, !alias.scope !883, !noalias !880
  %176 = getelementptr i32, i32* %158, i64 16
  %177 = bitcast i32* %176 to <8 x i32>*
  %178 = load <8 x i32>, <8 x i32>* %177, align 4, !tbaa !33, !alias.scope !883, !noalias !880
  %179 = getelementptr i32, i32* %158, i64 24
  %180 = bitcast i32* %179 to <8 x i32>*
  %181 = load <8 x i32>, <8 x i32>* %180, align 4, !tbaa !33, !alias.scope !883, !noalias !880
  %182 = sub nsw <8 x i32> %172, %161
  %183 = sub nsw <8 x i32> %175, %164
  %184 = sub nsw <8 x i32> %178, %167
  %185 = sub nsw <8 x i32> %181, %170
  %186 = bitcast i32* %158 to <8 x i32>*
  store <8 x i32> %182, <8 x i32>* %186, align 4, !tbaa !33, !alias.scope !883, !noalias !880
  %187 = bitcast i32* %173 to <8 x i32>*
  store <8 x i32> %183, <8 x i32>* %187, align 4, !tbaa !33, !alias.scope !883, !noalias !880
  %188 = bitcast i32* %176 to <8 x i32>*
  store <8 x i32> %184, <8 x i32>* %188, align 4, !tbaa !33, !alias.scope !883, !noalias !880
  %189 = bitcast i32* %179 to <8 x i32>*
  store <8 x i32> %185, <8 x i32>* %189, align 4, !tbaa !33, !alias.scope !883, !noalias !880
  %190 = add i64 %156, 32
  %191 = add i64 %64, %190
  %192 = getelementptr inbounds i32, i32* %48, i64 %191
  %193 = getelementptr inbounds i32, i32* %50, i64 %191
  %194 = bitcast i32* %193 to <8 x i32>*
  %195 = load <8 x i32>, <8 x i32>* %194, align 4, !tbaa !33, !alias.scope !880
  %196 = getelementptr i32, i32* %193, i64 8
  %197 = bitcast i32* %196 to <8 x i32>*
  %198 = load <8 x i32>, <8 x i32>* %197, align 4, !tbaa !33, !alias.scope !880
  %199 = getelementptr i32, i32* %193, i64 16
  %200 = bitcast i32* %199 to <8 x i32>*
  %201 = load <8 x i32>, <8 x i32>* %200, align 4, !tbaa !33, !alias.scope !880
  %202 = getelementptr i32, i32* %193, i64 24
  %203 = bitcast i32* %202 to <8 x i32>*
  %204 = load <8 x i32>, <8 x i32>* %203, align 4, !tbaa !33, !alias.scope !880
  %205 = bitcast i32* %192 to <8 x i32>*
  %206 = load <8 x i32>, <8 x i32>* %205, align 4, !tbaa !33, !alias.scope !883, !noalias !880
  %207 = getelementptr i32, i32* %192, i64 8
  %208 = bitcast i32* %207 to <8 x i32>*
  %209 = load <8 x i32>, <8 x i32>* %208, align 4, !tbaa !33, !alias.scope !883, !noalias !880
  %210 = getelementptr i32, i32* %192, i64 16
  %211 = bitcast i32* %210 to <8 x i32>*
  %212 = load <8 x i32>, <8 x i32>* %211, align 4, !tbaa !33, !alias.scope !883, !noalias !880
  %213 = getelementptr i32, i32* %192, i64 24
  %214 = bitcast i32* %213 to <8 x i32>*
  %215 = load <8 x i32>, <8 x i32>* %214, align 4, !tbaa !33, !alias.scope !883, !noalias !880
  %216 = sub nsw <8 x i32> %206, %195
  %217 = sub nsw <8 x i32> %209, %198
  %218 = sub nsw <8 x i32> %212, %201
  %219 = sub nsw <8 x i32> %215, %204
  %220 = bitcast i32* %192 to <8 x i32>*
  store <8 x i32> %216, <8 x i32>* %220, align 4, !tbaa !33, !alias.scope !883, !noalias !880
  %221 = bitcast i32* %207 to <8 x i32>*
  store <8 x i32> %217, <8 x i32>* %221, align 4, !tbaa !33, !alias.scope !883, !noalias !880
  %222 = bitcast i32* %210 to <8 x i32>*
  store <8 x i32> %218, <8 x i32>* %222, align 4, !tbaa !33, !alias.scope !883, !noalias !880
  %223 = bitcast i32* %213 to <8 x i32>*
  store <8 x i32> %219, <8 x i32>* %223, align 4, !tbaa !33, !alias.scope !883, !noalias !880
  %224 = add i64 %156, 64
  %225 = icmp eq i64 %224, %101
  br i1 %225, label %226, label %155, !llvm.loop !885

; <label>:226:                                    ; preds = %155
  br label %227

; <label>:227:                                    ; preds = %151, %226
  %228 = icmp eq i64 %98, %101
  br i1 %228, label %373, label %229

; <label>:229:                                    ; preds = %227, %103, %100, %97
  %230 = phi i64 [ %64, %103 ], [ %64, %100 ], [ %64, %97 ], [ %111, %227 ]
  %231 = sub i64 %57, %230
  %232 = add i64 %57, -1
  %233 = sub i64 %232, %230
  %234 = and i64 %231, 7
  %235 = icmp eq i64 %234, 0
  br i1 %235, label %249, label %236

; <label>:236:                                    ; preds = %229
  br label %237

; <label>:237:                                    ; preds = %237, %236
  %238 = phi i64 [ %245, %237 ], [ %230, %236 ]
  %239 = phi i64 [ %246, %237 ], [ %234, %236 ]
  %240 = getelementptr inbounds i32, i32* %48, i64 %238
  %241 = getelementptr inbounds i32, i32* %50, i64 %238
  %242 = load i32, i32* %241, align 4, !tbaa !33
  %243 = load i32, i32* %240, align 4, !tbaa !33
  %244 = sub nsw i32 %243, %242
  store i32 %244, i32* %240, align 4, !tbaa !33
  %245 = add nsw i64 %238, 1
  %246 = add i64 %239, -1
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %237, !llvm.loop !886

; <label>:248:                                    ; preds = %237
  br label %249

; <label>:249:                                    ; preds = %229, %248
  %250 = phi i64 [ %230, %229 ], [ %245, %248 ]
  %251 = icmp ult i64 %233, 7
  br i1 %251, label %372, label %252

; <label>:252:                                    ; preds = %249
  br label %253

; <label>:253:                                    ; preds = %253, %252
  %254 = phi i64 [ %250, %252 ], [ %302, %253 ]
  %255 = getelementptr inbounds i32, i32* %48, i64 %254
  %256 = getelementptr inbounds i32, i32* %50, i64 %254
  %257 = load i32, i32* %256, align 4, !tbaa !33
  %258 = load i32, i32* %255, align 4, !tbaa !33
  %259 = sub nsw i32 %258, %257
  store i32 %259, i32* %255, align 4, !tbaa !33
  %260 = add nsw i64 %254, 1
  %261 = getelementptr inbounds i32, i32* %48, i64 %260
  %262 = getelementptr inbounds i32, i32* %50, i64 %260
  %263 = load i32, i32* %262, align 4, !tbaa !33
  %264 = load i32, i32* %261, align 4, !tbaa !33
  %265 = sub nsw i32 %264, %263
  store i32 %265, i32* %261, align 4, !tbaa !33
  %266 = add nsw i64 %254, 2
  %267 = getelementptr inbounds i32, i32* %48, i64 %266
  %268 = getelementptr inbounds i32, i32* %50, i64 %266
  %269 = load i32, i32* %268, align 4, !tbaa !33
  %270 = load i32, i32* %267, align 4, !tbaa !33
  %271 = sub nsw i32 %270, %269
  store i32 %271, i32* %267, align 4, !tbaa !33
  %272 = add nsw i64 %254, 3
  %273 = getelementptr inbounds i32, i32* %48, i64 %272
  %274 = getelementptr inbounds i32, i32* %50, i64 %272
  %275 = load i32, i32* %274, align 4, !tbaa !33
  %276 = load i32, i32* %273, align 4, !tbaa !33
  %277 = sub nsw i32 %276, %275
  store i32 %277, i32* %273, align 4, !tbaa !33
  %278 = add nsw i64 %254, 4
  %279 = getelementptr inbounds i32, i32* %48, i64 %278
  %280 = getelementptr inbounds i32, i32* %50, i64 %278
  %281 = load i32, i32* %280, align 4, !tbaa !33
  %282 = load i32, i32* %279, align 4, !tbaa !33
  %283 = sub nsw i32 %282, %281
  store i32 %283, i32* %279, align 4, !tbaa !33
  %284 = add nsw i64 %254, 5
  %285 = getelementptr inbounds i32, i32* %48, i64 %284
  %286 = getelementptr inbounds i32, i32* %50, i64 %284
  %287 = load i32, i32* %286, align 4, !tbaa !33
  %288 = load i32, i32* %285, align 4, !tbaa !33
  %289 = sub nsw i32 %288, %287
  store i32 %289, i32* %285, align 4, !tbaa !33
  %290 = add nsw i64 %254, 6
  %291 = getelementptr inbounds i32, i32* %48, i64 %290
  %292 = getelementptr inbounds i32, i32* %50, i64 %290
  %293 = load i32, i32* %292, align 4, !tbaa !33
  %294 = load i32, i32* %291, align 4, !tbaa !33
  %295 = sub nsw i32 %294, %293
  store i32 %295, i32* %291, align 4, !tbaa !33
  %296 = add nsw i64 %254, 7
  %297 = getelementptr inbounds i32, i32* %48, i64 %296
  %298 = getelementptr inbounds i32, i32* %50, i64 %296
  %299 = load i32, i32* %298, align 4, !tbaa !33
  %300 = load i32, i32* %297, align 4, !tbaa !33
  %301 = sub nsw i32 %300, %299
  store i32 %301, i32* %297, align 4, !tbaa !33
  %302 = add nsw i64 %254, 8
  %303 = icmp eq i64 %302, %57
  br i1 %303, label %371, label %253, !llvm.loop !887

; <label>:304:                                    ; preds = %304, %92
  %305 = phi i64 [ %90, %92 ], [ %369, %304 ]
  %306 = getelementptr inbounds i32, i32* %48, i64 %305
  %307 = getelementptr inbounds i32, i32* %50, i64 %305
  %308 = bitcast i32* %307 to <4 x i32>*
  %309 = load <4 x i32>, <4 x i32>* %308, align 16, !tbaa !11
  %310 = bitcast i32* %306 to <4 x i32>*
  %311 = load <4 x i32>, <4 x i32>* %310, align 16, !tbaa !11
  %312 = sub <4 x i32> %311, %309
  store <4 x i32> %312, <4 x i32>* %310, align 16, !tbaa !11
  %313 = add nuw nsw i64 %305, 4
  %314 = getelementptr inbounds i32, i32* %48, i64 %313
  %315 = getelementptr inbounds i32, i32* %50, i64 %313
  %316 = bitcast i32* %315 to <4 x i32>*
  %317 = load <4 x i32>, <4 x i32>* %316, align 16, !tbaa !11
  %318 = bitcast i32* %314 to <4 x i32>*
  %319 = load <4 x i32>, <4 x i32>* %318, align 16, !tbaa !11
  %320 = sub <4 x i32> %319, %317
  store <4 x i32> %320, <4 x i32>* %318, align 16, !tbaa !11
  %321 = add nsw i64 %305, 8
  %322 = getelementptr inbounds i32, i32* %48, i64 %321
  %323 = getelementptr inbounds i32, i32* %50, i64 %321
  %324 = bitcast i32* %323 to <4 x i32>*
  %325 = load <4 x i32>, <4 x i32>* %324, align 16, !tbaa !11
  %326 = bitcast i32* %322 to <4 x i32>*
  %327 = load <4 x i32>, <4 x i32>* %326, align 16, !tbaa !11
  %328 = sub <4 x i32> %327, %325
  store <4 x i32> %328, <4 x i32>* %326, align 16, !tbaa !11
  %329 = add nsw i64 %305, 12
  %330 = getelementptr inbounds i32, i32* %48, i64 %329
  %331 = getelementptr inbounds i32, i32* %50, i64 %329
  %332 = bitcast i32* %331 to <4 x i32>*
  %333 = load <4 x i32>, <4 x i32>* %332, align 16, !tbaa !11
  %334 = bitcast i32* %330 to <4 x i32>*
  %335 = load <4 x i32>, <4 x i32>* %334, align 16, !tbaa !11
  %336 = sub <4 x i32> %335, %333
  store <4 x i32> %336, <4 x i32>* %334, align 16, !tbaa !11
  %337 = add nsw i64 %305, 16
  %338 = getelementptr inbounds i32, i32* %48, i64 %337
  %339 = getelementptr inbounds i32, i32* %50, i64 %337
  %340 = bitcast i32* %339 to <4 x i32>*
  %341 = load <4 x i32>, <4 x i32>* %340, align 16, !tbaa !11
  %342 = bitcast i32* %338 to <4 x i32>*
  %343 = load <4 x i32>, <4 x i32>* %342, align 16, !tbaa !11
  %344 = sub <4 x i32> %343, %341
  store <4 x i32> %344, <4 x i32>* %342, align 16, !tbaa !11
  %345 = add nsw i64 %305, 20
  %346 = getelementptr inbounds i32, i32* %48, i64 %345
  %347 = getelementptr inbounds i32, i32* %50, i64 %345
  %348 = bitcast i32* %347 to <4 x i32>*
  %349 = load <4 x i32>, <4 x i32>* %348, align 16, !tbaa !11
  %350 = bitcast i32* %346 to <4 x i32>*
  %351 = load <4 x i32>, <4 x i32>* %350, align 16, !tbaa !11
  %352 = sub <4 x i32> %351, %349
  store <4 x i32> %352, <4 x i32>* %350, align 16, !tbaa !11
  %353 = add nsw i64 %305, 24
  %354 = getelementptr inbounds i32, i32* %48, i64 %353
  %355 = getelementptr inbounds i32, i32* %50, i64 %353
  %356 = bitcast i32* %355 to <4 x i32>*
  %357 = load <4 x i32>, <4 x i32>* %356, align 16, !tbaa !11
  %358 = bitcast i32* %354 to <4 x i32>*
  %359 = load <4 x i32>, <4 x i32>* %358, align 16, !tbaa !11
  %360 = sub <4 x i32> %359, %357
  store <4 x i32> %360, <4 x i32>* %358, align 16, !tbaa !11
  %361 = add nsw i64 %305, 28
  %362 = getelementptr inbounds i32, i32* %48, i64 %361
  %363 = getelementptr inbounds i32, i32* %50, i64 %361
  %364 = bitcast i32* %363 to <4 x i32>*
  %365 = load <4 x i32>, <4 x i32>* %364, align 16, !tbaa !11
  %366 = bitcast i32* %362 to <4 x i32>*
  %367 = load <4 x i32>, <4 x i32>* %366, align 16, !tbaa !11
  %368 = sub <4 x i32> %367, %365
  store <4 x i32> %368, <4 x i32>* %366, align 16, !tbaa !11
  %369 = add nsw i64 %305, 32
  %370 = icmp slt i64 %369, %64
  br i1 %370, label %304, label %93

; <label>:371:                                    ; preds = %253
  br label %372

; <label>:372:                                    ; preds = %249, %371
  br label %373

; <label>:373:                                    ; preds = %372, %227, %95
  %374 = load i32*, i32** %49, align 8, !tbaa !197
  %375 = icmp eq i32* %374, null
  br i1 %375, label %380, label %376

; <label>:376:                                    ; preds = %373
  %377 = getelementptr inbounds i32, i32* %374, i64 -2
  %378 = bitcast i32* %377 to i8**
  %379 = load i8*, i8** %378, align 8, !tbaa !29
  call void @free(i8* %379) #11
  br label %380

; <label>:380:                                    ; preds = %373, %376
  call void @llvm.lifetime.end(i64 16, i8* nonnull %8) #11
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLi1ELin1ELi1ELi1ELin1EEENS_7ProductINS_9TransposeINS2_IiLi6ELi1ELi0ELi6ELi1EEEEENS5_INS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.724"* dereferenceable(16), %"class.Eigen::Product.1306"* dereferenceable(16), %"struct.Eigen::internal::assign_op.512"* dereferenceable(1)) local_unnamed_addr #6 {
  %4 = alloca %"struct.Eigen::internal::scalar_sum_op", align 1
  %5 = alloca %"class.Eigen::CwiseBinaryOp.1317", align 8
  %6 = bitcast %"class.Eigen::Product.1306"* %1 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.Eigen::Product.1306", %"class.Eigen::Product.1306"* %1, i64 0, i32 1
  %9 = bitcast %"class.Eigen::Transpose.331"* %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = inttoptr i64 %7 to %"class.Eigen::Matrix.185"*
  %12 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %13 = inttoptr i64 %10 to %"class.Eigen::Matrix.123"*
  %14 = inttoptr i64 %10 to i32**
  %15 = load i32*, i32** %14, align 8, !tbaa !41
  %16 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %13, i64 0, i32 0, i32 0, i32 1
  %17 = load i64, i64* %16, align 8, !tbaa !43
  %18 = inttoptr i64 %10 to %"class.Eigen::PlainObjectBase.124"*
  %19 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %18, i64 0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8, !tbaa !43
  %21 = getelementptr inbounds %"class.Eigen::Matrix.724", %"class.Eigen::Matrix.724"* %0, i64 0, i32 0, i32 0, i32 1
  %22 = load i64, i64* %21, align 8, !tbaa !424
  %23 = icmp eq i64 %22, %20
  br i1 %23, label %24, label %27

; <label>:24:                                     ; preds = %3
  %25 = bitcast %"class.Eigen::Matrix.724"* %0 to i64*
  %26 = load i64, i64* %25, align 8, !tbaa !197
  br label %55

; <label>:27:                                     ; preds = %3
  %28 = icmp sgt i64 %20, -1
  br i1 %28, label %30, label %29, !prof !10

; <label>:29:                                     ; preds = %27
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:30:                                     ; preds = %27
  %31 = getelementptr inbounds %"class.Eigen::Matrix.724", %"class.Eigen::Matrix.724"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i32*, i32** %31, align 8, !tbaa !197
  %33 = icmp eq i32* %32, null
  br i1 %33, label %38, label %34

; <label>:34:                                     ; preds = %30
  %35 = getelementptr inbounds i32, i32* %32, i64 -2
  %36 = bitcast i32* %35 to i8**
  %37 = load i8*, i8** %36, align 8, !tbaa !29
  tail call void @free(i8* %37) #11
  br label %38

; <label>:38:                                     ; preds = %34, %30
  %39 = icmp eq i64 %20, 0
  br i1 %39, label %52, label %40

; <label>:40:                                     ; preds = %38
  %41 = shl i64 %20, 2
  %42 = add i64 %41, 32
  %43 = tail call i8* @malloc(i64 %42) #14
  %44 = icmp eq i8* %43, null
  br i1 %44, label %52, label %45

; <label>:45:                                     ; preds = %40
  %46 = ptrtoint i8* %43 to i64
  %47 = add i64 %46, 32
  %48 = and i64 %47, -32
  %49 = inttoptr i64 %48 to i8**
  %50 = getelementptr inbounds i8*, i8** %49, i64 -1
  store i8* %43, i8** %50, align 8, !tbaa !29
  %51 = inttoptr i64 %48 to i32*
  br label %52

; <label>:52:                                     ; preds = %38, %40, %45
  %53 = phi i32* [ %51, %45 ], [ null, %40 ], [ null, %38 ]
  store i32* %53, i32** %31, align 8, !tbaa !197
  store i64 %20, i64* %21, align 8, !tbaa !424
  %54 = ptrtoint i32* %53 to i64
  br label %55

; <label>:55:                                     ; preds = %24, %52
  %56 = phi i64 [ %26, %24 ], [ %54, %52 ]
  %57 = sdiv i64 %20, 4
  %58 = shl nsw i64 %57, 2
  %59 = icmp sgt i64 %20, 3
  br i1 %59, label %60, label %72

; <label>:60:                                     ; preds = %55
  %61 = inttoptr i64 %56 to i32*
  %62 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %63 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 2
  %64 = shl nsw i64 %17, 1
  %65 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 3
  %66 = mul nsw i64 %17, 3
  %67 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 4
  %68 = shl nsw i64 %17, 2
  %69 = getelementptr inbounds %"class.Eigen::Matrix.185", %"class.Eigen::Matrix.185"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 5
  %70 = mul nsw i64 %17, 5
  br label %109

; <label>:71:                                     ; preds = %109
  br label %72

; <label>:72:                                     ; preds = %71, %55
  %73 = icmp slt i64 %58, %20
  br i1 %73, label %74, label %163

; <label>:74:                                     ; preds = %72
  %75 = bitcast %"class.Eigen::CwiseBinaryOp.1317"* %5 to i8*
  %76 = bitcast %"class.Eigen::CwiseBinaryOp.1317"* %5 to i64*
  %77 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1317", %"class.Eigen::CwiseBinaryOp.1317"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %78 = bitcast %"class.Eigen::Transpose.346"* %77 to i64*
  %79 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1317", %"class.Eigen::CwiseBinaryOp.1317"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 0
  %80 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1317", %"class.Eigen::CwiseBinaryOp.1317"* %5, i64 0, i32 1
  %81 = bitcast %"class.Eigen::Block.1189"* %80 to i64*
  %82 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1317", %"class.Eigen::CwiseBinaryOp.1317"* %5, i64 0, i32 1, i32 0, i32 0, i32 1
  %83 = bitcast %"class.Eigen::Transpose.331"* %82 to i64*
  %84 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1317", %"class.Eigen::CwiseBinaryOp.1317"* %5, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0
  %85 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1317", %"class.Eigen::CwiseBinaryOp.1317"* %5, i64 0, i32 1, i32 0, i32 0, i32 3, i32 0
  %86 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1317", %"class.Eigen::CwiseBinaryOp.1317"* %5, i64 0, i32 1, i32 0, i32 0, i32 4
  %87 = bitcast %"class.Eigen::CwiseBinaryOp.1317"* %5 to %"class.Eigen::DenseBase.1320"*
  %88 = getelementptr inbounds %"struct.Eigen::internal::scalar_sum_op", %"struct.Eigen::internal::scalar_sum_op"* %4, i64 0, i32 0
  %89 = icmp sgt i64 %20, -4
  br i1 %89, label %90, label %106

; <label>:90:                                     ; preds = %74
  %91 = inttoptr i64 %56 to i32*
  %92 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %13, i64 0, i32 0, i32 0, i32 0
  %93 = bitcast i64* %79 to <2 x i64>*
  br label %94

; <label>:94:                                     ; preds = %90, %98
  %95 = phi i64 [ %104, %98 ], [ %58, %90 ]
  call void @llvm.lifetime.start(i64 104, i8* nonnull %75) #11
  %96 = load i64, i64* %16, align 8, !tbaa !43, !noalias !888
  %97 = icmp sgt i64 %96, %95
  br i1 %97, label %98, label %107, !prof !10

; <label>:98:                                     ; preds = %94
  %99 = load i32*, i32** %92, align 8, !tbaa !41, !noalias !888
  %100 = getelementptr inbounds i32, i32* %99, i64 %95
  %101 = ptrtoint i32* %100 to i64
  %102 = getelementptr inbounds i32, i32* %91, i64 %95
  store i64 %7, i64* %76, align 8, !tbaa !891, !alias.scope !893
  store i64 %7, i64* %78, align 8, !alias.scope !893
  store <2 x i64> <i64 0, i64 6>, <2 x i64>* %93, align 8
  store i64 %101, i64* %81, align 8, !tbaa !863, !alias.scope !893
  store i64 %10, i64* %83, align 8
  store i64 0, i64* %84, align 8
  store i64 %95, i64* %85, align 8
  store i64 1, i64* %86, align 8
  call void @llvm.lifetime.start(i64 1, i8* nonnull %88) #11
  %103 = call i32 @_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_9TransposeIKNS_5BlockIKNS5_INS_6MatrixIiLi6ELi1ELi0ELi6ELi1EEEEELi1ELi6ELb1EEEEEKNS6_IKNS5_INS7_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIiiEEEEiRKT_(%"class.Eigen::DenseBase.1320"* nonnull %87, %"struct.Eigen::internal::scalar_sum_op"* nonnull dereferenceable(1) %4) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %88) #11
  call void @llvm.lifetime.end(i64 104, i8* nonnull %75) #11
  store i32 %103, i32* %102, align 4, !tbaa !33
  %104 = add nsw i64 %95, 1
  %105 = icmp slt i64 %104, %20
  br i1 %105, label %94, label %162

; <label>:106:                                    ; preds = %74
  call void @llvm.lifetime.start(i64 104, i8* nonnull %75) #11
  br label %108

; <label>:107:                                    ; preds = %94
  br label %108

; <label>:108:                                    ; preds = %107, %106
  call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !888
  unreachable

; <label>:109:                                    ; preds = %60, %109
  %110 = phi i64 [ %160, %109 ], [ 0, %60 ]
  %111 = getelementptr inbounds i32, i32* %61, i64 %110
  %112 = load i32, i32* %12, align 4, !tbaa !33
  %113 = insertelement <4 x i32> undef, i32 %112, i32 0
  %114 = shufflevector <4 x i32> %113, <4 x i32> undef, <4 x i32> zeroinitializer
  %115 = getelementptr inbounds i32, i32* %15, i64 %110
  %116 = bitcast i32* %115 to <4 x i32>*
  %117 = load <4 x i32>, <4 x i32>* %116, align 1, !tbaa !11
  %118 = mul <4 x i32> %114, %117
  %119 = load i32, i32* %62, align 4, !tbaa !33
  %120 = insertelement <4 x i32> undef, i32 %119, i32 0
  %121 = shufflevector <4 x i32> %120, <4 x i32> undef, <4 x i32> zeroinitializer
  %122 = getelementptr inbounds i32, i32* %115, i64 %17
  %123 = bitcast i32* %122 to <4 x i32>*
  %124 = load <4 x i32>, <4 x i32>* %123, align 1, !tbaa !11
  %125 = mul <4 x i32> %121, %124
  %126 = add <4 x i32> %125, %118
  %127 = load i32, i32* %63, align 4, !tbaa !33
  %128 = insertelement <4 x i32> undef, i32 %127, i32 0
  %129 = shufflevector <4 x i32> %128, <4 x i32> undef, <4 x i32> zeroinitializer
  %130 = getelementptr inbounds i32, i32* %115, i64 %64
  %131 = bitcast i32* %130 to <4 x i32>*
  %132 = load <4 x i32>, <4 x i32>* %131, align 1, !tbaa !11
  %133 = mul <4 x i32> %129, %132
  %134 = add <4 x i32> %126, %133
  %135 = load i32, i32* %65, align 4, !tbaa !33
  %136 = insertelement <4 x i32> undef, i32 %135, i32 0
  %137 = shufflevector <4 x i32> %136, <4 x i32> undef, <4 x i32> zeroinitializer
  %138 = getelementptr inbounds i32, i32* %115, i64 %66
  %139 = bitcast i32* %138 to <4 x i32>*
  %140 = load <4 x i32>, <4 x i32>* %139, align 1, !tbaa !11
  %141 = mul <4 x i32> %137, %140
  %142 = add <4 x i32> %134, %141
  %143 = load i32, i32* %67, align 4, !tbaa !33
  %144 = insertelement <4 x i32> undef, i32 %143, i32 0
  %145 = shufflevector <4 x i32> %144, <4 x i32> undef, <4 x i32> zeroinitializer
  %146 = getelementptr inbounds i32, i32* %115, i64 %68
  %147 = bitcast i32* %146 to <4 x i32>*
  %148 = load <4 x i32>, <4 x i32>* %147, align 1, !tbaa !11
  %149 = mul <4 x i32> %145, %148
  %150 = add <4 x i32> %142, %149
  %151 = load i32, i32* %69, align 4, !tbaa !33
  %152 = insertelement <4 x i32> undef, i32 %151, i32 0
  %153 = shufflevector <4 x i32> %152, <4 x i32> undef, <4 x i32> zeroinitializer
  %154 = getelementptr inbounds i32, i32* %115, i64 %70
  %155 = bitcast i32* %154 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 1, !tbaa !11
  %157 = mul <4 x i32> %153, %156
  %158 = add <4 x i32> %150, %157
  %159 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %158, <4 x i32>* %159, align 16, !tbaa !11
  %160 = add nuw nsw i64 %110, 4
  %161 = icmp slt i64 %160, %58
  br i1 %161, label %109, label %71

; <label>:162:                                    ; preds = %98
  br label %163

; <label>:163:                                    ; preds = %162, %72
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr i32 @_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_9TransposeIKNS_5BlockIKNS5_INS_6MatrixIiLi6ELi1ELi0ELi6ELi1EEEEELi1ELi6ELb1EEEEEKNS6_IKNS5_INS7_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIiiEEEEiRKT_(%"class.Eigen::DenseBase.1320"*, %"struct.Eigen::internal::scalar_sum_op"* dereferenceable(1)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.Eigen::DenseBase.1320"* %0 to i32**
  %4 = load i32*, i32** %3, align 8, !tbaa !891
  %5 = getelementptr inbounds %"class.Eigen::DenseBase.1320", %"class.Eigen::DenseBase.1320"* %0, i64 40
  %6 = bitcast %"class.Eigen::DenseBase.1320"* %5 to i64*
  %7 = load i64, i64* %6, align 8, !tbaa !896
  %8 = icmp eq i64 %7, 6
  br i1 %8, label %10, label %9, !prof !10

; <label>:9:                                      ; preds = %2
  tail call void @__assert_rtn(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__func__._ZN5Eigen8internal19variable_if_dynamicIlLi0EEC2El, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.8, i64 0, i64 0), i32 110, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0)) #13
  unreachable

; <label>:10:                                     ; preds = %2
  %11 = getelementptr inbounds %"class.Eigen::DenseBase.1320", %"class.Eigen::DenseBase.1320"* %0, i64 64
  %12 = bitcast %"class.Eigen::DenseBase.1320"* %11 to %"class.Eigen::Matrix.123"**
  %13 = load %"class.Eigen::Matrix.123"*, %"class.Eigen::Matrix.123"** %12, align 8, !tbaa !11
  %14 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %13, i64 0, i32 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8, !tbaa !43
  %16 = getelementptr inbounds %"class.Eigen::DenseBase.1320", %"class.Eigen::DenseBase.1320"* %0, i64 88
  %17 = bitcast %"class.Eigen::DenseBase.1320"* %16 to i64*
  %18 = load i64, i64* %17, align 8, !tbaa !865
  %19 = icmp eq i64 %18, 1
  br i1 %19, label %21, label %20, !prof !10

; <label>:20:                                     ; preds = %10
  tail call void @__assert_rtn(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__func__._ZN5Eigen8internal19variable_if_dynamicIlLi0EEC2El, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.8, i64 0, i64 0), i32 110, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0)) #13
  unreachable

; <label>:21:                                     ; preds = %10
  %22 = getelementptr inbounds %"class.Eigen::DenseBase.1320", %"class.Eigen::DenseBase.1320"* %0, i64 48
  %23 = bitcast %"class.Eigen::DenseBase.1320"* %22 to i32**
  %24 = load i32*, i32** %23, align 8, !tbaa !863
  %25 = load i32, i32* %4, align 4, !tbaa !33
  %26 = load i32, i32* %24, align 4, !tbaa !33
  %27 = mul nsw i32 %26, %25
  %28 = getelementptr inbounds i32, i32* %4, i64 1
  %29 = load i32, i32* %28, align 4, !tbaa !33
  %30 = getelementptr inbounds i32, i32* %24, i64 %15
  %31 = load i32, i32* %30, align 4, !tbaa !33
  %32 = mul nsw i32 %31, %29
  %33 = getelementptr inbounds i32, i32* %4, i64 2
  %34 = load i32, i32* %33, align 4, !tbaa !33
  %35 = shl nsw i64 %15, 1
  %36 = getelementptr inbounds i32, i32* %24, i64 %35
  %37 = load i32, i32* %36, align 4, !tbaa !33
  %38 = mul nsw i32 %37, %34
  %39 = getelementptr inbounds i32, i32* %4, i64 3
  %40 = load i32, i32* %39, align 4, !tbaa !33
  %41 = mul nsw i64 %15, 3
  %42 = getelementptr inbounds i32, i32* %24, i64 %41
  %43 = load i32, i32* %42, align 4, !tbaa !33
  %44 = mul nsw i32 %43, %40
  %45 = getelementptr inbounds i32, i32* %4, i64 4
  %46 = load i32, i32* %45, align 4, !tbaa !33
  %47 = shl nsw i64 %15, 2
  %48 = getelementptr inbounds i32, i32* %24, i64 %47
  %49 = load i32, i32* %48, align 4, !tbaa !33
  %50 = mul nsw i32 %49, %46
  %51 = getelementptr inbounds i32, i32* %4, i64 5
  %52 = load i32, i32* %51, align 4, !tbaa !33
  %53 = mul nsw i64 %15, 5
  %54 = getelementptr inbounds i32, i32* %24, i64 %53
  %55 = load i32, i32* %54, align 4, !tbaa !33
  %56 = mul nsw i32 %55, %52
  %57 = add i32 %32, %27
  %58 = add i32 %57, %38
  %59 = add i32 %58, %44
  %60 = add i32 %59, %50
  %61 = add i32 %60, %56
  ret i32 %61
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEENS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_7ProductINS2_IiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi1ELi0ELi47ELi1EEELi0EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKS3_EEEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.170"* dereferenceable(16), %"class.Eigen::CwiseBinaryOp.220"* dereferenceable(40), %"struct.Eigen::internal::assign_op.512"* dereferenceable(1)) local_unnamed_addr #6 {
  %4 = alloca %"struct.Eigen::internal::evaluator.701", align 8
  %5 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %4, i64 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start(i64 48, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %1, i64 0, i32 0
  %7 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %4, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS3_IiLi47ELi1ELi0ELi47ELi1EEELi0EEELi7ENS_10DenseShapeES7_iiEC2ERKS6_(%"struct.Eigen::internal::product_evaluator.706"* %7, %"class.Eigen::Product.226"* nonnull dereferenceable(16) %6) #11
  %8 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %4, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %1, i64 0, i32 1, i32 2, i32 0
  %10 = load i32, i32* %9, align 4, !tbaa !51
  store i32 %10, i32* %8, align 8, !tbaa !51
  %11 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.220", %"class.Eigen::CwiseBinaryOp.220"* %1, i64 0, i32 1, i32 0, i32 0
  %12 = load i64, i64* %11, align 8, !tbaa !59
  %13 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %0, i64 0, i32 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8, !tbaa !46
  %15 = icmp eq i64 %14, %12
  br i1 %15, label %16, label %19

; <label>:16:                                     ; preds = %3
  %17 = bitcast %"class.Eigen::Matrix.170"* %0 to i64*
  %18 = load i64, i64* %17, align 8, !tbaa !44
  br label %47

; <label>:19:                                     ; preds = %3
  %20 = icmp sgt i64 %12, -1
  br i1 %20, label %22, label %21, !prof !10

; <label>:21:                                     ; preds = %19
  call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:22:                                     ; preds = %19
  %23 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i32*, i32** %23, align 8, !tbaa !44
  %25 = icmp eq i32* %24, null
  br i1 %25, label %30, label %26

; <label>:26:                                     ; preds = %22
  %27 = getelementptr inbounds i32, i32* %24, i64 -2
  %28 = bitcast i32* %27 to i8**
  %29 = load i8*, i8** %28, align 8, !tbaa !29
  call void @free(i8* %29) #11
  br label %30

; <label>:30:                                     ; preds = %26, %22
  %31 = icmp eq i64 %12, 0
  br i1 %31, label %44, label %32

; <label>:32:                                     ; preds = %30
  %33 = shl i64 %12, 2
  %34 = add i64 %33, 32
  %35 = call i8* @malloc(i64 %34) #14
  %36 = icmp eq i8* %35, null
  br i1 %36, label %44, label %37

; <label>:37:                                     ; preds = %32
  %38 = ptrtoint i8* %35 to i64
  %39 = add i64 %38, 32
  %40 = and i64 %39, -32
  %41 = inttoptr i64 %40 to i8**
  %42 = getelementptr inbounds i8*, i8** %41, i64 -1
  store i8* %35, i8** %42, align 8, !tbaa !29
  %43 = inttoptr i64 %40 to i32*
  br label %44

; <label>:44:                                     ; preds = %30, %32, %37
  %45 = phi i32* [ %43, %37 ], [ null, %32 ], [ null, %30 ]
  store i32* %45, i32** %23, align 8, !tbaa !44
  store i64 %12, i64* %13, align 8, !tbaa !46
  %46 = ptrtoint i32* %45 to i64
  br label %47

; <label>:47:                                     ; preds = %16, %44
  %48 = phi i64 [ %18, %16 ], [ %46, %44 ]
  %49 = sdiv i64 %12, 4
  %50 = shl nsw i64 %49, 2
  %51 = icmp sgt i64 %12, 3
  br i1 %51, label %52, label %86

; <label>:52:                                     ; preds = %47
  %53 = inttoptr i64 %48 to i32*
  %54 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %4, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = icmp sgt i64 %50, 4
  %56 = select i1 %55, i64 %50, i64 4
  %57 = add nsw i64 %56, -1
  %58 = lshr i64 %57, 2
  %59 = add nuw nsw i64 %58, 1
  %60 = and i64 %59, 3
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %80, label %62

; <label>:62:                                     ; preds = %52
  br label %63

; <label>:63:                                     ; preds = %63, %62
  %64 = phi i64 [ %76, %63 ], [ 0, %62 ]
  %65 = phi i64 [ %77, %63 ], [ %60, %62 ]
  %66 = getelementptr inbounds i32, i32* %53, i64 %64
  %67 = load i32*, i32** %54, align 8, !tbaa !61
  %68 = getelementptr inbounds i32, i32* %67, i64 %64
  %69 = bitcast i32* %68 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 16, !tbaa !11
  %71 = load i32, i32* %8, align 8, !tbaa !33
  %72 = insertelement <4 x i32> undef, i32 %71, i32 0
  %73 = shufflevector <4 x i32> %72, <4 x i32> undef, <4 x i32> zeroinitializer
  %74 = mul <4 x i32> %73, %70
  %75 = bitcast i32* %66 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %75, align 16, !tbaa !11
  %76 = add nuw nsw i64 %64, 4
  %77 = add i64 %65, -1
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %63, !llvm.loop !898

; <label>:79:                                     ; preds = %63
  br label %80

; <label>:80:                                     ; preds = %52, %79
  %81 = phi i64 [ 0, %52 ], [ %76, %79 ]
  %82 = icmp ult i64 %57, 12
  br i1 %82, label %85, label %83

; <label>:83:                                     ; preds = %80
  br label %305

; <label>:84:                                     ; preds = %305
  br label %85

; <label>:85:                                     ; preds = %80, %84
  br label %86

; <label>:86:                                     ; preds = %85, %47
  %87 = icmp sgt i64 %12, %50
  br i1 %87, label %88, label %354

; <label>:88:                                     ; preds = %86
  %89 = inttoptr i64 %48 to i32*
  %90 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %4, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %91 = load i32*, i32** %90, align 8, !tbaa !61
  %92 = sub i64 %12, %50
  %93 = icmp ult i64 %92, 32
  br i1 %93, label %230, label %94

; <label>:94:                                     ; preds = %88
  %95 = and i64 %92, -32
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %230, label %97

; <label>:97:                                     ; preds = %94
  %98 = getelementptr i32, i32* %89, i64 %50
  %99 = getelementptr i32, i32* %89, i64 %12
  %100 = getelementptr i32, i32* %91, i64 %50
  %101 = getelementptr i32, i32* %91, i64 %12
  %102 = icmp ult i32* %98, %8
  %103 = icmp ult i32* %8, %99
  %104 = and i1 %102, %103
  %105 = icmp ult i32* %98, %101
  %106 = icmp ult i32* %100, %99
  %107 = and i1 %105, %106
  %108 = or i1 %104, %107
  %109 = add i64 %50, %95
  br i1 %108, label %230, label %110

; <label>:110:                                    ; preds = %97
  %111 = add i64 %95, -32
  %112 = lshr exact i64 %111, 5
  %113 = and i64 %112, 1
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %150

; <label>:115:                                    ; preds = %110
  br label %116

; <label>:116:                                    ; preds = %115
  %117 = getelementptr inbounds i32, i32* %89, i64 %50
  %118 = getelementptr inbounds i32, i32* %91, i64 %50
  %119 = load i32, i32* %8, align 8, !tbaa !51, !alias.scope !899
  %120 = insertelement <8 x i32> undef, i32 %119, i32 0
  %121 = shufflevector <8 x i32> %120, <8 x i32> undef, <8 x i32> zeroinitializer
  %122 = insertelement <8 x i32> undef, i32 %119, i32 0
  %123 = shufflevector <8 x i32> %122, <8 x i32> undef, <8 x i32> zeroinitializer
  %124 = insertelement <8 x i32> undef, i32 %119, i32 0
  %125 = shufflevector <8 x i32> %124, <8 x i32> undef, <8 x i32> zeroinitializer
  %126 = insertelement <8 x i32> undef, i32 %119, i32 0
  %127 = shufflevector <8 x i32> %126, <8 x i32> undef, <8 x i32> zeroinitializer
  %128 = bitcast i32* %118 to <8 x i32>*
  %129 = load <8 x i32>, <8 x i32>* %128, align 4, !tbaa !33, !alias.scope !902
  %130 = getelementptr i32, i32* %118, i64 8
  %131 = bitcast i32* %130 to <8 x i32>*
  %132 = load <8 x i32>, <8 x i32>* %131, align 4, !tbaa !33, !alias.scope !902
  %133 = getelementptr i32, i32* %118, i64 16
  %134 = bitcast i32* %133 to <8 x i32>*
  %135 = load <8 x i32>, <8 x i32>* %134, align 4, !tbaa !33, !alias.scope !902
  %136 = getelementptr i32, i32* %118, i64 24
  %137 = bitcast i32* %136 to <8 x i32>*
  %138 = load <8 x i32>, <8 x i32>* %137, align 4, !tbaa !33, !alias.scope !902
  %139 = mul nsw <8 x i32> %129, %121
  %140 = mul nsw <8 x i32> %132, %123
  %141 = mul nsw <8 x i32> %135, %125
  %142 = mul nsw <8 x i32> %138, %127
  %143 = bitcast i32* %117 to <8 x i32>*
  store <8 x i32> %139, <8 x i32>* %143, align 4, !tbaa !33, !alias.scope !904, !noalias !906
  %144 = getelementptr i32, i32* %117, i64 8
  %145 = bitcast i32* %144 to <8 x i32>*
  store <8 x i32> %140, <8 x i32>* %145, align 4, !tbaa !33, !alias.scope !904, !noalias !906
  %146 = getelementptr i32, i32* %117, i64 16
  %147 = bitcast i32* %146 to <8 x i32>*
  store <8 x i32> %141, <8 x i32>* %147, align 4, !tbaa !33, !alias.scope !904, !noalias !906
  %148 = getelementptr i32, i32* %117, i64 24
  %149 = bitcast i32* %148 to <8 x i32>*
  store <8 x i32> %142, <8 x i32>* %149, align 4, !tbaa !33, !alias.scope !904, !noalias !906
  br label %150

; <label>:150:                                    ; preds = %116, %110
  %151 = phi i64 [ 0, %110 ], [ 32, %116 ]
  %152 = icmp eq i64 %112, 0
  br i1 %152, label %228, label %153

; <label>:153:                                    ; preds = %150
  %154 = load i32, i32* %8, align 8, !tbaa !51, !alias.scope !899
  %155 = insertelement <8 x i32> undef, i32 %154, i32 0
  %156 = shufflevector <8 x i32> %155, <8 x i32> undef, <8 x i32> zeroinitializer
  %157 = insertelement <8 x i32> undef, i32 %154, i32 0
  %158 = shufflevector <8 x i32> %157, <8 x i32> undef, <8 x i32> zeroinitializer
  %159 = insertelement <8 x i32> undef, i32 %154, i32 0
  %160 = shufflevector <8 x i32> %159, <8 x i32> undef, <8 x i32> zeroinitializer
  %161 = insertelement <8 x i32> undef, i32 %154, i32 0
  %162 = shufflevector <8 x i32> %161, <8 x i32> undef, <8 x i32> zeroinitializer
  %163 = load i32, i32* %8, align 8, !tbaa !51, !alias.scope !899
  %164 = insertelement <8 x i32> undef, i32 %163, i32 0
  %165 = shufflevector <8 x i32> %164, <8 x i32> undef, <8 x i32> zeroinitializer
  %166 = insertelement <8 x i32> undef, i32 %163, i32 0
  %167 = shufflevector <8 x i32> %166, <8 x i32> undef, <8 x i32> zeroinitializer
  %168 = insertelement <8 x i32> undef, i32 %163, i32 0
  %169 = shufflevector <8 x i32> %168, <8 x i32> undef, <8 x i32> zeroinitializer
  %170 = insertelement <8 x i32> undef, i32 %163, i32 0
  %171 = shufflevector <8 x i32> %170, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %172

; <label>:172:                                    ; preds = %172, %153
  %173 = phi i64 [ %151, %153 ], [ %225, %172 ]
  %174 = add i64 %50, %173
  %175 = getelementptr inbounds i32, i32* %89, i64 %174
  %176 = getelementptr inbounds i32, i32* %91, i64 %174
  %177 = bitcast i32* %176 to <8 x i32>*
  %178 = load <8 x i32>, <8 x i32>* %177, align 4, !tbaa !33, !alias.scope !902
  %179 = getelementptr i32, i32* %176, i64 8
  %180 = bitcast i32* %179 to <8 x i32>*
  %181 = load <8 x i32>, <8 x i32>* %180, align 4, !tbaa !33, !alias.scope !902
  %182 = getelementptr i32, i32* %176, i64 16
  %183 = bitcast i32* %182 to <8 x i32>*
  %184 = load <8 x i32>, <8 x i32>* %183, align 4, !tbaa !33, !alias.scope !902
  %185 = getelementptr i32, i32* %176, i64 24
  %186 = bitcast i32* %185 to <8 x i32>*
  %187 = load <8 x i32>, <8 x i32>* %186, align 4, !tbaa !33, !alias.scope !902
  %188 = mul nsw <8 x i32> %178, %156
  %189 = mul nsw <8 x i32> %181, %158
  %190 = mul nsw <8 x i32> %184, %160
  %191 = mul nsw <8 x i32> %187, %162
  %192 = bitcast i32* %175 to <8 x i32>*
  store <8 x i32> %188, <8 x i32>* %192, align 4, !tbaa !33, !alias.scope !904, !noalias !906
  %193 = getelementptr i32, i32* %175, i64 8
  %194 = bitcast i32* %193 to <8 x i32>*
  store <8 x i32> %189, <8 x i32>* %194, align 4, !tbaa !33, !alias.scope !904, !noalias !906
  %195 = getelementptr i32, i32* %175, i64 16
  %196 = bitcast i32* %195 to <8 x i32>*
  store <8 x i32> %190, <8 x i32>* %196, align 4, !tbaa !33, !alias.scope !904, !noalias !906
  %197 = getelementptr i32, i32* %175, i64 24
  %198 = bitcast i32* %197 to <8 x i32>*
  store <8 x i32> %191, <8 x i32>* %198, align 4, !tbaa !33, !alias.scope !904, !noalias !906
  %199 = add i64 %173, 32
  %200 = add i64 %50, %199
  %201 = getelementptr inbounds i32, i32* %89, i64 %200
  %202 = getelementptr inbounds i32, i32* %91, i64 %200
  %203 = bitcast i32* %202 to <8 x i32>*
  %204 = load <8 x i32>, <8 x i32>* %203, align 4, !tbaa !33, !alias.scope !902
  %205 = getelementptr i32, i32* %202, i64 8
  %206 = bitcast i32* %205 to <8 x i32>*
  %207 = load <8 x i32>, <8 x i32>* %206, align 4, !tbaa !33, !alias.scope !902
  %208 = getelementptr i32, i32* %202, i64 16
  %209 = bitcast i32* %208 to <8 x i32>*
  %210 = load <8 x i32>, <8 x i32>* %209, align 4, !tbaa !33, !alias.scope !902
  %211 = getelementptr i32, i32* %202, i64 24
  %212 = bitcast i32* %211 to <8 x i32>*
  %213 = load <8 x i32>, <8 x i32>* %212, align 4, !tbaa !33, !alias.scope !902
  %214 = mul nsw <8 x i32> %204, %165
  %215 = mul nsw <8 x i32> %207, %167
  %216 = mul nsw <8 x i32> %210, %169
  %217 = mul nsw <8 x i32> %213, %171
  %218 = bitcast i32* %201 to <8 x i32>*
  store <8 x i32> %214, <8 x i32>* %218, align 4, !tbaa !33, !alias.scope !904, !noalias !906
  %219 = getelementptr i32, i32* %201, i64 8
  %220 = bitcast i32* %219 to <8 x i32>*
  store <8 x i32> %215, <8 x i32>* %220, align 4, !tbaa !33, !alias.scope !904, !noalias !906
  %221 = getelementptr i32, i32* %201, i64 16
  %222 = bitcast i32* %221 to <8 x i32>*
  store <8 x i32> %216, <8 x i32>* %222, align 4, !tbaa !33, !alias.scope !904, !noalias !906
  %223 = getelementptr i32, i32* %201, i64 24
  %224 = bitcast i32* %223 to <8 x i32>*
  store <8 x i32> %217, <8 x i32>* %224, align 4, !tbaa !33, !alias.scope !904, !noalias !906
  %225 = add i64 %173, 64
  %226 = icmp eq i64 %225, %95
  br i1 %226, label %227, label %172, !llvm.loop !907

; <label>:227:                                    ; preds = %172
  br label %228

; <label>:228:                                    ; preds = %150, %227
  %229 = icmp eq i64 %92, %95
  br i1 %229, label %354, label %230

; <label>:230:                                    ; preds = %228, %97, %94, %88
  %231 = phi i64 [ %50, %97 ], [ %50, %94 ], [ %50, %88 ], [ %109, %228 ]
  %232 = sub i64 %12, %231
  %233 = add i64 %12, -1
  %234 = sub i64 %233, %231
  %235 = and i64 %232, 7
  %236 = icmp eq i64 %235, 0
  br i1 %236, label %250, label %237

; <label>:237:                                    ; preds = %230
  br label %238

; <label>:238:                                    ; preds = %238, %237
  %239 = phi i64 [ %246, %238 ], [ %231, %237 ]
  %240 = phi i64 [ %247, %238 ], [ %235, %237 ]
  %241 = getelementptr inbounds i32, i32* %89, i64 %239
  %242 = getelementptr inbounds i32, i32* %91, i64 %239
  %243 = load i32, i32* %8, align 8, !tbaa !51
  %244 = load i32, i32* %242, align 4, !tbaa !33
  %245 = mul nsw i32 %244, %243
  store i32 %245, i32* %241, align 4, !tbaa !33
  %246 = add nsw i64 %239, 1
  %247 = add i64 %240, -1
  %248 = icmp eq i64 %247, 0
  br i1 %248, label %249, label %238, !llvm.loop !908

; <label>:249:                                    ; preds = %238
  br label %250

; <label>:250:                                    ; preds = %230, %249
  %251 = phi i64 [ %231, %230 ], [ %246, %249 ]
  %252 = icmp ult i64 %234, 7
  br i1 %252, label %353, label %253

; <label>:253:                                    ; preds = %250
  br label %254

; <label>:254:                                    ; preds = %254, %253
  %255 = phi i64 [ %251, %253 ], [ %303, %254 ]
  %256 = getelementptr inbounds i32, i32* %89, i64 %255
  %257 = getelementptr inbounds i32, i32* %91, i64 %255
  %258 = load i32, i32* %8, align 8, !tbaa !51
  %259 = load i32, i32* %257, align 4, !tbaa !33
  %260 = mul nsw i32 %259, %258
  store i32 %260, i32* %256, align 4, !tbaa !33
  %261 = add nsw i64 %255, 1
  %262 = getelementptr inbounds i32, i32* %89, i64 %261
  %263 = getelementptr inbounds i32, i32* %91, i64 %261
  %264 = load i32, i32* %8, align 8, !tbaa !51
  %265 = load i32, i32* %263, align 4, !tbaa !33
  %266 = mul nsw i32 %265, %264
  store i32 %266, i32* %262, align 4, !tbaa !33
  %267 = add nsw i64 %255, 2
  %268 = getelementptr inbounds i32, i32* %89, i64 %267
  %269 = getelementptr inbounds i32, i32* %91, i64 %267
  %270 = load i32, i32* %8, align 8, !tbaa !51
  %271 = load i32, i32* %269, align 4, !tbaa !33
  %272 = mul nsw i32 %271, %270
  store i32 %272, i32* %268, align 4, !tbaa !33
  %273 = add nsw i64 %255, 3
  %274 = getelementptr inbounds i32, i32* %89, i64 %273
  %275 = getelementptr inbounds i32, i32* %91, i64 %273
  %276 = load i32, i32* %8, align 8, !tbaa !51
  %277 = load i32, i32* %275, align 4, !tbaa !33
  %278 = mul nsw i32 %277, %276
  store i32 %278, i32* %274, align 4, !tbaa !33
  %279 = add nsw i64 %255, 4
  %280 = getelementptr inbounds i32, i32* %89, i64 %279
  %281 = getelementptr inbounds i32, i32* %91, i64 %279
  %282 = load i32, i32* %8, align 8, !tbaa !51
  %283 = load i32, i32* %281, align 4, !tbaa !33
  %284 = mul nsw i32 %283, %282
  store i32 %284, i32* %280, align 4, !tbaa !33
  %285 = add nsw i64 %255, 5
  %286 = getelementptr inbounds i32, i32* %89, i64 %285
  %287 = getelementptr inbounds i32, i32* %91, i64 %285
  %288 = load i32, i32* %8, align 8, !tbaa !51
  %289 = load i32, i32* %287, align 4, !tbaa !33
  %290 = mul nsw i32 %289, %288
  store i32 %290, i32* %286, align 4, !tbaa !33
  %291 = add nsw i64 %255, 6
  %292 = getelementptr inbounds i32, i32* %89, i64 %291
  %293 = getelementptr inbounds i32, i32* %91, i64 %291
  %294 = load i32, i32* %8, align 8, !tbaa !51
  %295 = load i32, i32* %293, align 4, !tbaa !33
  %296 = mul nsw i32 %295, %294
  store i32 %296, i32* %292, align 4, !tbaa !33
  %297 = add nsw i64 %255, 7
  %298 = getelementptr inbounds i32, i32* %89, i64 %297
  %299 = getelementptr inbounds i32, i32* %91, i64 %297
  %300 = load i32, i32* %8, align 8, !tbaa !51
  %301 = load i32, i32* %299, align 4, !tbaa !33
  %302 = mul nsw i32 %301, %300
  store i32 %302, i32* %298, align 4, !tbaa !33
  %303 = add nsw i64 %255, 8
  %304 = icmp eq i64 %303, %12
  br i1 %304, label %352, label %254, !llvm.loop !909

; <label>:305:                                    ; preds = %305, %83
  %306 = phi i64 [ %81, %83 ], [ %350, %305 ]
  %307 = getelementptr inbounds i32, i32* %53, i64 %306
  %308 = load i32*, i32** %54, align 8, !tbaa !61
  %309 = getelementptr inbounds i32, i32* %308, i64 %306
  %310 = bitcast i32* %309 to <4 x i32>*
  %311 = load <4 x i32>, <4 x i32>* %310, align 16, !tbaa !11
  %312 = load i32, i32* %8, align 8, !tbaa !33
  %313 = insertelement <4 x i32> undef, i32 %312, i32 0
  %314 = shufflevector <4 x i32> %313, <4 x i32> undef, <4 x i32> zeroinitializer
  %315 = mul <4 x i32> %314, %311
  %316 = bitcast i32* %307 to <4 x i32>*
  store <4 x i32> %315, <4 x i32>* %316, align 16, !tbaa !11
  %317 = add nuw nsw i64 %306, 4
  %318 = getelementptr inbounds i32, i32* %53, i64 %317
  %319 = load i32*, i32** %54, align 8, !tbaa !61
  %320 = getelementptr inbounds i32, i32* %319, i64 %317
  %321 = bitcast i32* %320 to <4 x i32>*
  %322 = load <4 x i32>, <4 x i32>* %321, align 16, !tbaa !11
  %323 = load i32, i32* %8, align 8, !tbaa !33
  %324 = insertelement <4 x i32> undef, i32 %323, i32 0
  %325 = shufflevector <4 x i32> %324, <4 x i32> undef, <4 x i32> zeroinitializer
  %326 = mul <4 x i32> %325, %322
  %327 = bitcast i32* %318 to <4 x i32>*
  store <4 x i32> %326, <4 x i32>* %327, align 16, !tbaa !11
  %328 = add nsw i64 %306, 8
  %329 = getelementptr inbounds i32, i32* %53, i64 %328
  %330 = load i32*, i32** %54, align 8, !tbaa !61
  %331 = getelementptr inbounds i32, i32* %330, i64 %328
  %332 = bitcast i32* %331 to <4 x i32>*
  %333 = load <4 x i32>, <4 x i32>* %332, align 16, !tbaa !11
  %334 = load i32, i32* %8, align 8, !tbaa !33
  %335 = insertelement <4 x i32> undef, i32 %334, i32 0
  %336 = shufflevector <4 x i32> %335, <4 x i32> undef, <4 x i32> zeroinitializer
  %337 = mul <4 x i32> %336, %333
  %338 = bitcast i32* %329 to <4 x i32>*
  store <4 x i32> %337, <4 x i32>* %338, align 16, !tbaa !11
  %339 = add nsw i64 %306, 12
  %340 = getelementptr inbounds i32, i32* %53, i64 %339
  %341 = load i32*, i32** %54, align 8, !tbaa !61
  %342 = getelementptr inbounds i32, i32* %341, i64 %339
  %343 = bitcast i32* %342 to <4 x i32>*
  %344 = load <4 x i32>, <4 x i32>* %343, align 16, !tbaa !11
  %345 = load i32, i32* %8, align 8, !tbaa !33
  %346 = insertelement <4 x i32> undef, i32 %345, i32 0
  %347 = shufflevector <4 x i32> %346, <4 x i32> undef, <4 x i32> zeroinitializer
  %348 = mul <4 x i32> %347, %344
  %349 = bitcast i32* %340 to <4 x i32>*
  store <4 x i32> %348, <4 x i32>* %349, align 16, !tbaa !11
  %350 = add nsw i64 %306, 16
  %351 = icmp slt i64 %350, %50
  br i1 %351, label %305, label %84

; <label>:352:                                    ; preds = %254
  br label %353

; <label>:353:                                    ; preds = %250, %352
  br label %354

; <label>:354:                                    ; preds = %353, %228, %86
  %355 = getelementptr inbounds %"struct.Eigen::internal::evaluator.701", %"struct.Eigen::internal::evaluator.701"* %4, i64 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %356 = load i32*, i32** %355, align 8, !tbaa !44
  %357 = icmp eq i32* %356, null
  br i1 %357, label %362, label %358

; <label>:358:                                    ; preds = %354
  %359 = getelementptr inbounds i32, i32* %356, i64 -2
  %360 = bitcast i32* %359 to i8**
  %361 = load i8*, i8** %360, align 8, !tbaa !29
  call void @free(i8* %361) #11
  br label %362

; <label>:362:                                    ; preds = %354, %358
  call void @llvm.lifetime.end(i64 48, i8* nonnull %5) #11
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal15call_assignmentINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS2_IiLi47ELi6ELi0ELi47ELi6EEEEESC_EENS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS0_13add_assign_opIiiEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsr25evaluator_assume_aliasingISO_EE5valueEPvE4typeE(%"class.Eigen::Matrix.48"* dereferenceable(16), %"class.Eigen::Product.369"* dereferenceable(40), %"struct.Eigen::internal::add_assign_op"* dereferenceable(1), i8*) local_unnamed_addr #6 {
  %5 = alloca %"class.Eigen::Matrix.48", align 8
  %6 = bitcast %"class.Eigen::Matrix.48"* %5 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %6) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %6, i8 0, i64 16, i32 8, i1 false) #11
  %7 = getelementptr inbounds %"class.Eigen::Product.369", %"class.Eigen::Product.369"* %1, i64 0, i32 1
  %8 = bitcast %"class.Eigen::Transpose.331"* %7 to %"class.Eigen::PlainObjectBase.124"**
  %9 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %8, align 8, !tbaa !11
  %10 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %9, i64 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8, !tbaa !43
  %12 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %5, i64 0, i32 0, i32 0, i32 1
  %13 = icmp eq i64 %11, 0
  br i1 %13, label %32, label %14

; <label>:14:                                     ; preds = %4
  %15 = icmp sgt i64 %11, -1
  br i1 %15, label %17, label %16, !prof !10

; <label>:16:                                     ; preds = %14
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:17:                                     ; preds = %14
  %18 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %5, i64 0, i32 0, i32 0, i32 0
  %19 = mul i64 %11, 188
  %20 = add i64 %19, 32
  %21 = tail call i8* @malloc(i64 %20) #14
  %22 = icmp eq i8* %21, null
  br i1 %22, label %30, label %23

; <label>:23:                                     ; preds = %17
  %24 = ptrtoint i8* %21 to i64
  %25 = add i64 %24, 32
  %26 = and i64 %25, -32
  %27 = inttoptr i64 %26 to i8**
  %28 = getelementptr inbounds i8*, i8** %27, i64 -1
  store i8* %21, i8** %28, align 8, !tbaa !29
  %29 = inttoptr i64 %26 to i32*
  br label %30

; <label>:30:                                     ; preds = %23, %17
  %31 = phi i32* [ %29, %23 ], [ null, %17 ]
  store i32* %31, i32** %18, align 8, !tbaa !38
  store i64 %11, i64* %12, align 8, !tbaa !40
  br label %32

; <label>:32:                                     ; preds = %4, %30
  %33 = getelementptr inbounds %"class.Eigen::Product.369", %"class.Eigen::Product.369"* %1, i64 0, i32 0
  call void @_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EENS_9TransposeINS8_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeESH_Li8EE6evalToINS8_IiLi47ELin1ELi0ELi47ELin1EEEEEvRT_RKSD_RKSG_(%"class.Eigen::Matrix.48"* nonnull dereferenceable(16) %5, %"class.Eigen::CwiseBinaryOp.284"* nonnull dereferenceable(32) %33, %"class.Eigen::Transpose.331"* nonnull dereferenceable(8) %7) #11
  %34 = bitcast %"class.Eigen::Matrix.48"* %5 to i64*
  %35 = load i64, i64* %34, align 8, !tbaa !38
  %36 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %0, i64 0, i32 0, i32 0, i32 1
  %37 = load i64, i64* %36, align 8, !tbaa !40
  %38 = load i64, i64* %12, align 8, !tbaa !40
  %39 = icmp eq i64 %37, %38
  br i1 %39, label %41, label %40, !prof !10

; <label>:40:                                     ; preds = %32
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__._ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEENS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES3_EEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.15, i64 0, i64 0), i32 710, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.29, i64 0, i64 0)) #13
  unreachable

; <label>:41:                                     ; preds = %32
  %42 = bitcast %"class.Eigen::Matrix.48"* %0 to i64*
  %43 = load i64, i64* %42, align 8, !tbaa !38
  %44 = mul nsw i64 %37, 47
  %45 = sdiv i64 %44, 4
  %46 = shl nsw i64 %45, 2
  %47 = icmp sgt i64 %44, 3
  br i1 %47, label %48, label %79

; <label>:48:                                     ; preds = %41
  %49 = inttoptr i64 %43 to i32*
  %50 = inttoptr i64 %35 to i32*
  %51 = icmp sgt i64 %46, 4
  %52 = select i1 %51, i64 %46, i64 4
  %53 = add nsw i64 %52, -1
  %54 = lshr i64 %53, 2
  %55 = add nuw nsw i64 %54, 1
  %56 = and i64 %55, 7
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %73, label %58

; <label>:58:                                     ; preds = %48
  br label %59

; <label>:59:                                     ; preds = %59, %58
  %60 = phi i64 [ %69, %59 ], [ 0, %58 ]
  %61 = phi i64 [ %70, %59 ], [ %56, %58 ]
  %62 = getelementptr inbounds i32, i32* %49, i64 %60
  %63 = getelementptr inbounds i32, i32* %50, i64 %60
  %64 = bitcast i32* %63 to <4 x i32>*
  %65 = load <4 x i32>, <4 x i32>* %64, align 16, !tbaa !11
  %66 = bitcast i32* %62 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 16, !tbaa !11
  %68 = add <4 x i32> %67, %65
  store <4 x i32> %68, <4 x i32>* %66, align 16, !tbaa !11
  %69 = add nuw nsw i64 %60, 4
  %70 = add i64 %61, -1
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %59, !llvm.loop !910

; <label>:72:                                     ; preds = %59
  br label %73

; <label>:73:                                     ; preds = %48, %72
  %74 = phi i64 [ 0, %48 ], [ %69, %72 ]
  %75 = icmp ult i64 %53, 28
  br i1 %75, label %78, label %76

; <label>:76:                                     ; preds = %73
  br label %290

; <label>:77:                                     ; preds = %290
  br label %78

; <label>:78:                                     ; preds = %73, %77
  br label %79

; <label>:79:                                     ; preds = %78, %41
  %80 = icmp sgt i64 %44, %46
  br i1 %80, label %81, label %359

; <label>:81:                                     ; preds = %79
  %82 = inttoptr i64 %43 to i32*
  %83 = inttoptr i64 %35 to i32*
  %84 = sub i64 %44, %46
  %85 = icmp ult i64 %84, 32
  br i1 %85, label %215, label %86

; <label>:86:                                     ; preds = %81
  %87 = and i64 %84, -32
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %215, label %89

; <label>:89:                                     ; preds = %86
  %90 = getelementptr i32, i32* %82, i64 %46
  %91 = getelementptr i32, i32* %82, i64 %44
  %92 = getelementptr i32, i32* %83, i64 %46
  %93 = getelementptr i32, i32* %83, i64 %44
  %94 = icmp ult i32* %90, %93
  %95 = icmp ult i32* %92, %91
  %96 = and i1 %94, %95
  %97 = add i64 %46, %87
  br i1 %96, label %215, label %98

; <label>:98:                                     ; preds = %89
  %99 = add i64 %87, -32
  %100 = lshr exact i64 %99, 5
  %101 = and i64 %100, 1
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %103, label %137

; <label>:103:                                    ; preds = %98
  br label %104

; <label>:104:                                    ; preds = %103
  %105 = getelementptr inbounds i32, i32* %82, i64 %46
  %106 = getelementptr inbounds i32, i32* %83, i64 %46
  %107 = bitcast i32* %106 to <8 x i32>*
  %108 = load <8 x i32>, <8 x i32>* %107, align 4, !tbaa !33, !alias.scope !911
  %109 = getelementptr i32, i32* %106, i64 8
  %110 = bitcast i32* %109 to <8 x i32>*
  %111 = load <8 x i32>, <8 x i32>* %110, align 4, !tbaa !33, !alias.scope !911
  %112 = getelementptr i32, i32* %106, i64 16
  %113 = bitcast i32* %112 to <8 x i32>*
  %114 = load <8 x i32>, <8 x i32>* %113, align 4, !tbaa !33, !alias.scope !911
  %115 = getelementptr i32, i32* %106, i64 24
  %116 = bitcast i32* %115 to <8 x i32>*
  %117 = load <8 x i32>, <8 x i32>* %116, align 4, !tbaa !33, !alias.scope !911
  %118 = bitcast i32* %105 to <8 x i32>*
  %119 = load <8 x i32>, <8 x i32>* %118, align 4, !tbaa !33, !alias.scope !914, !noalias !911
  %120 = getelementptr i32, i32* %105, i64 8
  %121 = bitcast i32* %120 to <8 x i32>*
  %122 = load <8 x i32>, <8 x i32>* %121, align 4, !tbaa !33, !alias.scope !914, !noalias !911
  %123 = getelementptr i32, i32* %105, i64 16
  %124 = bitcast i32* %123 to <8 x i32>*
  %125 = load <8 x i32>, <8 x i32>* %124, align 4, !tbaa !33, !alias.scope !914, !noalias !911
  %126 = getelementptr i32, i32* %105, i64 24
  %127 = bitcast i32* %126 to <8 x i32>*
  %128 = load <8 x i32>, <8 x i32>* %127, align 4, !tbaa !33, !alias.scope !914, !noalias !911
  %129 = add nsw <8 x i32> %119, %108
  %130 = add nsw <8 x i32> %122, %111
  %131 = add nsw <8 x i32> %125, %114
  %132 = add nsw <8 x i32> %128, %117
  %133 = bitcast i32* %105 to <8 x i32>*
  store <8 x i32> %129, <8 x i32>* %133, align 4, !tbaa !33, !alias.scope !914, !noalias !911
  %134 = bitcast i32* %120 to <8 x i32>*
  store <8 x i32> %130, <8 x i32>* %134, align 4, !tbaa !33, !alias.scope !914, !noalias !911
  %135 = bitcast i32* %123 to <8 x i32>*
  store <8 x i32> %131, <8 x i32>* %135, align 4, !tbaa !33, !alias.scope !914, !noalias !911
  %136 = bitcast i32* %126 to <8 x i32>*
  store <8 x i32> %132, <8 x i32>* %136, align 4, !tbaa !33, !alias.scope !914, !noalias !911
  br label %137

; <label>:137:                                    ; preds = %104, %98
  %138 = phi i64 [ 0, %98 ], [ 32, %104 ]
  %139 = icmp eq i64 %100, 0
  br i1 %139, label %213, label %140

; <label>:140:                                    ; preds = %137
  br label %141

; <label>:141:                                    ; preds = %141, %140
  %142 = phi i64 [ %138, %140 ], [ %210, %141 ]
  %143 = add i64 %46, %142
  %144 = getelementptr inbounds i32, i32* %82, i64 %143
  %145 = getelementptr inbounds i32, i32* %83, i64 %143
  %146 = bitcast i32* %145 to <8 x i32>*
  %147 = load <8 x i32>, <8 x i32>* %146, align 4, !tbaa !33, !alias.scope !911
  %148 = getelementptr i32, i32* %145, i64 8
  %149 = bitcast i32* %148 to <8 x i32>*
  %150 = load <8 x i32>, <8 x i32>* %149, align 4, !tbaa !33, !alias.scope !911
  %151 = getelementptr i32, i32* %145, i64 16
  %152 = bitcast i32* %151 to <8 x i32>*
  %153 = load <8 x i32>, <8 x i32>* %152, align 4, !tbaa !33, !alias.scope !911
  %154 = getelementptr i32, i32* %145, i64 24
  %155 = bitcast i32* %154 to <8 x i32>*
  %156 = load <8 x i32>, <8 x i32>* %155, align 4, !tbaa !33, !alias.scope !911
  %157 = bitcast i32* %144 to <8 x i32>*
  %158 = load <8 x i32>, <8 x i32>* %157, align 4, !tbaa !33, !alias.scope !914, !noalias !911
  %159 = getelementptr i32, i32* %144, i64 8
  %160 = bitcast i32* %159 to <8 x i32>*
  %161 = load <8 x i32>, <8 x i32>* %160, align 4, !tbaa !33, !alias.scope !914, !noalias !911
  %162 = getelementptr i32, i32* %144, i64 16
  %163 = bitcast i32* %162 to <8 x i32>*
  %164 = load <8 x i32>, <8 x i32>* %163, align 4, !tbaa !33, !alias.scope !914, !noalias !911
  %165 = getelementptr i32, i32* %144, i64 24
  %166 = bitcast i32* %165 to <8 x i32>*
  %167 = load <8 x i32>, <8 x i32>* %166, align 4, !tbaa !33, !alias.scope !914, !noalias !911
  %168 = add nsw <8 x i32> %158, %147
  %169 = add nsw <8 x i32> %161, %150
  %170 = add nsw <8 x i32> %164, %153
  %171 = add nsw <8 x i32> %167, %156
  %172 = bitcast i32* %144 to <8 x i32>*
  store <8 x i32> %168, <8 x i32>* %172, align 4, !tbaa !33, !alias.scope !914, !noalias !911
  %173 = bitcast i32* %159 to <8 x i32>*
  store <8 x i32> %169, <8 x i32>* %173, align 4, !tbaa !33, !alias.scope !914, !noalias !911
  %174 = bitcast i32* %162 to <8 x i32>*
  store <8 x i32> %170, <8 x i32>* %174, align 4, !tbaa !33, !alias.scope !914, !noalias !911
  %175 = bitcast i32* %165 to <8 x i32>*
  store <8 x i32> %171, <8 x i32>* %175, align 4, !tbaa !33, !alias.scope !914, !noalias !911
  %176 = add i64 %142, 32
  %177 = add i64 %46, %176
  %178 = getelementptr inbounds i32, i32* %82, i64 %177
  %179 = getelementptr inbounds i32, i32* %83, i64 %177
  %180 = bitcast i32* %179 to <8 x i32>*
  %181 = load <8 x i32>, <8 x i32>* %180, align 4, !tbaa !33, !alias.scope !911
  %182 = getelementptr i32, i32* %179, i64 8
  %183 = bitcast i32* %182 to <8 x i32>*
  %184 = load <8 x i32>, <8 x i32>* %183, align 4, !tbaa !33, !alias.scope !911
  %185 = getelementptr i32, i32* %179, i64 16
  %186 = bitcast i32* %185 to <8 x i32>*
  %187 = load <8 x i32>, <8 x i32>* %186, align 4, !tbaa !33, !alias.scope !911
  %188 = getelementptr i32, i32* %179, i64 24
  %189 = bitcast i32* %188 to <8 x i32>*
  %190 = load <8 x i32>, <8 x i32>* %189, align 4, !tbaa !33, !alias.scope !911
  %191 = bitcast i32* %178 to <8 x i32>*
  %192 = load <8 x i32>, <8 x i32>* %191, align 4, !tbaa !33, !alias.scope !914, !noalias !911
  %193 = getelementptr i32, i32* %178, i64 8
  %194 = bitcast i32* %193 to <8 x i32>*
  %195 = load <8 x i32>, <8 x i32>* %194, align 4, !tbaa !33, !alias.scope !914, !noalias !911
  %196 = getelementptr i32, i32* %178, i64 16
  %197 = bitcast i32* %196 to <8 x i32>*
  %198 = load <8 x i32>, <8 x i32>* %197, align 4, !tbaa !33, !alias.scope !914, !noalias !911
  %199 = getelementptr i32, i32* %178, i64 24
  %200 = bitcast i32* %199 to <8 x i32>*
  %201 = load <8 x i32>, <8 x i32>* %200, align 4, !tbaa !33, !alias.scope !914, !noalias !911
  %202 = add nsw <8 x i32> %192, %181
  %203 = add nsw <8 x i32> %195, %184
  %204 = add nsw <8 x i32> %198, %187
  %205 = add nsw <8 x i32> %201, %190
  %206 = bitcast i32* %178 to <8 x i32>*
  store <8 x i32> %202, <8 x i32>* %206, align 4, !tbaa !33, !alias.scope !914, !noalias !911
  %207 = bitcast i32* %193 to <8 x i32>*
  store <8 x i32> %203, <8 x i32>* %207, align 4, !tbaa !33, !alias.scope !914, !noalias !911
  %208 = bitcast i32* %196 to <8 x i32>*
  store <8 x i32> %204, <8 x i32>* %208, align 4, !tbaa !33, !alias.scope !914, !noalias !911
  %209 = bitcast i32* %199 to <8 x i32>*
  store <8 x i32> %205, <8 x i32>* %209, align 4, !tbaa !33, !alias.scope !914, !noalias !911
  %210 = add i64 %142, 64
  %211 = icmp eq i64 %210, %87
  br i1 %211, label %212, label %141, !llvm.loop !916

; <label>:212:                                    ; preds = %141
  br label %213

; <label>:213:                                    ; preds = %137, %212
  %214 = icmp eq i64 %84, %87
  br i1 %214, label %359, label %215

; <label>:215:                                    ; preds = %213, %89, %86, %81
  %216 = phi i64 [ %46, %89 ], [ %46, %86 ], [ %46, %81 ], [ %97, %213 ]
  %217 = sub i64 %44, %216
  %218 = add i64 %44, -1
  %219 = sub i64 %218, %216
  %220 = and i64 %217, 7
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %235, label %222

; <label>:222:                                    ; preds = %215
  br label %223

; <label>:223:                                    ; preds = %223, %222
  %224 = phi i64 [ %231, %223 ], [ %216, %222 ]
  %225 = phi i64 [ %232, %223 ], [ %220, %222 ]
  %226 = getelementptr inbounds i32, i32* %82, i64 %224
  %227 = getelementptr inbounds i32, i32* %83, i64 %224
  %228 = load i32, i32* %227, align 4, !tbaa !33
  %229 = load i32, i32* %226, align 4, !tbaa !33
  %230 = add nsw i32 %229, %228
  store i32 %230, i32* %226, align 4, !tbaa !33
  %231 = add nsw i64 %224, 1
  %232 = add i64 %225, -1
  %233 = icmp eq i64 %232, 0
  br i1 %233, label %234, label %223, !llvm.loop !917

; <label>:234:                                    ; preds = %223
  br label %235

; <label>:235:                                    ; preds = %215, %234
  %236 = phi i64 [ %216, %215 ], [ %231, %234 ]
  %237 = icmp ult i64 %219, 7
  br i1 %237, label %358, label %238

; <label>:238:                                    ; preds = %235
  br label %239

; <label>:239:                                    ; preds = %239, %238
  %240 = phi i64 [ %236, %238 ], [ %288, %239 ]
  %241 = getelementptr inbounds i32, i32* %82, i64 %240
  %242 = getelementptr inbounds i32, i32* %83, i64 %240
  %243 = load i32, i32* %242, align 4, !tbaa !33
  %244 = load i32, i32* %241, align 4, !tbaa !33
  %245 = add nsw i32 %244, %243
  store i32 %245, i32* %241, align 4, !tbaa !33
  %246 = add nsw i64 %240, 1
  %247 = getelementptr inbounds i32, i32* %82, i64 %246
  %248 = getelementptr inbounds i32, i32* %83, i64 %246
  %249 = load i32, i32* %248, align 4, !tbaa !33
  %250 = load i32, i32* %247, align 4, !tbaa !33
  %251 = add nsw i32 %250, %249
  store i32 %251, i32* %247, align 4, !tbaa !33
  %252 = add nsw i64 %240, 2
  %253 = getelementptr inbounds i32, i32* %82, i64 %252
  %254 = getelementptr inbounds i32, i32* %83, i64 %252
  %255 = load i32, i32* %254, align 4, !tbaa !33
  %256 = load i32, i32* %253, align 4, !tbaa !33
  %257 = add nsw i32 %256, %255
  store i32 %257, i32* %253, align 4, !tbaa !33
  %258 = add nsw i64 %240, 3
  %259 = getelementptr inbounds i32, i32* %82, i64 %258
  %260 = getelementptr inbounds i32, i32* %83, i64 %258
  %261 = load i32, i32* %260, align 4, !tbaa !33
  %262 = load i32, i32* %259, align 4, !tbaa !33
  %263 = add nsw i32 %262, %261
  store i32 %263, i32* %259, align 4, !tbaa !33
  %264 = add nsw i64 %240, 4
  %265 = getelementptr inbounds i32, i32* %82, i64 %264
  %266 = getelementptr inbounds i32, i32* %83, i64 %264
  %267 = load i32, i32* %266, align 4, !tbaa !33
  %268 = load i32, i32* %265, align 4, !tbaa !33
  %269 = add nsw i32 %268, %267
  store i32 %269, i32* %265, align 4, !tbaa !33
  %270 = add nsw i64 %240, 5
  %271 = getelementptr inbounds i32, i32* %82, i64 %270
  %272 = getelementptr inbounds i32, i32* %83, i64 %270
  %273 = load i32, i32* %272, align 4, !tbaa !33
  %274 = load i32, i32* %271, align 4, !tbaa !33
  %275 = add nsw i32 %274, %273
  store i32 %275, i32* %271, align 4, !tbaa !33
  %276 = add nsw i64 %240, 6
  %277 = getelementptr inbounds i32, i32* %82, i64 %276
  %278 = getelementptr inbounds i32, i32* %83, i64 %276
  %279 = load i32, i32* %278, align 4, !tbaa !33
  %280 = load i32, i32* %277, align 4, !tbaa !33
  %281 = add nsw i32 %280, %279
  store i32 %281, i32* %277, align 4, !tbaa !33
  %282 = add nsw i64 %240, 7
  %283 = getelementptr inbounds i32, i32* %82, i64 %282
  %284 = getelementptr inbounds i32, i32* %83, i64 %282
  %285 = load i32, i32* %284, align 4, !tbaa !33
  %286 = load i32, i32* %283, align 4, !tbaa !33
  %287 = add nsw i32 %286, %285
  store i32 %287, i32* %283, align 4, !tbaa !33
  %288 = add nsw i64 %240, 8
  %289 = icmp eq i64 %288, %44
  br i1 %289, label %357, label %239, !llvm.loop !918

; <label>:290:                                    ; preds = %290, %76
  %291 = phi i64 [ %74, %76 ], [ %355, %290 ]
  %292 = getelementptr inbounds i32, i32* %49, i64 %291
  %293 = getelementptr inbounds i32, i32* %50, i64 %291
  %294 = bitcast i32* %293 to <4 x i32>*
  %295 = load <4 x i32>, <4 x i32>* %294, align 16, !tbaa !11
  %296 = bitcast i32* %292 to <4 x i32>*
  %297 = load <4 x i32>, <4 x i32>* %296, align 16, !tbaa !11
  %298 = add <4 x i32> %297, %295
  store <4 x i32> %298, <4 x i32>* %296, align 16, !tbaa !11
  %299 = add nuw nsw i64 %291, 4
  %300 = getelementptr inbounds i32, i32* %49, i64 %299
  %301 = getelementptr inbounds i32, i32* %50, i64 %299
  %302 = bitcast i32* %301 to <4 x i32>*
  %303 = load <4 x i32>, <4 x i32>* %302, align 16, !tbaa !11
  %304 = bitcast i32* %300 to <4 x i32>*
  %305 = load <4 x i32>, <4 x i32>* %304, align 16, !tbaa !11
  %306 = add <4 x i32> %305, %303
  store <4 x i32> %306, <4 x i32>* %304, align 16, !tbaa !11
  %307 = add nsw i64 %291, 8
  %308 = getelementptr inbounds i32, i32* %49, i64 %307
  %309 = getelementptr inbounds i32, i32* %50, i64 %307
  %310 = bitcast i32* %309 to <4 x i32>*
  %311 = load <4 x i32>, <4 x i32>* %310, align 16, !tbaa !11
  %312 = bitcast i32* %308 to <4 x i32>*
  %313 = load <4 x i32>, <4 x i32>* %312, align 16, !tbaa !11
  %314 = add <4 x i32> %313, %311
  store <4 x i32> %314, <4 x i32>* %312, align 16, !tbaa !11
  %315 = add nsw i64 %291, 12
  %316 = getelementptr inbounds i32, i32* %49, i64 %315
  %317 = getelementptr inbounds i32, i32* %50, i64 %315
  %318 = bitcast i32* %317 to <4 x i32>*
  %319 = load <4 x i32>, <4 x i32>* %318, align 16, !tbaa !11
  %320 = bitcast i32* %316 to <4 x i32>*
  %321 = load <4 x i32>, <4 x i32>* %320, align 16, !tbaa !11
  %322 = add <4 x i32> %321, %319
  store <4 x i32> %322, <4 x i32>* %320, align 16, !tbaa !11
  %323 = add nsw i64 %291, 16
  %324 = getelementptr inbounds i32, i32* %49, i64 %323
  %325 = getelementptr inbounds i32, i32* %50, i64 %323
  %326 = bitcast i32* %325 to <4 x i32>*
  %327 = load <4 x i32>, <4 x i32>* %326, align 16, !tbaa !11
  %328 = bitcast i32* %324 to <4 x i32>*
  %329 = load <4 x i32>, <4 x i32>* %328, align 16, !tbaa !11
  %330 = add <4 x i32> %329, %327
  store <4 x i32> %330, <4 x i32>* %328, align 16, !tbaa !11
  %331 = add nsw i64 %291, 20
  %332 = getelementptr inbounds i32, i32* %49, i64 %331
  %333 = getelementptr inbounds i32, i32* %50, i64 %331
  %334 = bitcast i32* %333 to <4 x i32>*
  %335 = load <4 x i32>, <4 x i32>* %334, align 16, !tbaa !11
  %336 = bitcast i32* %332 to <4 x i32>*
  %337 = load <4 x i32>, <4 x i32>* %336, align 16, !tbaa !11
  %338 = add <4 x i32> %337, %335
  store <4 x i32> %338, <4 x i32>* %336, align 16, !tbaa !11
  %339 = add nsw i64 %291, 24
  %340 = getelementptr inbounds i32, i32* %49, i64 %339
  %341 = getelementptr inbounds i32, i32* %50, i64 %339
  %342 = bitcast i32* %341 to <4 x i32>*
  %343 = load <4 x i32>, <4 x i32>* %342, align 16, !tbaa !11
  %344 = bitcast i32* %340 to <4 x i32>*
  %345 = load <4 x i32>, <4 x i32>* %344, align 16, !tbaa !11
  %346 = add <4 x i32> %345, %343
  store <4 x i32> %346, <4 x i32>* %344, align 16, !tbaa !11
  %347 = add nsw i64 %291, 28
  %348 = getelementptr inbounds i32, i32* %49, i64 %347
  %349 = getelementptr inbounds i32, i32* %50, i64 %347
  %350 = bitcast i32* %349 to <4 x i32>*
  %351 = load <4 x i32>, <4 x i32>* %350, align 16, !tbaa !11
  %352 = bitcast i32* %348 to <4 x i32>*
  %353 = load <4 x i32>, <4 x i32>* %352, align 16, !tbaa !11
  %354 = add <4 x i32> %353, %351
  store <4 x i32> %354, <4 x i32>* %352, align 16, !tbaa !11
  %355 = add nsw i64 %291, 32
  %356 = icmp slt i64 %355, %46
  br i1 %356, label %290, label %77

; <label>:357:                                    ; preds = %239
  br label %358

; <label>:358:                                    ; preds = %235, %357
  br label %359

; <label>:359:                                    ; preds = %358, %213, %79
  %360 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %5, i64 0, i32 0, i32 0, i32 0
  %361 = load i32*, i32** %360, align 8, !tbaa !38
  %362 = icmp eq i32* %361, null
  br i1 %362, label %367, label %363

; <label>:363:                                    ; preds = %359
  %364 = getelementptr inbounds i32, i32* %361, i64 -2
  %365 = bitcast i32* %364 to i8**
  %366 = load i8*, i8** %365, align 8, !tbaa !29
  call void @free(i8* %366) #11
  br label %367

; <label>:367:                                    ; preds = %359, %363
  call void @llvm.lifetime.end(i64 16, i8* nonnull %6) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EENS_9TransposeINS8_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeESH_Li8EE6evalToINS8_IiLi47ELin1ELi0ELi47ELin1EEEEEvRT_RKSD_RKSG_(%"class.Eigen::Matrix.48"* dereferenceable(16), %"class.Eigen::CwiseBinaryOp.284"* dereferenceable(32), %"class.Eigen::Transpose.331"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.Eigen::Product.1342", align 8
  %5 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8, !tbaa !40
  %9 = add nsw i64 %8, 53
  %10 = icmp slt i64 %9, 20
  br i1 %10, label %11, label %26

; <label>:11:                                     ; preds = %3
  %12 = getelementptr inbounds %"class.Eigen::Product.1342", %"class.Eigen::Product.1342"* %4, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start(i64 40, i8* nonnull %12) #11
  %13 = getelementptr inbounds %"class.Eigen::Product.1342", %"class.Eigen::Product.1342"* %4, i64 0, i32 0, i32 1, i32 2, i32 0
  %14 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.284", %"class.Eigen::CwiseBinaryOp.284"* %1, i64 0, i32 1, i32 2, i32 0
  %15 = load i32, i32* %14, align 4, !tbaa !51, !noalias !919
  store i32 %15, i32* %13, align 4, !tbaa !51, !alias.scope !919
  %16 = getelementptr inbounds %"class.Eigen::Product.1342", %"class.Eigen::Product.1342"* %4, i64 0, i32 0, i32 3
  %17 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.284", %"class.Eigen::CwiseBinaryOp.284"* %1, i64 0, i32 3
  %18 = bitcast %"class.Eigen::Matrix.77"** %17 to i64*
  %19 = load i64, i64* %18, align 8, !tbaa !11, !noalias !919
  %20 = bitcast %"class.Eigen::Matrix.77"** %16 to i64*
  store i64 %19, i64* %20, align 8, !tbaa !11, !alias.scope !919
  %21 = getelementptr inbounds %"class.Eigen::Product.1342", %"class.Eigen::Product.1342"* %4, i64 0, i32 1
  %22 = bitcast %"class.Eigen::Transpose.331"* %2 to i64*
  %23 = load i64, i64* %22, align 8, !noalias !919
  %24 = bitcast %"class.Eigen::Transpose.331"* %21 to i64*
  store i64 %23, i64* %24, align 8, !alias.scope !919
  %25 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %5, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %25) #11
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS2_IiLi47ELi6ELi0ELi47ELi6EEEEESC_EENS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.48"* nonnull dereferenceable(16) %0, %"class.Eigen::Product.1342"* nonnull dereferenceable(40) %4, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %5) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %25) #11
  call void @llvm.lifetime.end(i64 40, i8* nonnull %12) #11
  br label %54

; <label>:26:                                     ; preds = %3
  %27 = icmp sgt i64 %8, -1
  br i1 %27, label %29, label %28, !prof !10

; <label>:28:                                     ; preds = %26
  tail call void @__assert_rtn(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__._ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEENS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEC2EllRKS3_, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.13, i64 0, i64 0), i32 74, i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.14, i64 0, i64 0)) #13, !noalias !922
  unreachable

; <label>:29:                                     ; preds = %26
  %30 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %0, i64 0, i32 0, i32 0, i32 0
  %31 = load i32*, i32** %30, align 8, !tbaa !38
  %32 = mul nsw i64 %8, 47
  %33 = sdiv i64 %32, 4
  %34 = shl nsw i64 %33, 2
  %35 = icmp sgt i64 %32, 3
  br i1 %35, label %36, label %44

; <label>:36:                                     ; preds = %29
  %37 = bitcast i32* %31 to i8*
  %38 = icmp sgt i64 %34, 4
  %39 = select i1 %38, i64 %34, i64 4
  %40 = add nuw i64 %39, 4611686018427387903
  %41 = lshr i64 %40, 2
  %42 = shl i64 %41, 4
  %43 = add i64 %42, 16
  tail call void @llvm.memset.p0i8.i64(i8* %37, i8 0, i64 %43, i32 16, i1 false) #11
  br label %44

; <label>:44:                                     ; preds = %36, %29
  %45 = icmp slt i64 %34, %32
  br i1 %45, label %46, label %52

; <label>:46:                                     ; preds = %44
  %47 = getelementptr i32, i32* %31, i64 %34
  %48 = bitcast i32* %47 to i8*
  %49 = mul i64 %8, 188
  %50 = shl i64 %33, 4
  %51 = sub i64 %49, %50
  tail call void @llvm.memset.p0i8.i64(i8* %48, i8 0, i64 %51, i32 4, i1 false) #11
  br label %52

; <label>:52:                                     ; preds = %44, %46
  %53 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start(i64 4, i8* nonnull %53) #11
  store i32 1, i32* %6, align 4, !tbaa !33
  call void @_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EENS_9TransposeINS8_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeESH_Li8EE13scaleAndAddToINS8_IiLi47ELin1ELi0ELi47ELin1EEEEEvRT_RKSD_RKSG_RKi(%"class.Eigen::Matrix.48"* nonnull dereferenceable(16) %0, %"class.Eigen::CwiseBinaryOp.284"* nonnull dereferenceable(32) %1, %"class.Eigen::Transpose.331"* nonnull dereferenceable(8) %2, i32* nonnull dereferenceable(4) %6)
  call void @llvm.lifetime.end(i64 4, i8* nonnull %53) #11
  br label %54

; <label>:54:                                     ; preds = %52, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EENS_9TransposeINS8_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeESH_Li8EE13scaleAndAddToINS8_IiLi47ELin1ELi0ELi47ELin1EEEEEvRT_RKSD_RKSG_RKi(%"class.Eigen::Matrix.48"* dereferenceable(16), %"class.Eigen::CwiseBinaryOp.284"* dereferenceable(32), %"class.Eigen::Transpose.331"* dereferenceable(8), i32* dereferenceable(4)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.Eigen::internal::gemm_blocking_space", align 8
  %6 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i64, i64* %6, align 8, !tbaa !40
  %8 = bitcast %"class.Eigen::Transpose.331"* %2 to %"class.Eigen::PlainObjectBase.124"**
  %9 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %8, align 8, !tbaa !11
  %10 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %9, i64 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8, !tbaa !43
  %12 = icmp eq i64 %7, %11
  br i1 %12, label %14, label %13, !prof !10

; <label>:13:                                     ; preds = %4
  tail call void @__assert_rtn(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__func__._ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EENS_9TransposeIKNS8_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeESI_Li8EE13scaleAndAddToINS8_IiLi47ELin1ELi0ELi47ELin1EEEEEvRT_RKSD_RKSH_RKi, i64 0, i64 0), i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.33, i64 0, i64 0), i32 460, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.34, i64 0, i64 0)) #13
  unreachable

; <label>:14:                                     ; preds = %4
  %15 = icmp eq i64 %7, 0
  br i1 %15, label %64, label %16

; <label>:16:                                     ; preds = %14
  %17 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.284", %"class.Eigen::CwiseBinaryOp.284"* %1, i64 0, i32 3
  %18 = bitcast %"class.Eigen::Matrix.77"** %17 to %"class.Eigen::PlainObjectBase.78"**
  %19 = load %"class.Eigen::PlainObjectBase.78"*, %"class.Eigen::PlainObjectBase.78"** %18, align 8, !tbaa !11
  %20 = load i32, i32* %3, align 4, !tbaa !33
  %21 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.284", %"class.Eigen::CwiseBinaryOp.284"* %1, i64 0, i32 1, i32 2, i32 0
  %22 = load i32, i32* %21, align 4, !tbaa !51
  %23 = mul nsw i32 %22, %20
  %24 = bitcast %"class.Eigen::internal::gemm_blocking_space"* %5 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %24) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %24, i8 0, i64 16, i32 8, i1 false) #11
  %25 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 0, i32 2
  store i64 47, i64* %25, align 8, !tbaa !460
  %26 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 0, i32 3
  store i64 %7, i64* %26, align 8, !tbaa !461
  %27 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 0, i32 4
  store i64 6, i64* %27, align 8, !tbaa !193
  call void @_ZN5Eigen8internal37evaluateProductBlockingSizesHeuristicIiiLi1ElEEvRT2_S3_S3_S2_(i64* nonnull dereferenceable(8) %27, i64* nonnull dereferenceable(8) %25, i64* nonnull dereferenceable(8) %26, i64 1) #11
  %28 = load i64, i64* %25, align 8, !tbaa !460
  %29 = load i64, i64* %27, align 8, !tbaa !193
  %30 = mul nsw i64 %29, %28
  %31 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 1
  store i64 %30, i64* %31, align 8, !tbaa !462
  %32 = load i64, i64* %26, align 8, !tbaa !461
  %33 = mul nsw i64 %32, %29
  %34 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 2
  store i64 %33, i64* %34, align 8, !tbaa !464
  %35 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %8, align 8, !tbaa !11
  %36 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %35, i64 0, i32 0, i32 1
  %37 = load i64, i64* %36, align 8, !tbaa !43
  %38 = icmp eq i64 %37, -1
  %39 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %9, i64 0, i32 0, i32 1
  %40 = load i64, i64* %39, align 8, !tbaa !43
  %41 = select i1 %38, i64 %40, i64 %37
  %42 = getelementptr inbounds %"class.Eigen::PlainObjectBase.78", %"class.Eigen::PlainObjectBase.78"* %19, i64 0, i32 0, i32 0, i32 0, i64 0
  %43 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %9, i64 0, i32 0, i32 0
  %44 = load i32*, i32** %43, align 8, !tbaa !41
  %45 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %0, i64 0, i32 0, i32 0, i32 0
  %46 = load i32*, i32** %45, align 8, !tbaa !38
  %47 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 0
  call void @_ZN5Eigen8internal29general_matrix_matrix_productIliLi0ELb0EiLi1ELb0ELi0EE3runElllPKilS4_lPiliRNS0_15level3_blockingIiiEEPNS0_16GemmParallelInfoIlEE(i64 47, i64 %41, i64 6, i32* nonnull %42, i64 47, i32* nonnull %44, i64 %40, i32* nonnull %46, i64 47, i32 %23, %"class.Eigen::internal::level3_blocking"* nonnull dereferenceable(40) %47, %"struct.Eigen::internal::GemmParallelInfo"* null) #11
  %48 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 0, i32 0
  %49 = load i32*, i32** %48, align 8, !tbaa !195
  %50 = icmp eq i32* %49, null
  br i1 %50, label %55, label %51

; <label>:51:                                     ; preds = %16
  %52 = getelementptr inbounds i32, i32* %49, i64 -2
  %53 = bitcast i32* %52 to i8**
  %54 = load i8*, i8** %53, align 8, !tbaa !29
  call void @free(i8* %54) #11
  br label %55

; <label>:55:                                     ; preds = %51, %16
  %56 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 0, i32 1
  %57 = load i32*, i32** %56, align 8, !tbaa !196
  %58 = icmp eq i32* %57, null
  br i1 %58, label %63, label %59

; <label>:59:                                     ; preds = %55
  %60 = getelementptr inbounds i32, i32* %57, i64 -2
  %61 = bitcast i32* %60 to i8**
  %62 = load i8*, i8** %61, align 8, !tbaa !29
  call void @free(i8* %62) #11
  br label %63

; <label>:63:                                     ; preds = %55, %59
  call void @llvm.lifetime.end(i64 56, i8* nonnull %24) #11
  br label %64

; <label>:64:                                     ; preds = %14, %63
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS2_IiLi47ELi6ELi0ELi47ELi6EEEEESC_EENS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.48"* dereferenceable(16), %"class.Eigen::Product.1342"* dereferenceable(40), %"struct.Eigen::internal::assign_op.512"* dereferenceable(1)) local_unnamed_addr #6 {
  %4 = alloca %"struct.Eigen::internal::evaluator.1349", align 8
  %5 = alloca %"struct.Eigen::internal::evaluator.529", align 8
  %6 = alloca %"class.Eigen::internal::generic_dense_assignment_kernel.1352", align 8
  %7 = bitcast %"struct.Eigen::internal::evaluator.1349"* %4 to i8*
  call void @llvm.lifetime.start(i64 1184, i8* nonnull %7) #11
  %8 = getelementptr inbounds %"class.Eigen::Product.1342", %"class.Eigen::Product.1342"* %1, i64 0, i32 0, i32 1, i32 2, i32 0
  %9 = load i32, i32* %8, align 4, !tbaa !51
  %10 = getelementptr inbounds %"class.Eigen::Product.1342", %"class.Eigen::Product.1342"* %1, i64 0, i32 0, i32 3
  %11 = load %"class.Eigen::Matrix.77"*, %"class.Eigen::Matrix.77"** %10, align 8, !tbaa !11
  %12 = ptrtoint %"struct.Eigen::internal::evaluator.1349"* %4 to i64
  %13 = lshr exact i64 %12, 2
  %14 = sub nsw i64 0, %13
  %15 = and i64 %14, 2
  %16 = or i64 %15, 280
  %17 = icmp eq i64 %15, 0
  br i1 %17, label %25, label %18

; <label>:18:                                     ; preds = %3
  br label %19

; <label>:19:                                     ; preds = %18
  %20 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1349", %"struct.Eigen::internal::evaluator.1349"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %21 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %22 = load i32, i32* %21, align 4, !tbaa !33
  %23 = mul nsw i32 %22, %9
  store i32 %23, i32* %20, align 8, !tbaa !33
  br i1 false, label %24, label %243

; <label>:24:                                     ; preds = %243, %19
  br label %25

; <label>:25:                                     ; preds = %24, %3
  %26 = phi i64 [ 0, %3 ], [ %15, %24 ]
  %27 = insertelement <4 x i32> undef, i32 %9, i32 0
  %28 = shufflevector <4 x i32> %27, <4 x i32> undef, <4 x i32> zeroinitializer
  %29 = add nuw nsw i64 %16, 31
  %30 = sub nsw i64 %29, %26
  %31 = lshr i64 %30, 2
  %32 = add nuw nsw i64 %31, 1
  %33 = and i64 %32, 7
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %49, label %35

; <label>:35:                                     ; preds = %25
  br label %36

; <label>:36:                                     ; preds = %36, %35
  %37 = phi i64 [ %26, %35 ], [ %45, %36 ]
  %38 = phi i64 [ %33, %35 ], [ %46, %36 ]
  %39 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1349", %"struct.Eigen::internal::evaluator.1349"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %37
  %40 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %37
  %41 = bitcast i32* %40 to <4 x i32>*
  %42 = load <4 x i32>, <4 x i32>* %41, align 1, !tbaa !11
  %43 = mul <4 x i32> %42, %28
  %44 = bitcast i32* %39 to <4 x i32>*
  store <4 x i32> %43, <4 x i32>* %44, align 16, !tbaa !11
  %45 = add nuw nsw i64 %37, 4
  %46 = add i64 %38, -1
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %36, !llvm.loop !927

; <label>:48:                                     ; preds = %36
  br label %49

; <label>:49:                                     ; preds = %25, %48
  %50 = phi i64 [ %26, %25 ], [ %45, %48 ]
  br i1 false, label %53, label %51

; <label>:51:                                     ; preds = %49
  br label %119

; <label>:52:                                     ; preds = %119
  br label %53

; <label>:53:                                     ; preds = %49, %52
  %54 = icmp eq i64 %16, 282
  br i1 %54, label %180, label %55

; <label>:55:                                     ; preds = %53
  %56 = sub nsw i64 282, %15
  %57 = sub nsw i64 281, %16
  %58 = and i64 %56, 2
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %72, label %60

; <label>:60:                                     ; preds = %55
  br label %61

; <label>:61:                                     ; preds = %61, %60
  %62 = phi i64 [ %68, %61 ], [ %16, %60 ]
  %63 = phi i64 [ %69, %61 ], [ %58, %60 ]
  %64 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1349", %"struct.Eigen::internal::evaluator.1349"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %62
  %65 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %62
  %66 = load i32, i32* %65, align 4, !tbaa !33
  %67 = mul nsw i32 %66, %9
  store i32 %67, i32* %64, align 4, !tbaa !33
  %68 = add nsw i64 %62, 1
  %69 = add i64 %63, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %61, !llvm.loop !928

; <label>:71:                                     ; preds = %61
  br label %72

; <label>:72:                                     ; preds = %55, %71
  %73 = phi i64 [ %16, %55 ], [ %68, %71 ]
  %74 = icmp ult i64 %57, 7
  br i1 %74, label %179, label %75

; <label>:75:                                     ; preds = %72
  br label %76

; <label>:76:                                     ; preds = %76, %75
  %77 = phi i64 [ %73, %75 ], [ %117, %76 ]
  %78 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1349", %"struct.Eigen::internal::evaluator.1349"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %77
  %79 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %77
  %80 = load i32, i32* %79, align 4, !tbaa !33
  %81 = mul nsw i32 %80, %9
  store i32 %81, i32* %78, align 4, !tbaa !33
  %82 = add nsw i64 %77, 1
  %83 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1349", %"struct.Eigen::internal::evaluator.1349"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %82
  %84 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %82
  %85 = load i32, i32* %84, align 4, !tbaa !33
  %86 = mul nsw i32 %85, %9
  store i32 %86, i32* %83, align 4, !tbaa !33
  %87 = add nsw i64 %77, 2
  %88 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1349", %"struct.Eigen::internal::evaluator.1349"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %87
  %89 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %87
  %90 = load i32, i32* %89, align 4, !tbaa !33
  %91 = mul nsw i32 %90, %9
  store i32 %91, i32* %88, align 4, !tbaa !33
  %92 = add nsw i64 %77, 3
  %93 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1349", %"struct.Eigen::internal::evaluator.1349"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %92
  %94 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %92
  %95 = load i32, i32* %94, align 4, !tbaa !33
  %96 = mul nsw i32 %95, %9
  store i32 %96, i32* %93, align 4, !tbaa !33
  %97 = add nsw i64 %77, 4
  %98 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1349", %"struct.Eigen::internal::evaluator.1349"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %97
  %99 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %97
  %100 = load i32, i32* %99, align 4, !tbaa !33
  %101 = mul nsw i32 %100, %9
  store i32 %101, i32* %98, align 4, !tbaa !33
  %102 = add nsw i64 %77, 5
  %103 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1349", %"struct.Eigen::internal::evaluator.1349"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %102
  %104 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %102
  %105 = load i32, i32* %104, align 4, !tbaa !33
  %106 = mul nsw i32 %105, %9
  store i32 %106, i32* %103, align 4, !tbaa !33
  %107 = add nsw i64 %77, 6
  %108 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1349", %"struct.Eigen::internal::evaluator.1349"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %107
  %109 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %107
  %110 = load i32, i32* %109, align 4, !tbaa !33
  %111 = mul nsw i32 %110, %9
  store i32 %111, i32* %108, align 4, !tbaa !33
  %112 = add nsw i64 %77, 7
  %113 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1349", %"struct.Eigen::internal::evaluator.1349"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %112
  %114 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %112
  %115 = load i32, i32* %114, align 4, !tbaa !33
  %116 = mul nsw i32 %115, %9
  store i32 %116, i32* %113, align 4, !tbaa !33
  %117 = add nsw i64 %77, 8
  %118 = icmp eq i64 %117, 282
  br i1 %118, label %178, label %76, !llvm.loop !929

; <label>:119:                                    ; preds = %119, %51
  %120 = phi i64 [ %50, %51 ], [ %176, %119 ]
  %121 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1349", %"struct.Eigen::internal::evaluator.1349"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %120
  %122 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %120
  %123 = bitcast i32* %122 to <4 x i32>*
  %124 = load <4 x i32>, <4 x i32>* %123, align 1, !tbaa !11
  %125 = mul <4 x i32> %124, %28
  %126 = bitcast i32* %121 to <4 x i32>*
  store <4 x i32> %125, <4 x i32>* %126, align 16, !tbaa !11
  %127 = add nuw nsw i64 %120, 4
  %128 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1349", %"struct.Eigen::internal::evaluator.1349"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %127
  %129 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %127
  %130 = bitcast i32* %129 to <4 x i32>*
  %131 = load <4 x i32>, <4 x i32>* %130, align 1, !tbaa !11
  %132 = mul <4 x i32> %131, %28
  %133 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> %132, <4 x i32>* %133, align 16, !tbaa !11
  %134 = add nsw i64 %120, 8
  %135 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1349", %"struct.Eigen::internal::evaluator.1349"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %134
  %136 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %134
  %137 = bitcast i32* %136 to <4 x i32>*
  %138 = load <4 x i32>, <4 x i32>* %137, align 1, !tbaa !11
  %139 = mul <4 x i32> %138, %28
  %140 = bitcast i32* %135 to <4 x i32>*
  store <4 x i32> %139, <4 x i32>* %140, align 16, !tbaa !11
  %141 = add nsw i64 %120, 12
  %142 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1349", %"struct.Eigen::internal::evaluator.1349"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %141
  %143 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %141
  %144 = bitcast i32* %143 to <4 x i32>*
  %145 = load <4 x i32>, <4 x i32>* %144, align 1, !tbaa !11
  %146 = mul <4 x i32> %145, %28
  %147 = bitcast i32* %142 to <4 x i32>*
  store <4 x i32> %146, <4 x i32>* %147, align 16, !tbaa !11
  %148 = add nsw i64 %120, 16
  %149 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1349", %"struct.Eigen::internal::evaluator.1349"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %148
  %150 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %148
  %151 = bitcast i32* %150 to <4 x i32>*
  %152 = load <4 x i32>, <4 x i32>* %151, align 1, !tbaa !11
  %153 = mul <4 x i32> %152, %28
  %154 = bitcast i32* %149 to <4 x i32>*
  store <4 x i32> %153, <4 x i32>* %154, align 16, !tbaa !11
  %155 = add nsw i64 %120, 20
  %156 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1349", %"struct.Eigen::internal::evaluator.1349"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %155
  %157 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %155
  %158 = bitcast i32* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 1, !tbaa !11
  %160 = mul <4 x i32> %159, %28
  %161 = bitcast i32* %156 to <4 x i32>*
  store <4 x i32> %160, <4 x i32>* %161, align 16, !tbaa !11
  %162 = add nsw i64 %120, 24
  %163 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1349", %"struct.Eigen::internal::evaluator.1349"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %162
  %164 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %162
  %165 = bitcast i32* %164 to <4 x i32>*
  %166 = load <4 x i32>, <4 x i32>* %165, align 1, !tbaa !11
  %167 = mul <4 x i32> %166, %28
  %168 = bitcast i32* %163 to <4 x i32>*
  store <4 x i32> %167, <4 x i32>* %168, align 16, !tbaa !11
  %169 = add nsw i64 %120, 28
  %170 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1349", %"struct.Eigen::internal::evaluator.1349"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %169
  %171 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %169
  %172 = bitcast i32* %171 to <4 x i32>*
  %173 = load <4 x i32>, <4 x i32>* %172, align 1, !tbaa !11
  %174 = mul <4 x i32> %173, %28
  %175 = bitcast i32* %170 to <4 x i32>*
  store <4 x i32> %174, <4 x i32>* %175, align 16, !tbaa !11
  %176 = add nsw i64 %120, 32
  %177 = icmp slt i64 %176, %16
  br i1 %177, label %119, label %52

; <label>:178:                                    ; preds = %76
  br label %179

; <label>:179:                                    ; preds = %72, %178
  br label %180

; <label>:180:                                    ; preds = %179, %53
  %181 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1349", %"struct.Eigen::internal::evaluator.1349"* %4, i64 0, i32 0, i32 1
  %182 = getelementptr inbounds %"class.Eigen::Product.1342", %"class.Eigen::Product.1342"* %1, i64 0, i32 1
  %183 = bitcast %"class.Eigen::Transpose.331"* %182 to i64*
  %184 = load i64, i64* %183, align 8
  %185 = bitcast %"class.Eigen::Transpose.331"* %181 to i64*
  store i64 %184, i64* %185, align 8
  %186 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1349", %"struct.Eigen::internal::evaluator.1349"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %187 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1349", %"struct.Eigen::internal::evaluator.1349"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0
  store i32* %187, i32** %186, align 8, !tbaa !94
  %188 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1349", %"struct.Eigen::internal::evaluator.1349"* %4, i64 0, i32 0, i32 3, i32 0, i32 1
  %189 = inttoptr i64 %184 to %"class.Eigen::Matrix.123"*
  %190 = inttoptr i64 %184 to i64*
  %191 = load i64, i64* %190, align 8, !tbaa !41
  %192 = bitcast %"struct.Eigen::internal::evaluator.569"* %188 to i64*
  store i64 %191, i64* %192, align 8, !tbaa !468
  %193 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %189, i64 0, i32 0, i32 0, i32 1
  %194 = load i64, i64* %193, align 8, !tbaa !43
  %195 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1349", %"struct.Eigen::internal::evaluator.1349"* %4, i64 0, i32 0, i32 3, i32 0, i32 1, i32 0, i32 1, i32 0
  store i64 %194, i64* %195, align 8, !tbaa !59
  %196 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1349", %"struct.Eigen::internal::evaluator.1349"* %4, i64 0, i32 0, i32 4
  store i64 6, i64* %196, align 8, !tbaa !930
  %197 = inttoptr i64 %184 to %"class.Eigen::PlainObjectBase.124"*
  %198 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %197, i64 0, i32 0, i32 1
  %199 = load i64, i64* %198, align 8, !tbaa !43
  %200 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %0, i64 0, i32 0, i32 0, i32 1
  %201 = load i64, i64* %200, align 8, !tbaa !40
  %202 = icmp eq i64 %201, %199
  br i1 %202, label %203, label %206

; <label>:203:                                    ; preds = %180
  %204 = bitcast %"class.Eigen::Matrix.48"* %0 to i64*
  %205 = load i64, i64* %204, align 8, !tbaa !38
  br label %234

; <label>:206:                                    ; preds = %180
  %207 = icmp sgt i64 %199, -1
  br i1 %207, label %209, label %208, !prof !10

; <label>:208:                                    ; preds = %206
  call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:209:                                    ; preds = %206
  %210 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %0, i64 0, i32 0, i32 0, i32 0
  %211 = load i32*, i32** %210, align 8, !tbaa !38
  %212 = icmp eq i32* %211, null
  br i1 %212, label %217, label %213

; <label>:213:                                    ; preds = %209
  %214 = getelementptr inbounds i32, i32* %211, i64 -2
  %215 = bitcast i32* %214 to i8**
  %216 = load i8*, i8** %215, align 8, !tbaa !29
  call void @free(i8* %216) #11
  br label %217

; <label>:217:                                    ; preds = %213, %209
  %218 = icmp eq i64 %199, 0
  br i1 %218, label %231, label %219

; <label>:219:                                    ; preds = %217
  %220 = mul i64 %199, 188
  %221 = add i64 %220, 32
  %222 = call i8* @malloc(i64 %221) #14
  %223 = icmp eq i8* %222, null
  br i1 %223, label %231, label %224

; <label>:224:                                    ; preds = %219
  %225 = ptrtoint i8* %222 to i64
  %226 = add i64 %225, 32
  %227 = and i64 %226, -32
  %228 = inttoptr i64 %227 to i8**
  %229 = getelementptr inbounds i8*, i8** %228, i64 -1
  store i8* %222, i8** %229, align 8, !tbaa !29
  %230 = inttoptr i64 %227 to i32*
  br label %231

; <label>:231:                                    ; preds = %217, %219, %224
  %232 = phi i32* [ %230, %224 ], [ null, %219 ], [ null, %217 ]
  store i32* %232, i32** %210, align 8, !tbaa !38
  store i64 %199, i64* %200, align 8, !tbaa !40
  %233 = ptrtoint i32* %232 to i64
  br label %234

; <label>:234:                                    ; preds = %203, %231
  %235 = phi i64 [ %205, %203 ], [ %233, %231 ]
  %236 = bitcast %"struct.Eigen::internal::evaluator.529"* %5 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %236) #11
  %237 = bitcast %"struct.Eigen::internal::evaluator.529"* %5 to i64*
  store i64 %235, i64* %237, align 8, !tbaa !475
  %238 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1352"* %6 to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %238) #11
  %239 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1352", %"class.Eigen::internal::generic_dense_assignment_kernel.1352"* %6, i64 0, i32 0
  store %"struct.Eigen::internal::evaluator.529"* %5, %"struct.Eigen::internal::evaluator.529"** %239, align 8, !tbaa !11
  %240 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1352", %"class.Eigen::internal::generic_dense_assignment_kernel.1352"* %6, i64 0, i32 1
  store %"struct.Eigen::internal::evaluator.1349"* %4, %"struct.Eigen::internal::evaluator.1349"** %240, align 8, !tbaa !11
  %241 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1352", %"class.Eigen::internal::generic_dense_assignment_kernel.1352"* %6, i64 0, i32 2
  store %"struct.Eigen::internal::assign_op.512"* %2, %"struct.Eigen::internal::assign_op.512"** %241, align 8, !tbaa !11
  %242 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1352", %"class.Eigen::internal::generic_dense_assignment_kernel.1352"* %6, i64 0, i32 3
  store %"class.Eigen::Matrix.48"* %0, %"class.Eigen::Matrix.48"** %242, align 8, !tbaa !11
  call void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS4_IiLi47ELi6ELi0ELi47ELi6EEEEESF_EENS_9TransposeINS4_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEEEENS0_9assign_opIiiEELi0EEELi4ELi0EE3runERSQ_(%"class.Eigen::internal::generic_dense_assignment_kernel.1352"* nonnull dereferenceable(32) %6)
  call void @llvm.lifetime.end(i64 32, i8* nonnull %238) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %236) #11
  call void @llvm.lifetime.end(i64 1184, i8* nonnull %7) #11
  ret void

; <label>:243:                                    ; preds = %19
  %244 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1349", %"struct.Eigen::internal::evaluator.1349"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %245 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %246 = load i32, i32* %245, align 4, !tbaa !33
  %247 = mul nsw i32 %246, %9
  store i32 %247, i32* %244, align 4, !tbaa !33
  br label %24
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS4_IiLi47ELi6ELi0ELi47ELi6EEEEESF_EENS_9TransposeINS4_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEEEENS0_9assign_opIiiEELi0EEELi4ELi0EE3runERSQ_(%"class.Eigen::internal::generic_dense_assignment_kernel.1352"* dereferenceable(32)) local_unnamed_addr #6 align 2 {
  %2 = alloca %"struct.Eigen::internal::scalar_sum_op", align 1
  %3 = alloca %"class.Eigen::CwiseBinaryOp.1353", align 8
  %4 = alloca %"struct.Eigen::internal::scalar_sum_op", align 1
  %5 = alloca %"class.Eigen::CwiseBinaryOp.1353", align 8
  %6 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1352", %"class.Eigen::internal::generic_dense_assignment_kernel.1352"* %0, i64 0, i32 3
  %7 = bitcast %"class.Eigen::Matrix.48"** %6 to %"class.Eigen::DenseBase.51"**
  %8 = load %"class.Eigen::DenseBase.51"*, %"class.Eigen::DenseBase.51"** %7, align 8, !tbaa !11
  %9 = getelementptr inbounds %"class.Eigen::DenseBase.51", %"class.Eigen::DenseBase.51"* %8, i64 8
  %10 = bitcast %"class.Eigen::DenseBase.51"* %9 to i64*
  %11 = load i64, i64* %10, align 8, !tbaa !40
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %50

; <label>:13:                                     ; preds = %1
  %14 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1352"* %0 to %"struct.Eigen::internal::evaluator.530"**
  %15 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1352", %"class.Eigen::internal::generic_dense_assignment_kernel.1352"* %0, i64 0, i32 1
  %16 = bitcast %"struct.Eigen::internal::evaluator.1349"** %15 to %"struct.Eigen::internal::product_evaluator.1350"**
  %17 = bitcast %"class.Eigen::CwiseBinaryOp.1353"* %3 to i8*
  %18 = bitcast %"class.Eigen::CwiseBinaryOp.1353"* %3 to i64*
  %19 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %20 = bitcast %"class.Eigen::Matrix.77"** %19 to %"struct.Eigen::internal::product_evaluator.1350"**
  %21 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  %22 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 0
  %23 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %3, i64 0, i32 1
  %24 = bitcast %"class.Eigen::Block.1189"* %23 to i64*
  %25 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %3, i64 0, i32 1, i32 0, i32 0, i32 1
  %26 = bitcast %"class.Eigen::Transpose.331"* %25 to i64*
  %27 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %3, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0
  %28 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %3, i64 0, i32 1, i32 0, i32 0, i32 3, i32 0
  %29 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %3, i64 0, i32 1, i32 0, i32 0, i32 4
  %30 = bitcast %"class.Eigen::CwiseBinaryOp.1353"* %3 to %"class.Eigen::DenseBase.1356"*
  %31 = getelementptr inbounds %"struct.Eigen::internal::scalar_sum_op", %"struct.Eigen::internal::scalar_sum_op"* %2, i64 0, i32 0
  %32 = bitcast %"class.Eigen::CwiseBinaryOp.1353"* %5 to i8*
  %33 = bitcast %"class.Eigen::CwiseBinaryOp.1353"* %5 to i64*
  %34 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %35 = bitcast %"class.Eigen::Matrix.77"** %34 to %"struct.Eigen::internal::product_evaluator.1350"**
  %36 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  %37 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 0
  %38 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %5, i64 0, i32 1
  %39 = bitcast %"class.Eigen::Block.1189"* %38 to i64*
  %40 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %5, i64 0, i32 1, i32 0, i32 0, i32 1
  %41 = bitcast %"class.Eigen::Transpose.331"* %40 to i64*
  %42 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %5, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0
  %43 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %5, i64 0, i32 1, i32 0, i32 0, i32 3, i32 0
  %44 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %5, i64 0, i32 1, i32 0, i32 0, i32 4
  %45 = bitcast %"class.Eigen::CwiseBinaryOp.1353"* %5 to %"class.Eigen::DenseBase.1356"*
  %46 = getelementptr inbounds %"struct.Eigen::internal::scalar_sum_op", %"struct.Eigen::internal::scalar_sum_op"* %4, i64 0, i32 0
  %47 = bitcast i64* %22 to <2 x i64>*
  %48 = bitcast i64* %37 to <2 x i64>*
  br label %51

; <label>:49:                                     ; preds = %199
  br label %50

; <label>:50:                                     ; preds = %49, %1
  ret void

; <label>:51:                                     ; preds = %13, %199
  %52 = phi i64 [ 0, %13 ], [ %201, %199 ]
  %53 = phi i64 [ 0, %13 ], [ %202, %199 ]
  %54 = sub nsw i64 47, %52
  %55 = and i64 %54, -4
  %56 = add nsw i64 %55, %52
  %57 = icmp sgt i64 %52, 0
  br i1 %57, label %58, label %85

; <label>:58:                                     ; preds = %51
  %59 = mul nsw i64 %53, 47
  br label %60

; <label>:60:                                     ; preds = %71, %58
  %61 = phi i64 [ %82, %71 ], [ 0, %58 ]
  %62 = load %"struct.Eigen::internal::evaluator.530"*, %"struct.Eigen::internal::evaluator.530"** %14, align 8, !tbaa !11
  %63 = getelementptr inbounds %"struct.Eigen::internal::evaluator.530", %"struct.Eigen::internal::evaluator.530"* %62, i64 0, i32 0
  %64 = load i32*, i32** %63, align 8, !tbaa !475
  %65 = load %"struct.Eigen::internal::product_evaluator.1350"*, %"struct.Eigen::internal::product_evaluator.1350"** %16, align 8, !tbaa !11
  call void @llvm.lifetime.start(i64 104, i8* nonnull %17) #11
  %66 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1350", %"struct.Eigen::internal::product_evaluator.1350"* %65, i64 0, i32 1, i32 0
  %67 = load %"class.Eigen::Matrix.123"*, %"class.Eigen::Matrix.123"** %66, align 8, !tbaa !11, !noalias !932
  %68 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %67, i64 0, i32 0, i32 0, i32 1
  %69 = load i64, i64* %68, align 8, !tbaa !43, !noalias !932
  %70 = icmp sgt i64 %69, %53
  br i1 %70, label %71, label %89, !prof !10

; <label>:71:                                     ; preds = %60
  %72 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1350", %"struct.Eigen::internal::product_evaluator.1350"* %65, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %61
  %73 = ptrtoint i32* %72 to i64
  %74 = add nsw i64 %61, %59
  %75 = getelementptr inbounds i32, i32* %64, i64 %74
  %76 = ptrtoint %"class.Eigen::Matrix.123"* %67 to i64
  %77 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %67, i64 0, i32 0, i32 0, i32 0
  %78 = load i32*, i32** %77, align 8, !tbaa !41, !noalias !932
  %79 = getelementptr inbounds i32, i32* %78, i64 %53
  %80 = ptrtoint i32* %79 to i64
  store i64 %73, i64* %18, align 8, !tbaa !480, !alias.scope !935
  store %"struct.Eigen::internal::product_evaluator.1350"* %65, %"struct.Eigen::internal::product_evaluator.1350"** %20, align 8
  store i64 %61, i64* %21, align 8
  store <2 x i64> <i64 0, i64 1>, <2 x i64>* %47, align 8
  store i64 %80, i64* %24, align 8, !tbaa !863, !alias.scope !935
  store i64 %76, i64* %26, align 8
  store i64 0, i64* %27, align 8
  store i64 %53, i64* %28, align 8
  store i64 1, i64* %29, align 8
  call void @llvm.lifetime.start(i64 1, i8* nonnull %31) #11
  %81 = call i32 @_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0EEEEEKNS6_IKNS5_INS7_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIiiEEEEiRKT_(%"class.Eigen::DenseBase.1356"* nonnull %30, %"struct.Eigen::internal::scalar_sum_op"* nonnull dereferenceable(1) %2) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %31) #11
  call void @llvm.lifetime.end(i64 104, i8* nonnull %17) #11
  store i32 %81, i32* %75, align 4, !tbaa !33
  %82 = add nuw nsw i64 %61, 1
  %83 = icmp slt i64 %82, %52
  br i1 %83, label %60, label %84

; <label>:84:                                     ; preds = %71
  br label %85

; <label>:85:                                     ; preds = %84, %51
  %86 = icmp sgt i64 %55, 0
  br i1 %86, label %87, label %91

; <label>:87:                                     ; preds = %85
  %88 = mul nsw i64 %53, 47
  br label %119

; <label>:89:                                     ; preds = %60
  call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !932
  unreachable

; <label>:90:                                     ; preds = %119
  br label %91

; <label>:91:                                     ; preds = %90, %85
  %92 = icmp slt i64 %56, 47
  br i1 %92, label %93, label %199

; <label>:93:                                     ; preds = %91
  %94 = mul nsw i64 %53, 47
  br label %95

; <label>:95:                                     ; preds = %106, %93
  %96 = phi i64 [ %117, %106 ], [ %56, %93 ]
  %97 = load %"struct.Eigen::internal::evaluator.530"*, %"struct.Eigen::internal::evaluator.530"** %14, align 8, !tbaa !11
  %98 = getelementptr inbounds %"struct.Eigen::internal::evaluator.530", %"struct.Eigen::internal::evaluator.530"* %97, i64 0, i32 0
  %99 = load i32*, i32** %98, align 8, !tbaa !475
  %100 = load %"struct.Eigen::internal::product_evaluator.1350"*, %"struct.Eigen::internal::product_evaluator.1350"** %16, align 8, !tbaa !11
  call void @llvm.lifetime.start(i64 104, i8* nonnull %32) #11
  %101 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1350", %"struct.Eigen::internal::product_evaluator.1350"* %100, i64 0, i32 1, i32 0
  %102 = load %"class.Eigen::Matrix.123"*, %"class.Eigen::Matrix.123"** %101, align 8, !tbaa !11, !noalias !938
  %103 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %102, i64 0, i32 0, i32 0, i32 1
  %104 = load i64, i64* %103, align 8, !tbaa !43, !noalias !938
  %105 = icmp sgt i64 %104, %53
  br i1 %105, label %106, label %204, !prof !10

; <label>:106:                                    ; preds = %95
  %107 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1350", %"struct.Eigen::internal::product_evaluator.1350"* %100, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 %96
  %108 = ptrtoint i32* %107 to i64
  %109 = add nsw i64 %96, %94
  %110 = getelementptr inbounds i32, i32* %99, i64 %109
  %111 = ptrtoint %"class.Eigen::Matrix.123"* %102 to i64
  %112 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %102, i64 0, i32 0, i32 0, i32 0
  %113 = load i32*, i32** %112, align 8, !tbaa !41, !noalias !938
  %114 = getelementptr inbounds i32, i32* %113, i64 %53
  %115 = ptrtoint i32* %114 to i64
  store i64 %108, i64* %33, align 8, !tbaa !480, !alias.scope !941
  store %"struct.Eigen::internal::product_evaluator.1350"* %100, %"struct.Eigen::internal::product_evaluator.1350"** %35, align 8
  store i64 %96, i64* %36, align 8
  store <2 x i64> <i64 0, i64 1>, <2 x i64>* %48, align 8
  store i64 %115, i64* %39, align 8, !tbaa !863, !alias.scope !941
  store i64 %111, i64* %41, align 8
  store i64 0, i64* %42, align 8
  store i64 %53, i64* %43, align 8
  store i64 1, i64* %44, align 8
  call void @llvm.lifetime.start(i64 1, i8* nonnull %46) #11
  %116 = call i32 @_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0EEEEEKNS6_IKNS5_INS7_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIiiEEEEiRKT_(%"class.Eigen::DenseBase.1356"* nonnull %45, %"struct.Eigen::internal::scalar_sum_op"* nonnull dereferenceable(1) %4) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %46) #11
  call void @llvm.lifetime.end(i64 104, i8* nonnull %32) #11
  store i32 %116, i32* %110, align 4, !tbaa !33
  %117 = add nsw i64 %96, 1
  %118 = icmp slt i64 %117, 47
  br i1 %118, label %95, label %198

; <label>:119:                                    ; preds = %87, %119
  %120 = phi i64 [ %52, %87 ], [ %196, %119 ]
  %121 = load %"struct.Eigen::internal::evaluator.530"*, %"struct.Eigen::internal::evaluator.530"** %14, align 8, !tbaa !11
  %122 = getelementptr inbounds %"struct.Eigen::internal::evaluator.530", %"struct.Eigen::internal::evaluator.530"* %121, i64 0, i32 0
  %123 = load i32*, i32** %122, align 8, !tbaa !475
  %124 = add nsw i64 %120, %88
  %125 = getelementptr inbounds i32, i32* %123, i64 %124
  %126 = load %"struct.Eigen::internal::product_evaluator.1350"*, %"struct.Eigen::internal::product_evaluator.1350"** %16, align 8, !tbaa !11
  %127 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1350", %"struct.Eigen::internal::product_evaluator.1350"* %126, i64 0, i32 2, i32 0, i32 0
  %128 = load i32*, i32** %127, align 8, !tbaa !94
  %129 = getelementptr inbounds i32, i32* %128, i64 %120
  %130 = bitcast i32* %129 to <4 x i32>*
  %131 = load <4 x i32>, <4 x i32>* %130, align 1, !tbaa !11
  %132 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1350", %"struct.Eigen::internal::product_evaluator.1350"* %126, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %133 = load i32*, i32** %132, align 8, !tbaa !468
  %134 = getelementptr inbounds i32, i32* %133, i64 %53
  %135 = load i32, i32* %134, align 4, !tbaa !33
  %136 = insertelement <4 x i32> undef, i32 %135, i32 0
  %137 = shufflevector <4 x i32> %136, <4 x i32> undef, <4 x i32> zeroinitializer
  %138 = mul <4 x i32> %137, %131
  %139 = getelementptr inbounds i32, i32* %129, i64 47
  %140 = bitcast i32* %139 to <4 x i32>*
  %141 = load <4 x i32>, <4 x i32>* %140, align 1, !tbaa !11
  %142 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1350", %"struct.Eigen::internal::product_evaluator.1350"* %126, i64 0, i32 3, i32 0, i32 1, i32 0, i32 1, i32 0
  %143 = load i64, i64* %142, align 8, !tbaa !59
  %144 = add nsw i64 %143, %53
  %145 = getelementptr inbounds i32, i32* %133, i64 %144
  %146 = load i32, i32* %145, align 4, !tbaa !33
  %147 = insertelement <4 x i32> undef, i32 %146, i32 0
  %148 = shufflevector <4 x i32> %147, <4 x i32> undef, <4 x i32> zeroinitializer
  %149 = mul <4 x i32> %148, %141
  %150 = add <4 x i32> %149, %138
  %151 = getelementptr inbounds i32, i32* %129, i64 94
  %152 = bitcast i32* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 1, !tbaa !11
  %154 = shl i64 %143, 1
  %155 = add nsw i64 %154, %53
  %156 = getelementptr inbounds i32, i32* %133, i64 %155
  %157 = load i32, i32* %156, align 4, !tbaa !33
  %158 = insertelement <4 x i32> undef, i32 %157, i32 0
  %159 = shufflevector <4 x i32> %158, <4 x i32> undef, <4 x i32> zeroinitializer
  %160 = mul <4 x i32> %159, %153
  %161 = add <4 x i32> %150, %160
  %162 = getelementptr inbounds i32, i32* %129, i64 141
  %163 = bitcast i32* %162 to <4 x i32>*
  %164 = load <4 x i32>, <4 x i32>* %163, align 1, !tbaa !11
  %165 = mul nsw i64 %143, 3
  %166 = add nsw i64 %165, %53
  %167 = getelementptr inbounds i32, i32* %133, i64 %166
  %168 = load i32, i32* %167, align 4, !tbaa !33
  %169 = insertelement <4 x i32> undef, i32 %168, i32 0
  %170 = shufflevector <4 x i32> %169, <4 x i32> undef, <4 x i32> zeroinitializer
  %171 = mul <4 x i32> %170, %164
  %172 = add <4 x i32> %161, %171
  %173 = getelementptr inbounds i32, i32* %129, i64 188
  %174 = bitcast i32* %173 to <4 x i32>*
  %175 = load <4 x i32>, <4 x i32>* %174, align 1, !tbaa !11
  %176 = shl i64 %143, 2
  %177 = add nsw i64 %176, %53
  %178 = getelementptr inbounds i32, i32* %133, i64 %177
  %179 = load i32, i32* %178, align 4, !tbaa !33
  %180 = insertelement <4 x i32> undef, i32 %179, i32 0
  %181 = shufflevector <4 x i32> %180, <4 x i32> undef, <4 x i32> zeroinitializer
  %182 = mul <4 x i32> %181, %175
  %183 = add <4 x i32> %172, %182
  %184 = getelementptr inbounds i32, i32* %129, i64 235
  %185 = bitcast i32* %184 to <4 x i32>*
  %186 = load <4 x i32>, <4 x i32>* %185, align 1, !tbaa !11
  %187 = mul nsw i64 %143, 5
  %188 = add nsw i64 %187, %53
  %189 = getelementptr inbounds i32, i32* %133, i64 %188
  %190 = load i32, i32* %189, align 4, !tbaa !33
  %191 = insertelement <4 x i32> undef, i32 %190, i32 0
  %192 = shufflevector <4 x i32> %191, <4 x i32> undef, <4 x i32> zeroinitializer
  %193 = mul <4 x i32> %192, %186
  %194 = add <4 x i32> %183, %193
  %195 = bitcast i32* %125 to <4 x i32>*
  store <4 x i32> %194, <4 x i32>* %195, align 16, !tbaa !11
  %196 = add nsw i64 %120, 4
  %197 = icmp slt i64 %196, %56
  br i1 %197, label %119, label %90

; <label>:198:                                    ; preds = %106
  br label %199

; <label>:199:                                    ; preds = %198, %91
  %200 = add nsw i64 %52, 1
  %201 = srem i64 %200, 4
  %202 = add nuw nsw i64 %53, 1
  %203 = icmp slt i64 %202, %11
  br i1 %203, label %51, label %49

; <label>:204:                                    ; preds = %95
  call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !938
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr i32 @_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0EEEEEKNS6_IKNS5_INS7_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIiiEEEEiRKT_(%"class.Eigen::DenseBase.1356"*, %"struct.Eigen::internal::scalar_sum_op"* dereferenceable(1)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.Eigen::DenseBase.1356"* %0 to i32**
  %4 = load i32*, i32** %3, align 8, !tbaa !480
  %5 = getelementptr inbounds %"class.Eigen::DenseBase.1356", %"class.Eigen::DenseBase.1356"* %0, i64 40
  %6 = bitcast %"class.Eigen::DenseBase.1356"* %5 to i64*
  %7 = load i64, i64* %6, align 8, !tbaa !493
  %8 = icmp eq i64 %7, 1
  br i1 %8, label %10, label %9, !prof !10

; <label>:9:                                      ; preds = %2
  tail call void @__assert_rtn(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__func__._ZN5Eigen8internal19variable_if_dynamicIlLi0EEC2El, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.8, i64 0, i64 0), i32 110, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0)) #13
  unreachable

; <label>:10:                                     ; preds = %2
  %11 = getelementptr inbounds %"class.Eigen::DenseBase.1356", %"class.Eigen::DenseBase.1356"* %0, i64 64
  %12 = bitcast %"class.Eigen::DenseBase.1356"* %11 to %"class.Eigen::Matrix.123"**
  %13 = load %"class.Eigen::Matrix.123"*, %"class.Eigen::Matrix.123"** %12, align 8, !tbaa !11
  %14 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %13, i64 0, i32 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8, !tbaa !43
  %16 = getelementptr inbounds %"class.Eigen::DenseBase.1356", %"class.Eigen::DenseBase.1356"* %0, i64 88
  %17 = bitcast %"class.Eigen::DenseBase.1356"* %16 to i64*
  %18 = load i64, i64* %17, align 8, !tbaa !865
  %19 = icmp eq i64 %18, 1
  br i1 %19, label %21, label %20, !prof !10

; <label>:20:                                     ; preds = %10
  tail call void @__assert_rtn(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__func__._ZN5Eigen8internal19variable_if_dynamicIlLi0EEC2El, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.8, i64 0, i64 0), i32 110, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0)) #13
  unreachable

; <label>:21:                                     ; preds = %10
  %22 = getelementptr inbounds %"class.Eigen::DenseBase.1356", %"class.Eigen::DenseBase.1356"* %0, i64 48
  %23 = bitcast %"class.Eigen::DenseBase.1356"* %22 to i32**
  %24 = load i32*, i32** %23, align 8, !tbaa !863
  %25 = load i32, i32* %4, align 4, !tbaa !33
  %26 = load i32, i32* %24, align 4, !tbaa !33
  %27 = mul nsw i32 %26, %25
  %28 = getelementptr inbounds i32, i32* %4, i64 47
  %29 = load i32, i32* %28, align 4, !tbaa !33
  %30 = getelementptr inbounds i32, i32* %24, i64 %15
  %31 = load i32, i32* %30, align 4, !tbaa !33
  %32 = mul nsw i32 %31, %29
  %33 = getelementptr inbounds i32, i32* %4, i64 94
  %34 = load i32, i32* %33, align 4, !tbaa !33
  %35 = shl nsw i64 %15, 1
  %36 = getelementptr inbounds i32, i32* %24, i64 %35
  %37 = load i32, i32* %36, align 4, !tbaa !33
  %38 = mul nsw i32 %37, %34
  %39 = getelementptr inbounds i32, i32* %4, i64 141
  %40 = load i32, i32* %39, align 4, !tbaa !33
  %41 = mul nsw i64 %15, 3
  %42 = getelementptr inbounds i32, i32* %24, i64 %41
  %43 = load i32, i32* %42, align 4, !tbaa !33
  %44 = mul nsw i32 %43, %40
  %45 = getelementptr inbounds i32, i32* %4, i64 188
  %46 = load i32, i32* %45, align 4, !tbaa !33
  %47 = shl nsw i64 %15, 2
  %48 = getelementptr inbounds i32, i32* %24, i64 %47
  %49 = load i32, i32* %48, align 4, !tbaa !33
  %50 = mul nsw i32 %49, %46
  %51 = getelementptr inbounds i32, i32* %4, i64 235
  %52 = load i32, i32* %51, align 4, !tbaa !33
  %53 = mul nsw i64 %15, 5
  %54 = getelementptr inbounds i32, i32* %24, i64 %53
  %55 = load i32, i32* %54, align 4, !tbaa !33
  %56 = mul nsw i32 %55, %52
  %57 = add i32 %32, %27
  %58 = add i32 %57, %38
  %59 = add i32 %58, %44
  %60 = add i32 %59, %50
  %61 = add i32 %60, %56
  ret i32 %61
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal15call_assignmentINS_6MatrixIiLin1ELin1ELi0ELin1ELin1EEENS_7ProductINS4_INS2_IiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS0_13add_assign_opIiiEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsr25evaluator_assume_aliasingISH_EE5valueEPvE4typeE(%"class.Eigen::Matrix.19"* dereferenceable(24), %"class.Eigen::Product.310"* dereferenceable(24), %"struct.Eigen::internal::add_assign_op"* dereferenceable(1), i8*) local_unnamed_addr #6 {
  %5 = alloca %"class.Eigen::Matrix.1034", align 8
  %6 = bitcast %"class.Eigen::Matrix.1034"* %5 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %6) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %6, i8 0, i64 24, i32 8, i1 false) #11
  %7 = bitcast %"class.Eigen::Product.310"* %1 to %"class.Eigen::PlainObjectBase.33"**
  %8 = load %"class.Eigen::PlainObjectBase.33"*, %"class.Eigen::PlainObjectBase.33"** %7, align 8, !tbaa !11
  %9 = getelementptr inbounds %"class.Eigen::PlainObjectBase.33", %"class.Eigen::PlainObjectBase.33"* %8, i64 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !37
  %11 = getelementptr inbounds %"class.Eigen::Product.310", %"class.Eigen::Product.310"* %1, i64 0, i32 1
  %12 = bitcast %"class.Eigen::Transpose.296"* %11 to %"class.Eigen::PlainObjectBase.124"**
  %13 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %12, align 8, !tbaa !11
  %14 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %13, i64 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8, !tbaa !43
  %16 = or i64 %15, %10
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %18, label %21

; <label>:18:                                     ; preds = %4
  %19 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %5, i64 0, i32 0, i32 0, i32 2
  %20 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %5, i64 0, i32 0, i32 0, i32 1
  br label %45

; <label>:21:                                     ; preds = %4
  %22 = icmp slt i64 %16, 0
  br i1 %22, label %23, label %24, !prof !50

; <label>:23:                                     ; preds = %21
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:24:                                     ; preds = %21
  %25 = mul nsw i64 %15, %10
  %26 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %5, i64 0, i32 0, i32 0, i32 1
  %27 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %5, i64 0, i32 0, i32 0, i32 2
  %28 = icmp eq i64 %25, 0
  br i1 %28, label %44, label %29

; <label>:29:                                     ; preds = %24
  %30 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %5, i64 0, i32 0, i32 0, i32 0
  %31 = shl i64 %25, 2
  %32 = add i64 %31, 32
  %33 = tail call i8* @malloc(i64 %32) #14
  %34 = icmp eq i8* %33, null
  br i1 %34, label %42, label %35

; <label>:35:                                     ; preds = %29
  %36 = ptrtoint i8* %33 to i64
  %37 = add i64 %36, 32
  %38 = and i64 %37, -32
  %39 = inttoptr i64 %38 to i8**
  %40 = getelementptr inbounds i8*, i8** %39, i64 -1
  store i8* %33, i8** %40, align 8, !tbaa !29
  %41 = inttoptr i64 %38 to i32*
  br label %42

; <label>:42:                                     ; preds = %35, %29
  %43 = phi i32* [ %41, %35 ], [ null, %29 ]
  store i32* %43, i32** %30, align 8, !tbaa !767
  br label %44

; <label>:44:                                     ; preds = %42, %24
  store i64 %10, i64* %26, align 8, !tbaa !769
  store i64 %15, i64* %27, align 8, !tbaa !770
  br label %45

; <label>:45:                                     ; preds = %18, %44
  %46 = phi i64* [ %20, %18 ], [ %26, %44 ]
  %47 = phi i64* [ %19, %18 ], [ %27, %44 ]
  %48 = getelementptr inbounds %"class.Eigen::Product.310", %"class.Eigen::Product.310"* %1, i64 0, i32 0
  call void @_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS3_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS_9TransposeIKNS3_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeESB_Li8EE6evalToINS3_IiLin1ELin1ELi1ELin1ELin1EEEEEvRT_RKS6_RKSA_(%"class.Eigen::Matrix.1034"* nonnull dereferenceable(24) %5, %"class.Eigen::Product.317"* nonnull dereferenceable(16) %48, %"class.Eigen::Transpose.296"* nonnull dereferenceable(8) %11) #11
  %49 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %5, i64 0, i32 0, i32 0, i32 0
  %50 = load i32*, i32** %49, align 8, !tbaa !767
  %51 = load i64, i64* %47, align 8, !tbaa !770
  %52 = getelementptr inbounds %"class.Eigen::Matrix.19", %"class.Eigen::Matrix.19"* %0, i64 0, i32 0, i32 0, i32 1
  %53 = load i64, i64* %52, align 8, !tbaa !771
  %54 = load i64, i64* %46, align 8, !tbaa !769
  %55 = icmp eq i64 %53, %54
  br i1 %55, label %56, label %60

; <label>:56:                                     ; preds = %45
  %57 = getelementptr inbounds %"class.Eigen::Matrix.19", %"class.Eigen::Matrix.19"* %0, i64 0, i32 0, i32 0, i32 2
  %58 = load i64, i64* %57, align 8, !tbaa !772
  %59 = icmp eq i64 %58, %51
  br i1 %59, label %61, label %60, !prof !10

; <label>:60:                                     ; preds = %56, %45
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__._ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEENS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES3_EEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.15, i64 0, i64 0), i32 710, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.29, i64 0, i64 0)) #13
  unreachable

; <label>:61:                                     ; preds = %56
  %62 = getelementptr inbounds %"class.Eigen::Matrix.19", %"class.Eigen::Matrix.19"* %0, i64 0, i32 0, i32 0, i32 0
  %63 = load i32*, i32** %62, align 8, !tbaa !30
  %64 = icmp sgt i64 %51, 0
  %65 = icmp sgt i64 %53, 0
  %66 = and i1 %64, %65
  br i1 %66, label %67, label %282

; <label>:67:                                     ; preds = %61
  %68 = add i64 %53, -16
  %69 = lshr i64 %68, 4
  %70 = add nuw nsw i64 %69, 1
  %71 = add i64 %53, -1
  %72 = icmp ult i64 %53, 16
  %73 = and i64 %53, -16
  %74 = icmp ne i64 %73, 0
  %75 = icmp eq i64 %51, 1
  %76 = and i1 %74, %75
  %77 = and i64 %70, 3
  %78 = icmp eq i64 %77, 0
  %79 = icmp ult i64 %68, 48
  %80 = icmp eq i64 %53, %73
  br label %81

; <label>:81:                                     ; preds = %67, %279
  %82 = phi i64 [ %280, %279 ], [ 0, %67 ]
  %83 = mul i64 %53, %82
  %84 = getelementptr i32, i32* %63, i64 %83
  %85 = add i64 %53, %83
  %86 = getelementptr i32, i32* %63, i64 %85
  %87 = getelementptr i32, i32* %50, i64 %82
  %88 = add i64 %53, %82
  %89 = getelementptr i32, i32* %50, i64 %88
  %90 = mul nsw i64 %82, %53
  br i1 %72, label %212, label %91

; <label>:91:                                     ; preds = %81
  br i1 %76, label %92, label %212

; <label>:92:                                     ; preds = %91
  %93 = icmp ult i32* %84, %89
  %94 = icmp ult i32* %87, %86
  %95 = and i1 %93, %94
  br i1 %95, label %212, label %96

; <label>:96:                                     ; preds = %92
  br i1 %78, label %124, label %97

; <label>:97:                                     ; preds = %96
  br label %98

; <label>:98:                                     ; preds = %98, %97
  %99 = phi i64 [ %120, %98 ], [ 0, %97 ]
  %100 = phi i64 [ %121, %98 ], [ %77, %97 ]
  %101 = add nsw i64 %99, %90
  %102 = getelementptr inbounds i32, i32* %63, i64 %101
  %103 = mul nsw i64 %99, %51
  %104 = add nsw i64 %103, %82
  %105 = getelementptr inbounds i32, i32* %50, i64 %104
  %106 = bitcast i32* %105 to <8 x i32>*
  %107 = load <8 x i32>, <8 x i32>* %106, align 4, !tbaa !33, !alias.scope !944
  %108 = getelementptr i32, i32* %105, i64 8
  %109 = bitcast i32* %108 to <8 x i32>*
  %110 = load <8 x i32>, <8 x i32>* %109, align 4, !tbaa !33, !alias.scope !944
  %111 = bitcast i32* %102 to <8 x i32>*
  %112 = load <8 x i32>, <8 x i32>* %111, align 4, !tbaa !33, !alias.scope !947, !noalias !944
  %113 = getelementptr i32, i32* %102, i64 8
  %114 = bitcast i32* %113 to <8 x i32>*
  %115 = load <8 x i32>, <8 x i32>* %114, align 4, !tbaa !33, !alias.scope !947, !noalias !944
  %116 = add nsw <8 x i32> %112, %107
  %117 = add nsw <8 x i32> %115, %110
  %118 = bitcast i32* %102 to <8 x i32>*
  store <8 x i32> %116, <8 x i32>* %118, align 4, !tbaa !33, !alias.scope !947, !noalias !944
  %119 = bitcast i32* %113 to <8 x i32>*
  store <8 x i32> %117, <8 x i32>* %119, align 4, !tbaa !33, !alias.scope !947, !noalias !944
  %120 = add i64 %99, 16
  %121 = add i64 %100, -1
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %123, label %98, !llvm.loop !949

; <label>:123:                                    ; preds = %98
  br label %124

; <label>:124:                                    ; preds = %96, %123
  %125 = phi i64 [ 0, %96 ], [ %120, %123 ]
  br i1 %79, label %211, label %126

; <label>:126:                                    ; preds = %124
  br label %127

; <label>:127:                                    ; preds = %127, %126
  %128 = phi i64 [ %125, %126 ], [ %208, %127 ]
  %129 = add nsw i64 %128, %90
  %130 = getelementptr inbounds i32, i32* %63, i64 %129
  %131 = mul nsw i64 %128, %51
  %132 = add nsw i64 %131, %82
  %133 = getelementptr inbounds i32, i32* %50, i64 %132
  %134 = bitcast i32* %133 to <8 x i32>*
  %135 = load <8 x i32>, <8 x i32>* %134, align 4, !tbaa !33, !alias.scope !944
  %136 = getelementptr i32, i32* %133, i64 8
  %137 = bitcast i32* %136 to <8 x i32>*
  %138 = load <8 x i32>, <8 x i32>* %137, align 4, !tbaa !33, !alias.scope !944
  %139 = bitcast i32* %130 to <8 x i32>*
  %140 = load <8 x i32>, <8 x i32>* %139, align 4, !tbaa !33, !alias.scope !947, !noalias !944
  %141 = getelementptr i32, i32* %130, i64 8
  %142 = bitcast i32* %141 to <8 x i32>*
  %143 = load <8 x i32>, <8 x i32>* %142, align 4, !tbaa !33, !alias.scope !947, !noalias !944
  %144 = add nsw <8 x i32> %140, %135
  %145 = add nsw <8 x i32> %143, %138
  %146 = bitcast i32* %130 to <8 x i32>*
  store <8 x i32> %144, <8 x i32>* %146, align 4, !tbaa !33, !alias.scope !947, !noalias !944
  %147 = bitcast i32* %141 to <8 x i32>*
  store <8 x i32> %145, <8 x i32>* %147, align 4, !tbaa !33, !alias.scope !947, !noalias !944
  %148 = add i64 %128, 16
  %149 = add nsw i64 %148, %90
  %150 = getelementptr inbounds i32, i32* %63, i64 %149
  %151 = mul nsw i64 %148, %51
  %152 = add nsw i64 %151, %82
  %153 = getelementptr inbounds i32, i32* %50, i64 %152
  %154 = bitcast i32* %153 to <8 x i32>*
  %155 = load <8 x i32>, <8 x i32>* %154, align 4, !tbaa !33, !alias.scope !944
  %156 = getelementptr i32, i32* %153, i64 8
  %157 = bitcast i32* %156 to <8 x i32>*
  %158 = load <8 x i32>, <8 x i32>* %157, align 4, !tbaa !33, !alias.scope !944
  %159 = bitcast i32* %150 to <8 x i32>*
  %160 = load <8 x i32>, <8 x i32>* %159, align 4, !tbaa !33, !alias.scope !947, !noalias !944
  %161 = getelementptr i32, i32* %150, i64 8
  %162 = bitcast i32* %161 to <8 x i32>*
  %163 = load <8 x i32>, <8 x i32>* %162, align 4, !tbaa !33, !alias.scope !947, !noalias !944
  %164 = add nsw <8 x i32> %160, %155
  %165 = add nsw <8 x i32> %163, %158
  %166 = bitcast i32* %150 to <8 x i32>*
  store <8 x i32> %164, <8 x i32>* %166, align 4, !tbaa !33, !alias.scope !947, !noalias !944
  %167 = bitcast i32* %161 to <8 x i32>*
  store <8 x i32> %165, <8 x i32>* %167, align 4, !tbaa !33, !alias.scope !947, !noalias !944
  %168 = add i64 %128, 32
  %169 = add nsw i64 %168, %90
  %170 = getelementptr inbounds i32, i32* %63, i64 %169
  %171 = mul nsw i64 %168, %51
  %172 = add nsw i64 %171, %82
  %173 = getelementptr inbounds i32, i32* %50, i64 %172
  %174 = bitcast i32* %173 to <8 x i32>*
  %175 = load <8 x i32>, <8 x i32>* %174, align 4, !tbaa !33, !alias.scope !944
  %176 = getelementptr i32, i32* %173, i64 8
  %177 = bitcast i32* %176 to <8 x i32>*
  %178 = load <8 x i32>, <8 x i32>* %177, align 4, !tbaa !33, !alias.scope !944
  %179 = bitcast i32* %170 to <8 x i32>*
  %180 = load <8 x i32>, <8 x i32>* %179, align 4, !tbaa !33, !alias.scope !947, !noalias !944
  %181 = getelementptr i32, i32* %170, i64 8
  %182 = bitcast i32* %181 to <8 x i32>*
  %183 = load <8 x i32>, <8 x i32>* %182, align 4, !tbaa !33, !alias.scope !947, !noalias !944
  %184 = add nsw <8 x i32> %180, %175
  %185 = add nsw <8 x i32> %183, %178
  %186 = bitcast i32* %170 to <8 x i32>*
  store <8 x i32> %184, <8 x i32>* %186, align 4, !tbaa !33, !alias.scope !947, !noalias !944
  %187 = bitcast i32* %181 to <8 x i32>*
  store <8 x i32> %185, <8 x i32>* %187, align 4, !tbaa !33, !alias.scope !947, !noalias !944
  %188 = add i64 %128, 48
  %189 = add nsw i64 %188, %90
  %190 = getelementptr inbounds i32, i32* %63, i64 %189
  %191 = mul nsw i64 %188, %51
  %192 = add nsw i64 %191, %82
  %193 = getelementptr inbounds i32, i32* %50, i64 %192
  %194 = bitcast i32* %193 to <8 x i32>*
  %195 = load <8 x i32>, <8 x i32>* %194, align 4, !tbaa !33, !alias.scope !944
  %196 = getelementptr i32, i32* %193, i64 8
  %197 = bitcast i32* %196 to <8 x i32>*
  %198 = load <8 x i32>, <8 x i32>* %197, align 4, !tbaa !33, !alias.scope !944
  %199 = bitcast i32* %190 to <8 x i32>*
  %200 = load <8 x i32>, <8 x i32>* %199, align 4, !tbaa !33, !alias.scope !947, !noalias !944
  %201 = getelementptr i32, i32* %190, i64 8
  %202 = bitcast i32* %201 to <8 x i32>*
  %203 = load <8 x i32>, <8 x i32>* %202, align 4, !tbaa !33, !alias.scope !947, !noalias !944
  %204 = add nsw <8 x i32> %200, %195
  %205 = add nsw <8 x i32> %203, %198
  %206 = bitcast i32* %190 to <8 x i32>*
  store <8 x i32> %204, <8 x i32>* %206, align 4, !tbaa !33, !alias.scope !947, !noalias !944
  %207 = bitcast i32* %201 to <8 x i32>*
  store <8 x i32> %205, <8 x i32>* %207, align 4, !tbaa !33, !alias.scope !947, !noalias !944
  %208 = add i64 %128, 64
  %209 = icmp eq i64 %208, %73
  br i1 %209, label %210, label %127, !llvm.loop !950

; <label>:210:                                    ; preds = %127
  br label %211

; <label>:211:                                    ; preds = %124, %210
  br i1 %80, label %279, label %212

; <label>:212:                                    ; preds = %91, %211, %92, %81
  %213 = phi i64 [ 0, %92 ], [ 0, %91 ], [ 0, %81 ], [ %73, %211 ]
  %214 = sub i64 %53, %213
  %215 = sub i64 %71, %213
  %216 = and i64 %214, 3
  %217 = icmp eq i64 %216, 0
  br i1 %217, label %234, label %218

; <label>:218:                                    ; preds = %212
  br label %219

; <label>:219:                                    ; preds = %219, %218
  %220 = phi i64 [ %230, %219 ], [ %213, %218 ]
  %221 = phi i64 [ %231, %219 ], [ %216, %218 ]
  %222 = add nsw i64 %220, %90
  %223 = getelementptr inbounds i32, i32* %63, i64 %222
  %224 = mul nsw i64 %220, %51
  %225 = add nsw i64 %224, %82
  %226 = getelementptr inbounds i32, i32* %50, i64 %225
  %227 = load i32, i32* %226, align 4, !tbaa !33
  %228 = load i32, i32* %223, align 4, !tbaa !33
  %229 = add nsw i32 %228, %227
  store i32 %229, i32* %223, align 4, !tbaa !33
  %230 = add nuw nsw i64 %220, 1
  %231 = add i64 %221, -1
  %232 = icmp eq i64 %231, 0
  br i1 %232, label %233, label %219, !llvm.loop !951

; <label>:233:                                    ; preds = %219
  br label %234

; <label>:234:                                    ; preds = %212, %233
  %235 = phi i64 [ %213, %212 ], [ %230, %233 ]
  %236 = icmp ult i64 %215, 3
  br i1 %236, label %278, label %237

; <label>:237:                                    ; preds = %234
  br label %238

; <label>:238:                                    ; preds = %238, %237
  %239 = phi i64 [ %235, %237 ], [ %275, %238 ]
  %240 = add nsw i64 %239, %90
  %241 = getelementptr inbounds i32, i32* %63, i64 %240
  %242 = mul nsw i64 %239, %51
  %243 = add nsw i64 %242, %82
  %244 = getelementptr inbounds i32, i32* %50, i64 %243
  %245 = load i32, i32* %244, align 4, !tbaa !33
  %246 = load i32, i32* %241, align 4, !tbaa !33
  %247 = add nsw i32 %246, %245
  store i32 %247, i32* %241, align 4, !tbaa !33
  %248 = add nuw nsw i64 %239, 1
  %249 = add nsw i64 %248, %90
  %250 = getelementptr inbounds i32, i32* %63, i64 %249
  %251 = mul nsw i64 %248, %51
  %252 = add nsw i64 %251, %82
  %253 = getelementptr inbounds i32, i32* %50, i64 %252
  %254 = load i32, i32* %253, align 4, !tbaa !33
  %255 = load i32, i32* %250, align 4, !tbaa !33
  %256 = add nsw i32 %255, %254
  store i32 %256, i32* %250, align 4, !tbaa !33
  %257 = add nsw i64 %239, 2
  %258 = add nsw i64 %257, %90
  %259 = getelementptr inbounds i32, i32* %63, i64 %258
  %260 = mul nsw i64 %257, %51
  %261 = add nsw i64 %260, %82
  %262 = getelementptr inbounds i32, i32* %50, i64 %261
  %263 = load i32, i32* %262, align 4, !tbaa !33
  %264 = load i32, i32* %259, align 4, !tbaa !33
  %265 = add nsw i32 %264, %263
  store i32 %265, i32* %259, align 4, !tbaa !33
  %266 = add nsw i64 %239, 3
  %267 = add nsw i64 %266, %90
  %268 = getelementptr inbounds i32, i32* %63, i64 %267
  %269 = mul nsw i64 %266, %51
  %270 = add nsw i64 %269, %82
  %271 = getelementptr inbounds i32, i32* %50, i64 %270
  %272 = load i32, i32* %271, align 4, !tbaa !33
  %273 = load i32, i32* %268, align 4, !tbaa !33
  %274 = add nsw i32 %273, %272
  store i32 %274, i32* %268, align 4, !tbaa !33
  %275 = add nsw i64 %239, 4
  %276 = icmp eq i64 %275, %53
  br i1 %276, label %277, label %238, !llvm.loop !952

; <label>:277:                                    ; preds = %238
  br label %278

; <label>:278:                                    ; preds = %234, %277
  br label %279

; <label>:279:                                    ; preds = %278, %211
  %280 = add nuw nsw i64 %82, 1
  %281 = icmp eq i64 %280, %51
  br i1 %281, label %284, label %81

; <label>:282:                                    ; preds = %61
  %283 = icmp eq i32* %50, null
  br i1 %283, label %289, label %285

; <label>:284:                                    ; preds = %279
  br label %285

; <label>:285:                                    ; preds = %284, %282
  %286 = getelementptr inbounds i32, i32* %50, i64 -2
  %287 = bitcast i32* %286 to i8**
  %288 = load i8*, i8** %287, align 8, !tbaa !29
  call void @free(i8* %288) #11
  br label %289

; <label>:289:                                    ; preds = %282, %285
  call void @llvm.lifetime.end(i64 24, i8* nonnull %6) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal20generic_product_implINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS3_IiLin1ELi47ELi0ELin1ELi47EEENS_10DenseShapeES7_Li8EE6evalToINS3_IiLi6ELi47ELi0ELi6ELi47EEEEEvRT_RKS5_RKS6_(%"class.Eigen::Matrix.94"* dereferenceable(1128), %"class.Eigen::Transpose.331"* dereferenceable(8), %"class.Eigen::Matrix.32"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"struct.Eigen::internal::evaluator.1384", align 8
  %5 = alloca %"struct.Eigen::internal::evaluator.553", align 8
  %6 = alloca %"class.Eigen::internal::generic_dense_assignment_kernel.1387", align 8
  %7 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %8 = alloca %"struct.Eigen::internal::evaluator.1444", align 4
  %9 = alloca %"struct.Eigen::internal::evaluator.553", align 8
  %10 = alloca %"class.Eigen::internal::generic_dense_assignment_kernel.1447", align 8
  %11 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %12 = alloca i32, align 4
  %13 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %2, i64 0, i32 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8, !tbaa !37
  %15 = add nsw i64 %14, 53
  %16 = icmp slt i64 %15, 20
  %17 = icmp sgt i64 %14, 0
  %18 = and i1 %17, %16
  br i1 %18, label %19, label %53

; <label>:19:                                     ; preds = %3
  %20 = bitcast %"class.Eigen::Transpose.331"* %1 to %"class.Eigen::PlainObjectBase.124"**
  %21 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %20, align 8, !tbaa !11
  %22 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %21, i64 0, i32 0, i32 1
  %23 = load i64, i64* %22, align 8, !tbaa !43
  %24 = icmp eq i64 %23, %14
  br i1 %24, label %26, label %25, !prof !10

; <label>:25:                                     ; preds = %19
  tail call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS1_IdLin1ELi1ELi0ELin1ELi1EEELi0EEC2ERKS2_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 97, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2, i64 0, i64 0)) #13
  unreachable

; <label>:26:                                     ; preds = %19
  %27 = ptrtoint %"class.Eigen::PlainObjectBase.124"* %21 to i64
  %28 = ptrtoint %"class.Eigen::Matrix.32"* %2 to i64
  %29 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %7, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %29) #11
  %30 = bitcast %"struct.Eigen::internal::evaluator.1384"* %4 to i8*
  call void @llvm.lifetime.start(i64 64, i8* nonnull %30) #11
  %31 = bitcast %"struct.Eigen::internal::evaluator.1384"* %4 to i64*
  store i64 %27, i64* %31, align 8
  %32 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1384", %"struct.Eigen::internal::evaluator.1384"* %4, i64 0, i32 0, i32 1
  %33 = bitcast %"class.Eigen::Matrix.32"** %32 to i64*
  store i64 %28, i64* %33, align 8, !tbaa !11
  %34 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1384", %"struct.Eigen::internal::evaluator.1384"* %4, i64 0, i32 0, i32 2, i32 0, i32 1
  %35 = bitcast %"class.Eigen::PlainObjectBase.124"* %21 to <2 x i64>*
  %36 = load <2 x i64>, <2 x i64>* %35, align 8, !tbaa !11
  %37 = bitcast %"struct.Eigen::internal::evaluator.569"* %34 to <2 x i64>*
  store <2 x i64> %36, <2 x i64>* %37, align 8, !tbaa !11
  %38 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1384", %"struct.Eigen::internal::evaluator.1384"* %4, i64 0, i32 0, i32 3
  %39 = bitcast %"class.Eigen::Matrix.32"* %2 to i64*
  %40 = load i64, i64* %39, align 8, !tbaa !35
  %41 = bitcast %"struct.Eigen::internal::evaluator.523"* %38 to i64*
  store i64 %40, i64* %41, align 8, !tbaa !813
  %42 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1384", %"struct.Eigen::internal::evaluator.1384"* %4, i64 0, i32 0, i32 3, i32 0, i32 1, i32 0
  store i64 %14, i64* %42, align 8, !tbaa !59
  %43 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1384", %"struct.Eigen::internal::evaluator.1384"* %4, i64 0, i32 0, i32 4
  %44 = extractelement <2 x i64> %36, i32 1
  store i64 %44, i64* %43, align 8, !tbaa !953
  %45 = bitcast %"struct.Eigen::internal::evaluator.553"* %5 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %45) #11
  %46 = getelementptr inbounds %"struct.Eigen::internal::evaluator.553", %"struct.Eigen::internal::evaluator.553"* %5, i64 0, i32 0, i32 0
  %47 = getelementptr inbounds %"class.Eigen::Matrix.94", %"class.Eigen::Matrix.94"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  store i32* %47, i32** %46, align 8, !tbaa !955
  %48 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1387"* %6 to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %48) #11
  %49 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1387", %"class.Eigen::internal::generic_dense_assignment_kernel.1387"* %6, i64 0, i32 0
  store %"struct.Eigen::internal::evaluator.553"* %5, %"struct.Eigen::internal::evaluator.553"** %49, align 8, !tbaa !11
  %50 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1387", %"class.Eigen::internal::generic_dense_assignment_kernel.1387"* %6, i64 0, i32 1
  store %"struct.Eigen::internal::evaluator.1384"* %4, %"struct.Eigen::internal::evaluator.1384"** %50, align 8, !tbaa !11
  %51 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1387", %"class.Eigen::internal::generic_dense_assignment_kernel.1387"* %6, i64 0, i32 2
  store %"struct.Eigen::internal::assign_op.512"* %7, %"struct.Eigen::internal::assign_op.512"** %51, align 8, !tbaa !11
  %52 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1387", %"class.Eigen::internal::generic_dense_assignment_kernel.1387"* %6, i64 0, i32 3
  store %"class.Eigen::Matrix.94"* %0, %"class.Eigen::Matrix.94"** %52, align 8, !tbaa !11
  call void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi6ELi47ELi0ELi6ELi47EEEEENS3_INS_7ProductINS_9TransposeINS4_IiLin1ELi6ELi0ELin1ELi6EEEEENS4_IiLin1ELi47ELi0ELin1ELi47EEELi1EEEEENS0_9assign_opIiiEELi0EEELi0ELi0EE3runERSG_(%"class.Eigen::internal::generic_dense_assignment_kernel.1387"* nonnull dereferenceable(32) %6) #11
  call void @llvm.lifetime.end(i64 32, i8* nonnull %48) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %45) #11
  call void @llvm.lifetime.end(i64 64, i8* nonnull %30) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %29) #11
  br label %269

; <label>:53:                                     ; preds = %3
  %54 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %11, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %54) #11
  %55 = bitcast %"struct.Eigen::internal::evaluator.1444"* %8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %55) #11
  %56 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %8, i64 0, i32 0, i32 0
  store i32 0, i32* %56, align 4, !tbaa !51
  %57 = bitcast %"struct.Eigen::internal::evaluator.553"* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %57) #11
  %58 = bitcast %"struct.Eigen::internal::evaluator.553"* %9 to %"class.Eigen::Matrix.94"**
  store %"class.Eigen::Matrix.94"* %0, %"class.Eigen::Matrix.94"** %58, align 8, !tbaa !955
  %59 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1447"* %10 to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %59) #11
  %60 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1447", %"class.Eigen::internal::generic_dense_assignment_kernel.1447"* %10, i64 0, i32 0
  store %"struct.Eigen::internal::evaluator.553"* %9, %"struct.Eigen::internal::evaluator.553"** %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1447", %"class.Eigen::internal::generic_dense_assignment_kernel.1447"* %10, i64 0, i32 1
  store %"struct.Eigen::internal::evaluator.1444"* %8, %"struct.Eigen::internal::evaluator.1444"** %61, align 8, !tbaa !11
  %62 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1447", %"class.Eigen::internal::generic_dense_assignment_kernel.1447"* %10, i64 0, i32 2
  store %"struct.Eigen::internal::assign_op.512"* %11, %"struct.Eigen::internal::assign_op.512"** %62, align 8, !tbaa !11
  %63 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1447", %"class.Eigen::internal::generic_dense_assignment_kernel.1447"* %10, i64 0, i32 3
  store %"class.Eigen::Matrix.94"* %0, %"class.Eigen::Matrix.94"** %63, align 8, !tbaa !11
  %64 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1447"* %10 to %"struct.Eigen::internal::evaluator.554"**
  %65 = bitcast %"struct.Eigen::internal::evaluator.553"* %9 to <4 x i32>**
  %66 = load <4 x i32>*, <4 x i32>** %65, align 8, !tbaa !955
  store <4 x i32> zeroinitializer, <4 x i32>* %66, align 1, !tbaa !11
  %67 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %64, align 8, !tbaa !11
  %68 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %67, i64 0, i32 0
  %69 = load i32*, i32** %68, align 8, !tbaa !955
  %70 = getelementptr inbounds i32, i32* %69, i64 4
  %71 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %61, align 8, !tbaa !11
  %72 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %71, i64 0, i32 0, i32 0
  %73 = load i32, i32* %72, align 4, !tbaa !33
  %74 = insertelement <4 x i32> undef, i32 %73, i32 0
  %75 = shufflevector <4 x i32> %74, <4 x i32> undef, <4 x i32> zeroinitializer
  %76 = bitcast i32* %70 to <4 x i32>*
  store <4 x i32> %75, <4 x i32>* %76, align 1, !tbaa !11
  %77 = load i32*, i32** %68, align 8, !tbaa !955
  %78 = getelementptr inbounds i32, i32* %77, i64 8
  %79 = load i32, i32* %72, align 4, !tbaa !33
  %80 = insertelement <4 x i32> undef, i32 %79, i32 0
  %81 = shufflevector <4 x i32> %80, <4 x i32> undef, <4 x i32> zeroinitializer
  %82 = bitcast i32* %78 to <4 x i32>*
  store <4 x i32> %81, <4 x i32>* %82, align 1, !tbaa !11
  %83 = load i32*, i32** %68, align 8, !tbaa !955
  %84 = getelementptr inbounds i32, i32* %83, i64 12
  %85 = load i32, i32* %72, align 4, !tbaa !33
  %86 = insertelement <4 x i32> undef, i32 %85, i32 0
  %87 = shufflevector <4 x i32> %86, <4 x i32> undef, <4 x i32> zeroinitializer
  %88 = bitcast i32* %84 to <4 x i32>*
  store <4 x i32> %87, <4 x i32>* %88, align 1, !tbaa !11
  %89 = load i32*, i32** %68, align 8, !tbaa !955
  %90 = getelementptr inbounds i32, i32* %89, i64 16
  %91 = load i32, i32* %72, align 4, !tbaa !33
  %92 = insertelement <4 x i32> undef, i32 %91, i32 0
  %93 = shufflevector <4 x i32> %92, <4 x i32> undef, <4 x i32> zeroinitializer
  %94 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> %93, <4 x i32>* %94, align 1, !tbaa !11
  %95 = load i32*, i32** %68, align 8, !tbaa !955
  %96 = getelementptr inbounds i32, i32* %95, i64 20
  %97 = load i32, i32* %72, align 4, !tbaa !33
  %98 = insertelement <4 x i32> undef, i32 %97, i32 0
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> zeroinitializer
  %100 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %99, <4 x i32>* %100, align 1, !tbaa !11
  %101 = load i32*, i32** %68, align 8, !tbaa !955
  %102 = getelementptr inbounds i32, i32* %101, i64 24
  %103 = load i32, i32* %72, align 4, !tbaa !33
  %104 = insertelement <4 x i32> undef, i32 %103, i32 0
  %105 = shufflevector <4 x i32> %104, <4 x i32> undef, <4 x i32> zeroinitializer
  %106 = bitcast i32* %102 to <4 x i32>*
  store <4 x i32> %105, <4 x i32>* %106, align 1, !tbaa !11
  %107 = load i32*, i32** %68, align 8, !tbaa !955
  %108 = getelementptr inbounds i32, i32* %107, i64 28
  %109 = load i32, i32* %72, align 4, !tbaa !33
  %110 = insertelement <4 x i32> undef, i32 %109, i32 0
  %111 = shufflevector <4 x i32> %110, <4 x i32> undef, <4 x i32> zeroinitializer
  %112 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %111, <4 x i32>* %112, align 1, !tbaa !11
  %113 = load i32*, i32** %68, align 8, !tbaa !955
  %114 = getelementptr inbounds i32, i32* %113, i64 32
  %115 = load i32, i32* %72, align 4, !tbaa !33
  %116 = insertelement <4 x i32> undef, i32 %115, i32 0
  %117 = shufflevector <4 x i32> %116, <4 x i32> undef, <4 x i32> zeroinitializer
  %118 = bitcast i32* %114 to <4 x i32>*
  store <4 x i32> %117, <4 x i32>* %118, align 1, !tbaa !11
  %119 = load i32*, i32** %68, align 8, !tbaa !955
  %120 = getelementptr inbounds i32, i32* %119, i64 36
  %121 = load i32, i32* %72, align 4, !tbaa !33
  %122 = insertelement <4 x i32> undef, i32 %121, i32 0
  %123 = shufflevector <4 x i32> %122, <4 x i32> undef, <4 x i32> zeroinitializer
  %124 = bitcast i32* %120 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 1, !tbaa !11
  %125 = load i32*, i32** %68, align 8, !tbaa !955
  %126 = getelementptr inbounds i32, i32* %125, i64 40
  %127 = load i32, i32* %72, align 4, !tbaa !33
  %128 = insertelement <4 x i32> undef, i32 %127, i32 0
  %129 = shufflevector <4 x i32> %128, <4 x i32> undef, <4 x i32> zeroinitializer
  %130 = bitcast i32* %126 to <4 x i32>*
  store <4 x i32> %129, <4 x i32>* %130, align 1, !tbaa !11
  %131 = load i32*, i32** %68, align 8, !tbaa !955
  %132 = getelementptr inbounds i32, i32* %131, i64 44
  %133 = load i32, i32* %72, align 4, !tbaa !33
  %134 = insertelement <4 x i32> undef, i32 %133, i32 0
  %135 = shufflevector <4 x i32> %134, <4 x i32> undef, <4 x i32> zeroinitializer
  %136 = bitcast i32* %132 to <4 x i32>*
  store <4 x i32> %135, <4 x i32>* %136, align 1, !tbaa !11
  %137 = load i32*, i32** %68, align 8, !tbaa !955
  %138 = getelementptr inbounds i32, i32* %137, i64 48
  %139 = load i32, i32* %72, align 4, !tbaa !33
  %140 = insertelement <4 x i32> undef, i32 %139, i32 0
  %141 = shufflevector <4 x i32> %140, <4 x i32> undef, <4 x i32> zeroinitializer
  %142 = bitcast i32* %138 to <4 x i32>*
  store <4 x i32> %141, <4 x i32>* %142, align 1, !tbaa !11
  %143 = load i32*, i32** %68, align 8, !tbaa !955
  %144 = getelementptr inbounds i32, i32* %143, i64 52
  %145 = load i32, i32* %72, align 4, !tbaa !33
  %146 = insertelement <4 x i32> undef, i32 %145, i32 0
  %147 = shufflevector <4 x i32> %146, <4 x i32> undef, <4 x i32> zeroinitializer
  %148 = bitcast i32* %144 to <4 x i32>*
  store <4 x i32> %147, <4 x i32>* %148, align 1, !tbaa !11
  %149 = load i32*, i32** %68, align 8, !tbaa !955
  %150 = getelementptr inbounds i32, i32* %149, i64 56
  %151 = load i32, i32* %72, align 4, !tbaa !33
  %152 = insertelement <4 x i32> undef, i32 %151, i32 0
  %153 = shufflevector <4 x i32> %152, <4 x i32> undef, <4 x i32> zeroinitializer
  %154 = bitcast i32* %150 to <4 x i32>*
  store <4 x i32> %153, <4 x i32>* %154, align 1, !tbaa !11
  %155 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %64, align 8, !tbaa !11
  %156 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %155, i64 0, i32 0
  %157 = load i32*, i32** %156, align 8, !tbaa !955
  %158 = getelementptr inbounds i32, i32* %157, i64 60
  %159 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %61, align 8, !tbaa !11
  %160 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %159, i64 0, i32 0, i32 0
  %161 = load i32, i32* %160, align 4, !tbaa !33
  %162 = insertelement <4 x i32> undef, i32 %161, i32 0
  %163 = shufflevector <4 x i32> %162, <4 x i32> undef, <4 x i32> zeroinitializer
  %164 = bitcast i32* %158 to <4 x i32>*
  store <4 x i32> %163, <4 x i32>* %164, align 1, !tbaa !11
  %165 = load i32*, i32** %156, align 8, !tbaa !955
  %166 = getelementptr inbounds i32, i32* %165, i64 64
  %167 = load i32, i32* %160, align 4, !tbaa !33
  %168 = insertelement <4 x i32> undef, i32 %167, i32 0
  %169 = shufflevector <4 x i32> %168, <4 x i32> undef, <4 x i32> zeroinitializer
  %170 = bitcast i32* %166 to <4 x i32>*
  store <4 x i32> %169, <4 x i32>* %170, align 1, !tbaa !11
  %171 = load i32*, i32** %156, align 8, !tbaa !955
  %172 = getelementptr inbounds i32, i32* %171, i64 68
  %173 = load i32, i32* %160, align 4, !tbaa !33
  %174 = insertelement <4 x i32> undef, i32 %173, i32 0
  %175 = shufflevector <4 x i32> %174, <4 x i32> undef, <4 x i32> zeroinitializer
  %176 = bitcast i32* %172 to <4 x i32>*
  store <4 x i32> %175, <4 x i32>* %176, align 1, !tbaa !11
  %177 = load i32*, i32** %156, align 8, !tbaa !955
  %178 = getelementptr inbounds i32, i32* %177, i64 72
  %179 = load i32, i32* %160, align 4, !tbaa !33
  %180 = insertelement <4 x i32> undef, i32 %179, i32 0
  %181 = shufflevector <4 x i32> %180, <4 x i32> undef, <4 x i32> zeroinitializer
  %182 = bitcast i32* %178 to <4 x i32>*
  store <4 x i32> %181, <4 x i32>* %182, align 1, !tbaa !11
  %183 = load i32*, i32** %156, align 8, !tbaa !955
  %184 = getelementptr inbounds i32, i32* %183, i64 76
  %185 = load i32, i32* %160, align 4, !tbaa !33
  %186 = insertelement <4 x i32> undef, i32 %185, i32 0
  %187 = shufflevector <4 x i32> %186, <4 x i32> undef, <4 x i32> zeroinitializer
  %188 = bitcast i32* %184 to <4 x i32>*
  store <4 x i32> %187, <4 x i32>* %188, align 1, !tbaa !11
  %189 = load i32*, i32** %156, align 8, !tbaa !955
  %190 = getelementptr inbounds i32, i32* %189, i64 80
  %191 = load i32, i32* %160, align 4, !tbaa !33
  %192 = insertelement <4 x i32> undef, i32 %191, i32 0
  %193 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> zeroinitializer
  %194 = bitcast i32* %190 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %194, align 1, !tbaa !11
  %195 = load i32*, i32** %156, align 8, !tbaa !955
  %196 = getelementptr inbounds i32, i32* %195, i64 84
  %197 = load i32, i32* %160, align 4, !tbaa !33
  %198 = insertelement <4 x i32> undef, i32 %197, i32 0
  %199 = shufflevector <4 x i32> %198, <4 x i32> undef, <4 x i32> zeroinitializer
  %200 = bitcast i32* %196 to <4 x i32>*
  store <4 x i32> %199, <4 x i32>* %200, align 1, !tbaa !11
  %201 = load i32*, i32** %156, align 8, !tbaa !955
  %202 = getelementptr inbounds i32, i32* %201, i64 88
  %203 = load i32, i32* %160, align 4, !tbaa !33
  %204 = insertelement <4 x i32> undef, i32 %203, i32 0
  %205 = shufflevector <4 x i32> %204, <4 x i32> undef, <4 x i32> zeroinitializer
  %206 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> %205, <4 x i32>* %206, align 1, !tbaa !11
  %207 = load i32*, i32** %156, align 8, !tbaa !955
  %208 = getelementptr inbounds i32, i32* %207, i64 92
  %209 = load i32, i32* %160, align 4, !tbaa !33
  %210 = insertelement <4 x i32> undef, i32 %209, i32 0
  %211 = shufflevector <4 x i32> %210, <4 x i32> undef, <4 x i32> zeroinitializer
  %212 = bitcast i32* %208 to <4 x i32>*
  store <4 x i32> %211, <4 x i32>* %212, align 1, !tbaa !11
  %213 = load i32*, i32** %156, align 8, !tbaa !955
  %214 = getelementptr inbounds i32, i32* %213, i64 96
  %215 = load i32, i32* %160, align 4, !tbaa !33
  %216 = insertelement <4 x i32> undef, i32 %215, i32 0
  %217 = shufflevector <4 x i32> %216, <4 x i32> undef, <4 x i32> zeroinitializer
  %218 = bitcast i32* %214 to <4 x i32>*
  store <4 x i32> %217, <4 x i32>* %218, align 1, !tbaa !11
  %219 = load i32*, i32** %156, align 8, !tbaa !955
  %220 = getelementptr inbounds i32, i32* %219, i64 100
  %221 = load i32, i32* %160, align 4, !tbaa !33
  %222 = insertelement <4 x i32> undef, i32 %221, i32 0
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> zeroinitializer
  %224 = bitcast i32* %220 to <4 x i32>*
  store <4 x i32> %223, <4 x i32>* %224, align 1, !tbaa !11
  %225 = load i32*, i32** %156, align 8, !tbaa !955
  %226 = getelementptr inbounds i32, i32* %225, i64 104
  %227 = load i32, i32* %160, align 4, !tbaa !33
  %228 = insertelement <4 x i32> undef, i32 %227, i32 0
  %229 = shufflevector <4 x i32> %228, <4 x i32> undef, <4 x i32> zeroinitializer
  %230 = bitcast i32* %226 to <4 x i32>*
  store <4 x i32> %229, <4 x i32>* %230, align 1, !tbaa !11
  %231 = load i32*, i32** %156, align 8, !tbaa !955
  %232 = getelementptr inbounds i32, i32* %231, i64 108
  %233 = load i32, i32* %160, align 4, !tbaa !33
  %234 = insertelement <4 x i32> undef, i32 %233, i32 0
  %235 = shufflevector <4 x i32> %234, <4 x i32> undef, <4 x i32> zeroinitializer
  %236 = bitcast i32* %232 to <4 x i32>*
  store <4 x i32> %235, <4 x i32>* %236, align 1, !tbaa !11
  %237 = load i32*, i32** %156, align 8, !tbaa !955
  %238 = getelementptr inbounds i32, i32* %237, i64 112
  %239 = load i32, i32* %160, align 4, !tbaa !33
  %240 = insertelement <4 x i32> undef, i32 %239, i32 0
  %241 = shufflevector <4 x i32> %240, <4 x i32> undef, <4 x i32> zeroinitializer
  %242 = bitcast i32* %238 to <4 x i32>*
  store <4 x i32> %241, <4 x i32>* %242, align 1, !tbaa !11
  %243 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %64, align 8, !tbaa !11
  %244 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %243, i64 0, i32 0
  %245 = load i32*, i32** %244, align 8, !tbaa !955
  %246 = getelementptr inbounds i32, i32* %245, i64 116
  %247 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %61, align 8, !tbaa !11
  %248 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %247, i64 0, i32 0, i32 0
  %249 = load i32, i32* %248, align 4, !tbaa !33
  %250 = insertelement <4 x i32> undef, i32 %249, i32 0
  %251 = shufflevector <4 x i32> %250, <4 x i32> undef, <4 x i32> zeroinitializer
  %252 = bitcast i32* %246 to <4 x i32>*
  store <4 x i32> %251, <4 x i32>* %252, align 1, !tbaa !11
  %253 = load i32*, i32** %244, align 8, !tbaa !955
  %254 = getelementptr inbounds i32, i32* %253, i64 120
  %255 = load i32, i32* %248, align 4, !tbaa !33
  %256 = insertelement <4 x i32> undef, i32 %255, i32 0
  %257 = shufflevector <4 x i32> %256, <4 x i32> undef, <4 x i32> zeroinitializer
  %258 = bitcast i32* %254 to <4 x i32>*
  store <4 x i32> %257, <4 x i32>* %258, align 1, !tbaa !11
  call void @_ZN5Eigen8internal47copy_using_evaluator_innervec_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi6ELi47ELi0ELi6ELi47EEEEENS3_INS_14CwiseNullaryOpINS0_18scalar_constant_opIiEES5_EEEENS0_9assign_opIiiEELi0EEELi124ELi280EE3runERSE_(%"class.Eigen::internal::generic_dense_assignment_kernel.1447"* nonnull dereferenceable(32) %10) #11
  %259 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %64, align 8, !tbaa !11
  %260 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %259, i64 0, i32 0
  %261 = load i32*, i32** %260, align 8, !tbaa !955
  %262 = getelementptr inbounds i32, i32* %261, i64 280
  %263 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %61, align 8, !tbaa !11
  %264 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %263, i64 0, i32 0, i32 0
  %265 = load i32, i32* %264, align 4, !tbaa !51
  store i32 %265, i32* %262, align 4, !tbaa !33
  %266 = getelementptr inbounds i32, i32* %261, i64 281
  %267 = load i32, i32* %264, align 4, !tbaa !51
  store i32 %267, i32* %266, align 4, !tbaa !33
  call void @llvm.lifetime.end(i64 32, i8* nonnull %59) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %57) #11
  call void @llvm.lifetime.end(i64 8, i8* nonnull %55) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %54) #11
  %268 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start(i64 4, i8* nonnull %268) #11
  store i32 1, i32* %12, align 4, !tbaa !33
  call void @_ZN5Eigen8internal20generic_product_implINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS3_IiLin1ELi47ELi0ELin1ELi47EEENS_10DenseShapeES7_Li8EE13scaleAndAddToINS3_IiLi6ELi47ELi0ELi6ELi47EEEEEvRT_RKS5_RKS6_RKi(%"class.Eigen::Matrix.94"* nonnull dereferenceable(1128) %0, %"class.Eigen::Transpose.331"* nonnull dereferenceable(8) %1, %"class.Eigen::Matrix.32"* nonnull dereferenceable(16) %2, i32* nonnull dereferenceable(4) %12)
  call void @llvm.lifetime.end(i64 4, i8* nonnull %268) #11
  br label %269

; <label>:269:                                    ; preds = %53, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal20generic_product_implINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS3_IiLin1ELi47ELi0ELin1ELi47EEENS_10DenseShapeES7_Li8EE13scaleAndAddToINS3_IiLi6ELi47ELi0ELi6ELi47EEEEEvRT_RKS5_RKS6_RKi(%"class.Eigen::Matrix.94"* dereferenceable(1128), %"class.Eigen::Transpose.331"* dereferenceable(8), %"class.Eigen::Matrix.32"* dereferenceable(16), i32* dereferenceable(4)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.Eigen::internal::gemm_blocking_space.1448", align 8
  %6 = bitcast %"class.Eigen::Transpose.331"* %1 to %"class.Eigen::PlainObjectBase.124"**
  %7 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %6, align 8, !tbaa !11
  %8 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %7, i64 0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8, !tbaa !43
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %50, label %11

; <label>:11:                                     ; preds = %4
  %12 = load i32, i32* %3, align 4, !tbaa !33
  %13 = bitcast %"class.Eigen::internal::gemm_blocking_space.1448"* %5 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %13) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %13, i8 0, i64 16, i32 8, i1 false) #11
  %14 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1448", %"class.Eigen::internal::gemm_blocking_space.1448"* %5, i64 0, i32 0, i32 2
  %15 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1448", %"class.Eigen::internal::gemm_blocking_space.1448"* %5, i64 0, i32 0, i32 3
  %16 = bitcast i64* %14 to <2 x i64>*
  store <2 x i64> <i64 6, i64 47>, <2 x i64>* %16, align 8, !tbaa !32
  %17 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1448", %"class.Eigen::internal::gemm_blocking_space.1448"* %5, i64 0, i32 0, i32 4
  store i64 %9, i64* %17, align 8, !tbaa !193
  call void @_ZN5Eigen8internal37evaluateProductBlockingSizesHeuristicIiiLi1ElEEvRT2_S3_S3_S2_(i64* nonnull dereferenceable(8) %17, i64* nonnull dereferenceable(8) %14, i64* nonnull dereferenceable(8) %15, i64 1) #11
  %18 = load i64, i64* %14, align 8, !tbaa !460
  %19 = load i64, i64* %17, align 8, !tbaa !193
  %20 = mul nsw i64 %19, %18
  %21 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1448", %"class.Eigen::internal::gemm_blocking_space.1448"* %5, i64 0, i32 1
  store i64 %20, i64* %21, align 8, !tbaa !957
  %22 = load i64, i64* %15, align 8, !tbaa !461
  %23 = mul nsw i64 %22, %19
  %24 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1448", %"class.Eigen::internal::gemm_blocking_space.1448"* %5, i64 0, i32 2
  store i64 %23, i64* %24, align 8, !tbaa !959
  %25 = load i64, i64* %8, align 8, !tbaa !43
  %26 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %7, i64 0, i32 0, i32 0
  %27 = load i32*, i32** %26, align 8, !tbaa !41
  %28 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %2, i64 0, i32 0, i32 0, i32 0
  %29 = load i32*, i32** %28, align 8, !tbaa !35
  %30 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %2, i64 0, i32 0, i32 0, i32 1
  %31 = load i64, i64* %30, align 8, !tbaa !37
  %32 = getelementptr inbounds %"class.Eigen::Matrix.94", %"class.Eigen::Matrix.94"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %33 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1448", %"class.Eigen::internal::gemm_blocking_space.1448"* %5, i64 0, i32 0
  call void @_ZN5Eigen8internal29general_matrix_matrix_productIliLi1ELb0EiLi0ELb0ELi0EE3runElllPKilS4_lPiliRNS0_15level3_blockingIiiEEPNS0_16GemmParallelInfoIlEE(i64 6, i64 47, i64 %25, i32* nonnull %27, i64 %25, i32* nonnull %29, i64 %31, i32* nonnull %32, i64 6, i32 %12, %"class.Eigen::internal::level3_blocking"* nonnull dereferenceable(40) %33, %"struct.Eigen::internal::GemmParallelInfo"* null) #11
  %34 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1448", %"class.Eigen::internal::gemm_blocking_space.1448"* %5, i64 0, i32 0, i32 0
  %35 = load i32*, i32** %34, align 8, !tbaa !195
  %36 = icmp eq i32* %35, null
  br i1 %36, label %41, label %37

; <label>:37:                                     ; preds = %11
  %38 = getelementptr inbounds i32, i32* %35, i64 -2
  %39 = bitcast i32* %38 to i8**
  %40 = load i8*, i8** %39, align 8, !tbaa !29
  call void @free(i8* %40) #11
  br label %41

; <label>:41:                                     ; preds = %37, %11
  %42 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1448", %"class.Eigen::internal::gemm_blocking_space.1448"* %5, i64 0, i32 0, i32 1
  %43 = load i32*, i32** %42, align 8, !tbaa !196
  %44 = icmp eq i32* %43, null
  br i1 %44, label %49, label %45

; <label>:45:                                     ; preds = %41
  %46 = getelementptr inbounds i32, i32* %43, i64 -2
  %47 = bitcast i32* %46 to i8**
  %48 = load i8*, i8** %47, align 8, !tbaa !29
  call void @free(i8* %48) #11
  br label %49

; <label>:49:                                     ; preds = %41, %45
  call void @llvm.lifetime.end(i64 56, i8* nonnull %13) #11
  br label %50

; <label>:50:                                     ; preds = %4, %49
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi6ELi47ELi0ELi6ELi47EEEEENS3_INS_7ProductINS_9TransposeINS4_IiLin1ELi6ELi0ELin1ELi6EEEEENS4_IiLin1ELi47ELi0ELin1ELi47EEELi1EEEEENS0_9assign_opIiiEELi0EEELi0ELi0EE3runERSG_(%"class.Eigen::internal::generic_dense_assignment_kernel.1387"* dereferenceable(32)) local_unnamed_addr #6 align 2 {
  %2 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1387"* %0 to %"struct.Eigen::internal::evaluator.554"**
  %3 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1387", %"class.Eigen::internal::generic_dense_assignment_kernel.1387"* %0, i64 0, i32 1
  %4 = bitcast %"struct.Eigen::internal::evaluator.1384"** %3 to %"struct.Eigen::internal::product_evaluator.1385"**
  br label %5

; <label>:5:                                      ; preds = %5, %1
  %6 = phi i64 [ 0, %1 ], [ %49, %5 ]
  %7 = mul nuw nsw i64 %6, 6
  %8 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %9 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %8, i64 0, i32 0
  %10 = load i32*, i32** %9, align 8, !tbaa !955
  %11 = getelementptr inbounds i32, i32* %10, i64 %7
  %12 = load %"struct.Eigen::internal::product_evaluator.1385"*, %"struct.Eigen::internal::product_evaluator.1385"** %4, align 8, !tbaa !11
  %13 = tail call i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS4_IiLin1ELi47ELi0ELin1ELi47EEELi1EEELi8ENS_10DenseShapeES9_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.1385"* %12, i64 0, i64 %6) #11
  store i32 %13, i32* %11, align 4, !tbaa !33
  %14 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %15 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %14, i64 0, i32 0
  %16 = load i32*, i32** %15, align 8, !tbaa !955
  %17 = or i64 %7, 1
  %18 = getelementptr inbounds i32, i32* %16, i64 %17
  %19 = load %"struct.Eigen::internal::product_evaluator.1385"*, %"struct.Eigen::internal::product_evaluator.1385"** %4, align 8, !tbaa !11
  %20 = tail call i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS4_IiLin1ELi47ELi0ELin1ELi47EEELi1EEELi8ENS_10DenseShapeES9_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.1385"* %19, i64 1, i64 %6) #11
  store i32 %20, i32* %18, align 4, !tbaa !33
  %21 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %22 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %21, i64 0, i32 0
  %23 = load i32*, i32** %22, align 8, !tbaa !955
  %24 = add nuw nsw i64 %7, 2
  %25 = getelementptr inbounds i32, i32* %23, i64 %24
  %26 = load %"struct.Eigen::internal::product_evaluator.1385"*, %"struct.Eigen::internal::product_evaluator.1385"** %4, align 8, !tbaa !11
  %27 = tail call i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS4_IiLin1ELi47ELi0ELin1ELi47EEELi1EEELi8ENS_10DenseShapeES9_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.1385"* %26, i64 2, i64 %6) #11
  store i32 %27, i32* %25, align 4, !tbaa !33
  %28 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %29 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %28, i64 0, i32 0
  %30 = load i32*, i32** %29, align 8, !tbaa !955
  %31 = add nuw nsw i64 %7, 3
  %32 = getelementptr inbounds i32, i32* %30, i64 %31
  %33 = load %"struct.Eigen::internal::product_evaluator.1385"*, %"struct.Eigen::internal::product_evaluator.1385"** %4, align 8, !tbaa !11
  %34 = tail call i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS4_IiLin1ELi47ELi0ELin1ELi47EEELi1EEELi8ENS_10DenseShapeES9_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.1385"* %33, i64 3, i64 %6) #11
  store i32 %34, i32* %32, align 4, !tbaa !33
  %35 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %36 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %35, i64 0, i32 0
  %37 = load i32*, i32** %36, align 8, !tbaa !955
  %38 = add nuw nsw i64 %7, 4
  %39 = getelementptr inbounds i32, i32* %37, i64 %38
  %40 = load %"struct.Eigen::internal::product_evaluator.1385"*, %"struct.Eigen::internal::product_evaluator.1385"** %4, align 8, !tbaa !11
  %41 = tail call i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS4_IiLin1ELi47ELi0ELin1ELi47EEELi1EEELi8ENS_10DenseShapeES9_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.1385"* %40, i64 4, i64 %6) #11
  store i32 %41, i32* %39, align 4, !tbaa !33
  %42 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %43 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %42, i64 0, i32 0
  %44 = load i32*, i32** %43, align 8, !tbaa !955
  %45 = add nuw nsw i64 %7, 5
  %46 = getelementptr inbounds i32, i32* %44, i64 %45
  %47 = load %"struct.Eigen::internal::product_evaluator.1385"*, %"struct.Eigen::internal::product_evaluator.1385"** %4, align 8, !tbaa !11
  %48 = tail call i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS4_IiLin1ELi47ELi0ELin1ELi47EEELi1EEELi8ENS_10DenseShapeES9_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.1385"* %47, i64 5, i64 %6) #11
  store i32 %48, i32* %46, align 4, !tbaa !33
  %49 = add nuw nsw i64 %6, 1
  %50 = icmp eq i64 %49, 47
  br i1 %50, label %51, label %5

; <label>:51:                                     ; preds = %5
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS4_IiLin1ELi47ELi0ELin1ELi47EEELi1EEELi8ENS_10DenseShapeES9_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.1385"*, i64, i64) local_unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1385", %"struct.Eigen::internal::product_evaluator.1385"* %0, i64 0, i32 0, i32 0
  %5 = load %"class.Eigen::Matrix.123"*, %"class.Eigen::Matrix.123"** %4, align 8, !tbaa !11, !noalias !960
  %6 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %5, i64 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8, !tbaa !41, !noalias !960
  %8 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %5, i64 0, i32 0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8, !tbaa !43, !noalias !960
  %10 = mul nsw i64 %9, %1
  %11 = getelementptr inbounds i32, i32* %7, i64 %10
  %12 = icmp ne i32* %11, null
  %13 = icmp slt i64 %9, 0
  %14 = and i1 %13, %12
  br i1 %14, label %15, label %16, !prof !722

; <label>:15:                                     ; preds = %3
  tail call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEELi0EEC2EPKill, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.24, i64 0, i64 0), i32 175, i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.25, i64 0, i64 0)) #13, !noalias !960
  unreachable

; <label>:16:                                     ; preds = %3
  %17 = icmp ugt i64 %1, 5
  br i1 %17, label %18, label %19, !prof !439

; <label>:18:                                     ; preds = %16
  tail call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !960
  unreachable

; <label>:19:                                     ; preds = %16
  %20 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1385", %"struct.Eigen::internal::product_evaluator.1385"* %0, i64 0, i32 1
  %21 = bitcast %"class.Eigen::Matrix.32"** %20 to %"class.Eigen::DenseBase.35"**
  %22 = load %"class.Eigen::DenseBase.35"*, %"class.Eigen::DenseBase.35"** %21, align 8, !tbaa !11
  %23 = bitcast %"class.Eigen::DenseBase.35"* %22 to i32**
  %24 = load i32*, i32** %23, align 8, !tbaa !35, !noalias !963
  %25 = getelementptr inbounds %"class.Eigen::DenseBase.35", %"class.Eigen::DenseBase.35"* %22, i64 8
  %26 = bitcast %"class.Eigen::DenseBase.35"* %25 to i64*
  %27 = load i64, i64* %26, align 8, !tbaa !37, !noalias !963
  %28 = mul nsw i64 %27, %2
  %29 = getelementptr inbounds i32, i32* %24, i64 %28
  %30 = icmp ne i32* %29, null
  %31 = icmp slt i64 %27, 0
  %32 = and i1 %31, %30
  br i1 %32, label %33, label %34, !prof !722

; <label>:33:                                     ; preds = %19
  tail call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEELi0EEC2EPKill, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.24, i64 0, i64 0), i32 175, i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.25, i64 0, i64 0)) #13, !noalias !963
  unreachable

; <label>:34:                                     ; preds = %19
  %35 = icmp ugt i64 %2, 46
  br i1 %35, label %36, label %37, !prof !439

; <label>:36:                                     ; preds = %34
  tail call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !963
  unreachable

; <label>:37:                                     ; preds = %34
  %38 = icmp eq i64 %9, %27
  br i1 %38, label %40, label %39

; <label>:39:                                     ; preds = %37
  tail call void @__assert_rtn(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__func__._ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIddEEKNS_7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS5_IdLin1ELi1ELi0ELin1ELi1EEELi0EEEKS7_EC2ERS9_RSA_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.3, i64 0, i64 0), i32 110, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.4, i64 0, i64 0)) #13, !noalias !966
  unreachable

; <label>:40:                                     ; preds = %37
  %41 = icmp eq i64 %9, 0
  br i1 %41, label %533, label %42

; <label>:42:                                     ; preds = %40
  %43 = icmp sgt i64 %9, 0
  br i1 %43, label %45, label %44

; <label>:44:                                     ; preds = %42
  tail call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZNK5Eigen9DenseBaseINS_12CwiseUnaryOpINS_8internal14scalar_abs2_opIdEEKNS_13CwiseBinaryOpINS2_20scalar_difference_opIddEEKNS_7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS9_IdLin1ELi1ELi0ELin1ELi1EEELi0EEEKSB_EEEEE5reduxINS2_13scalar_sum_opIddEEEEdRKT_, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.6, i64 0, i64 0), i32 413, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.7, i64 0, i64 0)) #13
  unreachable

; <label>:45:                                     ; preds = %42
  %46 = and i64 %9, -8
  %47 = and i64 %9, -4
  %48 = add i64 %9, 3
  %49 = icmp ugt i64 %48, 6
  br i1 %49, label %50, label %364

; <label>:50:                                     ; preds = %45
  %51 = bitcast i32* %11 to <4 x i32>*
  %52 = load <4 x i32>, <4 x i32>* %51, align 1, !tbaa !11
  %53 = bitcast i32* %29 to <4 x i32>*
  %54 = load <4 x i32>, <4 x i32>* %53, align 1, !tbaa !11
  %55 = mul <4 x i32> %54, %52
  %56 = icmp sgt i64 %47, 4
  br i1 %56, label %57, label %205

; <label>:57:                                     ; preds = %50
  %58 = getelementptr inbounds i32, i32* %11, i64 4
  %59 = bitcast i32* %58 to <4 x i32>*
  %60 = load <4 x i32>, <4 x i32>* %59, align 1, !tbaa !11
  %61 = getelementptr inbounds i32, i32* %29, i64 4
  %62 = bitcast i32* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 1, !tbaa !11
  %64 = mul <4 x i32> %63, %60
  %65 = icmp sgt i64 %46, 8
  br i1 %65, label %66, label %113

; <label>:66:                                     ; preds = %57
  %67 = add i64 %46, -9
  %68 = lshr i64 %67, 3
  %69 = add nuw nsw i64 %68, 1
  %70 = and i64 %69, 3
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %100, label %72

; <label>:72:                                     ; preds = %66
  br label %73

; <label>:73:                                     ; preds = %73, %72
  %74 = phi i64 [ %96, %73 ], [ 8, %72 ]
  %75 = phi i64 [ %74, %73 ], [ 0, %72 ]
  %76 = phi <4 x i32> [ %86, %73 ], [ %55, %72 ]
  %77 = phi <4 x i32> [ %95, %73 ], [ %64, %72 ]
  %78 = phi i64 [ %97, %73 ], [ %70, %72 ]
  %79 = getelementptr inbounds i32, i32* %11, i64 %74
  %80 = bitcast i32* %79 to <4 x i32>*
  %81 = load <4 x i32>, <4 x i32>* %80, align 1, !tbaa !11
  %82 = getelementptr inbounds i32, i32* %29, i64 %74
  %83 = bitcast i32* %82 to <4 x i32>*
  %84 = load <4 x i32>, <4 x i32>* %83, align 1, !tbaa !11
  %85 = mul <4 x i32> %84, %81
  %86 = add <4 x i32> %85, %76
  %87 = add nuw nsw i64 %75, 12
  %88 = getelementptr inbounds i32, i32* %11, i64 %87
  %89 = bitcast i32* %88 to <4 x i32>*
  %90 = load <4 x i32>, <4 x i32>* %89, align 1, !tbaa !11
  %91 = getelementptr inbounds i32, i32* %29, i64 %87
  %92 = bitcast i32* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 1, !tbaa !11
  %94 = mul <4 x i32> %93, %90
  %95 = add <4 x i32> %94, %77
  %96 = add nuw nsw i64 %74, 8
  %97 = add i64 %78, -1
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %73, !llvm.loop !969

; <label>:99:                                     ; preds = %73
  br label %100

; <label>:100:                                    ; preds = %66, %99
  %101 = phi i64 [ 8, %66 ], [ %96, %99 ]
  %102 = phi i64 [ 0, %66 ], [ %74, %99 ]
  %103 = phi <4 x i32> [ %55, %66 ], [ %86, %99 ]
  %104 = phi <4 x i32> [ %64, %66 ], [ %95, %99 ]
  %105 = phi <4 x i32> [ undef, %66 ], [ %86, %99 ]
  %106 = phi <4 x i32> [ undef, %66 ], [ %95, %99 ]
  %107 = icmp ult i64 %67, 24
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %100
  br label %118

; <label>:109:                                    ; preds = %118
  br label %110

; <label>:110:                                    ; preds = %100, %109
  %111 = phi <4 x i32> [ %105, %100 ], [ %184, %109 ]
  %112 = phi <4 x i32> [ %106, %100 ], [ %193, %109 ]
  br label %113

; <label>:113:                                    ; preds = %110, %57
  %114 = phi <4 x i32> [ %64, %57 ], [ %112, %110 ]
  %115 = phi <4 x i32> [ %55, %57 ], [ %111, %110 ]
  %116 = add <4 x i32> %115, %114
  %117 = icmp sgt i64 %47, %46
  br i1 %117, label %196, label %205

; <label>:118:                                    ; preds = %118, %108
  %119 = phi i64 [ %101, %108 ], [ %194, %118 ]
  %120 = phi i64 [ %102, %108 ], [ %176, %118 ]
  %121 = phi <4 x i32> [ %103, %108 ], [ %184, %118 ]
  %122 = phi <4 x i32> [ %104, %108 ], [ %193, %118 ]
  %123 = getelementptr inbounds i32, i32* %11, i64 %119
  %124 = bitcast i32* %123 to <4 x i32>*
  %125 = load <4 x i32>, <4 x i32>* %124, align 1, !tbaa !11
  %126 = getelementptr inbounds i32, i32* %29, i64 %119
  %127 = bitcast i32* %126 to <4 x i32>*
  %128 = load <4 x i32>, <4 x i32>* %127, align 1, !tbaa !11
  %129 = mul <4 x i32> %128, %125
  %130 = add <4 x i32> %129, %121
  %131 = add nuw nsw i64 %120, 12
  %132 = getelementptr inbounds i32, i32* %11, i64 %131
  %133 = bitcast i32* %132 to <4 x i32>*
  %134 = load <4 x i32>, <4 x i32>* %133, align 1, !tbaa !11
  %135 = getelementptr inbounds i32, i32* %29, i64 %131
  %136 = bitcast i32* %135 to <4 x i32>*
  %137 = load <4 x i32>, <4 x i32>* %136, align 1, !tbaa !11
  %138 = mul <4 x i32> %137, %134
  %139 = add <4 x i32> %138, %122
  %140 = add nuw nsw i64 %119, 8
  %141 = getelementptr inbounds i32, i32* %11, i64 %140
  %142 = bitcast i32* %141 to <4 x i32>*
  %143 = load <4 x i32>, <4 x i32>* %142, align 1, !tbaa !11
  %144 = getelementptr inbounds i32, i32* %29, i64 %140
  %145 = bitcast i32* %144 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 1, !tbaa !11
  %147 = mul <4 x i32> %146, %143
  %148 = add <4 x i32> %147, %130
  %149 = add nuw nsw i64 %119, 12
  %150 = getelementptr inbounds i32, i32* %11, i64 %149
  %151 = bitcast i32* %150 to <4 x i32>*
  %152 = load <4 x i32>, <4 x i32>* %151, align 1, !tbaa !11
  %153 = getelementptr inbounds i32, i32* %29, i64 %149
  %154 = bitcast i32* %153 to <4 x i32>*
  %155 = load <4 x i32>, <4 x i32>* %154, align 1, !tbaa !11
  %156 = mul <4 x i32> %155, %152
  %157 = add <4 x i32> %156, %139
  %158 = add nsw i64 %119, 16
  %159 = getelementptr inbounds i32, i32* %11, i64 %158
  %160 = bitcast i32* %159 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 1, !tbaa !11
  %162 = getelementptr inbounds i32, i32* %29, i64 %158
  %163 = bitcast i32* %162 to <4 x i32>*
  %164 = load <4 x i32>, <4 x i32>* %163, align 1, !tbaa !11
  %165 = mul <4 x i32> %164, %161
  %166 = add <4 x i32> %165, %148
  %167 = add nsw i64 %119, 20
  %168 = getelementptr inbounds i32, i32* %11, i64 %167
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 1, !tbaa !11
  %171 = getelementptr inbounds i32, i32* %29, i64 %167
  %172 = bitcast i32* %171 to <4 x i32>*
  %173 = load <4 x i32>, <4 x i32>* %172, align 1, !tbaa !11
  %174 = mul <4 x i32> %173, %170
  %175 = add <4 x i32> %174, %157
  %176 = add nsw i64 %119, 24
  %177 = getelementptr inbounds i32, i32* %11, i64 %176
  %178 = bitcast i32* %177 to <4 x i32>*
  %179 = load <4 x i32>, <4 x i32>* %178, align 1, !tbaa !11
  %180 = getelementptr inbounds i32, i32* %29, i64 %176
  %181 = bitcast i32* %180 to <4 x i32>*
  %182 = load <4 x i32>, <4 x i32>* %181, align 1, !tbaa !11
  %183 = mul <4 x i32> %182, %179
  %184 = add <4 x i32> %183, %166
  %185 = add nsw i64 %119, 28
  %186 = getelementptr inbounds i32, i32* %11, i64 %185
  %187 = bitcast i32* %186 to <4 x i32>*
  %188 = load <4 x i32>, <4 x i32>* %187, align 1, !tbaa !11
  %189 = getelementptr inbounds i32, i32* %29, i64 %185
  %190 = bitcast i32* %189 to <4 x i32>*
  %191 = load <4 x i32>, <4 x i32>* %190, align 1, !tbaa !11
  %192 = mul <4 x i32> %191, %188
  %193 = add <4 x i32> %192, %175
  %194 = add nsw i64 %119, 32
  %195 = icmp slt i64 %194, %46
  br i1 %195, label %118, label %109

; <label>:196:                                    ; preds = %113
  %197 = getelementptr inbounds i32, i32* %11, i64 %46
  %198 = bitcast i32* %197 to <4 x i32>*
  %199 = load <4 x i32>, <4 x i32>* %198, align 1, !tbaa !11
  %200 = getelementptr inbounds i32, i32* %29, i64 %46
  %201 = bitcast i32* %200 to <4 x i32>*
  %202 = load <4 x i32>, <4 x i32>* %201, align 1, !tbaa !11
  %203 = mul <4 x i32> %202, %199
  %204 = add <4 x i32> %203, %116
  br label %205

; <label>:205:                                    ; preds = %196, %113, %50
  %206 = phi <4 x i32> [ %55, %50 ], [ %204, %196 ], [ %116, %113 ]
  %207 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %206, <4 x i32> %206) #11
  %208 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %207, <4 x i32> %207) #11
  %209 = extractelement <4 x i32> %208, i32 0
  %210 = icmp sgt i64 %9, %47
  br i1 %210, label %211, label %533

; <label>:211:                                    ; preds = %205
  %212 = sub i64 %9, %47
  %213 = icmp ult i64 %212, 16
  br i1 %213, label %350, label %214

; <label>:214:                                    ; preds = %211
  %215 = and i64 %212, -16
  %216 = icmp eq i64 %215, 0
  %217 = add i64 %47, %215
  br i1 %216, label %350, label %218

; <label>:218:                                    ; preds = %214
  %219 = insertelement <8 x i32> <i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %209, i32 0
  %220 = add i64 %215, -16
  %221 = lshr exact i64 %220, 4
  %222 = add nuw nsw i64 %221, 1
  %223 = and i64 %222, 3
  %224 = icmp eq i64 %223, 0
  br i1 %224, label %252, label %225

; <label>:225:                                    ; preds = %218
  br label %226

; <label>:226:                                    ; preds = %226, %225
  %227 = phi i64 [ 0, %225 ], [ %248, %226 ]
  %228 = phi <8 x i32> [ %219, %225 ], [ %246, %226 ]
  %229 = phi <8 x i32> [ zeroinitializer, %225 ], [ %247, %226 ]
  %230 = phi i64 [ %223, %225 ], [ %249, %226 ]
  %231 = add i64 %47, %227
  %232 = getelementptr inbounds i32, i32* %11, i64 %231
  %233 = bitcast i32* %232 to <8 x i32>*
  %234 = load <8 x i32>, <8 x i32>* %233, align 4, !tbaa !33
  %235 = getelementptr i32, i32* %232, i64 8
  %236 = bitcast i32* %235 to <8 x i32>*
  %237 = load <8 x i32>, <8 x i32>* %236, align 4, !tbaa !33
  %238 = getelementptr inbounds i32, i32* %29, i64 %231
  %239 = bitcast i32* %238 to <8 x i32>*
  %240 = load <8 x i32>, <8 x i32>* %239, align 4, !tbaa !33
  %241 = getelementptr i32, i32* %238, i64 8
  %242 = bitcast i32* %241 to <8 x i32>*
  %243 = load <8 x i32>, <8 x i32>* %242, align 4, !tbaa !33
  %244 = mul nsw <8 x i32> %240, %234
  %245 = mul nsw <8 x i32> %243, %237
  %246 = add nsw <8 x i32> %244, %228
  %247 = add nsw <8 x i32> %245, %229
  %248 = add i64 %227, 16
  %249 = add i64 %230, -1
  %250 = icmp eq i64 %249, 0
  br i1 %250, label %251, label %226, !llvm.loop !970

; <label>:251:                                    ; preds = %226
  br label %252

; <label>:252:                                    ; preds = %218, %251
  %253 = phi <8 x i32> [ undef, %218 ], [ %246, %251 ]
  %254 = phi <8 x i32> [ undef, %218 ], [ %247, %251 ]
  %255 = phi i64 [ 0, %218 ], [ %248, %251 ]
  %256 = phi <8 x i32> [ %219, %218 ], [ %246, %251 ]
  %257 = phi <8 x i32> [ zeroinitializer, %218 ], [ %247, %251 ]
  %258 = icmp ult i64 %220, 48
  br i1 %258, label %338, label %259

; <label>:259:                                    ; preds = %252
  br label %260

; <label>:260:                                    ; preds = %260, %259
  %261 = phi i64 [ %255, %259 ], [ %335, %260 ]
  %262 = phi <8 x i32> [ %256, %259 ], [ %333, %260 ]
  %263 = phi <8 x i32> [ %257, %259 ], [ %334, %260 ]
  %264 = add i64 %47, %261
  %265 = getelementptr inbounds i32, i32* %11, i64 %264
  %266 = bitcast i32* %265 to <8 x i32>*
  %267 = load <8 x i32>, <8 x i32>* %266, align 4, !tbaa !33
  %268 = getelementptr i32, i32* %265, i64 8
  %269 = bitcast i32* %268 to <8 x i32>*
  %270 = load <8 x i32>, <8 x i32>* %269, align 4, !tbaa !33
  %271 = getelementptr inbounds i32, i32* %29, i64 %264
  %272 = bitcast i32* %271 to <8 x i32>*
  %273 = load <8 x i32>, <8 x i32>* %272, align 4, !tbaa !33
  %274 = getelementptr i32, i32* %271, i64 8
  %275 = bitcast i32* %274 to <8 x i32>*
  %276 = load <8 x i32>, <8 x i32>* %275, align 4, !tbaa !33
  %277 = mul nsw <8 x i32> %273, %267
  %278 = mul nsw <8 x i32> %276, %270
  %279 = add nsw <8 x i32> %277, %262
  %280 = add nsw <8 x i32> %278, %263
  %281 = add i64 %261, 16
  %282 = add i64 %47, %281
  %283 = getelementptr inbounds i32, i32* %11, i64 %282
  %284 = bitcast i32* %283 to <8 x i32>*
  %285 = load <8 x i32>, <8 x i32>* %284, align 4, !tbaa !33
  %286 = getelementptr i32, i32* %283, i64 8
  %287 = bitcast i32* %286 to <8 x i32>*
  %288 = load <8 x i32>, <8 x i32>* %287, align 4, !tbaa !33
  %289 = getelementptr inbounds i32, i32* %29, i64 %282
  %290 = bitcast i32* %289 to <8 x i32>*
  %291 = load <8 x i32>, <8 x i32>* %290, align 4, !tbaa !33
  %292 = getelementptr i32, i32* %289, i64 8
  %293 = bitcast i32* %292 to <8 x i32>*
  %294 = load <8 x i32>, <8 x i32>* %293, align 4, !tbaa !33
  %295 = mul nsw <8 x i32> %291, %285
  %296 = mul nsw <8 x i32> %294, %288
  %297 = add nsw <8 x i32> %295, %279
  %298 = add nsw <8 x i32> %296, %280
  %299 = add i64 %261, 32
  %300 = add i64 %47, %299
  %301 = getelementptr inbounds i32, i32* %11, i64 %300
  %302 = bitcast i32* %301 to <8 x i32>*
  %303 = load <8 x i32>, <8 x i32>* %302, align 4, !tbaa !33
  %304 = getelementptr i32, i32* %301, i64 8
  %305 = bitcast i32* %304 to <8 x i32>*
  %306 = load <8 x i32>, <8 x i32>* %305, align 4, !tbaa !33
  %307 = getelementptr inbounds i32, i32* %29, i64 %300
  %308 = bitcast i32* %307 to <8 x i32>*
  %309 = load <8 x i32>, <8 x i32>* %308, align 4, !tbaa !33
  %310 = getelementptr i32, i32* %307, i64 8
  %311 = bitcast i32* %310 to <8 x i32>*
  %312 = load <8 x i32>, <8 x i32>* %311, align 4, !tbaa !33
  %313 = mul nsw <8 x i32> %309, %303
  %314 = mul nsw <8 x i32> %312, %306
  %315 = add nsw <8 x i32> %313, %297
  %316 = add nsw <8 x i32> %314, %298
  %317 = add i64 %261, 48
  %318 = add i64 %47, %317
  %319 = getelementptr inbounds i32, i32* %11, i64 %318
  %320 = bitcast i32* %319 to <8 x i32>*
  %321 = load <8 x i32>, <8 x i32>* %320, align 4, !tbaa !33
  %322 = getelementptr i32, i32* %319, i64 8
  %323 = bitcast i32* %322 to <8 x i32>*
  %324 = load <8 x i32>, <8 x i32>* %323, align 4, !tbaa !33
  %325 = getelementptr inbounds i32, i32* %29, i64 %318
  %326 = bitcast i32* %325 to <8 x i32>*
  %327 = load <8 x i32>, <8 x i32>* %326, align 4, !tbaa !33
  %328 = getelementptr i32, i32* %325, i64 8
  %329 = bitcast i32* %328 to <8 x i32>*
  %330 = load <8 x i32>, <8 x i32>* %329, align 4, !tbaa !33
  %331 = mul nsw <8 x i32> %327, %321
  %332 = mul nsw <8 x i32> %330, %324
  %333 = add nsw <8 x i32> %331, %315
  %334 = add nsw <8 x i32> %332, %316
  %335 = add i64 %261, 64
  %336 = icmp eq i64 %335, %215
  br i1 %336, label %337, label %260, !llvm.loop !971

; <label>:337:                                    ; preds = %260
  br label %338

; <label>:338:                                    ; preds = %252, %337
  %339 = phi <8 x i32> [ %253, %252 ], [ %333, %337 ]
  %340 = phi <8 x i32> [ %254, %252 ], [ %334, %337 ]
  %341 = add <8 x i32> %340, %339
  %342 = shufflevector <8 x i32> %341, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %343 = add <8 x i32> %341, %342
  %344 = shufflevector <8 x i32> %343, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %345 = add <8 x i32> %343, %344
  %346 = shufflevector <8 x i32> %345, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %347 = add <8 x i32> %345, %346
  %348 = extractelement <8 x i32> %347, i32 0
  %349 = icmp eq i64 %212, %215
  br i1 %349, label %533, label %350

; <label>:350:                                    ; preds = %338, %214, %211
  %351 = phi i64 [ %47, %214 ], [ %47, %211 ], [ %217, %338 ]
  %352 = phi i32 [ %209, %214 ], [ %209, %211 ], [ %348, %338 ]
  br label %353

; <label>:353:                                    ; preds = %350, %353
  %354 = phi i64 [ %362, %353 ], [ %351, %350 ]
  %355 = phi i32 [ %361, %353 ], [ %352, %350 ]
  %356 = getelementptr inbounds i32, i32* %11, i64 %354
  %357 = load i32, i32* %356, align 4, !tbaa !33
  %358 = getelementptr inbounds i32, i32* %29, i64 %354
  %359 = load i32, i32* %358, align 4, !tbaa !33
  %360 = mul nsw i32 %359, %357
  %361 = add nsw i32 %360, %355
  %362 = add nsw i64 %354, 1
  %363 = icmp eq i64 %362, %9
  br i1 %363, label %531, label %353, !llvm.loop !972

; <label>:364:                                    ; preds = %45
  %365 = load i32, i32* %11, align 4, !tbaa !33
  %366 = load i32, i32* %29, align 4, !tbaa !33
  %367 = mul nsw i32 %366, %365
  %368 = icmp sgt i64 %9, 1
  br i1 %368, label %369, label %533

; <label>:369:                                    ; preds = %364
  %370 = add i64 %9, -1
  %371 = icmp ult i64 %370, 32
  br i1 %371, label %517, label %372

; <label>:372:                                    ; preds = %369
  %373 = and i64 %370, -32
  %374 = icmp eq i64 %373, 0
  %375 = or i64 %373, 1
  br i1 %374, label %517, label %376

; <label>:376:                                    ; preds = %372
  %377 = insertelement <8 x i32> <i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %367, i32 0
  %378 = add i64 %373, -32
  %379 = lshr exact i64 %378, 5
  %380 = and i64 %379, 1
  %381 = icmp eq i64 %380, 0
  br i1 %381, label %382, label %413

; <label>:382:                                    ; preds = %376
  br label %383

; <label>:383:                                    ; preds = %382
  %384 = getelementptr inbounds i32, i32* %11, i64 1
  %385 = bitcast i32* %384 to <8 x i32>*
  %386 = load <8 x i32>, <8 x i32>* %385, align 4, !tbaa !33
  %387 = getelementptr i32, i32* %384, i64 8
  %388 = bitcast i32* %387 to <8 x i32>*
  %389 = load <8 x i32>, <8 x i32>* %388, align 4, !tbaa !33
  %390 = getelementptr i32, i32* %384, i64 16
  %391 = bitcast i32* %390 to <8 x i32>*
  %392 = load <8 x i32>, <8 x i32>* %391, align 4, !tbaa !33
  %393 = getelementptr i32, i32* %384, i64 24
  %394 = bitcast i32* %393 to <8 x i32>*
  %395 = load <8 x i32>, <8 x i32>* %394, align 4, !tbaa !33
  %396 = getelementptr inbounds i32, i32* %29, i64 1
  %397 = bitcast i32* %396 to <8 x i32>*
  %398 = load <8 x i32>, <8 x i32>* %397, align 4, !tbaa !33
  %399 = getelementptr i32, i32* %396, i64 8
  %400 = bitcast i32* %399 to <8 x i32>*
  %401 = load <8 x i32>, <8 x i32>* %400, align 4, !tbaa !33
  %402 = getelementptr i32, i32* %396, i64 16
  %403 = bitcast i32* %402 to <8 x i32>*
  %404 = load <8 x i32>, <8 x i32>* %403, align 4, !tbaa !33
  %405 = getelementptr i32, i32* %396, i64 24
  %406 = bitcast i32* %405 to <8 x i32>*
  %407 = load <8 x i32>, <8 x i32>* %406, align 4, !tbaa !33
  %408 = mul nsw <8 x i32> %398, %386
  %409 = mul nsw <8 x i32> %401, %389
  %410 = mul nsw <8 x i32> %404, %392
  %411 = mul nsw <8 x i32> %407, %395
  %412 = add nsw <8 x i32> %408, %377
  br label %413

; <label>:413:                                    ; preds = %383, %376
  %414 = phi <8 x i32> [ undef, %376 ], [ %412, %383 ]
  %415 = phi <8 x i32> [ undef, %376 ], [ %409, %383 ]
  %416 = phi <8 x i32> [ undef, %376 ], [ %410, %383 ]
  %417 = phi <8 x i32> [ undef, %376 ], [ %411, %383 ]
  %418 = phi i64 [ 0, %376 ], [ 32, %383 ]
  %419 = phi <8 x i32> [ %377, %376 ], [ %412, %383 ]
  %420 = phi <8 x i32> [ zeroinitializer, %376 ], [ %409, %383 ]
  %421 = phi <8 x i32> [ zeroinitializer, %376 ], [ %410, %383 ]
  %422 = phi <8 x i32> [ zeroinitializer, %376 ], [ %411, %383 ]
  %423 = icmp eq i64 %379, 0
  br i1 %423, label %501, label %424

; <label>:424:                                    ; preds = %413
  br label %425

; <label>:425:                                    ; preds = %425, %424
  %426 = phi i64 [ %418, %424 ], [ %498, %425 ]
  %427 = phi <8 x i32> [ %419, %424 ], [ %494, %425 ]
  %428 = phi <8 x i32> [ %420, %424 ], [ %495, %425 ]
  %429 = phi <8 x i32> [ %421, %424 ], [ %496, %425 ]
  %430 = phi <8 x i32> [ %422, %424 ], [ %497, %425 ]
  %431 = or i64 %426, 1
  %432 = getelementptr inbounds i32, i32* %11, i64 %431
  %433 = bitcast i32* %432 to <8 x i32>*
  %434 = load <8 x i32>, <8 x i32>* %433, align 4, !tbaa !33
  %435 = getelementptr i32, i32* %432, i64 8
  %436 = bitcast i32* %435 to <8 x i32>*
  %437 = load <8 x i32>, <8 x i32>* %436, align 4, !tbaa !33
  %438 = getelementptr i32, i32* %432, i64 16
  %439 = bitcast i32* %438 to <8 x i32>*
  %440 = load <8 x i32>, <8 x i32>* %439, align 4, !tbaa !33
  %441 = getelementptr i32, i32* %432, i64 24
  %442 = bitcast i32* %441 to <8 x i32>*
  %443 = load <8 x i32>, <8 x i32>* %442, align 4, !tbaa !33
  %444 = getelementptr inbounds i32, i32* %29, i64 %431
  %445 = bitcast i32* %444 to <8 x i32>*
  %446 = load <8 x i32>, <8 x i32>* %445, align 4, !tbaa !33
  %447 = getelementptr i32, i32* %444, i64 8
  %448 = bitcast i32* %447 to <8 x i32>*
  %449 = load <8 x i32>, <8 x i32>* %448, align 4, !tbaa !33
  %450 = getelementptr i32, i32* %444, i64 16
  %451 = bitcast i32* %450 to <8 x i32>*
  %452 = load <8 x i32>, <8 x i32>* %451, align 4, !tbaa !33
  %453 = getelementptr i32, i32* %444, i64 24
  %454 = bitcast i32* %453 to <8 x i32>*
  %455 = load <8 x i32>, <8 x i32>* %454, align 4, !tbaa !33
  %456 = mul nsw <8 x i32> %446, %434
  %457 = mul nsw <8 x i32> %449, %437
  %458 = mul nsw <8 x i32> %452, %440
  %459 = mul nsw <8 x i32> %455, %443
  %460 = add nsw <8 x i32> %456, %427
  %461 = add nsw <8 x i32> %457, %428
  %462 = add nsw <8 x i32> %458, %429
  %463 = add nsw <8 x i32> %459, %430
  %464 = add i64 %426, 32
  %465 = or i64 %464, 1
  %466 = getelementptr inbounds i32, i32* %11, i64 %465
  %467 = bitcast i32* %466 to <8 x i32>*
  %468 = load <8 x i32>, <8 x i32>* %467, align 4, !tbaa !33
  %469 = getelementptr i32, i32* %466, i64 8
  %470 = bitcast i32* %469 to <8 x i32>*
  %471 = load <8 x i32>, <8 x i32>* %470, align 4, !tbaa !33
  %472 = getelementptr i32, i32* %466, i64 16
  %473 = bitcast i32* %472 to <8 x i32>*
  %474 = load <8 x i32>, <8 x i32>* %473, align 4, !tbaa !33
  %475 = getelementptr i32, i32* %466, i64 24
  %476 = bitcast i32* %475 to <8 x i32>*
  %477 = load <8 x i32>, <8 x i32>* %476, align 4, !tbaa !33
  %478 = getelementptr inbounds i32, i32* %29, i64 %465
  %479 = bitcast i32* %478 to <8 x i32>*
  %480 = load <8 x i32>, <8 x i32>* %479, align 4, !tbaa !33
  %481 = getelementptr i32, i32* %478, i64 8
  %482 = bitcast i32* %481 to <8 x i32>*
  %483 = load <8 x i32>, <8 x i32>* %482, align 4, !tbaa !33
  %484 = getelementptr i32, i32* %478, i64 16
  %485 = bitcast i32* %484 to <8 x i32>*
  %486 = load <8 x i32>, <8 x i32>* %485, align 4, !tbaa !33
  %487 = getelementptr i32, i32* %478, i64 24
  %488 = bitcast i32* %487 to <8 x i32>*
  %489 = load <8 x i32>, <8 x i32>* %488, align 4, !tbaa !33
  %490 = mul nsw <8 x i32> %480, %468
  %491 = mul nsw <8 x i32> %483, %471
  %492 = mul nsw <8 x i32> %486, %474
  %493 = mul nsw <8 x i32> %489, %477
  %494 = add nsw <8 x i32> %490, %460
  %495 = add nsw <8 x i32> %491, %461
  %496 = add nsw <8 x i32> %492, %462
  %497 = add nsw <8 x i32> %493, %463
  %498 = add i64 %426, 64
  %499 = icmp eq i64 %498, %373
  br i1 %499, label %500, label %425, !llvm.loop !973

; <label>:500:                                    ; preds = %425
  br label %501

; <label>:501:                                    ; preds = %413, %500
  %502 = phi <8 x i32> [ %414, %413 ], [ %494, %500 ]
  %503 = phi <8 x i32> [ %415, %413 ], [ %495, %500 ]
  %504 = phi <8 x i32> [ %416, %413 ], [ %496, %500 ]
  %505 = phi <8 x i32> [ %417, %413 ], [ %497, %500 ]
  %506 = add <8 x i32> %503, %502
  %507 = add <8 x i32> %504, %506
  %508 = add <8 x i32> %505, %507
  %509 = shufflevector <8 x i32> %508, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %510 = add <8 x i32> %508, %509
  %511 = shufflevector <8 x i32> %510, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %512 = add <8 x i32> %510, %511
  %513 = shufflevector <8 x i32> %512, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %514 = add <8 x i32> %512, %513
  %515 = extractelement <8 x i32> %514, i32 0
  %516 = icmp eq i64 %370, %373
  br i1 %516, label %533, label %517

; <label>:517:                                    ; preds = %501, %372, %369
  %518 = phi i64 [ 1, %372 ], [ 1, %369 ], [ %375, %501 ]
  %519 = phi i32 [ %367, %372 ], [ %367, %369 ], [ %515, %501 ]
  br label %520

; <label>:520:                                    ; preds = %517, %520
  %521 = phi i64 [ %529, %520 ], [ %518, %517 ]
  %522 = phi i32 [ %528, %520 ], [ %519, %517 ]
  %523 = getelementptr inbounds i32, i32* %11, i64 %521
  %524 = load i32, i32* %523, align 4, !tbaa !33
  %525 = getelementptr inbounds i32, i32* %29, i64 %521
  %526 = load i32, i32* %525, align 4, !tbaa !33
  %527 = mul nsw i32 %526, %524
  %528 = add nsw i32 %527, %522
  %529 = add nuw nsw i64 %521, 1
  %530 = icmp eq i64 %529, %9
  br i1 %530, label %532, label %520, !llvm.loop !974

; <label>:531:                                    ; preds = %353
  br label %533

; <label>:532:                                    ; preds = %520
  br label %533

; <label>:533:                                    ; preds = %532, %531, %501, %338, %364, %205, %40
  %534 = phi i32 [ 0, %40 ], [ %209, %205 ], [ %367, %364 ], [ %348, %338 ], [ %515, %501 ], [ %361, %531 ], [ %528, %532 ]
  ret i32 %534
}

; Function Attrs: inlinehint norecurse nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal47copy_using_evaluator_innervec_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi6ELi47ELi0ELi6ELi47EEEEENS3_INS_14CwiseNullaryOpINS0_18scalar_constant_opIiEES5_EEEENS0_9assign_opIiiEELi0EEELi124ELi280EE3runERSE_(%"class.Eigen::internal::generic_dense_assignment_kernel.1447"* dereferenceable(32)) local_unnamed_addr #12 align 2 {
  %2 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1447"* %0 to %"struct.Eigen::internal::evaluator.554"**
  %3 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %4 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %3, i64 0, i32 0
  %5 = load i32*, i32** %4, align 8, !tbaa !955
  %6 = getelementptr inbounds i32, i32* %5, i64 124
  %7 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1447", %"class.Eigen::internal::generic_dense_assignment_kernel.1447"* %0, i64 0, i32 1
  %8 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %9 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %8, i64 0, i32 0, i32 0
  %10 = load i32, i32* %9, align 4, !tbaa !33
  %11 = insertelement <4 x i32> undef, i32 %10, i32 0
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> zeroinitializer
  %13 = bitcast i32* %6 to <4 x i32>*
  store <4 x i32> %12, <4 x i32>* %13, align 1, !tbaa !11
  %14 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %15 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %14, i64 0, i32 0
  %16 = load i32*, i32** %15, align 8, !tbaa !955
  %17 = getelementptr inbounds i32, i32* %16, i64 128
  %18 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %19 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %18, i64 0, i32 0, i32 0
  %20 = load i32, i32* %19, align 4, !tbaa !33
  %21 = insertelement <4 x i32> undef, i32 %20, i32 0
  %22 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> zeroinitializer
  %23 = bitcast i32* %17 to <4 x i32>*
  store <4 x i32> %22, <4 x i32>* %23, align 1, !tbaa !11
  %24 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %25 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %24, i64 0, i32 0
  %26 = load i32*, i32** %25, align 8, !tbaa !955
  %27 = getelementptr inbounds i32, i32* %26, i64 132
  %28 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %29 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %28, i64 0, i32 0, i32 0
  %30 = load i32, i32* %29, align 4, !tbaa !33
  %31 = insertelement <4 x i32> undef, i32 %30, i32 0
  %32 = shufflevector <4 x i32> %31, <4 x i32> undef, <4 x i32> zeroinitializer
  %33 = bitcast i32* %27 to <4 x i32>*
  store <4 x i32> %32, <4 x i32>* %33, align 1, !tbaa !11
  %34 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %35 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %34, i64 0, i32 0
  %36 = load i32*, i32** %35, align 8, !tbaa !955
  %37 = getelementptr inbounds i32, i32* %36, i64 136
  %38 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %39 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %38, i64 0, i32 0, i32 0
  %40 = load i32, i32* %39, align 4, !tbaa !33
  %41 = insertelement <4 x i32> undef, i32 %40, i32 0
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> zeroinitializer
  %43 = bitcast i32* %37 to <4 x i32>*
  store <4 x i32> %42, <4 x i32>* %43, align 1, !tbaa !11
  %44 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %45 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %44, i64 0, i32 0
  %46 = load i32*, i32** %45, align 8, !tbaa !955
  %47 = getelementptr inbounds i32, i32* %46, i64 140
  %48 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %49 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %48, i64 0, i32 0, i32 0
  %50 = load i32, i32* %49, align 4, !tbaa !33
  %51 = insertelement <4 x i32> undef, i32 %50, i32 0
  %52 = shufflevector <4 x i32> %51, <4 x i32> undef, <4 x i32> zeroinitializer
  %53 = bitcast i32* %47 to <4 x i32>*
  store <4 x i32> %52, <4 x i32>* %53, align 1, !tbaa !11
  %54 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %55 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %54, i64 0, i32 0
  %56 = load i32*, i32** %55, align 8, !tbaa !955
  %57 = getelementptr inbounds i32, i32* %56, i64 144
  %58 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %59 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %58, i64 0, i32 0, i32 0
  %60 = load i32, i32* %59, align 4, !tbaa !33
  %61 = insertelement <4 x i32> undef, i32 %60, i32 0
  %62 = shufflevector <4 x i32> %61, <4 x i32> undef, <4 x i32> zeroinitializer
  %63 = bitcast i32* %57 to <4 x i32>*
  store <4 x i32> %62, <4 x i32>* %63, align 1, !tbaa !11
  %64 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %65 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %64, i64 0, i32 0
  %66 = load i32*, i32** %65, align 8, !tbaa !955
  %67 = getelementptr inbounds i32, i32* %66, i64 148
  %68 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %69 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %68, i64 0, i32 0, i32 0
  %70 = load i32, i32* %69, align 4, !tbaa !33
  %71 = insertelement <4 x i32> undef, i32 %70, i32 0
  %72 = shufflevector <4 x i32> %71, <4 x i32> undef, <4 x i32> zeroinitializer
  %73 = bitcast i32* %67 to <4 x i32>*
  store <4 x i32> %72, <4 x i32>* %73, align 1, !tbaa !11
  %74 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %75 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %74, i64 0, i32 0
  %76 = load i32*, i32** %75, align 8, !tbaa !955
  %77 = getelementptr inbounds i32, i32* %76, i64 152
  %78 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %79 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %78, i64 0, i32 0, i32 0
  %80 = load i32, i32* %79, align 4, !tbaa !33
  %81 = insertelement <4 x i32> undef, i32 %80, i32 0
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> zeroinitializer
  %83 = bitcast i32* %77 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %83, align 1, !tbaa !11
  %84 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %85 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %84, i64 0, i32 0
  %86 = load i32*, i32** %85, align 8, !tbaa !955
  %87 = getelementptr inbounds i32, i32* %86, i64 156
  %88 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %89 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %88, i64 0, i32 0, i32 0
  %90 = load i32, i32* %89, align 4, !tbaa !33
  %91 = insertelement <4 x i32> undef, i32 %90, i32 0
  %92 = shufflevector <4 x i32> %91, <4 x i32> undef, <4 x i32> zeroinitializer
  %93 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %92, <4 x i32>* %93, align 1, !tbaa !11
  %94 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %95 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %94, i64 0, i32 0
  %96 = load i32*, i32** %95, align 8, !tbaa !955
  %97 = getelementptr inbounds i32, i32* %96, i64 160
  %98 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %99 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %98, i64 0, i32 0, i32 0
  %100 = load i32, i32* %99, align 4, !tbaa !33
  %101 = insertelement <4 x i32> undef, i32 %100, i32 0
  %102 = shufflevector <4 x i32> %101, <4 x i32> undef, <4 x i32> zeroinitializer
  %103 = bitcast i32* %97 to <4 x i32>*
  store <4 x i32> %102, <4 x i32>* %103, align 1, !tbaa !11
  %104 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %105 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %104, i64 0, i32 0
  %106 = load i32*, i32** %105, align 8, !tbaa !955
  %107 = getelementptr inbounds i32, i32* %106, i64 164
  %108 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %109 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %108, i64 0, i32 0, i32 0
  %110 = load i32, i32* %109, align 4, !tbaa !33
  %111 = insertelement <4 x i32> undef, i32 %110, i32 0
  %112 = shufflevector <4 x i32> %111, <4 x i32> undef, <4 x i32> zeroinitializer
  %113 = bitcast i32* %107 to <4 x i32>*
  store <4 x i32> %112, <4 x i32>* %113, align 1, !tbaa !11
  %114 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %115 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %114, i64 0, i32 0
  %116 = load i32*, i32** %115, align 8, !tbaa !955
  %117 = getelementptr inbounds i32, i32* %116, i64 168
  %118 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %119 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %118, i64 0, i32 0, i32 0
  %120 = load i32, i32* %119, align 4, !tbaa !33
  %121 = insertelement <4 x i32> undef, i32 %120, i32 0
  %122 = shufflevector <4 x i32> %121, <4 x i32> undef, <4 x i32> zeroinitializer
  %123 = bitcast i32* %117 to <4 x i32>*
  store <4 x i32> %122, <4 x i32>* %123, align 1, !tbaa !11
  %124 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %125 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %124, i64 0, i32 0
  %126 = load i32*, i32** %125, align 8, !tbaa !955
  %127 = getelementptr inbounds i32, i32* %126, i64 172
  %128 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %129 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %128, i64 0, i32 0, i32 0
  %130 = load i32, i32* %129, align 4, !tbaa !33
  %131 = insertelement <4 x i32> undef, i32 %130, i32 0
  %132 = shufflevector <4 x i32> %131, <4 x i32> undef, <4 x i32> zeroinitializer
  %133 = bitcast i32* %127 to <4 x i32>*
  store <4 x i32> %132, <4 x i32>* %133, align 1, !tbaa !11
  %134 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %135 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %134, i64 0, i32 0
  %136 = load i32*, i32** %135, align 8, !tbaa !955
  %137 = getelementptr inbounds i32, i32* %136, i64 176
  %138 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %139 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %138, i64 0, i32 0, i32 0
  %140 = load i32, i32* %139, align 4, !tbaa !33
  %141 = insertelement <4 x i32> undef, i32 %140, i32 0
  %142 = shufflevector <4 x i32> %141, <4 x i32> undef, <4 x i32> zeroinitializer
  %143 = bitcast i32* %137 to <4 x i32>*
  store <4 x i32> %142, <4 x i32>* %143, align 1, !tbaa !11
  %144 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %145 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %144, i64 0, i32 0
  %146 = load i32*, i32** %145, align 8, !tbaa !955
  %147 = getelementptr inbounds i32, i32* %146, i64 180
  %148 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %149 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %148, i64 0, i32 0, i32 0
  %150 = load i32, i32* %149, align 4, !tbaa !33
  %151 = insertelement <4 x i32> undef, i32 %150, i32 0
  %152 = shufflevector <4 x i32> %151, <4 x i32> undef, <4 x i32> zeroinitializer
  %153 = bitcast i32* %147 to <4 x i32>*
  store <4 x i32> %152, <4 x i32>* %153, align 1, !tbaa !11
  %154 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %155 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %154, i64 0, i32 0
  %156 = load i32*, i32** %155, align 8, !tbaa !955
  %157 = getelementptr inbounds i32, i32* %156, i64 184
  %158 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %159 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %158, i64 0, i32 0, i32 0
  %160 = load i32, i32* %159, align 4, !tbaa !33
  %161 = insertelement <4 x i32> undef, i32 %160, i32 0
  %162 = shufflevector <4 x i32> %161, <4 x i32> undef, <4 x i32> zeroinitializer
  %163 = bitcast i32* %157 to <4 x i32>*
  store <4 x i32> %162, <4 x i32>* %163, align 1, !tbaa !11
  %164 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %165 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %164, i64 0, i32 0
  %166 = load i32*, i32** %165, align 8, !tbaa !955
  %167 = getelementptr inbounds i32, i32* %166, i64 188
  %168 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %169 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %168, i64 0, i32 0, i32 0
  %170 = load i32, i32* %169, align 4, !tbaa !33
  %171 = insertelement <4 x i32> undef, i32 %170, i32 0
  %172 = shufflevector <4 x i32> %171, <4 x i32> undef, <4 x i32> zeroinitializer
  %173 = bitcast i32* %167 to <4 x i32>*
  store <4 x i32> %172, <4 x i32>* %173, align 1, !tbaa !11
  %174 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %175 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %174, i64 0, i32 0
  %176 = load i32*, i32** %175, align 8, !tbaa !955
  %177 = getelementptr inbounds i32, i32* %176, i64 192
  %178 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %179 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %178, i64 0, i32 0, i32 0
  %180 = load i32, i32* %179, align 4, !tbaa !33
  %181 = insertelement <4 x i32> undef, i32 %180, i32 0
  %182 = shufflevector <4 x i32> %181, <4 x i32> undef, <4 x i32> zeroinitializer
  %183 = bitcast i32* %177 to <4 x i32>*
  store <4 x i32> %182, <4 x i32>* %183, align 1, !tbaa !11
  %184 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %185 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %184, i64 0, i32 0
  %186 = load i32*, i32** %185, align 8, !tbaa !955
  %187 = getelementptr inbounds i32, i32* %186, i64 196
  %188 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %189 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %188, i64 0, i32 0, i32 0
  %190 = load i32, i32* %189, align 4, !tbaa !33
  %191 = insertelement <4 x i32> undef, i32 %190, i32 0
  %192 = shufflevector <4 x i32> %191, <4 x i32> undef, <4 x i32> zeroinitializer
  %193 = bitcast i32* %187 to <4 x i32>*
  store <4 x i32> %192, <4 x i32>* %193, align 1, !tbaa !11
  %194 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %195 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %194, i64 0, i32 0
  %196 = load i32*, i32** %195, align 8, !tbaa !955
  %197 = getelementptr inbounds i32, i32* %196, i64 200
  %198 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %199 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %198, i64 0, i32 0, i32 0
  %200 = load i32, i32* %199, align 4, !tbaa !33
  %201 = insertelement <4 x i32> undef, i32 %200, i32 0
  %202 = shufflevector <4 x i32> %201, <4 x i32> undef, <4 x i32> zeroinitializer
  %203 = bitcast i32* %197 to <4 x i32>*
  store <4 x i32> %202, <4 x i32>* %203, align 1, !tbaa !11
  %204 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %205 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %204, i64 0, i32 0
  %206 = load i32*, i32** %205, align 8, !tbaa !955
  %207 = getelementptr inbounds i32, i32* %206, i64 204
  %208 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %209 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %208, i64 0, i32 0, i32 0
  %210 = load i32, i32* %209, align 4, !tbaa !33
  %211 = insertelement <4 x i32> undef, i32 %210, i32 0
  %212 = shufflevector <4 x i32> %211, <4 x i32> undef, <4 x i32> zeroinitializer
  %213 = bitcast i32* %207 to <4 x i32>*
  store <4 x i32> %212, <4 x i32>* %213, align 1, !tbaa !11
  %214 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %215 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %214, i64 0, i32 0
  %216 = load i32*, i32** %215, align 8, !tbaa !955
  %217 = getelementptr inbounds i32, i32* %216, i64 208
  %218 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %219 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %218, i64 0, i32 0, i32 0
  %220 = load i32, i32* %219, align 4, !tbaa !33
  %221 = insertelement <4 x i32> undef, i32 %220, i32 0
  %222 = shufflevector <4 x i32> %221, <4 x i32> undef, <4 x i32> zeroinitializer
  %223 = bitcast i32* %217 to <4 x i32>*
  store <4 x i32> %222, <4 x i32>* %223, align 1, !tbaa !11
  %224 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %225 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %224, i64 0, i32 0
  %226 = load i32*, i32** %225, align 8, !tbaa !955
  %227 = getelementptr inbounds i32, i32* %226, i64 212
  %228 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %229 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %228, i64 0, i32 0, i32 0
  %230 = load i32, i32* %229, align 4, !tbaa !33
  %231 = insertelement <4 x i32> undef, i32 %230, i32 0
  %232 = shufflevector <4 x i32> %231, <4 x i32> undef, <4 x i32> zeroinitializer
  %233 = bitcast i32* %227 to <4 x i32>*
  store <4 x i32> %232, <4 x i32>* %233, align 1, !tbaa !11
  %234 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %235 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %234, i64 0, i32 0
  %236 = load i32*, i32** %235, align 8, !tbaa !955
  %237 = getelementptr inbounds i32, i32* %236, i64 216
  %238 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %239 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %238, i64 0, i32 0, i32 0
  %240 = load i32, i32* %239, align 4, !tbaa !33
  %241 = insertelement <4 x i32> undef, i32 %240, i32 0
  %242 = shufflevector <4 x i32> %241, <4 x i32> undef, <4 x i32> zeroinitializer
  %243 = bitcast i32* %237 to <4 x i32>*
  store <4 x i32> %242, <4 x i32>* %243, align 1, !tbaa !11
  %244 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %245 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %244, i64 0, i32 0
  %246 = load i32*, i32** %245, align 8, !tbaa !955
  %247 = getelementptr inbounds i32, i32* %246, i64 220
  %248 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %249 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %248, i64 0, i32 0, i32 0
  %250 = load i32, i32* %249, align 4, !tbaa !33
  %251 = insertelement <4 x i32> undef, i32 %250, i32 0
  %252 = shufflevector <4 x i32> %251, <4 x i32> undef, <4 x i32> zeroinitializer
  %253 = bitcast i32* %247 to <4 x i32>*
  store <4 x i32> %252, <4 x i32>* %253, align 1, !tbaa !11
  %254 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %255 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %254, i64 0, i32 0
  %256 = load i32*, i32** %255, align 8, !tbaa !955
  %257 = getelementptr inbounds i32, i32* %256, i64 224
  %258 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %259 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %258, i64 0, i32 0, i32 0
  %260 = load i32, i32* %259, align 4, !tbaa !33
  %261 = insertelement <4 x i32> undef, i32 %260, i32 0
  %262 = shufflevector <4 x i32> %261, <4 x i32> undef, <4 x i32> zeroinitializer
  %263 = bitcast i32* %257 to <4 x i32>*
  store <4 x i32> %262, <4 x i32>* %263, align 1, !tbaa !11
  %264 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %265 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %264, i64 0, i32 0
  %266 = load i32*, i32** %265, align 8, !tbaa !955
  %267 = getelementptr inbounds i32, i32* %266, i64 228
  %268 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %269 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %268, i64 0, i32 0, i32 0
  %270 = load i32, i32* %269, align 4, !tbaa !33
  %271 = insertelement <4 x i32> undef, i32 %270, i32 0
  %272 = shufflevector <4 x i32> %271, <4 x i32> undef, <4 x i32> zeroinitializer
  %273 = bitcast i32* %267 to <4 x i32>*
  store <4 x i32> %272, <4 x i32>* %273, align 1, !tbaa !11
  %274 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %275 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %274, i64 0, i32 0
  %276 = load i32*, i32** %275, align 8, !tbaa !955
  %277 = getelementptr inbounds i32, i32* %276, i64 232
  %278 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %279 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %278, i64 0, i32 0, i32 0
  %280 = load i32, i32* %279, align 4, !tbaa !33
  %281 = insertelement <4 x i32> undef, i32 %280, i32 0
  %282 = shufflevector <4 x i32> %281, <4 x i32> undef, <4 x i32> zeroinitializer
  %283 = bitcast i32* %277 to <4 x i32>*
  store <4 x i32> %282, <4 x i32>* %283, align 1, !tbaa !11
  %284 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %285 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %284, i64 0, i32 0
  %286 = load i32*, i32** %285, align 8, !tbaa !955
  %287 = getelementptr inbounds i32, i32* %286, i64 236
  %288 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %289 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %288, i64 0, i32 0, i32 0
  %290 = load i32, i32* %289, align 4, !tbaa !33
  %291 = insertelement <4 x i32> undef, i32 %290, i32 0
  %292 = shufflevector <4 x i32> %291, <4 x i32> undef, <4 x i32> zeroinitializer
  %293 = bitcast i32* %287 to <4 x i32>*
  store <4 x i32> %292, <4 x i32>* %293, align 1, !tbaa !11
  %294 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %295 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %294, i64 0, i32 0
  %296 = load i32*, i32** %295, align 8, !tbaa !955
  %297 = getelementptr inbounds i32, i32* %296, i64 240
  %298 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %299 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %298, i64 0, i32 0, i32 0
  %300 = load i32, i32* %299, align 4, !tbaa !33
  %301 = insertelement <4 x i32> undef, i32 %300, i32 0
  %302 = shufflevector <4 x i32> %301, <4 x i32> undef, <4 x i32> zeroinitializer
  %303 = bitcast i32* %297 to <4 x i32>*
  store <4 x i32> %302, <4 x i32>* %303, align 1, !tbaa !11
  %304 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %305 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %304, i64 0, i32 0
  %306 = load i32*, i32** %305, align 8, !tbaa !955
  %307 = getelementptr inbounds i32, i32* %306, i64 244
  %308 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %309 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %308, i64 0, i32 0, i32 0
  %310 = load i32, i32* %309, align 4, !tbaa !33
  %311 = insertelement <4 x i32> undef, i32 %310, i32 0
  %312 = shufflevector <4 x i32> %311, <4 x i32> undef, <4 x i32> zeroinitializer
  %313 = bitcast i32* %307 to <4 x i32>*
  store <4 x i32> %312, <4 x i32>* %313, align 1, !tbaa !11
  %314 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %315 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %314, i64 0, i32 0
  %316 = load i32*, i32** %315, align 8, !tbaa !955
  %317 = getelementptr inbounds i32, i32* %316, i64 248
  %318 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %319 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %318, i64 0, i32 0, i32 0
  %320 = load i32, i32* %319, align 4, !tbaa !33
  %321 = insertelement <4 x i32> undef, i32 %320, i32 0
  %322 = shufflevector <4 x i32> %321, <4 x i32> undef, <4 x i32> zeroinitializer
  %323 = bitcast i32* %317 to <4 x i32>*
  store <4 x i32> %322, <4 x i32>* %323, align 1, !tbaa !11
  %324 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %325 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %324, i64 0, i32 0
  %326 = load i32*, i32** %325, align 8, !tbaa !955
  %327 = getelementptr inbounds i32, i32* %326, i64 252
  %328 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %329 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %328, i64 0, i32 0, i32 0
  %330 = load i32, i32* %329, align 4, !tbaa !33
  %331 = insertelement <4 x i32> undef, i32 %330, i32 0
  %332 = shufflevector <4 x i32> %331, <4 x i32> undef, <4 x i32> zeroinitializer
  %333 = bitcast i32* %327 to <4 x i32>*
  store <4 x i32> %332, <4 x i32>* %333, align 1, !tbaa !11
  %334 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %335 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %334, i64 0, i32 0
  %336 = load i32*, i32** %335, align 8, !tbaa !955
  %337 = getelementptr inbounds i32, i32* %336, i64 256
  %338 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %339 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %338, i64 0, i32 0, i32 0
  %340 = load i32, i32* %339, align 4, !tbaa !33
  %341 = insertelement <4 x i32> undef, i32 %340, i32 0
  %342 = shufflevector <4 x i32> %341, <4 x i32> undef, <4 x i32> zeroinitializer
  %343 = bitcast i32* %337 to <4 x i32>*
  store <4 x i32> %342, <4 x i32>* %343, align 1, !tbaa !11
  %344 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %345 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %344, i64 0, i32 0
  %346 = load i32*, i32** %345, align 8, !tbaa !955
  %347 = getelementptr inbounds i32, i32* %346, i64 260
  %348 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %349 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %348, i64 0, i32 0, i32 0
  %350 = load i32, i32* %349, align 4, !tbaa !33
  %351 = insertelement <4 x i32> undef, i32 %350, i32 0
  %352 = shufflevector <4 x i32> %351, <4 x i32> undef, <4 x i32> zeroinitializer
  %353 = bitcast i32* %347 to <4 x i32>*
  store <4 x i32> %352, <4 x i32>* %353, align 1, !tbaa !11
  %354 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %355 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %354, i64 0, i32 0
  %356 = load i32*, i32** %355, align 8, !tbaa !955
  %357 = getelementptr inbounds i32, i32* %356, i64 264
  %358 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %359 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %358, i64 0, i32 0, i32 0
  %360 = load i32, i32* %359, align 4, !tbaa !33
  %361 = insertelement <4 x i32> undef, i32 %360, i32 0
  %362 = shufflevector <4 x i32> %361, <4 x i32> undef, <4 x i32> zeroinitializer
  %363 = bitcast i32* %357 to <4 x i32>*
  store <4 x i32> %362, <4 x i32>* %363, align 1, !tbaa !11
  %364 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %365 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %364, i64 0, i32 0
  %366 = load i32*, i32** %365, align 8, !tbaa !955
  %367 = getelementptr inbounds i32, i32* %366, i64 268
  %368 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %369 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %368, i64 0, i32 0, i32 0
  %370 = load i32, i32* %369, align 4, !tbaa !33
  %371 = insertelement <4 x i32> undef, i32 %370, i32 0
  %372 = shufflevector <4 x i32> %371, <4 x i32> undef, <4 x i32> zeroinitializer
  %373 = bitcast i32* %367 to <4 x i32>*
  store <4 x i32> %372, <4 x i32>* %373, align 1, !tbaa !11
  %374 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %375 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %374, i64 0, i32 0
  %376 = load i32*, i32** %375, align 8, !tbaa !955
  %377 = getelementptr inbounds i32, i32* %376, i64 272
  %378 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %379 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %378, i64 0, i32 0, i32 0
  %380 = load i32, i32* %379, align 4, !tbaa !33
  %381 = insertelement <4 x i32> undef, i32 %380, i32 0
  %382 = shufflevector <4 x i32> %381, <4 x i32> undef, <4 x i32> zeroinitializer
  %383 = bitcast i32* %377 to <4 x i32>*
  store <4 x i32> %382, <4 x i32>* %383, align 1, !tbaa !11
  %384 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %385 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %384, i64 0, i32 0
  %386 = load i32*, i32** %385, align 8, !tbaa !955
  %387 = getelementptr inbounds i32, i32* %386, i64 276
  %388 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %7, align 8, !tbaa !11
  %389 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %388, i64 0, i32 0, i32 0
  %390 = load i32, i32* %389, align 4, !tbaa !33
  %391 = insertelement <4 x i32> undef, i32 %390, i32 0
  %392 = shufflevector <4 x i32> %391, <4 x i32> undef, <4 x i32> zeroinitializer
  %393 = bitcast i32* %387 to <4 x i32>*
  store <4 x i32> %392, <4 x i32>* %393, align 1, !tbaa !11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal29general_matrix_matrix_productIliLi1ELb0EiLi0ELb0ELi0EE3runElllPKilS4_lPiliRNS0_15level3_blockingIiiEEPNS0_16GemmParallelInfoIlEE(i64, i64, i64, i32*, i64, i32*, i64, i32*, i64, i32, %"class.Eigen::internal::level3_blocking"* dereferenceable(40), %"struct.Eigen::internal::GemmParallelInfo"*) local_unnamed_addr #0 align 2 {
  %13 = alloca %"struct.Eigen::internal::gemm_pack_lhs.1450", align 1
  %14 = alloca %"struct.Eigen::internal::gemm_pack_rhs.1031", align 1
  %15 = alloca %"struct.Eigen::internal::gebp_kernel", align 1
  %16 = alloca %"class.Eigen::internal::const_blas_data_mapper.719", align 8
  %17 = alloca %"class.Eigen::internal::const_blas_data_mapper.717", align 8
  %18 = alloca %"class.Eigen::internal::blas_data_mapper.951", align 8
  %19 = getelementptr inbounds %"class.Eigen::internal::level3_blocking", %"class.Eigen::internal::level3_blocking"* %10, i64 0, i32 4
  %20 = load i64, i64* %19, align 8, !tbaa !193
  %21 = getelementptr inbounds %"class.Eigen::internal::level3_blocking", %"class.Eigen::internal::level3_blocking"* %10, i64 0, i32 2
  %22 = load i64, i64* %21, align 8, !tbaa !460
  %23 = icmp slt i64 %22, %0
  %24 = select i1 %23, i64 %22, i64 %0
  %25 = getelementptr inbounds %"class.Eigen::internal::level3_blocking", %"class.Eigen::internal::level3_blocking"* %10, i64 0, i32 3
  %26 = load i64, i64* %25, align 8, !tbaa !461
  %27 = icmp slt i64 %26, %1
  %28 = select i1 %27, i64 %26, i64 %1
  %29 = getelementptr inbounds %"struct.Eigen::internal::gemm_pack_lhs.1450", %"struct.Eigen::internal::gemm_pack_lhs.1450"* %13, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %29) #11
  %30 = getelementptr inbounds %"struct.Eigen::internal::gemm_pack_rhs.1031", %"struct.Eigen::internal::gemm_pack_rhs.1031"* %14, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %30) #11
  %31 = getelementptr inbounds %"struct.Eigen::internal::gebp_kernel", %"struct.Eigen::internal::gebp_kernel"* %15, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %31) #11
  %32 = mul nsw i64 %24, %20
  %33 = mul nsw i64 %28, %20
  %34 = getelementptr inbounds %"class.Eigen::internal::level3_blocking", %"class.Eigen::internal::level3_blocking"* %10, i64 0, i32 0
  %35 = load i32*, i32** %34, align 8, !tbaa !195
  %36 = icmp eq i32* %35, null
  %37 = shl i64 %32, 2
  br i1 %36, label %38, label %63

; <label>:38:                                     ; preds = %12
  %39 = icmp ult i64 %37, 131073
  br i1 %39, label %40, label %47

; <label>:40:                                     ; preds = %38
  %41 = add i64 %37, 31
  %42 = alloca i8, i64 %41, align 16
  %43 = ptrtoint i8* %42 to i64
  %44 = add i64 %43, 31
  %45 = and i64 %44, -32
  %46 = inttoptr i64 %45 to i8*
  br label %59

; <label>:47:                                     ; preds = %38
  %48 = add i64 %37, 32
  %49 = tail call i8* @malloc(i64 %48) #14
  %50 = icmp eq i8* %49, null
  br i1 %50, label %59, label %51

; <label>:51:                                     ; preds = %47
  %52 = ptrtoint i8* %49 to i64
  %53 = add i64 %52, 32
  %54 = and i64 %53, -32
  %55 = inttoptr i64 %54 to i8*
  %56 = inttoptr i64 %54 to i8**
  %57 = getelementptr inbounds i8*, i8** %56, i64 -1
  store i8* %49, i8** %57, align 8, !tbaa !29
  %58 = load i32*, i32** %34, align 8, !tbaa !195
  br label %59

; <label>:59:                                     ; preds = %51, %47, %40
  %60 = phi i32* [ null, %40 ], [ %58, %51 ], [ null, %47 ]
  %61 = phi i8* [ %46, %40 ], [ %55, %51 ], [ null, %47 ]
  %62 = bitcast i8* %61 to i32*
  br label %63

; <label>:63:                                     ; preds = %12, %59
  %64 = phi i32* [ %60, %59 ], [ %35, %12 ]
  %65 = phi i32* [ %62, %59 ], [ %35, %12 ]
  %66 = icmp ugt i64 %37, 131072
  %67 = getelementptr inbounds %"class.Eigen::internal::level3_blocking", %"class.Eigen::internal::level3_blocking"* %10, i64 0, i32 1
  %68 = load i32*, i32** %67, align 8, !tbaa !196
  %69 = icmp eq i32* %68, null
  %70 = shl i64 %33, 2
  br i1 %69, label %71, label %96

; <label>:71:                                     ; preds = %63
  %72 = icmp ult i64 %70, 131073
  br i1 %72, label %73, label %80

; <label>:73:                                     ; preds = %71
  %74 = add i64 %70, 31
  %75 = alloca i8, i64 %74, align 16
  %76 = ptrtoint i8* %75 to i64
  %77 = add i64 %76, 31
  %78 = and i64 %77, -32
  %79 = inttoptr i64 %78 to i8*
  br label %92

; <label>:80:                                     ; preds = %71
  %81 = add i64 %70, 32
  %82 = call i8* @malloc(i64 %81) #14
  %83 = icmp eq i8* %82, null
  br i1 %83, label %92, label %84

; <label>:84:                                     ; preds = %80
  %85 = ptrtoint i8* %82 to i64
  %86 = add i64 %85, 32
  %87 = and i64 %86, -32
  %88 = inttoptr i64 %87 to i8*
  %89 = inttoptr i64 %87 to i8**
  %90 = getelementptr inbounds i8*, i8** %89, i64 -1
  store i8* %82, i8** %90, align 8, !tbaa !29
  %91 = load i32*, i32** %67, align 8, !tbaa !196
  br label %92

; <label>:92:                                     ; preds = %84, %80, %73
  %93 = phi i32* [ null, %73 ], [ %91, %84 ], [ null, %80 ]
  %94 = phi i8* [ %79, %73 ], [ %88, %84 ], [ null, %80 ]
  %95 = bitcast i8* %94 to i32*
  br label %96

; <label>:96:                                     ; preds = %63, %92
  %97 = phi i32* [ %93, %92 ], [ %68, %63 ]
  %98 = phi i32* [ %95, %92 ], [ %68, %63 ]
  %99 = icmp ugt i64 %70, 131072
  %100 = icmp eq i64 %20, %2
  %101 = and i1 %100, %23
  %102 = xor i1 %101, true
  %103 = or i1 %27, %102
  %104 = icmp sgt i64 %0, 0
  br i1 %104, label %105, label %122

; <label>:105:                                    ; preds = %96
  %106 = icmp sgt i64 %2, 0
  %107 = bitcast %"class.Eigen::internal::const_blas_data_mapper.719"* %16 to i8*
  %108 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.719", %"class.Eigen::internal::const_blas_data_mapper.719"* %16, i64 0, i32 0, i32 0
  %109 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.719", %"class.Eigen::internal::const_blas_data_mapper.719"* %16, i64 0, i32 0, i32 1
  %110 = icmp sgt i64 %1, 0
  %111 = bitcast %"class.Eigen::internal::const_blas_data_mapper.717"* %17 to i8*
  %112 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.717", %"class.Eigen::internal::const_blas_data_mapper.717"* %17, i64 0, i32 0, i32 0
  %113 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.717", %"class.Eigen::internal::const_blas_data_mapper.717"* %17, i64 0, i32 0, i32 1
  %114 = bitcast %"class.Eigen::internal::blas_data_mapper.951"* %18 to i8*
  %115 = getelementptr inbounds %"class.Eigen::internal::blas_data_mapper.951", %"class.Eigen::internal::blas_data_mapper.951"* %18, i64 0, i32 0
  %116 = getelementptr inbounds %"class.Eigen::internal::blas_data_mapper.951", %"class.Eigen::internal::blas_data_mapper.951"* %18, i64 0, i32 1
  br label %141

; <label>:117:                                    ; preds = %175
  br label %119

; <label>:118:                                    ; preds = %190
  br label %119

; <label>:119:                                    ; preds = %118, %117, %141
  %120 = icmp slt i64 %143, %0
  br i1 %120, label %141, label %121

; <label>:121:                                    ; preds = %119
  br label %122

; <label>:122:                                    ; preds = %121, %96
  br i1 %99, label %123, label %131

; <label>:123:                                    ; preds = %122
  %124 = icmp eq i32* %98, null
  %125 = icmp ne i32* %97, null
  %126 = or i1 %124, %125
  br i1 %126, label %131, label %127

; <label>:127:                                    ; preds = %123
  %128 = getelementptr inbounds i32, i32* %98, i64 -2
  %129 = bitcast i32* %128 to i8**
  %130 = load i8*, i8** %129, align 8, !tbaa !29
  call void @free(i8* %130) #11
  br label %131

; <label>:131:                                    ; preds = %122, %123, %127
  br i1 %66, label %132, label %140

; <label>:132:                                    ; preds = %131
  %133 = icmp eq i32* %65, null
  %134 = icmp ne i32* %64, null
  %135 = or i1 %133, %134
  br i1 %135, label %140, label %136

; <label>:136:                                    ; preds = %132
  %137 = getelementptr inbounds i32, i32* %65, i64 -2
  %138 = bitcast i32* %137 to i8**
  %139 = load i8*, i8** %138, align 8, !tbaa !29
  call void @free(i8* %139) #11
  br label %140

; <label>:140:                                    ; preds = %131, %132, %136
  call void @llvm.lifetime.end(i64 1, i8* nonnull %31) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %30) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %29) #11
  ret void

; <label>:141:                                    ; preds = %105, %119
  %142 = phi i64 [ 0, %105 ], [ %143, %119 ]
  %143 = add nsw i64 %142, %24
  %144 = icmp sgt i64 %143, %0
  %145 = select i1 %144, i64 %0, i64 %143
  %146 = sub nsw i64 %145, %142
  br i1 %106, label %147, label %119

; <label>:147:                                    ; preds = %141
  %148 = mul nsw i64 %142, %4
  %149 = icmp eq i64 %142, 0
  %150 = or i1 %103, %149
  br i1 %110, label %152, label %151

; <label>:151:                                    ; preds = %147
  br label %190

; <label>:152:                                    ; preds = %147
  br label %153

; <label>:153:                                    ; preds = %152, %175
  %154 = phi i64 [ %155, %175 ], [ 0, %152 ]
  %155 = add nsw i64 %154, %20
  %156 = icmp sgt i64 %155, %2
  %157 = select i1 %156, i64 %2, i64 %155
  %158 = sub nsw i64 %157, %154
  call void @llvm.lifetime.start(i64 16, i8* nonnull %107) #11
  %159 = add nsw i64 %154, %148
  %160 = getelementptr inbounds i32, i32* %3, i64 %159
  store i32* %160, i32** %108, align 8
  store i64 %4, i64* %109, align 8
  call void @_ZN5Eigen8internal13gemm_pack_lhsIilNS0_22const_blas_data_mapperIilLi1EEELi12ELi4ELi1ELb0ELb0EEclEPiRKS3_llll(%"struct.Eigen::internal::gemm_pack_lhs.1450"* nonnull %13, i32* %65, %"class.Eigen::internal::const_blas_data_mapper.719"* nonnull dereferenceable(16) %16, i64 %158, i64 %146, i64 0, i64 0)
  call void @llvm.lifetime.end(i64 16, i8* nonnull %107) #11
  br i1 %150, label %162, label %161

; <label>:161:                                    ; preds = %153
  br label %163

; <label>:162:                                    ; preds = %153
  br label %177

; <label>:163:                                    ; preds = %161, %163
  %164 = phi i64 [ %165, %163 ], [ 0, %161 ]
  %165 = add nsw i64 %164, %28
  %166 = icmp sgt i64 %165, %1
  %167 = select i1 %166, i64 %1, i64 %165
  %168 = sub nsw i64 %167, %164
  call void @llvm.lifetime.start(i64 16, i8* nonnull %114) #11
  %169 = mul nsw i64 %164, %8
  %170 = add nsw i64 %169, %142
  %171 = getelementptr inbounds i32, i32* %7, i64 %170
  store i32* %171, i32** %115, align 8
  store i64 %8, i64* %116, align 8
  call void @_ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0EEELi12ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll(%"struct.Eigen::internal::gebp_kernel"* nonnull %15, %"class.Eigen::internal::blas_data_mapper.951"* nonnull dereferenceable(16) %18, i32* %65, i32* %98, i64 %146, i64 %158, i64 %168, i32 %9, i64 -1, i64 -1, i64 0, i64 0)
  call void @llvm.lifetime.end(i64 16, i8* nonnull %114) #11
  %172 = icmp slt i64 %165, %1
  br i1 %172, label %163, label %174

; <label>:173:                                    ; preds = %177
  br label %175

; <label>:174:                                    ; preds = %163
  br label %175

; <label>:175:                                    ; preds = %174, %173
  %176 = icmp slt i64 %155, %2
  br i1 %176, label %153, label %117

; <label>:177:                                    ; preds = %162, %177
  %178 = phi i64 [ %179, %177 ], [ 0, %162 ]
  %179 = add nsw i64 %178, %28
  %180 = icmp sgt i64 %179, %1
  %181 = select i1 %180, i64 %1, i64 %179
  %182 = sub nsw i64 %181, %178
  call void @llvm.lifetime.start(i64 16, i8* nonnull %111) #11
  %183 = mul nsw i64 %178, %6
  %184 = add nsw i64 %183, %154
  %185 = getelementptr inbounds i32, i32* %5, i64 %184
  store i32* %185, i32** %112, align 8
  store i64 %6, i64* %113, align 8
  call void @_ZN5Eigen8internal13gemm_pack_rhsIilNS0_22const_blas_data_mapperIilLi0EEELi4ELi0ELb0ELb0EEclEPiRKS3_llll(%"struct.Eigen::internal::gemm_pack_rhs.1031"* nonnull %14, i32* %98, %"class.Eigen::internal::const_blas_data_mapper.717"* nonnull dereferenceable(16) %17, i64 %158, i64 %182, i64 0, i64 0)
  call void @llvm.lifetime.end(i64 16, i8* nonnull %111) #11
  call void @llvm.lifetime.start(i64 16, i8* nonnull %114) #11
  %186 = mul nsw i64 %178, %8
  %187 = add nsw i64 %186, %142
  %188 = getelementptr inbounds i32, i32* %7, i64 %187
  store i32* %188, i32** %115, align 8
  store i64 %8, i64* %116, align 8
  call void @_ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0EEELi12ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll(%"struct.Eigen::internal::gebp_kernel"* nonnull %15, %"class.Eigen::internal::blas_data_mapper.951"* nonnull dereferenceable(16) %18, i32* %65, i32* %98, i64 %146, i64 %158, i64 %182, i32 %9, i64 -1, i64 -1, i64 0, i64 0)
  call void @llvm.lifetime.end(i64 16, i8* nonnull %114) #11
  %189 = icmp slt i64 %179, %1
  br i1 %189, label %177, label %173

; <label>:190:                                    ; preds = %151, %190
  %191 = phi i64 [ %192, %190 ], [ 0, %151 ]
  %192 = add nsw i64 %191, %20
  %193 = icmp sgt i64 %192, %2
  %194 = select i1 %193, i64 %2, i64 %192
  %195 = sub nsw i64 %194, %191
  call void @llvm.lifetime.start(i64 16, i8* nonnull %107) #11
  %196 = add nsw i64 %191, %148
  %197 = getelementptr inbounds i32, i32* %3, i64 %196
  store i32* %197, i32** %108, align 8
  store i64 %4, i64* %109, align 8
  call void @_ZN5Eigen8internal13gemm_pack_lhsIilNS0_22const_blas_data_mapperIilLi1EEELi12ELi4ELi1ELb0ELb0EEclEPiRKS3_llll(%"struct.Eigen::internal::gemm_pack_lhs.1450"* nonnull %13, i32* %65, %"class.Eigen::internal::const_blas_data_mapper.719"* nonnull dereferenceable(16) %16, i64 %195, i64 %146, i64 0, i64 0)
  call void @llvm.lifetime.end(i64 16, i8* nonnull %107) #11
  %198 = icmp slt i64 %192, %2
  br i1 %198, label %190, label %118
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal13gemm_pack_lhsIilNS0_22const_blas_data_mapperIilLi1EEELi12ELi4ELi1ELb0ELb0EEclEPiRKS3_llll(%"struct.Eigen::internal::gemm_pack_lhs.1450"*, i32*, %"class.Eigen::internal::const_blas_data_mapper.719"* dereferenceable(16), i64, i64, i64, i64) local_unnamed_addr #8 align 2 {
  tail call void asm sideeffect "#EIGEN PRODUCT PACK LHS", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !975
  %8 = or i64 %6, %5
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %10, label %23, !prof !10

; <label>:10:                                     ; preds = %7
  %11 = sdiv i64 %3, 4
  %12 = shl nsw i64 %11, 2
  %13 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.719", %"class.Eigen::internal::const_blas_data_mapper.719"* %2, i64 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.Eigen::internal::const_blas_data_mapper.719", %"class.Eigen::internal::const_blas_data_mapper.719"* %2, i64 0, i32 0, i32 1
  %15 = icmp sgt i64 %12, 4
  %16 = select i1 %15, i64 %12, i64 4
  %17 = add nsw i64 %16, -1
  %18 = lshr i64 %17, 2
  %19 = add nuw nsw i64 %18, 1
  %20 = shl nuw i64 %18, 2
  %21 = add i64 %20, 4
  %22 = icmp slt i64 %3, 4
  br label %282

; <label>:23:                                     ; preds = %7
  tail call void @__assert_rtn(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__func__._ZN5Eigen8internal13gemm_pack_lhsIilNS0_22const_blas_data_mapperIilLi0EEELi12ELi4ELi0ELb0ELb0EEclEPiRKS3_llll, i64 0, i64 0), i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.35, i64 0, i64 0), i32 1813, i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.36, i64 0, i64 0)) #13
  unreachable

; <label>:24:                                     ; preds = %813
  %25 = icmp slt i64 %814, %4
  br i1 %25, label %26, label %823

; <label>:26:                                     ; preds = %24
  %27 = icmp sgt i64 %3, 0
  %28 = load i32*, i32** %13, align 8
  %29 = load i64, i64* %14, align 8
  br i1 %27, label %30, label %823

; <label>:30:                                     ; preds = %26
  %31 = add i64 %815, %3
  %32 = mul i64 %814, %29
  %33 = add i64 %32, %3
  %34 = add i64 %3, -32
  %35 = lshr i64 %34, 5
  %36 = add nuw nsw i64 %35, 1
  %37 = add i64 %3, -1
  %38 = icmp ult i64 %3, 32
  %39 = and i64 %3, -32
  %40 = icmp eq i64 %39, 0
  %41 = and i64 %36, 3
  %42 = icmp eq i64 %41, 0
  %43 = icmp ult i64 %34, 96
  %44 = icmp eq i64 %39, %3
  br label %45

; <label>:45:                                     ; preds = %30, %277
  %46 = phi i64 [ 0, %30 ], [ %281, %277 ]
  %47 = phi i64 [ %815, %30 ], [ %278, %277 ]
  %48 = phi i64 [ %814, %30 ], [ %279, %277 ]
  %49 = mul i64 %46, %3
  %50 = add i64 %815, %49
  %51 = getelementptr i32, i32* %1, i64 %50
  %52 = add i64 %31, %49
  %53 = getelementptr i32, i32* %1, i64 %52
  %54 = mul i64 %29, %46
  %55 = add i64 %32, %54
  %56 = getelementptr i32, i32* %28, i64 %55
  %57 = add i64 %33, %54
  %58 = getelementptr i32, i32* %28, i64 %57
  %59 = mul nsw i64 %29, %48
  br i1 %38, label %197, label %60

; <label>:60:                                     ; preds = %45
  br i1 %40, label %197, label %61

; <label>:61:                                     ; preds = %60
  %62 = icmp ult i32* %51, %58
  %63 = icmp ult i32* %56, %53
  %64 = and i1 %62, %63
  %65 = add i64 %47, %39
  br i1 %64, label %197, label %66

; <label>:66:                                     ; preds = %61
  br i1 %42, label %97, label %67

; <label>:67:                                     ; preds = %66
  br label %68

; <label>:68:                                     ; preds = %68, %67
  %69 = phi i64 [ %93, %68 ], [ 0, %67 ]
  %70 = phi i64 [ %94, %68 ], [ %41, %67 ]
  %71 = add i64 %47, %69
  %72 = add nsw i64 %59, %69
  %73 = getelementptr inbounds i32, i32* %28, i64 %72
  %74 = bitcast i32* %73 to <8 x i32>*
  %75 = load <8 x i32>, <8 x i32>* %74, align 4, !tbaa !33, !alias.scope !976
  %76 = getelementptr i32, i32* %73, i64 8
  %77 = bitcast i32* %76 to <8 x i32>*
  %78 = load <8 x i32>, <8 x i32>* %77, align 4, !tbaa !33, !alias.scope !976
  %79 = getelementptr i32, i32* %73, i64 16
  %80 = bitcast i32* %79 to <8 x i32>*
  %81 = load <8 x i32>, <8 x i32>* %80, align 4, !tbaa !33, !alias.scope !976
  %82 = getelementptr i32, i32* %73, i64 24
  %83 = bitcast i32* %82 to <8 x i32>*
  %84 = load <8 x i32>, <8 x i32>* %83, align 4, !tbaa !33, !alias.scope !976
  %85 = getelementptr inbounds i32, i32* %1, i64 %71
  %86 = bitcast i32* %85 to <8 x i32>*
  store <8 x i32> %75, <8 x i32>* %86, align 4, !tbaa !33, !alias.scope !979, !noalias !976
  %87 = getelementptr i32, i32* %85, i64 8
  %88 = bitcast i32* %87 to <8 x i32>*
  store <8 x i32> %78, <8 x i32>* %88, align 4, !tbaa !33, !alias.scope !979, !noalias !976
  %89 = getelementptr i32, i32* %85, i64 16
  %90 = bitcast i32* %89 to <8 x i32>*
  store <8 x i32> %81, <8 x i32>* %90, align 4, !tbaa !33, !alias.scope !979, !noalias !976
  %91 = getelementptr i32, i32* %85, i64 24
  %92 = bitcast i32* %91 to <8 x i32>*
  store <8 x i32> %84, <8 x i32>* %92, align 4, !tbaa !33, !alias.scope !979, !noalias !976
  %93 = add i64 %69, 32
  %94 = add i64 %70, -1
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %96, label %68, !llvm.loop !981

; <label>:96:                                     ; preds = %68
  br label %97

; <label>:97:                                     ; preds = %66, %96
  %98 = phi i64 [ 0, %66 ], [ %93, %96 ]
  br i1 %43, label %196, label %99

; <label>:99:                                     ; preds = %97
  br label %100

; <label>:100:                                    ; preds = %100, %99
  %101 = phi i64 [ %98, %99 ], [ %193, %100 ]
  %102 = add i64 %47, %101
  %103 = add nsw i64 %59, %101
  %104 = getelementptr inbounds i32, i32* %28, i64 %103
  %105 = bitcast i32* %104 to <8 x i32>*
  %106 = load <8 x i32>, <8 x i32>* %105, align 4, !tbaa !33, !alias.scope !976
  %107 = getelementptr i32, i32* %104, i64 8
  %108 = bitcast i32* %107 to <8 x i32>*
  %109 = load <8 x i32>, <8 x i32>* %108, align 4, !tbaa !33, !alias.scope !976
  %110 = getelementptr i32, i32* %104, i64 16
  %111 = bitcast i32* %110 to <8 x i32>*
  %112 = load <8 x i32>, <8 x i32>* %111, align 4, !tbaa !33, !alias.scope !976
  %113 = getelementptr i32, i32* %104, i64 24
  %114 = bitcast i32* %113 to <8 x i32>*
  %115 = load <8 x i32>, <8 x i32>* %114, align 4, !tbaa !33, !alias.scope !976
  %116 = getelementptr inbounds i32, i32* %1, i64 %102
  %117 = bitcast i32* %116 to <8 x i32>*
  store <8 x i32> %106, <8 x i32>* %117, align 4, !tbaa !33, !alias.scope !979, !noalias !976
  %118 = getelementptr i32, i32* %116, i64 8
  %119 = bitcast i32* %118 to <8 x i32>*
  store <8 x i32> %109, <8 x i32>* %119, align 4, !tbaa !33, !alias.scope !979, !noalias !976
  %120 = getelementptr i32, i32* %116, i64 16
  %121 = bitcast i32* %120 to <8 x i32>*
  store <8 x i32> %112, <8 x i32>* %121, align 4, !tbaa !33, !alias.scope !979, !noalias !976
  %122 = getelementptr i32, i32* %116, i64 24
  %123 = bitcast i32* %122 to <8 x i32>*
  store <8 x i32> %115, <8 x i32>* %123, align 4, !tbaa !33, !alias.scope !979, !noalias !976
  %124 = add i64 %101, 32
  %125 = add i64 %47, %124
  %126 = add nsw i64 %59, %124
  %127 = getelementptr inbounds i32, i32* %28, i64 %126
  %128 = bitcast i32* %127 to <8 x i32>*
  %129 = load <8 x i32>, <8 x i32>* %128, align 4, !tbaa !33, !alias.scope !976
  %130 = getelementptr i32, i32* %127, i64 8
  %131 = bitcast i32* %130 to <8 x i32>*
  %132 = load <8 x i32>, <8 x i32>* %131, align 4, !tbaa !33, !alias.scope !976
  %133 = getelementptr i32, i32* %127, i64 16
  %134 = bitcast i32* %133 to <8 x i32>*
  %135 = load <8 x i32>, <8 x i32>* %134, align 4, !tbaa !33, !alias.scope !976
  %136 = getelementptr i32, i32* %127, i64 24
  %137 = bitcast i32* %136 to <8 x i32>*
  %138 = load <8 x i32>, <8 x i32>* %137, align 4, !tbaa !33, !alias.scope !976
  %139 = getelementptr inbounds i32, i32* %1, i64 %125
  %140 = bitcast i32* %139 to <8 x i32>*
  store <8 x i32> %129, <8 x i32>* %140, align 4, !tbaa !33, !alias.scope !979, !noalias !976
  %141 = getelementptr i32, i32* %139, i64 8
  %142 = bitcast i32* %141 to <8 x i32>*
  store <8 x i32> %132, <8 x i32>* %142, align 4, !tbaa !33, !alias.scope !979, !noalias !976
  %143 = getelementptr i32, i32* %139, i64 16
  %144 = bitcast i32* %143 to <8 x i32>*
  store <8 x i32> %135, <8 x i32>* %144, align 4, !tbaa !33, !alias.scope !979, !noalias !976
  %145 = getelementptr i32, i32* %139, i64 24
  %146 = bitcast i32* %145 to <8 x i32>*
  store <8 x i32> %138, <8 x i32>* %146, align 4, !tbaa !33, !alias.scope !979, !noalias !976
  %147 = add i64 %101, 64
  %148 = add i64 %47, %147
  %149 = add nsw i64 %59, %147
  %150 = getelementptr inbounds i32, i32* %28, i64 %149
  %151 = bitcast i32* %150 to <8 x i32>*
  %152 = load <8 x i32>, <8 x i32>* %151, align 4, !tbaa !33, !alias.scope !976
  %153 = getelementptr i32, i32* %150, i64 8
  %154 = bitcast i32* %153 to <8 x i32>*
  %155 = load <8 x i32>, <8 x i32>* %154, align 4, !tbaa !33, !alias.scope !976
  %156 = getelementptr i32, i32* %150, i64 16
  %157 = bitcast i32* %156 to <8 x i32>*
  %158 = load <8 x i32>, <8 x i32>* %157, align 4, !tbaa !33, !alias.scope !976
  %159 = getelementptr i32, i32* %150, i64 24
  %160 = bitcast i32* %159 to <8 x i32>*
  %161 = load <8 x i32>, <8 x i32>* %160, align 4, !tbaa !33, !alias.scope !976
  %162 = getelementptr inbounds i32, i32* %1, i64 %148
  %163 = bitcast i32* %162 to <8 x i32>*
  store <8 x i32> %152, <8 x i32>* %163, align 4, !tbaa !33, !alias.scope !979, !noalias !976
  %164 = getelementptr i32, i32* %162, i64 8
  %165 = bitcast i32* %164 to <8 x i32>*
  store <8 x i32> %155, <8 x i32>* %165, align 4, !tbaa !33, !alias.scope !979, !noalias !976
  %166 = getelementptr i32, i32* %162, i64 16
  %167 = bitcast i32* %166 to <8 x i32>*
  store <8 x i32> %158, <8 x i32>* %167, align 4, !tbaa !33, !alias.scope !979, !noalias !976
  %168 = getelementptr i32, i32* %162, i64 24
  %169 = bitcast i32* %168 to <8 x i32>*
  store <8 x i32> %161, <8 x i32>* %169, align 4, !tbaa !33, !alias.scope !979, !noalias !976
  %170 = add i64 %101, 96
  %171 = add i64 %47, %170
  %172 = add nsw i64 %59, %170
  %173 = getelementptr inbounds i32, i32* %28, i64 %172
  %174 = bitcast i32* %173 to <8 x i32>*
  %175 = load <8 x i32>, <8 x i32>* %174, align 4, !tbaa !33, !alias.scope !976
  %176 = getelementptr i32, i32* %173, i64 8
  %177 = bitcast i32* %176 to <8 x i32>*
  %178 = load <8 x i32>, <8 x i32>* %177, align 4, !tbaa !33, !alias.scope !976
  %179 = getelementptr i32, i32* %173, i64 16
  %180 = bitcast i32* %179 to <8 x i32>*
  %181 = load <8 x i32>, <8 x i32>* %180, align 4, !tbaa !33, !alias.scope !976
  %182 = getelementptr i32, i32* %173, i64 24
  %183 = bitcast i32* %182 to <8 x i32>*
  %184 = load <8 x i32>, <8 x i32>* %183, align 4, !tbaa !33, !alias.scope !976
  %185 = getelementptr inbounds i32, i32* %1, i64 %171
  %186 = bitcast i32* %185 to <8 x i32>*
  store <8 x i32> %175, <8 x i32>* %186, align 4, !tbaa !33, !alias.scope !979, !noalias !976
  %187 = getelementptr i32, i32* %185, i64 8
  %188 = bitcast i32* %187 to <8 x i32>*
  store <8 x i32> %178, <8 x i32>* %188, align 4, !tbaa !33, !alias.scope !979, !noalias !976
  %189 = getelementptr i32, i32* %185, i64 16
  %190 = bitcast i32* %189 to <8 x i32>*
  store <8 x i32> %181, <8 x i32>* %190, align 4, !tbaa !33, !alias.scope !979, !noalias !976
  %191 = getelementptr i32, i32* %185, i64 24
  %192 = bitcast i32* %191 to <8 x i32>*
  store <8 x i32> %184, <8 x i32>* %192, align 4, !tbaa !33, !alias.scope !979, !noalias !976
  %193 = add i64 %101, 128
  %194 = icmp eq i64 %193, %39
  br i1 %194, label %195, label %100, !llvm.loop !982

; <label>:195:                                    ; preds = %100
  br label %196

; <label>:196:                                    ; preds = %97, %195
  br i1 %44, label %277, label %197

; <label>:197:                                    ; preds = %196, %61, %60, %45
  %198 = phi i64 [ 0, %61 ], [ 0, %60 ], [ 0, %45 ], [ %39, %196 ]
  %199 = phi i64 [ %47, %61 ], [ %47, %60 ], [ %47, %45 ], [ %65, %196 ]
  %200 = sub i64 %3, %198
  %201 = sub i64 %37, %198
  %202 = and i64 %200, 7
  %203 = icmp eq i64 %202, 0
  br i1 %203, label %218, label %204

; <label>:204:                                    ; preds = %197
  br label %205

; <label>:205:                                    ; preds = %205, %204
  %206 = phi i64 [ %214, %205 ], [ %198, %204 ]
  %207 = phi i64 [ %212, %205 ], [ %199, %204 ]
  %208 = phi i64 [ %215, %205 ], [ %202, %204 ]
  %209 = add nsw i64 %59, %206
  %210 = getelementptr inbounds i32, i32* %28, i64 %209
  %211 = load i32, i32* %210, align 4, !tbaa !33
  %212 = add nsw i64 %207, 1
  %213 = getelementptr inbounds i32, i32* %1, i64 %207
  store i32 %211, i32* %213, align 4, !tbaa !33
  %214 = add nuw nsw i64 %206, 1
  %215 = add i64 %208, -1
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %217, label %205, !llvm.loop !983

; <label>:217:                                    ; preds = %205
  br label %218

; <label>:218:                                    ; preds = %197, %217
  %219 = phi i64 [ %198, %197 ], [ %214, %217 ]
  %220 = phi i64 [ %199, %197 ], [ %212, %217 ]
  %221 = icmp ult i64 %201, 7
  br i1 %221, label %276, label %222

; <label>:222:                                    ; preds = %218
  br label %223

; <label>:223:                                    ; preds = %223, %222
  %224 = phi i64 [ %219, %222 ], [ %273, %223 ]
  %225 = phi i64 [ %220, %222 ], [ %271, %223 ]
  %226 = add nsw i64 %59, %224
  %227 = getelementptr inbounds i32, i32* %28, i64 %226
  %228 = load i32, i32* %227, align 4, !tbaa !33
  %229 = add nsw i64 %225, 1
  %230 = getelementptr inbounds i32, i32* %1, i64 %225
  store i32 %228, i32* %230, align 4, !tbaa !33
  %231 = add nuw nsw i64 %224, 1
  %232 = add nsw i64 %59, %231
  %233 = getelementptr inbounds i32, i32* %28, i64 %232
  %234 = load i32, i32* %233, align 4, !tbaa !33
  %235 = add nsw i64 %225, 2
  %236 = getelementptr inbounds i32, i32* %1, i64 %229
  store i32 %234, i32* %236, align 4, !tbaa !33
  %237 = add nsw i64 %224, 2
  %238 = add nsw i64 %59, %237
  %239 = getelementptr inbounds i32, i32* %28, i64 %238
  %240 = load i32, i32* %239, align 4, !tbaa !33
  %241 = add nsw i64 %225, 3
  %242 = getelementptr inbounds i32, i32* %1, i64 %235
  store i32 %240, i32* %242, align 4, !tbaa !33
  %243 = add nsw i64 %224, 3
  %244 = add nsw i64 %59, %243
  %245 = getelementptr inbounds i32, i32* %28, i64 %244
  %246 = load i32, i32* %245, align 4, !tbaa !33
  %247 = add nsw i64 %225, 4
  %248 = getelementptr inbounds i32, i32* %1, i64 %241
  store i32 %246, i32* %248, align 4, !tbaa !33
  %249 = add nsw i64 %224, 4
  %250 = add nsw i64 %59, %249
  %251 = getelementptr inbounds i32, i32* %28, i64 %250
  %252 = load i32, i32* %251, align 4, !tbaa !33
  %253 = add nsw i64 %225, 5
  %254 = getelementptr inbounds i32, i32* %1, i64 %247
  store i32 %252, i32* %254, align 4, !tbaa !33
  %255 = add nsw i64 %224, 5
  %256 = add nsw i64 %59, %255
  %257 = getelementptr inbounds i32, i32* %28, i64 %256
  %258 = load i32, i32* %257, align 4, !tbaa !33
  %259 = add nsw i64 %225, 6
  %260 = getelementptr inbounds i32, i32* %1, i64 %253
  store i32 %258, i32* %260, align 4, !tbaa !33
  %261 = add nsw i64 %224, 6
  %262 = add nsw i64 %59, %261
  %263 = getelementptr inbounds i32, i32* %28, i64 %262
  %264 = load i32, i32* %263, align 4, !tbaa !33
  %265 = add nsw i64 %225, 7
  %266 = getelementptr inbounds i32, i32* %1, i64 %259
  store i32 %264, i32* %266, align 4, !tbaa !33
  %267 = add nsw i64 %224, 7
  %268 = add nsw i64 %59, %267
  %269 = getelementptr inbounds i32, i32* %28, i64 %268
  %270 = load i32, i32* %269, align 4, !tbaa !33
  %271 = add nsw i64 %225, 8
  %272 = getelementptr inbounds i32, i32* %1, i64 %265
  store i32 %270, i32* %272, align 4, !tbaa !33
  %273 = add nsw i64 %224, 8
  %274 = icmp eq i64 %273, %3
  br i1 %274, label %275, label %223, !llvm.loop !984

; <label>:275:                                    ; preds = %223
  br label %276

; <label>:276:                                    ; preds = %218, %275
  br label %277

; <label>:277:                                    ; preds = %276, %196
  %278 = add i64 %47, %3
  %279 = add nsw i64 %48, 1
  %280 = icmp eq i64 %279, %4
  %281 = add i64 %46, 1
  br i1 %280, label %822, label %45

; <label>:282:                                    ; preds = %10, %813
  %283 = phi i64 [ 0, %10 ], [ %815, %813 ]
  %284 = phi i32 [ 12, %10 ], [ %820, %813 ]
  %285 = phi i64 [ 0, %10 ], [ %814, %813 ]
  %286 = sub nsw i64 %4, %285
  %287 = sext i32 %284 to i64
  %288 = srem i64 %286, %287
  %289 = sub i64 %4, %288
  %290 = icmp slt i64 %285, %289
  br i1 %290, label %291, label %813

; <label>:291:                                    ; preds = %282
  %292 = shl nsw i32 %284, 2
  %293 = sext i32 %292 to i64
  %294 = add nsw i32 %284, -3
  %295 = sext i32 %294 to i64
  %296 = icmp sgt i32 %284, 3
  %297 = and i32 %284, 3
  %298 = icmp eq i32 %297, 0
  %299 = mul i64 %19, %293
  %300 = icmp sgt i64 %295, 4
  %301 = select i1 %300, i64 %295, i64 4
  %302 = add nuw nsw i64 %301, 3
  %303 = and i64 %302, 9223372036854775804
  %304 = icmp slt i32 %284, 4
  %305 = or i1 %304, %22
  %306 = xor i1 %298, true
  %307 = icmp sgt i64 %287, %303
  %308 = and i1 %307, %306
  %309 = shl nsw i64 %287, 1
  %310 = mul nsw i64 %287, 3
  %311 = sub i64 %287, %303
  %312 = getelementptr i32, i32* %1, i64 %303
  %313 = add i64 %285, %303
  %314 = add i64 %285, %287
  %315 = getelementptr i32, i32* %1, i64 %287
  %316 = add nsw i64 %287, -16
  %317 = lshr i64 %316, 4
  %318 = add nuw nsw i64 %317, 1
  %319 = add nsw i64 %287, -1
  %320 = add i64 %311, -8
  %321 = lshr i64 %320, 3
  %322 = add nuw nsw i64 %321, 1
  %323 = add nsw i64 %287, -1
  %324 = icmp ult i64 %311, 8
  %325 = and i64 %311, -8
  %326 = icmp ne i64 %325, 0
  %327 = add i64 %303, %325
  %328 = and i64 %322, 3
  %329 = icmp eq i64 %328, 0
  %330 = icmp ult i64 %320, 24
  %331 = icmp eq i64 %311, %325
  %332 = icmp ult i32 %284, 16
  %333 = and i64 %287, -16
  %334 = icmp ne i64 %333, 0
  %335 = and i64 %318, 3
  %336 = icmp eq i64 %335, 0
  %337 = icmp ult i64 %316, 48
  %338 = icmp eq i64 %287, %333
  br label %339

; <label>:339:                                    ; preds = %291, %807
  %340 = phi i64 [ 0, %291 ], [ %811, %807 ]
  %341 = phi i64 [ %283, %291 ], [ %808, %807 ]
  %342 = phi i64 [ %285, %291 ], [ %809, %807 ]
  %343 = mul i64 %287, %340
  %344 = add i64 %285, %343
  %345 = add i64 %314, %343
  %346 = mul i64 %287, %340
  %347 = add i64 %313, %346
  %348 = add i64 %314, %346
  br i1 %305, label %410, label %349

; <label>:349:                                    ; preds = %339
  br label %350

; <label>:350:                                    ; preds = %349, %404
  %351 = phi i64 [ %405, %404 ], [ %341, %349 ]
  %352 = phi i64 [ %406, %404 ], [ 0, %349 ]
  %353 = getelementptr inbounds i32, i32* %1, i64 %351
  br label %354

; <label>:354:                                    ; preds = %350, %354
  %355 = phi i64 [ 0, %350 ], [ %402, %354 ]
  %356 = add i64 %355, %342
  %357 = load i32*, i32** %13, align 8, !tbaa !365
  %358 = load i64, i64* %14, align 8, !tbaa !367
  %359 = mul nsw i64 %358, %356
  %360 = add nsw i64 %359, %352
  %361 = getelementptr inbounds i32, i32* %357, i64 %360
  %362 = bitcast i32* %361 to <4 x i32>*
  %363 = load <4 x i32>, <4 x i32>* %362, align 1, !tbaa !11
  %364 = add i64 %356, 1
  %365 = mul nsw i64 %358, %364
  %366 = add nsw i64 %365, %352
  %367 = getelementptr inbounds i32, i32* %357, i64 %366
  %368 = bitcast i32* %367 to <4 x i32>*
  %369 = load <4 x i32>, <4 x i32>* %368, align 1, !tbaa !11
  %370 = add i64 %356, 2
  %371 = mul nsw i64 %358, %370
  %372 = add nsw i64 %371, %352
  %373 = getelementptr inbounds i32, i32* %357, i64 %372
  %374 = bitcast i32* %373 to <4 x i32>*
  %375 = load <4 x i32>, <4 x i32>* %374, align 1, !tbaa !11
  %376 = add i64 %356, 3
  %377 = mul nsw i64 %358, %376
  %378 = add nsw i64 %377, %352
  %379 = getelementptr inbounds i32, i32* %357, i64 %378
  %380 = bitcast i32* %379 to <4 x i32>*
  %381 = load <4 x i32>, <4 x i32>* %380, align 1, !tbaa !11
  %382 = shufflevector <4 x i32> %363, <4 x i32> %369, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %383 = bitcast <4 x i32> %382 to <2 x i64>
  %384 = shufflevector <4 x i32> %375, <4 x i32> %381, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %385 = bitcast <4 x i32> %384 to <2 x i64>
  %386 = shufflevector <4 x i32> %363, <4 x i32> %369, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %387 = bitcast <4 x i32> %386 to <2 x i64>
  %388 = shufflevector <4 x i32> %375, <4 x i32> %381, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %389 = bitcast <4 x i32> %388 to <2 x i64>
  %390 = shufflevector <2 x i64> %383, <2 x i64> %385, <2 x i32> <i32 0, i32 2>
  %391 = shufflevector <2 x i64> %383, <2 x i64> %385, <2 x i32> <i32 1, i32 3>
  %392 = shufflevector <2 x i64> %387, <2 x i64> %389, <2 x i32> <i32 0, i32 2>
  %393 = shufflevector <2 x i64> %387, <2 x i64> %389, <2 x i32> <i32 1, i32 3>
  %394 = getelementptr inbounds i32, i32* %353, i64 %355
  %395 = bitcast i32* %394 to <2 x i64>*
  store <2 x i64> %390, <2 x i64>* %395, align 16, !tbaa !11
  %396 = getelementptr inbounds i32, i32* %394, i64 %287
  %397 = bitcast i32* %396 to <2 x i64>*
  store <2 x i64> %391, <2 x i64>* %397, align 16, !tbaa !11
  %398 = getelementptr inbounds i32, i32* %394, i64 %309
  %399 = bitcast i32* %398 to <2 x i64>*
  store <2 x i64> %392, <2 x i64>* %399, align 16, !tbaa !11
  %400 = getelementptr inbounds i32, i32* %394, i64 %310
  %401 = bitcast i32* %400 to <2 x i64>*
  store <2 x i64> %393, <2 x i64>* %401, align 16, !tbaa !11
  %402 = add nuw nsw i64 %355, 4
  %403 = icmp slt i64 %402, %287
  br i1 %403, label %354, label %404

; <label>:404:                                    ; preds = %354
  %405 = add nsw i64 %351, %293
  %406 = add nuw nsw i64 %352, 4
  %407 = icmp slt i64 %406, %12
  br i1 %407, label %350, label %408

; <label>:408:                                    ; preds = %404
  %409 = add i64 %299, %341
  br label %410

; <label>:410:                                    ; preds = %408, %339
  %411 = phi i64 [ 0, %339 ], [ %21, %408 ]
  %412 = phi i64 [ %341, %339 ], [ %409, %408 ]
  %413 = icmp slt i64 %411, %3
  br i1 %413, label %414, label %807

; <label>:414:                                    ; preds = %410
  %415 = load i32*, i32** %13, align 8
  %416 = load i64, i64* %14, align 8
  br i1 %296, label %422, label %417

; <label>:417:                                    ; preds = %414
  %418 = add i64 %411, %344
  %419 = add i64 %411, %345
  %420 = icmp eq i64 %416, 1
  %421 = and i1 %334, %420
  br label %624

; <label>:422:                                    ; preds = %414
  %423 = add i64 %411, %347
  %424 = add i64 %411, %348
  %425 = icmp eq i64 %416, 1
  %426 = and i1 %326, %425
  br label %427

; <label>:427:                                    ; preds = %422, %475
  %428 = phi i64 [ 0, %422 ], [ %479, %475 ]
  %429 = phi i64 [ %412, %422 ], [ %476, %475 ]
  %430 = phi i64 [ %411, %422 ], [ %477, %475 ]
  %431 = add i64 %423, %428
  %432 = getelementptr i32, i32* %415, i64 %431
  %433 = add i64 %424, %428
  %434 = getelementptr i32, i32* %415, i64 %433
  br label %480

; <label>:435:                                    ; preds = %435, %543
  %436 = phi i64 [ %540, %543 ], [ %467, %435 ]
  %437 = phi i64 [ %541, %543 ], [ %469, %435 ]
  %438 = add nsw i64 %437, %342
  %439 = mul nsw i64 %416, %438
  %440 = add nsw i64 %439, %430
  %441 = getelementptr inbounds i32, i32* %415, i64 %440
  %442 = load i32, i32* %441, align 4, !tbaa !33
  %443 = add nsw i64 %436, 1
  %444 = getelementptr inbounds i32, i32* %1, i64 %436
  store i32 %442, i32* %444, align 4, !tbaa !33
  %445 = add nsw i64 %437, 1
  %446 = add nsw i64 %445, %342
  %447 = mul nsw i64 %416, %446
  %448 = add nsw i64 %447, %430
  %449 = getelementptr inbounds i32, i32* %415, i64 %448
  %450 = load i32, i32* %449, align 4, !tbaa !33
  %451 = add nsw i64 %436, 2
  %452 = getelementptr inbounds i32, i32* %1, i64 %443
  store i32 %450, i32* %452, align 4, !tbaa !33
  %453 = add nsw i64 %437, 2
  %454 = add nsw i64 %453, %342
  %455 = mul nsw i64 %416, %454
  %456 = add nsw i64 %455, %430
  %457 = getelementptr inbounds i32, i32* %415, i64 %456
  %458 = load i32, i32* %457, align 4, !tbaa !33
  %459 = add nsw i64 %436, 3
  %460 = getelementptr inbounds i32, i32* %1, i64 %451
  store i32 %458, i32* %460, align 4, !tbaa !33
  %461 = add nsw i64 %437, 3
  %462 = add nsw i64 %461, %342
  %463 = mul nsw i64 %416, %462
  %464 = add nsw i64 %463, %430
  %465 = getelementptr inbounds i32, i32* %415, i64 %464
  %466 = load i32, i32* %465, align 4, !tbaa !33
  %467 = add nsw i64 %436, 4
  %468 = getelementptr inbounds i32, i32* %1, i64 %459
  store i32 %466, i32* %468, align 4, !tbaa !33
  %469 = add nsw i64 %437, 4
  %470 = icmp eq i64 %469, %287
  br i1 %470, label %471, label %435, !llvm.loop !985

; <label>:471:                                    ; preds = %435
  br label %472

; <label>:472:                                    ; preds = %539, %471
  br label %473

; <label>:473:                                    ; preds = %472, %623
  %474 = add i64 %287, %429
  br label %475

; <label>:475:                                    ; preds = %473, %513
  %476 = phi i64 [ %514, %513 ], [ %474, %473 ]
  %477 = add nsw i64 %430, 1
  %478 = icmp eq i64 %477, %3
  %479 = add i64 %428, 1
  br i1 %478, label %805, label %427

; <label>:480:                                    ; preds = %427, %480
  %481 = phi i64 [ %429, %427 ], [ %509, %480 ]
  %482 = phi i64 [ 0, %427 ], [ %511, %480 ]
  %483 = add nsw i64 %482, %342
  %484 = mul nsw i64 %416, %483
  %485 = add nsw i64 %484, %430
  %486 = getelementptr inbounds i32, i32* %415, i64 %485
  %487 = load i32, i32* %486, align 4, !tbaa !33
  %488 = add nsw i64 %483, 1
  %489 = mul nsw i64 %416, %488
  %490 = add nsw i64 %489, %430
  %491 = getelementptr inbounds i32, i32* %415, i64 %490
  %492 = load i32, i32* %491, align 4, !tbaa !33
  %493 = add nsw i64 %483, 2
  %494 = mul nsw i64 %416, %493
  %495 = add nsw i64 %494, %430
  %496 = getelementptr inbounds i32, i32* %415, i64 %495
  %497 = load i32, i32* %496, align 4, !tbaa !33
  %498 = add nsw i64 %483, 3
  %499 = mul nsw i64 %416, %498
  %500 = add nsw i64 %499, %430
  %501 = getelementptr inbounds i32, i32* %415, i64 %500
  %502 = load i32, i32* %501, align 4, !tbaa !33
  %503 = add nsw i64 %481, 1
  %504 = getelementptr inbounds i32, i32* %1, i64 %481
  store i32 %487, i32* %504, align 4, !tbaa !33
  %505 = add nsw i64 %481, 2
  %506 = getelementptr inbounds i32, i32* %1, i64 %503
  store i32 %492, i32* %506, align 4, !tbaa !33
  %507 = add nsw i64 %481, 3
  %508 = getelementptr inbounds i32, i32* %1, i64 %505
  store i32 %497, i32* %508, align 4, !tbaa !33
  %509 = add nsw i64 %481, 4
  %510 = getelementptr inbounds i32, i32* %1, i64 %507
  store i32 %502, i32* %510, align 4, !tbaa !33
  %511 = add nuw nsw i64 %482, 4
  %512 = icmp slt i64 %511, %295
  br i1 %512, label %480, label %513

; <label>:513:                                    ; preds = %480
  %514 = add i64 %303, %429
  br i1 %308, label %515, label %475

; <label>:515:                                    ; preds = %513
  br i1 %324, label %516, label %544

; <label>:516:                                    ; preds = %544, %623, %545, %515
  %517 = phi i64 [ %514, %545 ], [ %514, %544 ], [ %514, %515 ], [ %552, %623 ]
  %518 = phi i64 [ %303, %545 ], [ %303, %544 ], [ %303, %515 ], [ %327, %623 ]
  %519 = sub i64 %287, %518
  %520 = sub i64 %323, %518
  %521 = and i64 %519, 3
  %522 = icmp eq i64 %521, 0
  br i1 %522, label %539, label %523

; <label>:523:                                    ; preds = %516
  br label %524

; <label>:524:                                    ; preds = %524, %523
  %525 = phi i64 [ %533, %524 ], [ %517, %523 ]
  %526 = phi i64 [ %535, %524 ], [ %518, %523 ]
  %527 = phi i64 [ %536, %524 ], [ %521, %523 ]
  %528 = add nsw i64 %526, %342
  %529 = mul nsw i64 %416, %528
  %530 = add nsw i64 %529, %430
  %531 = getelementptr inbounds i32, i32* %415, i64 %530
  %532 = load i32, i32* %531, align 4, !tbaa !33
  %533 = add nsw i64 %525, 1
  %534 = getelementptr inbounds i32, i32* %1, i64 %525
  store i32 %532, i32* %534, align 4, !tbaa !33
  %535 = add nsw i64 %526, 1
  %536 = add i64 %527, -1
  %537 = icmp eq i64 %536, 0
  br i1 %537, label %538, label %524, !llvm.loop !986

; <label>:538:                                    ; preds = %524
  br label %539

; <label>:539:                                    ; preds = %516, %538
  %540 = phi i64 [ %517, %516 ], [ %533, %538 ]
  %541 = phi i64 [ %518, %516 ], [ %535, %538 ]
  %542 = icmp ult i64 %520, 3
  br i1 %542, label %472, label %543

; <label>:543:                                    ; preds = %539
  br label %435

; <label>:544:                                    ; preds = %515
  br i1 %426, label %545, label %516

; <label>:545:                                    ; preds = %544
  %546 = getelementptr i32, i32* %312, i64 %429
  %547 = add i64 %287, %429
  %548 = getelementptr i32, i32* %1, i64 %547
  %549 = icmp ult i32* %546, %434
  %550 = icmp ult i32* %432, %548
  %551 = and i1 %549, %550
  %552 = add i64 %514, %325
  br i1 %551, label %516, label %553

; <label>:553:                                    ; preds = %545
  br i1 %329, label %572, label %554

; <label>:554:                                    ; preds = %553
  br label %555

; <label>:555:                                    ; preds = %555, %554
  %556 = phi i64 [ %568, %555 ], [ 0, %554 ]
  %557 = phi i64 [ %569, %555 ], [ %328, %554 ]
  %558 = add i64 %514, %556
  %559 = add i64 %303, %556
  %560 = add nsw i64 %559, %342
  %561 = mul nsw i64 %416, %560
  %562 = add nsw i64 %561, %430
  %563 = getelementptr inbounds i32, i32* %415, i64 %562
  %564 = bitcast i32* %563 to <8 x i32>*
  %565 = load <8 x i32>, <8 x i32>* %564, align 4, !tbaa !33, !alias.scope !987
  %566 = getelementptr inbounds i32, i32* %1, i64 %558
  %567 = bitcast i32* %566 to <8 x i32>*
  store <8 x i32> %565, <8 x i32>* %567, align 4, !tbaa !33, !alias.scope !990, !noalias !987
  %568 = add i64 %556, 8
  %569 = add i64 %557, -1
  %570 = icmp eq i64 %569, 0
  br i1 %570, label %571, label %555, !llvm.loop !992

; <label>:571:                                    ; preds = %555
  br label %572

; <label>:572:                                    ; preds = %553, %571
  %573 = phi i64 [ 0, %553 ], [ %568, %571 ]
  br i1 %330, label %623, label %574

; <label>:574:                                    ; preds = %572
  br label %575

; <label>:575:                                    ; preds = %575, %574
  %576 = phi i64 [ %573, %574 ], [ %620, %575 ]
  %577 = add i64 %514, %576
  %578 = add i64 %303, %576
  %579 = add nsw i64 %578, %342
  %580 = mul nsw i64 %416, %579
  %581 = add nsw i64 %580, %430
  %582 = getelementptr inbounds i32, i32* %415, i64 %581
  %583 = bitcast i32* %582 to <8 x i32>*
  %584 = load <8 x i32>, <8 x i32>* %583, align 4, !tbaa !33, !alias.scope !987
  %585 = getelementptr inbounds i32, i32* %1, i64 %577
  %586 = bitcast i32* %585 to <8 x i32>*
  store <8 x i32> %584, <8 x i32>* %586, align 4, !tbaa !33, !alias.scope !990, !noalias !987
  %587 = add i64 %576, 8
  %588 = add i64 %514, %587
  %589 = add i64 %303, %587
  %590 = add nsw i64 %589, %342
  %591 = mul nsw i64 %416, %590
  %592 = add nsw i64 %591, %430
  %593 = getelementptr inbounds i32, i32* %415, i64 %592
  %594 = bitcast i32* %593 to <8 x i32>*
  %595 = load <8 x i32>, <8 x i32>* %594, align 4, !tbaa !33, !alias.scope !987
  %596 = getelementptr inbounds i32, i32* %1, i64 %588
  %597 = bitcast i32* %596 to <8 x i32>*
  store <8 x i32> %595, <8 x i32>* %597, align 4, !tbaa !33, !alias.scope !990, !noalias !987
  %598 = add i64 %576, 16
  %599 = add i64 %514, %598
  %600 = add i64 %303, %598
  %601 = add nsw i64 %600, %342
  %602 = mul nsw i64 %416, %601
  %603 = add nsw i64 %602, %430
  %604 = getelementptr inbounds i32, i32* %415, i64 %603
  %605 = bitcast i32* %604 to <8 x i32>*
  %606 = load <8 x i32>, <8 x i32>* %605, align 4, !tbaa !33, !alias.scope !987
  %607 = getelementptr inbounds i32, i32* %1, i64 %599
  %608 = bitcast i32* %607 to <8 x i32>*
  store <8 x i32> %606, <8 x i32>* %608, align 4, !tbaa !33, !alias.scope !990, !noalias !987
  %609 = add i64 %576, 24
  %610 = add i64 %514, %609
  %611 = add i64 %303, %609
  %612 = add nsw i64 %611, %342
  %613 = mul nsw i64 %416, %612
  %614 = add nsw i64 %613, %430
  %615 = getelementptr inbounds i32, i32* %415, i64 %614
  %616 = bitcast i32* %615 to <8 x i32>*
  %617 = load <8 x i32>, <8 x i32>* %616, align 4, !tbaa !33, !alias.scope !987
  %618 = getelementptr inbounds i32, i32* %1, i64 %610
  %619 = bitcast i32* %618 to <8 x i32>*
  store <8 x i32> %617, <8 x i32>* %619, align 4, !tbaa !33, !alias.scope !990, !noalias !987
  %620 = add i64 %576, 32
  %621 = icmp eq i64 %620, %325
  br i1 %621, label %622, label %575, !llvm.loop !993

; <label>:622:                                    ; preds = %575
  br label %623

; <label>:623:                                    ; preds = %572, %622
  br i1 %331, label %473, label %516

; <label>:624:                                    ; preds = %417, %800
  %625 = phi i64 [ 0, %417 ], [ %804, %800 ]
  %626 = phi i64 [ %412, %417 ], [ %801, %800 ]
  %627 = phi i64 [ %411, %417 ], [ %802, %800 ]
  %628 = add i64 %418, %625
  %629 = getelementptr i32, i32* %415, i64 %628
  %630 = add i64 %419, %625
  %631 = getelementptr i32, i32* %415, i64 %630
  br i1 %298, label %800, label %632

; <label>:632:                                    ; preds = %624
  br i1 %332, label %732, label %633

; <label>:633:                                    ; preds = %632
  br i1 %421, label %634, label %732

; <label>:634:                                    ; preds = %633
  %635 = getelementptr i32, i32* %1, i64 %626
  %636 = getelementptr i32, i32* %315, i64 %626
  %637 = icmp ult i32* %635, %631
  %638 = icmp ult i32* %629, %636
  %639 = and i1 %637, %638
  %640 = add i64 %626, %333
  br i1 %639, label %732, label %641

; <label>:641:                                    ; preds = %634
  br i1 %336, label %664, label %642

; <label>:642:                                    ; preds = %641
  br label %643

; <label>:643:                                    ; preds = %643, %642
  %644 = phi i64 [ %660, %643 ], [ 0, %642 ]
  %645 = phi i64 [ %661, %643 ], [ %335, %642 ]
  %646 = add i64 %626, %644
  %647 = add nsw i64 %644, %342
  %648 = mul nsw i64 %416, %647
  %649 = add nsw i64 %648, %627
  %650 = getelementptr inbounds i32, i32* %415, i64 %649
  %651 = bitcast i32* %650 to <8 x i32>*
  %652 = load <8 x i32>, <8 x i32>* %651, align 4, !tbaa !33, !alias.scope !994
  %653 = getelementptr i32, i32* %650, i64 8
  %654 = bitcast i32* %653 to <8 x i32>*
  %655 = load <8 x i32>, <8 x i32>* %654, align 4, !tbaa !33, !alias.scope !994
  %656 = getelementptr inbounds i32, i32* %1, i64 %646
  %657 = bitcast i32* %656 to <8 x i32>*
  store <8 x i32> %652, <8 x i32>* %657, align 4, !tbaa !33, !alias.scope !997, !noalias !994
  %658 = getelementptr i32, i32* %656, i64 8
  %659 = bitcast i32* %658 to <8 x i32>*
  store <8 x i32> %655, <8 x i32>* %659, align 4, !tbaa !33, !alias.scope !997, !noalias !994
  %660 = add i64 %644, 16
  %661 = add i64 %645, -1
  %662 = icmp eq i64 %661, 0
  br i1 %662, label %663, label %643, !llvm.loop !999

; <label>:663:                                    ; preds = %643
  br label %664

; <label>:664:                                    ; preds = %641, %663
  %665 = phi i64 [ 0, %641 ], [ %660, %663 ]
  br i1 %337, label %731, label %666

; <label>:666:                                    ; preds = %664
  br label %667

; <label>:667:                                    ; preds = %667, %666
  %668 = phi i64 [ %665, %666 ], [ %728, %667 ]
  %669 = add i64 %626, %668
  %670 = add nsw i64 %668, %342
  %671 = mul nsw i64 %416, %670
  %672 = add nsw i64 %671, %627
  %673 = getelementptr inbounds i32, i32* %415, i64 %672
  %674 = bitcast i32* %673 to <8 x i32>*
  %675 = load <8 x i32>, <8 x i32>* %674, align 4, !tbaa !33, !alias.scope !994
  %676 = getelementptr i32, i32* %673, i64 8
  %677 = bitcast i32* %676 to <8 x i32>*
  %678 = load <8 x i32>, <8 x i32>* %677, align 4, !tbaa !33, !alias.scope !994
  %679 = getelementptr inbounds i32, i32* %1, i64 %669
  %680 = bitcast i32* %679 to <8 x i32>*
  store <8 x i32> %675, <8 x i32>* %680, align 4, !tbaa !33, !alias.scope !997, !noalias !994
  %681 = getelementptr i32, i32* %679, i64 8
  %682 = bitcast i32* %681 to <8 x i32>*
  store <8 x i32> %678, <8 x i32>* %682, align 4, !tbaa !33, !alias.scope !997, !noalias !994
  %683 = add i64 %668, 16
  %684 = add i64 %626, %683
  %685 = add nsw i64 %683, %342
  %686 = mul nsw i64 %416, %685
  %687 = add nsw i64 %686, %627
  %688 = getelementptr inbounds i32, i32* %415, i64 %687
  %689 = bitcast i32* %688 to <8 x i32>*
  %690 = load <8 x i32>, <8 x i32>* %689, align 4, !tbaa !33, !alias.scope !994
  %691 = getelementptr i32, i32* %688, i64 8
  %692 = bitcast i32* %691 to <8 x i32>*
  %693 = load <8 x i32>, <8 x i32>* %692, align 4, !tbaa !33, !alias.scope !994
  %694 = getelementptr inbounds i32, i32* %1, i64 %684
  %695 = bitcast i32* %694 to <8 x i32>*
  store <8 x i32> %690, <8 x i32>* %695, align 4, !tbaa !33, !alias.scope !997, !noalias !994
  %696 = getelementptr i32, i32* %694, i64 8
  %697 = bitcast i32* %696 to <8 x i32>*
  store <8 x i32> %693, <8 x i32>* %697, align 4, !tbaa !33, !alias.scope !997, !noalias !994
  %698 = add i64 %668, 32
  %699 = add i64 %626, %698
  %700 = add nsw i64 %698, %342
  %701 = mul nsw i64 %416, %700
  %702 = add nsw i64 %701, %627
  %703 = getelementptr inbounds i32, i32* %415, i64 %702
  %704 = bitcast i32* %703 to <8 x i32>*
  %705 = load <8 x i32>, <8 x i32>* %704, align 4, !tbaa !33, !alias.scope !994
  %706 = getelementptr i32, i32* %703, i64 8
  %707 = bitcast i32* %706 to <8 x i32>*
  %708 = load <8 x i32>, <8 x i32>* %707, align 4, !tbaa !33, !alias.scope !994
  %709 = getelementptr inbounds i32, i32* %1, i64 %699
  %710 = bitcast i32* %709 to <8 x i32>*
  store <8 x i32> %705, <8 x i32>* %710, align 4, !tbaa !33, !alias.scope !997, !noalias !994
  %711 = getelementptr i32, i32* %709, i64 8
  %712 = bitcast i32* %711 to <8 x i32>*
  store <8 x i32> %708, <8 x i32>* %712, align 4, !tbaa !33, !alias.scope !997, !noalias !994
  %713 = add i64 %668, 48
  %714 = add i64 %626, %713
  %715 = add nsw i64 %713, %342
  %716 = mul nsw i64 %416, %715
  %717 = add nsw i64 %716, %627
  %718 = getelementptr inbounds i32, i32* %415, i64 %717
  %719 = bitcast i32* %718 to <8 x i32>*
  %720 = load <8 x i32>, <8 x i32>* %719, align 4, !tbaa !33, !alias.scope !994
  %721 = getelementptr i32, i32* %718, i64 8
  %722 = bitcast i32* %721 to <8 x i32>*
  %723 = load <8 x i32>, <8 x i32>* %722, align 4, !tbaa !33, !alias.scope !994
  %724 = getelementptr inbounds i32, i32* %1, i64 %714
  %725 = bitcast i32* %724 to <8 x i32>*
  store <8 x i32> %720, <8 x i32>* %725, align 4, !tbaa !33, !alias.scope !997, !noalias !994
  %726 = getelementptr i32, i32* %724, i64 8
  %727 = bitcast i32* %726 to <8 x i32>*
  store <8 x i32> %723, <8 x i32>* %727, align 4, !tbaa !33, !alias.scope !997, !noalias !994
  %728 = add i64 %668, 64
  %729 = icmp eq i64 %728, %333
  br i1 %729, label %730, label %667, !llvm.loop !1000

; <label>:730:                                    ; preds = %667
  br label %731

; <label>:731:                                    ; preds = %664, %730
  br i1 %338, label %798, label %732

; <label>:732:                                    ; preds = %633, %731, %634, %632
  %733 = phi i64 [ %626, %634 ], [ %626, %633 ], [ %626, %632 ], [ %640, %731 ]
  %734 = phi i64 [ 0, %634 ], [ 0, %633 ], [ 0, %632 ], [ %333, %731 ]
  %735 = sub nsw i64 %287, %734
  %736 = sub nsw i64 %319, %734
  %737 = and i64 %735, 3
  %738 = icmp eq i64 %737, 0
  br i1 %738, label %755, label %739

; <label>:739:                                    ; preds = %732
  br label %740

; <label>:740:                                    ; preds = %740, %739
  %741 = phi i64 [ %749, %740 ], [ %733, %739 ]
  %742 = phi i64 [ %751, %740 ], [ %734, %739 ]
  %743 = phi i64 [ %752, %740 ], [ %737, %739 ]
  %744 = add nsw i64 %742, %342
  %745 = mul nsw i64 %416, %744
  %746 = add nsw i64 %745, %627
  %747 = getelementptr inbounds i32, i32* %415, i64 %746
  %748 = load i32, i32* %747, align 4, !tbaa !33
  %749 = add nsw i64 %741, 1
  %750 = getelementptr inbounds i32, i32* %1, i64 %741
  store i32 %748, i32* %750, align 4, !tbaa !33
  %751 = add nuw nsw i64 %742, 1
  %752 = add i64 %743, -1
  %753 = icmp eq i64 %752, 0
  br i1 %753, label %754, label %740, !llvm.loop !1001

; <label>:754:                                    ; preds = %740
  br label %755

; <label>:755:                                    ; preds = %732, %754
  %756 = phi i64 [ %733, %732 ], [ %749, %754 ]
  %757 = phi i64 [ %734, %732 ], [ %751, %754 ]
  %758 = icmp ult i64 %736, 3
  br i1 %758, label %797, label %759

; <label>:759:                                    ; preds = %755
  br label %760

; <label>:760:                                    ; preds = %760, %759
  %761 = phi i64 [ %756, %759 ], [ %792, %760 ]
  %762 = phi i64 [ %757, %759 ], [ %794, %760 ]
  %763 = add nsw i64 %762, %342
  %764 = mul nsw i64 %416, %763
  %765 = add nsw i64 %764, %627
  %766 = getelementptr inbounds i32, i32* %415, i64 %765
  %767 = load i32, i32* %766, align 4, !tbaa !33
  %768 = add nsw i64 %761, 1
  %769 = getelementptr inbounds i32, i32* %1, i64 %761
  store i32 %767, i32* %769, align 4, !tbaa !33
  %770 = add nuw nsw i64 %762, 1
  %771 = add nsw i64 %770, %342
  %772 = mul nsw i64 %416, %771
  %773 = add nsw i64 %772, %627
  %774 = getelementptr inbounds i32, i32* %415, i64 %773
  %775 = load i32, i32* %774, align 4, !tbaa !33
  %776 = add nsw i64 %761, 2
  %777 = getelementptr inbounds i32, i32* %1, i64 %768
  store i32 %775, i32* %777, align 4, !tbaa !33
  %778 = add nsw i64 %762, 2
  %779 = add nsw i64 %778, %342
  %780 = mul nsw i64 %416, %779
  %781 = add nsw i64 %780, %627
  %782 = getelementptr inbounds i32, i32* %415, i64 %781
  %783 = load i32, i32* %782, align 4, !tbaa !33
  %784 = add nsw i64 %761, 3
  %785 = getelementptr inbounds i32, i32* %1, i64 %776
  store i32 %783, i32* %785, align 4, !tbaa !33
  %786 = add nsw i64 %762, 3
  %787 = add nsw i64 %786, %342
  %788 = mul nsw i64 %416, %787
  %789 = add nsw i64 %788, %627
  %790 = getelementptr inbounds i32, i32* %415, i64 %789
  %791 = load i32, i32* %790, align 4, !tbaa !33
  %792 = add nsw i64 %761, 4
  %793 = getelementptr inbounds i32, i32* %1, i64 %784
  store i32 %791, i32* %793, align 4, !tbaa !33
  %794 = add nsw i64 %762, 4
  %795 = icmp eq i64 %794, %287
  br i1 %795, label %796, label %760, !llvm.loop !1002

; <label>:796:                                    ; preds = %760
  br label %797

; <label>:797:                                    ; preds = %755, %796
  br label %798

; <label>:798:                                    ; preds = %797, %731
  %799 = add i64 %287, %626
  br label %800

; <label>:800:                                    ; preds = %624, %798
  %801 = phi i64 [ %626, %624 ], [ %799, %798 ]
  %802 = add nsw i64 %627, 1
  %803 = icmp eq i64 %802, %3
  %804 = add i64 %625, 1
  br i1 %803, label %806, label %624

; <label>:805:                                    ; preds = %475
  br label %807

; <label>:806:                                    ; preds = %800
  br label %807

; <label>:807:                                    ; preds = %806, %805, %410
  %808 = phi i64 [ %412, %410 ], [ %476, %805 ], [ %801, %806 ]
  %809 = add nsw i64 %342, %287
  %810 = icmp slt i64 %809, %289
  %811 = add i64 %340, 1
  br i1 %810, label %339, label %812

; <label>:812:                                    ; preds = %807
  br label %813

; <label>:813:                                    ; preds = %812, %282
  %814 = phi i64 [ %285, %282 ], [ %809, %812 ]
  %815 = phi i64 [ %283, %282 ], [ %808, %812 ]
  %816 = add nsw i32 %284, -4
  %817 = icmp sgt i32 %816, 3
  %818 = icmp eq i32 %284, 4
  %819 = or i1 %818, %817
  %820 = select i1 %819, i32 %816, i32 4
  %821 = icmp sgt i32 %820, 0
  br i1 %821, label %282, label %24

; <label>:822:                                    ; preds = %277
  br label %823

; <label>:823:                                    ; preds = %822, %26, %24
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal26call_dense_assignment_loopINS_9TransposeINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEEEENS3_IiLi1ELin1ELi1ELi1ELin1EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Transpose.798"* dereferenceable(8), %"class.Eigen::Matrix.724"* dereferenceable(16), %"struct.Eigen::internal::assign_op.512"* dereferenceable(1)) local_unnamed_addr #6 {
  %4 = bitcast %"class.Eigen::Matrix.724"* %1 to i64*
  %5 = load i64, i64* %4, align 8, !tbaa !197
  %6 = getelementptr inbounds %"class.Eigen::Matrix.724", %"class.Eigen::Matrix.724"* %1, i64 0, i32 0, i32 0, i32 1
  %7 = load i64, i64* %6, align 8, !tbaa !424
  %8 = bitcast %"class.Eigen::Transpose.798"* %0 to %"class.Eigen::PlainObjectBase.171"**
  %9 = load %"class.Eigen::PlainObjectBase.171"*, %"class.Eigen::PlainObjectBase.171"** %8, align 8, !tbaa !11
  %10 = getelementptr inbounds %"class.Eigen::PlainObjectBase.171", %"class.Eigen::PlainObjectBase.171"* %9, i64 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8, !tbaa !46
  %12 = icmp eq i64 %11, %7
  br i1 %12, label %45, label %13

; <label>:13:                                     ; preds = %3
  %14 = icmp sgt i64 %7, -1
  br i1 %14, label %16, label %15, !prof !10

; <label>:15:                                     ; preds = %13
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:16:                                     ; preds = %13
  %17 = getelementptr inbounds %"class.Eigen::PlainObjectBase.171", %"class.Eigen::PlainObjectBase.171"* %9, i64 0, i32 0, i32 0
  %18 = load i32*, i32** %17, align 8, !tbaa !44
  %19 = icmp eq i32* %18, null
  br i1 %19, label %24, label %20

; <label>:20:                                     ; preds = %16
  %21 = getelementptr inbounds i32, i32* %18, i64 -2
  %22 = bitcast i32* %21 to i8**
  %23 = load i8*, i8** %22, align 8, !tbaa !29
  tail call void @free(i8* %23) #11
  br label %24

; <label>:24:                                     ; preds = %20, %16
  %25 = icmp eq i64 %7, 0
  br i1 %25, label %38, label %26

; <label>:26:                                     ; preds = %24
  %27 = shl i64 %7, 2
  %28 = add i64 %27, 32
  %29 = tail call i8* @malloc(i64 %28) #14
  %30 = icmp eq i8* %29, null
  br i1 %30, label %38, label %31

; <label>:31:                                     ; preds = %26
  %32 = ptrtoint i8* %29 to i64
  %33 = add i64 %32, 32
  %34 = and i64 %33, -32
  %35 = inttoptr i64 %34 to i8**
  %36 = getelementptr inbounds i8*, i8** %35, i64 -1
  store i8* %29, i8** %36, align 8, !tbaa !29
  %37 = inttoptr i64 %34 to i32*
  br label %38

; <label>:38:                                     ; preds = %24, %26, %31
  %39 = phi i32* [ %37, %31 ], [ null, %26 ], [ null, %24 ]
  store i32* %39, i32** %17, align 8, !tbaa !44
  store i64 %7, i64* %10, align 8, !tbaa !46
  %40 = load %"class.Eigen::PlainObjectBase.171"*, %"class.Eigen::PlainObjectBase.171"** %8, align 8, !tbaa !11
  %41 = getelementptr inbounds %"class.Eigen::PlainObjectBase.171", %"class.Eigen::PlainObjectBase.171"* %40, i64 0, i32 0, i32 1
  %42 = load i64, i64* %41, align 8, !tbaa !46
  %43 = icmp eq i64 %42, %7
  br i1 %43, label %45, label %44, !prof !10

; <label>:44:                                     ; preds = %38
  tail call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__._ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEENS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES3_EEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.15, i64 0, i64 0), i32 721, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.16, i64 0, i64 0)) #13
  unreachable

; <label>:45:                                     ; preds = %3, %38
  %46 = phi %"class.Eigen::PlainObjectBase.171"* [ %9, %3 ], [ %40, %38 ]
  %47 = bitcast %"class.Eigen::PlainObjectBase.171"* %46 to i64*
  %48 = load i64, i64* %47, align 8, !tbaa !44
  %49 = getelementptr inbounds %"class.Eigen::PlainObjectBase.171", %"class.Eigen::PlainObjectBase.171"* %46, i64 0, i32 0, i32 1
  %50 = load i64, i64* %49, align 8, !tbaa !46
  %51 = sdiv i64 %50, 4
  %52 = shl nsw i64 %51, 2
  %53 = icmp sgt i64 %50, 3
  br i1 %53, label %54, label %83

; <label>:54:                                     ; preds = %45
  %55 = inttoptr i64 %48 to i32*
  %56 = inttoptr i64 %5 to i32*
  %57 = icmp sgt i64 %52, 4
  %58 = select i1 %57, i64 %52, i64 4
  %59 = add nsw i64 %58, -1
  %60 = lshr i64 %59, 2
  %61 = add nuw nsw i64 %60, 1
  %62 = and i64 %61, 7
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %77, label %64

; <label>:64:                                     ; preds = %54
  br label %65

; <label>:65:                                     ; preds = %65, %64
  %66 = phi i64 [ %73, %65 ], [ 0, %64 ]
  %67 = phi i64 [ %74, %65 ], [ %62, %64 ]
  %68 = getelementptr inbounds i32, i32* %55, i64 %66
  %69 = getelementptr inbounds i32, i32* %56, i64 %66
  %70 = bitcast i32* %69 to <2 x i64>*
  %71 = load <2 x i64>, <2 x i64>* %70, align 16, !tbaa !11
  %72 = bitcast i32* %68 to <2 x i64>*
  store <2 x i64> %71, <2 x i64>* %72, align 16, !tbaa !11
  %73 = add nuw nsw i64 %66, 4
  %74 = add i64 %67, -1
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %65, !llvm.loop !1003

; <label>:76:                                     ; preds = %65
  br label %77

; <label>:77:                                     ; preds = %54, %76
  %78 = phi i64 [ 0, %54 ], [ %73, %76 ]
  %79 = icmp ult i64 %59, 28
  br i1 %79, label %82, label %80

; <label>:80:                                     ; preds = %77
  br label %292

; <label>:81:                                     ; preds = %292
  br label %82

; <label>:82:                                     ; preds = %77, %81
  br label %83

; <label>:83:                                     ; preds = %82, %45
  %84 = icmp sgt i64 %50, %52
  br i1 %84, label %85, label %345

; <label>:85:                                     ; preds = %83
  %86 = inttoptr i64 %48 to i32*
  %87 = inttoptr i64 %5 to i32*
  %88 = sub i64 %50, %52
  %89 = icmp ult i64 %88, 32
  br i1 %89, label %235, label %90

; <label>:90:                                     ; preds = %85
  %91 = and i64 %88, -32
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %235, label %93

; <label>:93:                                     ; preds = %90
  %94 = getelementptr i32, i32* %86, i64 %52
  %95 = getelementptr i32, i32* %86, i64 %50
  %96 = getelementptr i32, i32* %87, i64 %52
  %97 = getelementptr i32, i32* %87, i64 %50
  %98 = icmp ult i32* %94, %97
  %99 = icmp ult i32* %96, %95
  %100 = and i1 %98, %99
  %101 = add i64 %52, %91
  br i1 %100, label %235, label %102

; <label>:102:                                    ; preds = %93
  %103 = add i64 %91, -32
  %104 = lshr exact i64 %103, 5
  %105 = add nuw nsw i64 %104, 1
  %106 = and i64 %105, 3
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %137, label %108

; <label>:108:                                    ; preds = %102
  br label %109

; <label>:109:                                    ; preds = %109, %108
  %110 = phi i64 [ %133, %109 ], [ 0, %108 ]
  %111 = phi i64 [ %134, %109 ], [ %106, %108 ]
  %112 = add i64 %52, %110
  %113 = getelementptr inbounds i32, i32* %86, i64 %112
  %114 = getelementptr inbounds i32, i32* %87, i64 %112
  %115 = bitcast i32* %114 to <8 x i32>*
  %116 = load <8 x i32>, <8 x i32>* %115, align 4, !tbaa !33, !alias.scope !1004
  %117 = getelementptr i32, i32* %114, i64 8
  %118 = bitcast i32* %117 to <8 x i32>*
  %119 = load <8 x i32>, <8 x i32>* %118, align 4, !tbaa !33, !alias.scope !1004
  %120 = getelementptr i32, i32* %114, i64 16
  %121 = bitcast i32* %120 to <8 x i32>*
  %122 = load <8 x i32>, <8 x i32>* %121, align 4, !tbaa !33, !alias.scope !1004
  %123 = getelementptr i32, i32* %114, i64 24
  %124 = bitcast i32* %123 to <8 x i32>*
  %125 = load <8 x i32>, <8 x i32>* %124, align 4, !tbaa !33, !alias.scope !1004
  %126 = bitcast i32* %113 to <8 x i32>*
  store <8 x i32> %116, <8 x i32>* %126, align 4, !tbaa !33, !alias.scope !1007, !noalias !1004
  %127 = getelementptr i32, i32* %113, i64 8
  %128 = bitcast i32* %127 to <8 x i32>*
  store <8 x i32> %119, <8 x i32>* %128, align 4, !tbaa !33, !alias.scope !1007, !noalias !1004
  %129 = getelementptr i32, i32* %113, i64 16
  %130 = bitcast i32* %129 to <8 x i32>*
  store <8 x i32> %122, <8 x i32>* %130, align 4, !tbaa !33, !alias.scope !1007, !noalias !1004
  %131 = getelementptr i32, i32* %113, i64 24
  %132 = bitcast i32* %131 to <8 x i32>*
  store <8 x i32> %125, <8 x i32>* %132, align 4, !tbaa !33, !alias.scope !1007, !noalias !1004
  %133 = add i64 %110, 32
  %134 = add i64 %111, -1
  %135 = icmp eq i64 %134, 0
  br i1 %135, label %136, label %109, !llvm.loop !1009

; <label>:136:                                    ; preds = %109
  br label %137

; <label>:137:                                    ; preds = %102, %136
  %138 = phi i64 [ 0, %102 ], [ %133, %136 ]
  %139 = icmp ult i64 %103, 96
  br i1 %139, label %233, label %140

; <label>:140:                                    ; preds = %137
  br label %141

; <label>:141:                                    ; preds = %141, %140
  %142 = phi i64 [ %138, %140 ], [ %230, %141 ]
  %143 = add i64 %52, %142
  %144 = getelementptr inbounds i32, i32* %86, i64 %143
  %145 = getelementptr inbounds i32, i32* %87, i64 %143
  %146 = bitcast i32* %145 to <8 x i32>*
  %147 = load <8 x i32>, <8 x i32>* %146, align 4, !tbaa !33, !alias.scope !1004
  %148 = getelementptr i32, i32* %145, i64 8
  %149 = bitcast i32* %148 to <8 x i32>*
  %150 = load <8 x i32>, <8 x i32>* %149, align 4, !tbaa !33, !alias.scope !1004
  %151 = getelementptr i32, i32* %145, i64 16
  %152 = bitcast i32* %151 to <8 x i32>*
  %153 = load <8 x i32>, <8 x i32>* %152, align 4, !tbaa !33, !alias.scope !1004
  %154 = getelementptr i32, i32* %145, i64 24
  %155 = bitcast i32* %154 to <8 x i32>*
  %156 = load <8 x i32>, <8 x i32>* %155, align 4, !tbaa !33, !alias.scope !1004
  %157 = bitcast i32* %144 to <8 x i32>*
  store <8 x i32> %147, <8 x i32>* %157, align 4, !tbaa !33, !alias.scope !1007, !noalias !1004
  %158 = getelementptr i32, i32* %144, i64 8
  %159 = bitcast i32* %158 to <8 x i32>*
  store <8 x i32> %150, <8 x i32>* %159, align 4, !tbaa !33, !alias.scope !1007, !noalias !1004
  %160 = getelementptr i32, i32* %144, i64 16
  %161 = bitcast i32* %160 to <8 x i32>*
  store <8 x i32> %153, <8 x i32>* %161, align 4, !tbaa !33, !alias.scope !1007, !noalias !1004
  %162 = getelementptr i32, i32* %144, i64 24
  %163 = bitcast i32* %162 to <8 x i32>*
  store <8 x i32> %156, <8 x i32>* %163, align 4, !tbaa !33, !alias.scope !1007, !noalias !1004
  %164 = add i64 %142, 32
  %165 = add i64 %52, %164
  %166 = getelementptr inbounds i32, i32* %86, i64 %165
  %167 = getelementptr inbounds i32, i32* %87, i64 %165
  %168 = bitcast i32* %167 to <8 x i32>*
  %169 = load <8 x i32>, <8 x i32>* %168, align 4, !tbaa !33, !alias.scope !1004
  %170 = getelementptr i32, i32* %167, i64 8
  %171 = bitcast i32* %170 to <8 x i32>*
  %172 = load <8 x i32>, <8 x i32>* %171, align 4, !tbaa !33, !alias.scope !1004
  %173 = getelementptr i32, i32* %167, i64 16
  %174 = bitcast i32* %173 to <8 x i32>*
  %175 = load <8 x i32>, <8 x i32>* %174, align 4, !tbaa !33, !alias.scope !1004
  %176 = getelementptr i32, i32* %167, i64 24
  %177 = bitcast i32* %176 to <8 x i32>*
  %178 = load <8 x i32>, <8 x i32>* %177, align 4, !tbaa !33, !alias.scope !1004
  %179 = bitcast i32* %166 to <8 x i32>*
  store <8 x i32> %169, <8 x i32>* %179, align 4, !tbaa !33, !alias.scope !1007, !noalias !1004
  %180 = getelementptr i32, i32* %166, i64 8
  %181 = bitcast i32* %180 to <8 x i32>*
  store <8 x i32> %172, <8 x i32>* %181, align 4, !tbaa !33, !alias.scope !1007, !noalias !1004
  %182 = getelementptr i32, i32* %166, i64 16
  %183 = bitcast i32* %182 to <8 x i32>*
  store <8 x i32> %175, <8 x i32>* %183, align 4, !tbaa !33, !alias.scope !1007, !noalias !1004
  %184 = getelementptr i32, i32* %166, i64 24
  %185 = bitcast i32* %184 to <8 x i32>*
  store <8 x i32> %178, <8 x i32>* %185, align 4, !tbaa !33, !alias.scope !1007, !noalias !1004
  %186 = add i64 %142, 64
  %187 = add i64 %52, %186
  %188 = getelementptr inbounds i32, i32* %86, i64 %187
  %189 = getelementptr inbounds i32, i32* %87, i64 %187
  %190 = bitcast i32* %189 to <8 x i32>*
  %191 = load <8 x i32>, <8 x i32>* %190, align 4, !tbaa !33, !alias.scope !1004
  %192 = getelementptr i32, i32* %189, i64 8
  %193 = bitcast i32* %192 to <8 x i32>*
  %194 = load <8 x i32>, <8 x i32>* %193, align 4, !tbaa !33, !alias.scope !1004
  %195 = getelementptr i32, i32* %189, i64 16
  %196 = bitcast i32* %195 to <8 x i32>*
  %197 = load <8 x i32>, <8 x i32>* %196, align 4, !tbaa !33, !alias.scope !1004
  %198 = getelementptr i32, i32* %189, i64 24
  %199 = bitcast i32* %198 to <8 x i32>*
  %200 = load <8 x i32>, <8 x i32>* %199, align 4, !tbaa !33, !alias.scope !1004
  %201 = bitcast i32* %188 to <8 x i32>*
  store <8 x i32> %191, <8 x i32>* %201, align 4, !tbaa !33, !alias.scope !1007, !noalias !1004
  %202 = getelementptr i32, i32* %188, i64 8
  %203 = bitcast i32* %202 to <8 x i32>*
  store <8 x i32> %194, <8 x i32>* %203, align 4, !tbaa !33, !alias.scope !1007, !noalias !1004
  %204 = getelementptr i32, i32* %188, i64 16
  %205 = bitcast i32* %204 to <8 x i32>*
  store <8 x i32> %197, <8 x i32>* %205, align 4, !tbaa !33, !alias.scope !1007, !noalias !1004
  %206 = getelementptr i32, i32* %188, i64 24
  %207 = bitcast i32* %206 to <8 x i32>*
  store <8 x i32> %200, <8 x i32>* %207, align 4, !tbaa !33, !alias.scope !1007, !noalias !1004
  %208 = add i64 %142, 96
  %209 = add i64 %52, %208
  %210 = getelementptr inbounds i32, i32* %86, i64 %209
  %211 = getelementptr inbounds i32, i32* %87, i64 %209
  %212 = bitcast i32* %211 to <8 x i32>*
  %213 = load <8 x i32>, <8 x i32>* %212, align 4, !tbaa !33, !alias.scope !1004
  %214 = getelementptr i32, i32* %211, i64 8
  %215 = bitcast i32* %214 to <8 x i32>*
  %216 = load <8 x i32>, <8 x i32>* %215, align 4, !tbaa !33, !alias.scope !1004
  %217 = getelementptr i32, i32* %211, i64 16
  %218 = bitcast i32* %217 to <8 x i32>*
  %219 = load <8 x i32>, <8 x i32>* %218, align 4, !tbaa !33, !alias.scope !1004
  %220 = getelementptr i32, i32* %211, i64 24
  %221 = bitcast i32* %220 to <8 x i32>*
  %222 = load <8 x i32>, <8 x i32>* %221, align 4, !tbaa !33, !alias.scope !1004
  %223 = bitcast i32* %210 to <8 x i32>*
  store <8 x i32> %213, <8 x i32>* %223, align 4, !tbaa !33, !alias.scope !1007, !noalias !1004
  %224 = getelementptr i32, i32* %210, i64 8
  %225 = bitcast i32* %224 to <8 x i32>*
  store <8 x i32> %216, <8 x i32>* %225, align 4, !tbaa !33, !alias.scope !1007, !noalias !1004
  %226 = getelementptr i32, i32* %210, i64 16
  %227 = bitcast i32* %226 to <8 x i32>*
  store <8 x i32> %219, <8 x i32>* %227, align 4, !tbaa !33, !alias.scope !1007, !noalias !1004
  %228 = getelementptr i32, i32* %210, i64 24
  %229 = bitcast i32* %228 to <8 x i32>*
  store <8 x i32> %222, <8 x i32>* %229, align 4, !tbaa !33, !alias.scope !1007, !noalias !1004
  %230 = add i64 %142, 128
  %231 = icmp eq i64 %230, %91
  br i1 %231, label %232, label %141, !llvm.loop !1010

; <label>:232:                                    ; preds = %141
  br label %233

; <label>:233:                                    ; preds = %137, %232
  %234 = icmp eq i64 %88, %91
  br i1 %234, label %345, label %235

; <label>:235:                                    ; preds = %233, %93, %90, %85
  %236 = phi i64 [ %52, %93 ], [ %52, %90 ], [ %52, %85 ], [ %101, %233 ]
  %237 = sub i64 %50, %236
  %238 = add i64 %50, -1
  %239 = sub i64 %238, %236
  %240 = and i64 %237, 7
  %241 = icmp eq i64 %240, 0
  br i1 %241, label %253, label %242

; <label>:242:                                    ; preds = %235
  br label %243

; <label>:243:                                    ; preds = %243, %242
  %244 = phi i64 [ %249, %243 ], [ %236, %242 ]
  %245 = phi i64 [ %250, %243 ], [ %240, %242 ]
  %246 = getelementptr inbounds i32, i32* %86, i64 %244
  %247 = getelementptr inbounds i32, i32* %87, i64 %244
  %248 = load i32, i32* %247, align 4, !tbaa !33
  store i32 %248, i32* %246, align 4, !tbaa !33
  %249 = add nsw i64 %244, 1
  %250 = add i64 %245, -1
  %251 = icmp eq i64 %250, 0
  br i1 %251, label %252, label %243, !llvm.loop !1011

; <label>:252:                                    ; preds = %243
  br label %253

; <label>:253:                                    ; preds = %235, %252
  %254 = phi i64 [ %236, %235 ], [ %249, %252 ]
  %255 = icmp ult i64 %239, 7
  br i1 %255, label %344, label %256

; <label>:256:                                    ; preds = %253
  br label %257

; <label>:257:                                    ; preds = %257, %256
  %258 = phi i64 [ %254, %256 ], [ %290, %257 ]
  %259 = getelementptr inbounds i32, i32* %86, i64 %258
  %260 = getelementptr inbounds i32, i32* %87, i64 %258
  %261 = load i32, i32* %260, align 4, !tbaa !33
  store i32 %261, i32* %259, align 4, !tbaa !33
  %262 = add nsw i64 %258, 1
  %263 = getelementptr inbounds i32, i32* %86, i64 %262
  %264 = getelementptr inbounds i32, i32* %87, i64 %262
  %265 = load i32, i32* %264, align 4, !tbaa !33
  store i32 %265, i32* %263, align 4, !tbaa !33
  %266 = add nsw i64 %258, 2
  %267 = getelementptr inbounds i32, i32* %86, i64 %266
  %268 = getelementptr inbounds i32, i32* %87, i64 %266
  %269 = load i32, i32* %268, align 4, !tbaa !33
  store i32 %269, i32* %267, align 4, !tbaa !33
  %270 = add nsw i64 %258, 3
  %271 = getelementptr inbounds i32, i32* %86, i64 %270
  %272 = getelementptr inbounds i32, i32* %87, i64 %270
  %273 = load i32, i32* %272, align 4, !tbaa !33
  store i32 %273, i32* %271, align 4, !tbaa !33
  %274 = add nsw i64 %258, 4
  %275 = getelementptr inbounds i32, i32* %86, i64 %274
  %276 = getelementptr inbounds i32, i32* %87, i64 %274
  %277 = load i32, i32* %276, align 4, !tbaa !33
  store i32 %277, i32* %275, align 4, !tbaa !33
  %278 = add nsw i64 %258, 5
  %279 = getelementptr inbounds i32, i32* %86, i64 %278
  %280 = getelementptr inbounds i32, i32* %87, i64 %278
  %281 = load i32, i32* %280, align 4, !tbaa !33
  store i32 %281, i32* %279, align 4, !tbaa !33
  %282 = add nsw i64 %258, 6
  %283 = getelementptr inbounds i32, i32* %86, i64 %282
  %284 = getelementptr inbounds i32, i32* %87, i64 %282
  %285 = load i32, i32* %284, align 4, !tbaa !33
  store i32 %285, i32* %283, align 4, !tbaa !33
  %286 = add nsw i64 %258, 7
  %287 = getelementptr inbounds i32, i32* %86, i64 %286
  %288 = getelementptr inbounds i32, i32* %87, i64 %286
  %289 = load i32, i32* %288, align 4, !tbaa !33
  store i32 %289, i32* %287, align 4, !tbaa !33
  %290 = add nsw i64 %258, 8
  %291 = icmp eq i64 %290, %50
  br i1 %291, label %343, label %257, !llvm.loop !1012

; <label>:292:                                    ; preds = %292, %80
  %293 = phi i64 [ %78, %80 ], [ %341, %292 ]
  %294 = getelementptr inbounds i32, i32* %55, i64 %293
  %295 = getelementptr inbounds i32, i32* %56, i64 %293
  %296 = bitcast i32* %295 to <2 x i64>*
  %297 = load <2 x i64>, <2 x i64>* %296, align 16, !tbaa !11
  %298 = bitcast i32* %294 to <2 x i64>*
  store <2 x i64> %297, <2 x i64>* %298, align 16, !tbaa !11
  %299 = add nuw nsw i64 %293, 4
  %300 = getelementptr inbounds i32, i32* %55, i64 %299
  %301 = getelementptr inbounds i32, i32* %56, i64 %299
  %302 = bitcast i32* %301 to <2 x i64>*
  %303 = load <2 x i64>, <2 x i64>* %302, align 16, !tbaa !11
  %304 = bitcast i32* %300 to <2 x i64>*
  store <2 x i64> %303, <2 x i64>* %304, align 16, !tbaa !11
  %305 = add nsw i64 %293, 8
  %306 = getelementptr inbounds i32, i32* %55, i64 %305
  %307 = getelementptr inbounds i32, i32* %56, i64 %305
  %308 = bitcast i32* %307 to <2 x i64>*
  %309 = load <2 x i64>, <2 x i64>* %308, align 16, !tbaa !11
  %310 = bitcast i32* %306 to <2 x i64>*
  store <2 x i64> %309, <2 x i64>* %310, align 16, !tbaa !11
  %311 = add nsw i64 %293, 12
  %312 = getelementptr inbounds i32, i32* %55, i64 %311
  %313 = getelementptr inbounds i32, i32* %56, i64 %311
  %314 = bitcast i32* %313 to <2 x i64>*
  %315 = load <2 x i64>, <2 x i64>* %314, align 16, !tbaa !11
  %316 = bitcast i32* %312 to <2 x i64>*
  store <2 x i64> %315, <2 x i64>* %316, align 16, !tbaa !11
  %317 = add nsw i64 %293, 16
  %318 = getelementptr inbounds i32, i32* %55, i64 %317
  %319 = getelementptr inbounds i32, i32* %56, i64 %317
  %320 = bitcast i32* %319 to <2 x i64>*
  %321 = load <2 x i64>, <2 x i64>* %320, align 16, !tbaa !11
  %322 = bitcast i32* %318 to <2 x i64>*
  store <2 x i64> %321, <2 x i64>* %322, align 16, !tbaa !11
  %323 = add nsw i64 %293, 20
  %324 = getelementptr inbounds i32, i32* %55, i64 %323
  %325 = getelementptr inbounds i32, i32* %56, i64 %323
  %326 = bitcast i32* %325 to <2 x i64>*
  %327 = load <2 x i64>, <2 x i64>* %326, align 16, !tbaa !11
  %328 = bitcast i32* %324 to <2 x i64>*
  store <2 x i64> %327, <2 x i64>* %328, align 16, !tbaa !11
  %329 = add nsw i64 %293, 24
  %330 = getelementptr inbounds i32, i32* %55, i64 %329
  %331 = getelementptr inbounds i32, i32* %56, i64 %329
  %332 = bitcast i32* %331 to <2 x i64>*
  %333 = load <2 x i64>, <2 x i64>* %332, align 16, !tbaa !11
  %334 = bitcast i32* %330 to <2 x i64>*
  store <2 x i64> %333, <2 x i64>* %334, align 16, !tbaa !11
  %335 = add nsw i64 %293, 28
  %336 = getelementptr inbounds i32, i32* %55, i64 %335
  %337 = getelementptr inbounds i32, i32* %56, i64 %335
  %338 = bitcast i32* %337 to <2 x i64>*
  %339 = load <2 x i64>, <2 x i64>* %338, align 16, !tbaa !11
  %340 = bitcast i32* %336 to <2 x i64>*
  store <2 x i64> %339, <2 x i64>* %340, align 16, !tbaa !11
  %341 = add nsw i64 %293, 32
  %342 = icmp slt i64 %341, %52
  br i1 %342, label %292, label %81

; <label>:343:                                    ; preds = %257
  br label %344

; <label>:344:                                    ; preds = %253, %343
  br label %345

; <label>:345:                                    ; preds = %344, %233, %83
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal15call_assignmentINS_6MatrixIiLin1ELin1ELi0ELin1ELin1EEENS_7ProductINS4_INS2_IiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsr25evaluator_assume_aliasingISG_EE5valueEPvE4typeE(%"class.Eigen::Matrix.19"* dereferenceable(24), %"class.Eigen::Product.324"* dereferenceable(24), %"struct.Eigen::internal::assign_op.512"* dereferenceable(1), i8*) local_unnamed_addr #6 {
  %5 = alloca %"class.Eigen::Matrix.1034", align 8
  %6 = bitcast %"class.Eigen::Matrix.1034"* %5 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %6) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %6, i8 0, i64 24, i32 8, i1 false) #11
  %7 = bitcast %"class.Eigen::Product.324"* %1 to %"class.Eigen::PlainObjectBase.33"**
  %8 = load %"class.Eigen::PlainObjectBase.33"*, %"class.Eigen::PlainObjectBase.33"** %7, align 8, !tbaa !11
  %9 = getelementptr inbounds %"class.Eigen::PlainObjectBase.33", %"class.Eigen::PlainObjectBase.33"* %8, i64 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !37
  %11 = getelementptr inbounds %"class.Eigen::Product.324", %"class.Eigen::Product.324"* %1, i64 0, i32 1
  %12 = bitcast %"class.Eigen::Transpose.331"* %11 to %"class.Eigen::PlainObjectBase.124"**
  %13 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %12, align 8, !tbaa !11
  %14 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %13, i64 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8, !tbaa !43
  %16 = or i64 %15, %10
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %18, label %21

; <label>:18:                                     ; preds = %4
  %19 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %5, i64 0, i32 0, i32 0, i32 2
  %20 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %5, i64 0, i32 0, i32 0, i32 1
  br label %45

; <label>:21:                                     ; preds = %4
  %22 = icmp slt i64 %16, 0
  br i1 %22, label %23, label %24, !prof !50

; <label>:23:                                     ; preds = %21
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:24:                                     ; preds = %21
  %25 = mul nsw i64 %15, %10
  %26 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %5, i64 0, i32 0, i32 0, i32 1
  %27 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %5, i64 0, i32 0, i32 0, i32 2
  %28 = icmp eq i64 %25, 0
  br i1 %28, label %44, label %29

; <label>:29:                                     ; preds = %24
  %30 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %5, i64 0, i32 0, i32 0, i32 0
  %31 = shl i64 %25, 2
  %32 = add i64 %31, 32
  %33 = tail call i8* @malloc(i64 %32) #14
  %34 = icmp eq i8* %33, null
  br i1 %34, label %42, label %35

; <label>:35:                                     ; preds = %29
  %36 = ptrtoint i8* %33 to i64
  %37 = add i64 %36, 32
  %38 = and i64 %37, -32
  %39 = inttoptr i64 %38 to i8**
  %40 = getelementptr inbounds i8*, i8** %39, i64 -1
  store i8* %33, i8** %40, align 8, !tbaa !29
  %41 = inttoptr i64 %38 to i32*
  br label %42

; <label>:42:                                     ; preds = %35, %29
  %43 = phi i32* [ %41, %35 ], [ null, %29 ]
  store i32* %43, i32** %30, align 8, !tbaa !767
  br label %44

; <label>:44:                                     ; preds = %42, %24
  store i64 %10, i64* %26, align 8, !tbaa !769
  store i64 %15, i64* %27, align 8, !tbaa !770
  br label %45

; <label>:45:                                     ; preds = %18, %44
  %46 = phi i64* [ %20, %18 ], [ %26, %44 ]
  %47 = phi i64* [ %19, %18 ], [ %27, %44 ]
  %48 = getelementptr inbounds %"class.Eigen::Product.324", %"class.Eigen::Product.324"* %1, i64 0, i32 0
  call void @_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS3_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS_9TransposeINS3_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeESA_Li8EE6evalToINS3_IiLin1ELin1ELi1ELin1ELin1EEEEEvRT_RKS6_RKS9_(%"class.Eigen::Matrix.1034"* nonnull dereferenceable(24) %5, %"class.Eigen::Product.317"* nonnull dereferenceable(16) %48, %"class.Eigen::Transpose.331"* nonnull dereferenceable(8) %11) #11
  %49 = getelementptr inbounds %"class.Eigen::Matrix.1034", %"class.Eigen::Matrix.1034"* %5, i64 0, i32 0, i32 0, i32 0
  %50 = load i32*, i32** %49, align 8, !tbaa !767
  %51 = load i64, i64* %47, align 8, !tbaa !770
  %52 = load i64, i64* %46, align 8, !tbaa !769
  %53 = getelementptr inbounds %"class.Eigen::Matrix.19", %"class.Eigen::Matrix.19"* %0, i64 0, i32 0, i32 0, i32 1
  %54 = load i64, i64* %53, align 8, !tbaa !771
  %55 = icmp eq i64 %54, %52
  br i1 %55, label %56, label %60

; <label>:56:                                     ; preds = %45
  %57 = getelementptr inbounds %"class.Eigen::Matrix.19", %"class.Eigen::Matrix.19"* %0, i64 0, i32 0, i32 0, i32 2
  %58 = load i64, i64* %57, align 8, !tbaa !772
  %59 = icmp eq i64 %58, %51
  br i1 %59, label %96, label %60

; <label>:60:                                     ; preds = %56, %45
  %61 = or i64 %52, %51
  %62 = icmp slt i64 %61, 0
  br i1 %62, label %63, label %64, !prof !50

; <label>:63:                                     ; preds = %60
  call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:64:                                     ; preds = %60
  %65 = mul nsw i64 %52, %51
  %66 = getelementptr inbounds %"class.Eigen::Matrix.19", %"class.Eigen::Matrix.19"* %0, i64 0, i32 0, i32 0, i32 2
  %67 = load i64, i64* %66, align 8, !tbaa !772
  %68 = mul nsw i64 %67, %54
  %69 = icmp eq i64 %68, %65
  br i1 %69, label %95, label %70

; <label>:70:                                     ; preds = %64
  %71 = getelementptr inbounds %"class.Eigen::Matrix.19", %"class.Eigen::Matrix.19"* %0, i64 0, i32 0, i32 0, i32 0
  %72 = load i32*, i32** %71, align 8, !tbaa !30
  %73 = icmp eq i32* %72, null
  br i1 %73, label %78, label %74

; <label>:74:                                     ; preds = %70
  %75 = getelementptr inbounds i32, i32* %72, i64 -2
  %76 = bitcast i32* %75 to i8**
  %77 = load i8*, i8** %76, align 8, !tbaa !29
  call void @free(i8* %77) #11
  br label %78

; <label>:78:                                     ; preds = %74, %70
  %79 = icmp eq i64 %65, 0
  br i1 %79, label %94, label %80

; <label>:80:                                     ; preds = %78
  %81 = shl i64 %65, 2
  %82 = add i64 %81, 32
  %83 = call i8* @malloc(i64 %82) #14
  %84 = icmp eq i8* %83, null
  br i1 %84, label %92, label %85

; <label>:85:                                     ; preds = %80
  %86 = ptrtoint i8* %83 to i64
  %87 = add i64 %86, 32
  %88 = and i64 %87, -32
  %89 = inttoptr i64 %88 to i8**
  %90 = getelementptr inbounds i8*, i8** %89, i64 -1
  store i8* %83, i8** %90, align 8, !tbaa !29
  %91 = inttoptr i64 %88 to i32*
  br label %92

; <label>:92:                                     ; preds = %85, %80
  %93 = phi i32* [ %91, %85 ], [ null, %80 ]
  store i32* %93, i32** %71, align 8, !tbaa !30
  br label %95

; <label>:94:                                     ; preds = %78
  store i32* null, i32** %71, align 8, !tbaa !30
  br label %95

; <label>:95:                                     ; preds = %94, %92, %64
  store i64 %52, i64* %53, align 8, !tbaa !771
  store i64 %51, i64* %66, align 8, !tbaa !772
  br label %96

; <label>:96:                                     ; preds = %56, %95
  %97 = getelementptr inbounds %"class.Eigen::Matrix.19", %"class.Eigen::Matrix.19"* %0, i64 0, i32 0, i32 0, i32 0
  %98 = load i32*, i32** %97, align 8, !tbaa !30
  %99 = icmp sgt i64 %51, 0
  %100 = icmp sgt i64 %52, 0
  %101 = and i1 %100, %99
  br i1 %101, label %102, label %306

; <label>:102:                                    ; preds = %96
  %103 = add i64 %52, -16
  %104 = lshr i64 %103, 4
  %105 = add nuw nsw i64 %104, 1
  %106 = add i64 %52, -1
  %107 = icmp ult i64 %52, 16
  %108 = and i64 %52, -16
  %109 = icmp ne i64 %108, 0
  %110 = icmp eq i64 %51, 1
  %111 = and i1 %109, %110
  %112 = and i64 %105, 3
  %113 = icmp eq i64 %112, 0
  %114 = icmp ult i64 %103, 48
  %115 = icmp eq i64 %52, %108
  br label %116

; <label>:116:                                    ; preds = %102, %302
  %117 = phi i64 [ %303, %302 ], [ 0, %102 ]
  %118 = mul i64 %52, %117
  %119 = getelementptr i32, i32* %98, i64 %118
  %120 = add i64 %52, %118
  %121 = getelementptr i32, i32* %98, i64 %120
  %122 = getelementptr i32, i32* %50, i64 %117
  %123 = add i64 %52, %117
  %124 = getelementptr i32, i32* %50, i64 %123
  %125 = mul nsw i64 %117, %52
  br i1 %107, label %217, label %126

; <label>:126:                                    ; preds = %116
  br i1 %111, label %127, label %217

; <label>:127:                                    ; preds = %126
  %128 = icmp ult i32* %119, %124
  %129 = icmp ult i32* %122, %121
  %130 = and i1 %128, %129
  br i1 %130, label %217, label %131

; <label>:131:                                    ; preds = %127
  br i1 %113, label %153, label %132

; <label>:132:                                    ; preds = %131
  br label %133

; <label>:133:                                    ; preds = %133, %132
  %134 = phi i64 [ %149, %133 ], [ 0, %132 ]
  %135 = phi i64 [ %150, %133 ], [ %112, %132 ]
  %136 = add nsw i64 %134, %125
  %137 = getelementptr inbounds i32, i32* %98, i64 %136
  %138 = mul nsw i64 %134, %51
  %139 = add nsw i64 %138, %117
  %140 = getelementptr inbounds i32, i32* %50, i64 %139
  %141 = bitcast i32* %140 to <8 x i32>*
  %142 = load <8 x i32>, <8 x i32>* %141, align 4, !tbaa !33, !alias.scope !1013
  %143 = getelementptr i32, i32* %140, i64 8
  %144 = bitcast i32* %143 to <8 x i32>*
  %145 = load <8 x i32>, <8 x i32>* %144, align 4, !tbaa !33, !alias.scope !1013
  %146 = bitcast i32* %137 to <8 x i32>*
  store <8 x i32> %142, <8 x i32>* %146, align 4, !tbaa !33, !alias.scope !1016, !noalias !1013
  %147 = getelementptr i32, i32* %137, i64 8
  %148 = bitcast i32* %147 to <8 x i32>*
  store <8 x i32> %145, <8 x i32>* %148, align 4, !tbaa !33, !alias.scope !1016, !noalias !1013
  %149 = add i64 %134, 16
  %150 = add i64 %135, -1
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %152, label %133, !llvm.loop !1018

; <label>:152:                                    ; preds = %133
  br label %153

; <label>:153:                                    ; preds = %131, %152
  %154 = phi i64 [ 0, %131 ], [ %149, %152 ]
  br i1 %114, label %216, label %155

; <label>:155:                                    ; preds = %153
  br label %156

; <label>:156:                                    ; preds = %156, %155
  %157 = phi i64 [ %154, %155 ], [ %213, %156 ]
  %158 = add nsw i64 %157, %125
  %159 = getelementptr inbounds i32, i32* %98, i64 %158
  %160 = mul nsw i64 %157, %51
  %161 = add nsw i64 %160, %117
  %162 = getelementptr inbounds i32, i32* %50, i64 %161
  %163 = bitcast i32* %162 to <8 x i32>*
  %164 = load <8 x i32>, <8 x i32>* %163, align 4, !tbaa !33, !alias.scope !1013
  %165 = getelementptr i32, i32* %162, i64 8
  %166 = bitcast i32* %165 to <8 x i32>*
  %167 = load <8 x i32>, <8 x i32>* %166, align 4, !tbaa !33, !alias.scope !1013
  %168 = bitcast i32* %159 to <8 x i32>*
  store <8 x i32> %164, <8 x i32>* %168, align 4, !tbaa !33, !alias.scope !1016, !noalias !1013
  %169 = getelementptr i32, i32* %159, i64 8
  %170 = bitcast i32* %169 to <8 x i32>*
  store <8 x i32> %167, <8 x i32>* %170, align 4, !tbaa !33, !alias.scope !1016, !noalias !1013
  %171 = add i64 %157, 16
  %172 = add nsw i64 %171, %125
  %173 = getelementptr inbounds i32, i32* %98, i64 %172
  %174 = mul nsw i64 %171, %51
  %175 = add nsw i64 %174, %117
  %176 = getelementptr inbounds i32, i32* %50, i64 %175
  %177 = bitcast i32* %176 to <8 x i32>*
  %178 = load <8 x i32>, <8 x i32>* %177, align 4, !tbaa !33, !alias.scope !1013
  %179 = getelementptr i32, i32* %176, i64 8
  %180 = bitcast i32* %179 to <8 x i32>*
  %181 = load <8 x i32>, <8 x i32>* %180, align 4, !tbaa !33, !alias.scope !1013
  %182 = bitcast i32* %173 to <8 x i32>*
  store <8 x i32> %178, <8 x i32>* %182, align 4, !tbaa !33, !alias.scope !1016, !noalias !1013
  %183 = getelementptr i32, i32* %173, i64 8
  %184 = bitcast i32* %183 to <8 x i32>*
  store <8 x i32> %181, <8 x i32>* %184, align 4, !tbaa !33, !alias.scope !1016, !noalias !1013
  %185 = add i64 %157, 32
  %186 = add nsw i64 %185, %125
  %187 = getelementptr inbounds i32, i32* %98, i64 %186
  %188 = mul nsw i64 %185, %51
  %189 = add nsw i64 %188, %117
  %190 = getelementptr inbounds i32, i32* %50, i64 %189
  %191 = bitcast i32* %190 to <8 x i32>*
  %192 = load <8 x i32>, <8 x i32>* %191, align 4, !tbaa !33, !alias.scope !1013
  %193 = getelementptr i32, i32* %190, i64 8
  %194 = bitcast i32* %193 to <8 x i32>*
  %195 = load <8 x i32>, <8 x i32>* %194, align 4, !tbaa !33, !alias.scope !1013
  %196 = bitcast i32* %187 to <8 x i32>*
  store <8 x i32> %192, <8 x i32>* %196, align 4, !tbaa !33, !alias.scope !1016, !noalias !1013
  %197 = getelementptr i32, i32* %187, i64 8
  %198 = bitcast i32* %197 to <8 x i32>*
  store <8 x i32> %195, <8 x i32>* %198, align 4, !tbaa !33, !alias.scope !1016, !noalias !1013
  %199 = add i64 %157, 48
  %200 = add nsw i64 %199, %125
  %201 = getelementptr inbounds i32, i32* %98, i64 %200
  %202 = mul nsw i64 %199, %51
  %203 = add nsw i64 %202, %117
  %204 = getelementptr inbounds i32, i32* %50, i64 %203
  %205 = bitcast i32* %204 to <8 x i32>*
  %206 = load <8 x i32>, <8 x i32>* %205, align 4, !tbaa !33, !alias.scope !1013
  %207 = getelementptr i32, i32* %204, i64 8
  %208 = bitcast i32* %207 to <8 x i32>*
  %209 = load <8 x i32>, <8 x i32>* %208, align 4, !tbaa !33, !alias.scope !1013
  %210 = bitcast i32* %201 to <8 x i32>*
  store <8 x i32> %206, <8 x i32>* %210, align 4, !tbaa !33, !alias.scope !1016, !noalias !1013
  %211 = getelementptr i32, i32* %201, i64 8
  %212 = bitcast i32* %211 to <8 x i32>*
  store <8 x i32> %209, <8 x i32>* %212, align 4, !tbaa !33, !alias.scope !1016, !noalias !1013
  %213 = add i64 %157, 64
  %214 = icmp eq i64 %213, %108
  br i1 %214, label %215, label %156, !llvm.loop !1019

; <label>:215:                                    ; preds = %156
  br label %216

; <label>:216:                                    ; preds = %153, %215
  br i1 %115, label %302, label %217

; <label>:217:                                    ; preds = %126, %216, %127, %116
  %218 = phi i64 [ 0, %127 ], [ 0, %126 ], [ 0, %116 ], [ %108, %216 ]
  %219 = sub i64 %52, %218
  %220 = sub i64 %106, %218
  %221 = and i64 %219, 7
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %237, label %223

; <label>:223:                                    ; preds = %217
  br label %224

; <label>:224:                                    ; preds = %224, %223
  %225 = phi i64 [ %233, %224 ], [ %218, %223 ]
  %226 = phi i64 [ %234, %224 ], [ %221, %223 ]
  %227 = add nsw i64 %225, %125
  %228 = getelementptr inbounds i32, i32* %98, i64 %227
  %229 = mul nsw i64 %225, %51
  %230 = add nsw i64 %229, %117
  %231 = getelementptr inbounds i32, i32* %50, i64 %230
  %232 = load i32, i32* %231, align 4, !tbaa !33
  store i32 %232, i32* %228, align 4, !tbaa !33
  %233 = add nuw nsw i64 %225, 1
  %234 = add i64 %226, -1
  %235 = icmp eq i64 %234, 0
  br i1 %235, label %236, label %224, !llvm.loop !1020

; <label>:236:                                    ; preds = %224
  br label %237

; <label>:237:                                    ; preds = %217, %236
  %238 = phi i64 [ %218, %217 ], [ %233, %236 ]
  %239 = icmp ult i64 %220, 7
  br i1 %239, label %301, label %240

; <label>:240:                                    ; preds = %237
  br label %241

; <label>:241:                                    ; preds = %241, %240
  %242 = phi i64 [ %238, %240 ], [ %298, %241 ]
  %243 = add nsw i64 %242, %125
  %244 = getelementptr inbounds i32, i32* %98, i64 %243
  %245 = mul nsw i64 %242, %51
  %246 = add nsw i64 %245, %117
  %247 = getelementptr inbounds i32, i32* %50, i64 %246
  %248 = load i32, i32* %247, align 4, !tbaa !33
  store i32 %248, i32* %244, align 4, !tbaa !33
  %249 = add nuw nsw i64 %242, 1
  %250 = add nsw i64 %249, %125
  %251 = getelementptr inbounds i32, i32* %98, i64 %250
  %252 = mul nsw i64 %249, %51
  %253 = add nsw i64 %252, %117
  %254 = getelementptr inbounds i32, i32* %50, i64 %253
  %255 = load i32, i32* %254, align 4, !tbaa !33
  store i32 %255, i32* %251, align 4, !tbaa !33
  %256 = add nsw i64 %242, 2
  %257 = add nsw i64 %256, %125
  %258 = getelementptr inbounds i32, i32* %98, i64 %257
  %259 = mul nsw i64 %256, %51
  %260 = add nsw i64 %259, %117
  %261 = getelementptr inbounds i32, i32* %50, i64 %260
  %262 = load i32, i32* %261, align 4, !tbaa !33
  store i32 %262, i32* %258, align 4, !tbaa !33
  %263 = add nsw i64 %242, 3
  %264 = add nsw i64 %263, %125
  %265 = getelementptr inbounds i32, i32* %98, i64 %264
  %266 = mul nsw i64 %263, %51
  %267 = add nsw i64 %266, %117
  %268 = getelementptr inbounds i32, i32* %50, i64 %267
  %269 = load i32, i32* %268, align 4, !tbaa !33
  store i32 %269, i32* %265, align 4, !tbaa !33
  %270 = add nsw i64 %242, 4
  %271 = add nsw i64 %270, %125
  %272 = getelementptr inbounds i32, i32* %98, i64 %271
  %273 = mul nsw i64 %270, %51
  %274 = add nsw i64 %273, %117
  %275 = getelementptr inbounds i32, i32* %50, i64 %274
  %276 = load i32, i32* %275, align 4, !tbaa !33
  store i32 %276, i32* %272, align 4, !tbaa !33
  %277 = add nsw i64 %242, 5
  %278 = add nsw i64 %277, %125
  %279 = getelementptr inbounds i32, i32* %98, i64 %278
  %280 = mul nsw i64 %277, %51
  %281 = add nsw i64 %280, %117
  %282 = getelementptr inbounds i32, i32* %50, i64 %281
  %283 = load i32, i32* %282, align 4, !tbaa !33
  store i32 %283, i32* %279, align 4, !tbaa !33
  %284 = add nsw i64 %242, 6
  %285 = add nsw i64 %284, %125
  %286 = getelementptr inbounds i32, i32* %98, i64 %285
  %287 = mul nsw i64 %284, %51
  %288 = add nsw i64 %287, %117
  %289 = getelementptr inbounds i32, i32* %50, i64 %288
  %290 = load i32, i32* %289, align 4, !tbaa !33
  store i32 %290, i32* %286, align 4, !tbaa !33
  %291 = add nsw i64 %242, 7
  %292 = add nsw i64 %291, %125
  %293 = getelementptr inbounds i32, i32* %98, i64 %292
  %294 = mul nsw i64 %291, %51
  %295 = add nsw i64 %294, %117
  %296 = getelementptr inbounds i32, i32* %50, i64 %295
  %297 = load i32, i32* %296, align 4, !tbaa !33
  store i32 %297, i32* %293, align 4, !tbaa !33
  %298 = add nsw i64 %242, 8
  %299 = icmp eq i64 %298, %52
  br i1 %299, label %300, label %241, !llvm.loop !1021

; <label>:300:                                    ; preds = %241
  br label %301

; <label>:301:                                    ; preds = %237, %300
  br label %302

; <label>:302:                                    ; preds = %301, %216
  %303 = add nuw nsw i64 %117, 1
  %304 = icmp eq i64 %303, %51
  br i1 %304, label %305, label %116

; <label>:305:                                    ; preds = %302
  br label %306

; <label>:306:                                    ; preds = %305, %96
  %307 = load i32*, i32** %49, align 8, !tbaa !767
  %308 = icmp eq i32* %307, null
  br i1 %308, label %313, label %309

; <label>:309:                                    ; preds = %306
  %310 = getelementptr inbounds i32, i32* %307, i64 -2
  %311 = bitcast i32* %310 to i8**
  %312 = load i8*, i8** %311, align 8, !tbaa !29
  call void @free(i8* %312) #11
  br label %313

; <label>:313:                                    ; preds = %306, %309
  call void @llvm.lifetime.end(i64 24, i8* nonnull %6) #11
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEENS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_7ProductINS2_IiLin1ELi6ELi0ELin1ELi6EEENS2_IiLi6ELi1ELi0ELi6ELi1EEELi0EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKS3_EEEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.170"* dereferenceable(16), %"class.Eigen::CwiseBinaryOp.200"* dereferenceable(40), %"struct.Eigen::internal::assign_op.512"* dereferenceable(1)) local_unnamed_addr #6 {
  %4 = alloca %"class.Eigen::Product.619", align 8
  %5 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %6 = alloca %"struct.Eigen::internal::evaluator.606", align 8
  %7 = getelementptr inbounds %"struct.Eigen::internal::evaluator.606", %"struct.Eigen::internal::evaluator.606"* %6, i64 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start(i64 48, i8* nonnull %7) #11
  %8 = getelementptr inbounds %"struct.Eigen::internal::evaluator.606", %"struct.Eigen::internal::evaluator.606"* %6, i64 0, i32 0, i32 1
  %9 = getelementptr inbounds %"struct.Eigen::internal::evaluator.609", %"struct.Eigen::internal::evaluator.609"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32* null, i32** %9, align 8, !tbaa !61
  %10 = getelementptr inbounds %"struct.Eigen::internal::evaluator.606", %"struct.Eigen::internal::evaluator.606"* %6, i64 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %11 = bitcast %"class.Eigen::CwiseBinaryOp.200"* %1 to %"class.Eigen::PlainObjectBase.124"**
  %12 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %11, align 8, !tbaa !11
  %13 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %12, i64 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8, !tbaa !43
  %15 = bitcast %"class.Eigen::Matrix.170"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* %15, i8 0, i64 16, i32 8, i1 false) #11
  %16 = icmp sgt i64 %14, -1
  %17 = ptrtoint %"class.Eigen::PlainObjectBase.124"* %12 to i64
  br i1 %16, label %19, label %18, !prof !10

; <label>:18:                                     ; preds = %3
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:19:                                     ; preds = %3
  %20 = getelementptr inbounds %"struct.Eigen::internal::evaluator.606", %"struct.Eigen::internal::evaluator.606"* %6, i64 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %21 = icmp eq i64 %14, 0
  br i1 %21, label %41, label %22

; <label>:22:                                     ; preds = %19
  %23 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %10, i64 0, i32 0, i32 0, i32 0
  %24 = shl i64 %14, 2
  %25 = add i64 %24, 32
  %26 = tail call i8* @malloc(i64 %25) #14
  %27 = icmp eq i8* %26, null
  br i1 %27, label %37, label %28

; <label>:28:                                     ; preds = %22
  %29 = ptrtoint i8* %26 to i64
  %30 = add i64 %29, 32
  %31 = and i64 %30, -32
  %32 = inttoptr i64 %31 to i8**
  %33 = getelementptr inbounds i8*, i8** %32, i64 -1
  store i8* %26, i8** %33, align 8, !tbaa !29
  %34 = inttoptr i64 %31 to i32*
  %35 = bitcast %"class.Eigen::CwiseBinaryOp.200"* %1 to i64*
  %36 = load i64, i64* %35, align 8, !tbaa !11
  br label %37

; <label>:37:                                     ; preds = %22, %28
  %38 = phi i64 [ %36, %28 ], [ %17, %22 ]
  %39 = phi i32* [ %34, %28 ], [ null, %22 ]
  store i32* %39, i32** %23, align 8, !tbaa !44
  %40 = ptrtoint i32* %39 to i64
  br label %41

; <label>:41:                                     ; preds = %19, %37
  %42 = phi i64 [ %38, %37 ], [ %17, %19 ]
  %43 = phi i64 [ %40, %37 ], [ 0, %19 ]
  store i64 %14, i64* %20, align 8, !tbaa !46
  %44 = bitcast %"struct.Eigen::internal::evaluator.609"* %8 to i64*
  store i64 %43, i64* %44, align 8, !tbaa !61
  %45 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %1, i64 0, i32 0, i32 1
  %46 = bitcast %"class.Eigen::Matrix.185"** %45 to i64*
  %47 = load i64, i64* %46, align 8, !tbaa !11
  %48 = bitcast %"class.Eigen::Product.619"* %4 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %48) #11
  %49 = bitcast %"class.Eigen::Product.619"* %4 to i64*
  store i64 %42, i64* %49, align 8
  %50 = getelementptr inbounds %"class.Eigen::Product.619", %"class.Eigen::Product.619"* %4, i64 0, i32 1
  %51 = bitcast %"class.Eigen::Matrix.185"** %50 to i64*
  store i64 %47, i64* %51, align 8
  %52 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %5, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %52) #11
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEENS_7ProductINS2_IiLin1ELi6ELi0ELin1ELi6EEENS2_IiLi6ELi1ELi0ELi6ELi1EEELi1EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.170"* nonnull dereferenceable(16) %10, %"class.Eigen::Product.619"* nonnull dereferenceable(16) %4, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %5) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %52) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %48) #11
  %53 = getelementptr inbounds %"struct.Eigen::internal::evaluator.606", %"struct.Eigen::internal::evaluator.606"* %6, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %54 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %1, i64 0, i32 1, i32 2, i32 0
  %55 = load i32, i32* %54, align 4, !tbaa !51
  store i32 %55, i32* %53, align 8, !tbaa !51
  %56 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.200", %"class.Eigen::CwiseBinaryOp.200"* %1, i64 0, i32 1, i32 0, i32 0
  %57 = load i64, i64* %56, align 8, !tbaa !59
  %58 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %0, i64 0, i32 0, i32 0, i32 1
  %59 = load i64, i64* %58, align 8, !tbaa !46
  %60 = icmp eq i64 %59, %57
  br i1 %60, label %61, label %64

; <label>:61:                                     ; preds = %41
  %62 = bitcast %"class.Eigen::Matrix.170"* %0 to i64*
  %63 = load i64, i64* %62, align 8, !tbaa !44
  br label %92

; <label>:64:                                     ; preds = %41
  %65 = icmp sgt i64 %57, -1
  br i1 %65, label %67, label %66, !prof !10

; <label>:66:                                     ; preds = %64
  call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:67:                                     ; preds = %64
  %68 = getelementptr inbounds %"class.Eigen::Matrix.170", %"class.Eigen::Matrix.170"* %0, i64 0, i32 0, i32 0, i32 0
  %69 = load i32*, i32** %68, align 8, !tbaa !44
  %70 = icmp eq i32* %69, null
  br i1 %70, label %75, label %71

; <label>:71:                                     ; preds = %67
  %72 = getelementptr inbounds i32, i32* %69, i64 -2
  %73 = bitcast i32* %72 to i8**
  %74 = load i8*, i8** %73, align 8, !tbaa !29
  call void @free(i8* %74) #11
  br label %75

; <label>:75:                                     ; preds = %71, %67
  %76 = icmp eq i64 %57, 0
  br i1 %76, label %89, label %77

; <label>:77:                                     ; preds = %75
  %78 = shl i64 %57, 2
  %79 = add i64 %78, 32
  %80 = call i8* @malloc(i64 %79) #14
  %81 = icmp eq i8* %80, null
  br i1 %81, label %89, label %82

; <label>:82:                                     ; preds = %77
  %83 = ptrtoint i8* %80 to i64
  %84 = add i64 %83, 32
  %85 = and i64 %84, -32
  %86 = inttoptr i64 %85 to i8**
  %87 = getelementptr inbounds i8*, i8** %86, i64 -1
  store i8* %80, i8** %87, align 8, !tbaa !29
  %88 = inttoptr i64 %85 to i32*
  br label %89

; <label>:89:                                     ; preds = %75, %77, %82
  %90 = phi i32* [ %88, %82 ], [ null, %77 ], [ null, %75 ]
  store i32* %90, i32** %68, align 8, !tbaa !44
  store i64 %57, i64* %58, align 8, !tbaa !46
  %91 = ptrtoint i32* %90 to i64
  br label %92

; <label>:92:                                     ; preds = %61, %89
  %93 = phi i64 [ %63, %61 ], [ %91, %89 ]
  %94 = sdiv i64 %57, 4
  %95 = shl nsw i64 %94, 2
  %96 = icmp sgt i64 %57, 3
  br i1 %96, label %97, label %131

; <label>:97:                                     ; preds = %92
  %98 = inttoptr i64 %93 to i32*
  %99 = getelementptr inbounds %"struct.Eigen::internal::evaluator.606", %"struct.Eigen::internal::evaluator.606"* %6, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %100 = icmp sgt i64 %95, 4
  %101 = select i1 %100, i64 %95, i64 4
  %102 = add nsw i64 %101, -1
  %103 = lshr i64 %102, 2
  %104 = add nuw nsw i64 %103, 1
  %105 = and i64 %104, 3
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %125, label %107

; <label>:107:                                    ; preds = %97
  br label %108

; <label>:108:                                    ; preds = %108, %107
  %109 = phi i64 [ %121, %108 ], [ 0, %107 ]
  %110 = phi i64 [ %122, %108 ], [ %105, %107 ]
  %111 = getelementptr inbounds i32, i32* %98, i64 %109
  %112 = load i32*, i32** %99, align 8, !tbaa !61
  %113 = getelementptr inbounds i32, i32* %112, i64 %109
  %114 = bitcast i32* %113 to <4 x i32>*
  %115 = load <4 x i32>, <4 x i32>* %114, align 16, !tbaa !11
  %116 = load i32, i32* %53, align 8, !tbaa !33
  %117 = insertelement <4 x i32> undef, i32 %116, i32 0
  %118 = shufflevector <4 x i32> %117, <4 x i32> undef, <4 x i32> zeroinitializer
  %119 = mul <4 x i32> %118, %115
  %120 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %119, <4 x i32>* %120, align 16, !tbaa !11
  %121 = add nuw nsw i64 %109, 4
  %122 = add i64 %110, -1
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %108, !llvm.loop !1022

; <label>:124:                                    ; preds = %108
  br label %125

; <label>:125:                                    ; preds = %97, %124
  %126 = phi i64 [ 0, %97 ], [ %121, %124 ]
  %127 = icmp ult i64 %102, 12
  br i1 %127, label %130, label %128

; <label>:128:                                    ; preds = %125
  br label %350

; <label>:129:                                    ; preds = %350
  br label %130

; <label>:130:                                    ; preds = %125, %129
  br label %131

; <label>:131:                                    ; preds = %130, %92
  %132 = icmp sgt i64 %57, %95
  br i1 %132, label %133, label %399

; <label>:133:                                    ; preds = %131
  %134 = inttoptr i64 %93 to i32*
  %135 = getelementptr inbounds %"struct.Eigen::internal::evaluator.606", %"struct.Eigen::internal::evaluator.606"* %6, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %136 = load i32*, i32** %135, align 8, !tbaa !61
  %137 = sub i64 %57, %95
  %138 = icmp ult i64 %137, 32
  br i1 %138, label %275, label %139

; <label>:139:                                    ; preds = %133
  %140 = and i64 %137, -32
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %275, label %142

; <label>:142:                                    ; preds = %139
  %143 = getelementptr i32, i32* %134, i64 %95
  %144 = getelementptr i32, i32* %134, i64 %57
  %145 = getelementptr i32, i32* %136, i64 %95
  %146 = getelementptr i32, i32* %136, i64 %57
  %147 = icmp ult i32* %143, %53
  %148 = icmp ult i32* %53, %144
  %149 = and i1 %147, %148
  %150 = icmp ult i32* %143, %146
  %151 = icmp ult i32* %145, %144
  %152 = and i1 %150, %151
  %153 = or i1 %149, %152
  %154 = add i64 %95, %140
  br i1 %153, label %275, label %155

; <label>:155:                                    ; preds = %142
  %156 = add i64 %140, -32
  %157 = lshr exact i64 %156, 5
  %158 = and i64 %157, 1
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %160, label %195

; <label>:160:                                    ; preds = %155
  br label %161

; <label>:161:                                    ; preds = %160
  %162 = getelementptr inbounds i32, i32* %134, i64 %95
  %163 = getelementptr inbounds i32, i32* %136, i64 %95
  %164 = load i32, i32* %53, align 8, !tbaa !51, !alias.scope !1023
  %165 = insertelement <8 x i32> undef, i32 %164, i32 0
  %166 = shufflevector <8 x i32> %165, <8 x i32> undef, <8 x i32> zeroinitializer
  %167 = insertelement <8 x i32> undef, i32 %164, i32 0
  %168 = shufflevector <8 x i32> %167, <8 x i32> undef, <8 x i32> zeroinitializer
  %169 = insertelement <8 x i32> undef, i32 %164, i32 0
  %170 = shufflevector <8 x i32> %169, <8 x i32> undef, <8 x i32> zeroinitializer
  %171 = insertelement <8 x i32> undef, i32 %164, i32 0
  %172 = shufflevector <8 x i32> %171, <8 x i32> undef, <8 x i32> zeroinitializer
  %173 = bitcast i32* %163 to <8 x i32>*
  %174 = load <8 x i32>, <8 x i32>* %173, align 4, !tbaa !33, !alias.scope !1026
  %175 = getelementptr i32, i32* %163, i64 8
  %176 = bitcast i32* %175 to <8 x i32>*
  %177 = load <8 x i32>, <8 x i32>* %176, align 4, !tbaa !33, !alias.scope !1026
  %178 = getelementptr i32, i32* %163, i64 16
  %179 = bitcast i32* %178 to <8 x i32>*
  %180 = load <8 x i32>, <8 x i32>* %179, align 4, !tbaa !33, !alias.scope !1026
  %181 = getelementptr i32, i32* %163, i64 24
  %182 = bitcast i32* %181 to <8 x i32>*
  %183 = load <8 x i32>, <8 x i32>* %182, align 4, !tbaa !33, !alias.scope !1026
  %184 = mul nsw <8 x i32> %174, %166
  %185 = mul nsw <8 x i32> %177, %168
  %186 = mul nsw <8 x i32> %180, %170
  %187 = mul nsw <8 x i32> %183, %172
  %188 = bitcast i32* %162 to <8 x i32>*
  store <8 x i32> %184, <8 x i32>* %188, align 4, !tbaa !33, !alias.scope !1028, !noalias !1030
  %189 = getelementptr i32, i32* %162, i64 8
  %190 = bitcast i32* %189 to <8 x i32>*
  store <8 x i32> %185, <8 x i32>* %190, align 4, !tbaa !33, !alias.scope !1028, !noalias !1030
  %191 = getelementptr i32, i32* %162, i64 16
  %192 = bitcast i32* %191 to <8 x i32>*
  store <8 x i32> %186, <8 x i32>* %192, align 4, !tbaa !33, !alias.scope !1028, !noalias !1030
  %193 = getelementptr i32, i32* %162, i64 24
  %194 = bitcast i32* %193 to <8 x i32>*
  store <8 x i32> %187, <8 x i32>* %194, align 4, !tbaa !33, !alias.scope !1028, !noalias !1030
  br label %195

; <label>:195:                                    ; preds = %161, %155
  %196 = phi i64 [ 0, %155 ], [ 32, %161 ]
  %197 = icmp eq i64 %157, 0
  br i1 %197, label %273, label %198

; <label>:198:                                    ; preds = %195
  %199 = load i32, i32* %53, align 8, !tbaa !51, !alias.scope !1023
  %200 = insertelement <8 x i32> undef, i32 %199, i32 0
  %201 = shufflevector <8 x i32> %200, <8 x i32> undef, <8 x i32> zeroinitializer
  %202 = insertelement <8 x i32> undef, i32 %199, i32 0
  %203 = shufflevector <8 x i32> %202, <8 x i32> undef, <8 x i32> zeroinitializer
  %204 = insertelement <8 x i32> undef, i32 %199, i32 0
  %205 = shufflevector <8 x i32> %204, <8 x i32> undef, <8 x i32> zeroinitializer
  %206 = insertelement <8 x i32> undef, i32 %199, i32 0
  %207 = shufflevector <8 x i32> %206, <8 x i32> undef, <8 x i32> zeroinitializer
  %208 = load i32, i32* %53, align 8, !tbaa !51, !alias.scope !1023
  %209 = insertelement <8 x i32> undef, i32 %208, i32 0
  %210 = shufflevector <8 x i32> %209, <8 x i32> undef, <8 x i32> zeroinitializer
  %211 = insertelement <8 x i32> undef, i32 %208, i32 0
  %212 = shufflevector <8 x i32> %211, <8 x i32> undef, <8 x i32> zeroinitializer
  %213 = insertelement <8 x i32> undef, i32 %208, i32 0
  %214 = shufflevector <8 x i32> %213, <8 x i32> undef, <8 x i32> zeroinitializer
  %215 = insertelement <8 x i32> undef, i32 %208, i32 0
  %216 = shufflevector <8 x i32> %215, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %217

; <label>:217:                                    ; preds = %217, %198
  %218 = phi i64 [ %196, %198 ], [ %270, %217 ]
  %219 = add i64 %95, %218
  %220 = getelementptr inbounds i32, i32* %134, i64 %219
  %221 = getelementptr inbounds i32, i32* %136, i64 %219
  %222 = bitcast i32* %221 to <8 x i32>*
  %223 = load <8 x i32>, <8 x i32>* %222, align 4, !tbaa !33, !alias.scope !1026
  %224 = getelementptr i32, i32* %221, i64 8
  %225 = bitcast i32* %224 to <8 x i32>*
  %226 = load <8 x i32>, <8 x i32>* %225, align 4, !tbaa !33, !alias.scope !1026
  %227 = getelementptr i32, i32* %221, i64 16
  %228 = bitcast i32* %227 to <8 x i32>*
  %229 = load <8 x i32>, <8 x i32>* %228, align 4, !tbaa !33, !alias.scope !1026
  %230 = getelementptr i32, i32* %221, i64 24
  %231 = bitcast i32* %230 to <8 x i32>*
  %232 = load <8 x i32>, <8 x i32>* %231, align 4, !tbaa !33, !alias.scope !1026
  %233 = mul nsw <8 x i32> %223, %201
  %234 = mul nsw <8 x i32> %226, %203
  %235 = mul nsw <8 x i32> %229, %205
  %236 = mul nsw <8 x i32> %232, %207
  %237 = bitcast i32* %220 to <8 x i32>*
  store <8 x i32> %233, <8 x i32>* %237, align 4, !tbaa !33, !alias.scope !1028, !noalias !1030
  %238 = getelementptr i32, i32* %220, i64 8
  %239 = bitcast i32* %238 to <8 x i32>*
  store <8 x i32> %234, <8 x i32>* %239, align 4, !tbaa !33, !alias.scope !1028, !noalias !1030
  %240 = getelementptr i32, i32* %220, i64 16
  %241 = bitcast i32* %240 to <8 x i32>*
  store <8 x i32> %235, <8 x i32>* %241, align 4, !tbaa !33, !alias.scope !1028, !noalias !1030
  %242 = getelementptr i32, i32* %220, i64 24
  %243 = bitcast i32* %242 to <8 x i32>*
  store <8 x i32> %236, <8 x i32>* %243, align 4, !tbaa !33, !alias.scope !1028, !noalias !1030
  %244 = add i64 %218, 32
  %245 = add i64 %95, %244
  %246 = getelementptr inbounds i32, i32* %134, i64 %245
  %247 = getelementptr inbounds i32, i32* %136, i64 %245
  %248 = bitcast i32* %247 to <8 x i32>*
  %249 = load <8 x i32>, <8 x i32>* %248, align 4, !tbaa !33, !alias.scope !1026
  %250 = getelementptr i32, i32* %247, i64 8
  %251 = bitcast i32* %250 to <8 x i32>*
  %252 = load <8 x i32>, <8 x i32>* %251, align 4, !tbaa !33, !alias.scope !1026
  %253 = getelementptr i32, i32* %247, i64 16
  %254 = bitcast i32* %253 to <8 x i32>*
  %255 = load <8 x i32>, <8 x i32>* %254, align 4, !tbaa !33, !alias.scope !1026
  %256 = getelementptr i32, i32* %247, i64 24
  %257 = bitcast i32* %256 to <8 x i32>*
  %258 = load <8 x i32>, <8 x i32>* %257, align 4, !tbaa !33, !alias.scope !1026
  %259 = mul nsw <8 x i32> %249, %210
  %260 = mul nsw <8 x i32> %252, %212
  %261 = mul nsw <8 x i32> %255, %214
  %262 = mul nsw <8 x i32> %258, %216
  %263 = bitcast i32* %246 to <8 x i32>*
  store <8 x i32> %259, <8 x i32>* %263, align 4, !tbaa !33, !alias.scope !1028, !noalias !1030
  %264 = getelementptr i32, i32* %246, i64 8
  %265 = bitcast i32* %264 to <8 x i32>*
  store <8 x i32> %260, <8 x i32>* %265, align 4, !tbaa !33, !alias.scope !1028, !noalias !1030
  %266 = getelementptr i32, i32* %246, i64 16
  %267 = bitcast i32* %266 to <8 x i32>*
  store <8 x i32> %261, <8 x i32>* %267, align 4, !tbaa !33, !alias.scope !1028, !noalias !1030
  %268 = getelementptr i32, i32* %246, i64 24
  %269 = bitcast i32* %268 to <8 x i32>*
  store <8 x i32> %262, <8 x i32>* %269, align 4, !tbaa !33, !alias.scope !1028, !noalias !1030
  %270 = add i64 %218, 64
  %271 = icmp eq i64 %270, %140
  br i1 %271, label %272, label %217, !llvm.loop !1031

; <label>:272:                                    ; preds = %217
  br label %273

; <label>:273:                                    ; preds = %195, %272
  %274 = icmp eq i64 %137, %140
  br i1 %274, label %399, label %275

; <label>:275:                                    ; preds = %273, %142, %139, %133
  %276 = phi i64 [ %95, %142 ], [ %95, %139 ], [ %95, %133 ], [ %154, %273 ]
  %277 = sub i64 %57, %276
  %278 = add i64 %57, -1
  %279 = sub i64 %278, %276
  %280 = and i64 %277, 7
  %281 = icmp eq i64 %280, 0
  br i1 %281, label %295, label %282

; <label>:282:                                    ; preds = %275
  br label %283

; <label>:283:                                    ; preds = %283, %282
  %284 = phi i64 [ %291, %283 ], [ %276, %282 ]
  %285 = phi i64 [ %292, %283 ], [ %280, %282 ]
  %286 = getelementptr inbounds i32, i32* %134, i64 %284
  %287 = getelementptr inbounds i32, i32* %136, i64 %284
  %288 = load i32, i32* %53, align 8, !tbaa !51
  %289 = load i32, i32* %287, align 4, !tbaa !33
  %290 = mul nsw i32 %289, %288
  store i32 %290, i32* %286, align 4, !tbaa !33
  %291 = add nsw i64 %284, 1
  %292 = add i64 %285, -1
  %293 = icmp eq i64 %292, 0
  br i1 %293, label %294, label %283, !llvm.loop !1032

; <label>:294:                                    ; preds = %283
  br label %295

; <label>:295:                                    ; preds = %275, %294
  %296 = phi i64 [ %276, %275 ], [ %291, %294 ]
  %297 = icmp ult i64 %279, 7
  br i1 %297, label %398, label %298

; <label>:298:                                    ; preds = %295
  br label %299

; <label>:299:                                    ; preds = %299, %298
  %300 = phi i64 [ %296, %298 ], [ %348, %299 ]
  %301 = getelementptr inbounds i32, i32* %134, i64 %300
  %302 = getelementptr inbounds i32, i32* %136, i64 %300
  %303 = load i32, i32* %53, align 8, !tbaa !51
  %304 = load i32, i32* %302, align 4, !tbaa !33
  %305 = mul nsw i32 %304, %303
  store i32 %305, i32* %301, align 4, !tbaa !33
  %306 = add nsw i64 %300, 1
  %307 = getelementptr inbounds i32, i32* %134, i64 %306
  %308 = getelementptr inbounds i32, i32* %136, i64 %306
  %309 = load i32, i32* %53, align 8, !tbaa !51
  %310 = load i32, i32* %308, align 4, !tbaa !33
  %311 = mul nsw i32 %310, %309
  store i32 %311, i32* %307, align 4, !tbaa !33
  %312 = add nsw i64 %300, 2
  %313 = getelementptr inbounds i32, i32* %134, i64 %312
  %314 = getelementptr inbounds i32, i32* %136, i64 %312
  %315 = load i32, i32* %53, align 8, !tbaa !51
  %316 = load i32, i32* %314, align 4, !tbaa !33
  %317 = mul nsw i32 %316, %315
  store i32 %317, i32* %313, align 4, !tbaa !33
  %318 = add nsw i64 %300, 3
  %319 = getelementptr inbounds i32, i32* %134, i64 %318
  %320 = getelementptr inbounds i32, i32* %136, i64 %318
  %321 = load i32, i32* %53, align 8, !tbaa !51
  %322 = load i32, i32* %320, align 4, !tbaa !33
  %323 = mul nsw i32 %322, %321
  store i32 %323, i32* %319, align 4, !tbaa !33
  %324 = add nsw i64 %300, 4
  %325 = getelementptr inbounds i32, i32* %134, i64 %324
  %326 = getelementptr inbounds i32, i32* %136, i64 %324
  %327 = load i32, i32* %53, align 8, !tbaa !51
  %328 = load i32, i32* %326, align 4, !tbaa !33
  %329 = mul nsw i32 %328, %327
  store i32 %329, i32* %325, align 4, !tbaa !33
  %330 = add nsw i64 %300, 5
  %331 = getelementptr inbounds i32, i32* %134, i64 %330
  %332 = getelementptr inbounds i32, i32* %136, i64 %330
  %333 = load i32, i32* %53, align 8, !tbaa !51
  %334 = load i32, i32* %332, align 4, !tbaa !33
  %335 = mul nsw i32 %334, %333
  store i32 %335, i32* %331, align 4, !tbaa !33
  %336 = add nsw i64 %300, 6
  %337 = getelementptr inbounds i32, i32* %134, i64 %336
  %338 = getelementptr inbounds i32, i32* %136, i64 %336
  %339 = load i32, i32* %53, align 8, !tbaa !51
  %340 = load i32, i32* %338, align 4, !tbaa !33
  %341 = mul nsw i32 %340, %339
  store i32 %341, i32* %337, align 4, !tbaa !33
  %342 = add nsw i64 %300, 7
  %343 = getelementptr inbounds i32, i32* %134, i64 %342
  %344 = getelementptr inbounds i32, i32* %136, i64 %342
  %345 = load i32, i32* %53, align 8, !tbaa !51
  %346 = load i32, i32* %344, align 4, !tbaa !33
  %347 = mul nsw i32 %346, %345
  store i32 %347, i32* %343, align 4, !tbaa !33
  %348 = add nsw i64 %300, 8
  %349 = icmp eq i64 %348, %57
  br i1 %349, label %397, label %299, !llvm.loop !1033

; <label>:350:                                    ; preds = %350, %128
  %351 = phi i64 [ %126, %128 ], [ %395, %350 ]
  %352 = getelementptr inbounds i32, i32* %98, i64 %351
  %353 = load i32*, i32** %99, align 8, !tbaa !61
  %354 = getelementptr inbounds i32, i32* %353, i64 %351
  %355 = bitcast i32* %354 to <4 x i32>*
  %356 = load <4 x i32>, <4 x i32>* %355, align 16, !tbaa !11
  %357 = load i32, i32* %53, align 8, !tbaa !33
  %358 = insertelement <4 x i32> undef, i32 %357, i32 0
  %359 = shufflevector <4 x i32> %358, <4 x i32> undef, <4 x i32> zeroinitializer
  %360 = mul <4 x i32> %359, %356
  %361 = bitcast i32* %352 to <4 x i32>*
  store <4 x i32> %360, <4 x i32>* %361, align 16, !tbaa !11
  %362 = add nuw nsw i64 %351, 4
  %363 = getelementptr inbounds i32, i32* %98, i64 %362
  %364 = load i32*, i32** %99, align 8, !tbaa !61
  %365 = getelementptr inbounds i32, i32* %364, i64 %362
  %366 = bitcast i32* %365 to <4 x i32>*
  %367 = load <4 x i32>, <4 x i32>* %366, align 16, !tbaa !11
  %368 = load i32, i32* %53, align 8, !tbaa !33
  %369 = insertelement <4 x i32> undef, i32 %368, i32 0
  %370 = shufflevector <4 x i32> %369, <4 x i32> undef, <4 x i32> zeroinitializer
  %371 = mul <4 x i32> %370, %367
  %372 = bitcast i32* %363 to <4 x i32>*
  store <4 x i32> %371, <4 x i32>* %372, align 16, !tbaa !11
  %373 = add nsw i64 %351, 8
  %374 = getelementptr inbounds i32, i32* %98, i64 %373
  %375 = load i32*, i32** %99, align 8, !tbaa !61
  %376 = getelementptr inbounds i32, i32* %375, i64 %373
  %377 = bitcast i32* %376 to <4 x i32>*
  %378 = load <4 x i32>, <4 x i32>* %377, align 16, !tbaa !11
  %379 = load i32, i32* %53, align 8, !tbaa !33
  %380 = insertelement <4 x i32> undef, i32 %379, i32 0
  %381 = shufflevector <4 x i32> %380, <4 x i32> undef, <4 x i32> zeroinitializer
  %382 = mul <4 x i32> %381, %378
  %383 = bitcast i32* %374 to <4 x i32>*
  store <4 x i32> %382, <4 x i32>* %383, align 16, !tbaa !11
  %384 = add nsw i64 %351, 12
  %385 = getelementptr inbounds i32, i32* %98, i64 %384
  %386 = load i32*, i32** %99, align 8, !tbaa !61
  %387 = getelementptr inbounds i32, i32* %386, i64 %384
  %388 = bitcast i32* %387 to <4 x i32>*
  %389 = load <4 x i32>, <4 x i32>* %388, align 16, !tbaa !11
  %390 = load i32, i32* %53, align 8, !tbaa !33
  %391 = insertelement <4 x i32> undef, i32 %390, i32 0
  %392 = shufflevector <4 x i32> %391, <4 x i32> undef, <4 x i32> zeroinitializer
  %393 = mul <4 x i32> %392, %389
  %394 = bitcast i32* %385 to <4 x i32>*
  store <4 x i32> %393, <4 x i32>* %394, align 16, !tbaa !11
  %395 = add nsw i64 %351, 16
  %396 = icmp slt i64 %395, %95
  br i1 %396, label %350, label %129

; <label>:397:                                    ; preds = %299
  br label %398

; <label>:398:                                    ; preds = %295, %397
  br label %399

; <label>:399:                                    ; preds = %398, %273, %131
  %400 = getelementptr inbounds %"struct.Eigen::internal::evaluator.606", %"struct.Eigen::internal::evaluator.606"* %6, i64 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %401 = load i32*, i32** %400, align 8, !tbaa !44
  %402 = icmp eq i32* %401, null
  br i1 %402, label %407, label %403

; <label>:403:                                    ; preds = %399
  %404 = getelementptr inbounds i32, i32* %401, i64 -2
  %405 = bitcast i32* %404 to i8**
  %406 = load i8*, i8** %405, align 8, !tbaa !29
  call void @free(i8* %406) #11
  br label %407

; <label>:407:                                    ; preds = %399, %403
  call void @llvm.lifetime.end(i64 48, i8* nonnull %7) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal20generic_product_implINS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS3_IiLin1ELi47ELi0ELin1ELi47EEENS_10DenseShapeES8_Li8EE6evalToINS3_IiLi6ELi47ELi0ELi6ELi47EEEEEvRT_RKS6_RKS7_(%"class.Eigen::Matrix.94"* dereferenceable(1128), %"class.Eigen::Transpose.296"* dereferenceable(8), %"class.Eigen::Matrix.32"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"struct.Eigen::internal::evaluator.1526", align 8
  %5 = alloca %"struct.Eigen::internal::evaluator.553", align 8
  %6 = alloca %"class.Eigen::internal::generic_dense_assignment_kernel.1529", align 8
  %7 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %8 = alloca %"struct.Eigen::internal::evaluator.1444", align 4
  %9 = alloca %"struct.Eigen::internal::evaluator.553", align 8
  %10 = alloca %"class.Eigen::internal::generic_dense_assignment_kernel.1447", align 8
  %11 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %12 = alloca i32, align 4
  %13 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %2, i64 0, i32 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8, !tbaa !37
  %15 = add nsw i64 %14, 53
  %16 = icmp slt i64 %15, 20
  %17 = icmp sgt i64 %14, 0
  %18 = and i1 %17, %16
  br i1 %18, label %19, label %53

; <label>:19:                                     ; preds = %3
  %20 = bitcast %"class.Eigen::Transpose.296"* %1 to %"class.Eigen::PlainObjectBase.124"**
  %21 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %20, align 8, !tbaa !11
  %22 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %21, i64 0, i32 0, i32 1
  %23 = load i64, i64* %22, align 8, !tbaa !43
  %24 = icmp eq i64 %23, %14
  br i1 %24, label %26, label %25, !prof !10

; <label>:25:                                     ; preds = %19
  tail call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS1_IdLin1ELi1ELi0ELin1ELi1EEELi0EEC2ERKS2_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 97, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2, i64 0, i64 0)) #13
  unreachable

; <label>:26:                                     ; preds = %19
  %27 = ptrtoint %"class.Eigen::PlainObjectBase.124"* %21 to i64
  %28 = ptrtoint %"class.Eigen::Matrix.32"* %2 to i64
  %29 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %7, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %29) #11
  %30 = bitcast %"struct.Eigen::internal::evaluator.1526"* %4 to i8*
  call void @llvm.lifetime.start(i64 64, i8* nonnull %30) #11
  %31 = bitcast %"struct.Eigen::internal::evaluator.1526"* %4 to i64*
  store i64 %27, i64* %31, align 8
  %32 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1526", %"struct.Eigen::internal::evaluator.1526"* %4, i64 0, i32 0, i32 1
  %33 = bitcast %"class.Eigen::Matrix.32"** %32 to i64*
  store i64 %28, i64* %33, align 8, !tbaa !11
  %34 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1526", %"struct.Eigen::internal::evaluator.1526"* %4, i64 0, i32 0, i32 2, i32 0, i32 1
  %35 = bitcast %"class.Eigen::PlainObjectBase.124"* %21 to <2 x i64>*
  %36 = load <2 x i64>, <2 x i64>* %35, align 8, !tbaa !11
  %37 = bitcast %"struct.Eigen::internal::evaluator.898"* %34 to <2 x i64>*
  store <2 x i64> %36, <2 x i64>* %37, align 8, !tbaa !11
  %38 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1526", %"struct.Eigen::internal::evaluator.1526"* %4, i64 0, i32 0, i32 3
  %39 = bitcast %"class.Eigen::Matrix.32"* %2 to i64*
  %40 = load i64, i64* %39, align 8, !tbaa !35
  %41 = bitcast %"struct.Eigen::internal::evaluator.523"* %38 to i64*
  store i64 %40, i64* %41, align 8, !tbaa !813
  %42 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1526", %"struct.Eigen::internal::evaluator.1526"* %4, i64 0, i32 0, i32 3, i32 0, i32 1, i32 0
  store i64 %14, i64* %42, align 8, !tbaa !59
  %43 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1526", %"struct.Eigen::internal::evaluator.1526"* %4, i64 0, i32 0, i32 4
  %44 = extractelement <2 x i64> %36, i32 1
  store i64 %44, i64* %43, align 8, !tbaa !1034
  %45 = bitcast %"struct.Eigen::internal::evaluator.553"* %5 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %45) #11
  %46 = getelementptr inbounds %"struct.Eigen::internal::evaluator.553", %"struct.Eigen::internal::evaluator.553"* %5, i64 0, i32 0, i32 0
  %47 = getelementptr inbounds %"class.Eigen::Matrix.94", %"class.Eigen::Matrix.94"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  store i32* %47, i32** %46, align 8, !tbaa !955
  %48 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1529"* %6 to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %48) #11
  %49 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1529", %"class.Eigen::internal::generic_dense_assignment_kernel.1529"* %6, i64 0, i32 0
  store %"struct.Eigen::internal::evaluator.553"* %5, %"struct.Eigen::internal::evaluator.553"** %49, align 8, !tbaa !11
  %50 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1529", %"class.Eigen::internal::generic_dense_assignment_kernel.1529"* %6, i64 0, i32 1
  store %"struct.Eigen::internal::evaluator.1526"* %4, %"struct.Eigen::internal::evaluator.1526"** %50, align 8, !tbaa !11
  %51 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1529", %"class.Eigen::internal::generic_dense_assignment_kernel.1529"* %6, i64 0, i32 2
  store %"struct.Eigen::internal::assign_op.512"* %7, %"struct.Eigen::internal::assign_op.512"** %51, align 8, !tbaa !11
  %52 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1529", %"class.Eigen::internal::generic_dense_assignment_kernel.1529"* %6, i64 0, i32 3
  store %"class.Eigen::Matrix.94"* %0, %"class.Eigen::Matrix.94"** %52, align 8, !tbaa !11
  call void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi6ELi47ELi0ELi6ELi47EEEEENS3_INS_7ProductINS_9TransposeIKNS4_IiLin1ELi6ELi0ELin1ELi6EEEEENS4_IiLin1ELi47ELi0ELin1ELi47EEELi1EEEEENS0_9assign_opIiiEELi0EEELi0ELi0EE3runERSH_(%"class.Eigen::internal::generic_dense_assignment_kernel.1529"* nonnull dereferenceable(32) %6) #11
  call void @llvm.lifetime.end(i64 32, i8* nonnull %48) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %45) #11
  call void @llvm.lifetime.end(i64 64, i8* nonnull %30) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %29) #11
  br label %269

; <label>:53:                                     ; preds = %3
  %54 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %11, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %54) #11
  %55 = bitcast %"struct.Eigen::internal::evaluator.1444"* %8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %55) #11
  %56 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %8, i64 0, i32 0, i32 0
  store i32 0, i32* %56, align 4, !tbaa !51
  %57 = bitcast %"struct.Eigen::internal::evaluator.553"* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %57) #11
  %58 = bitcast %"struct.Eigen::internal::evaluator.553"* %9 to %"class.Eigen::Matrix.94"**
  store %"class.Eigen::Matrix.94"* %0, %"class.Eigen::Matrix.94"** %58, align 8, !tbaa !955
  %59 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1447"* %10 to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %59) #11
  %60 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1447", %"class.Eigen::internal::generic_dense_assignment_kernel.1447"* %10, i64 0, i32 0
  store %"struct.Eigen::internal::evaluator.553"* %9, %"struct.Eigen::internal::evaluator.553"** %60, align 8, !tbaa !11
  %61 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1447", %"class.Eigen::internal::generic_dense_assignment_kernel.1447"* %10, i64 0, i32 1
  store %"struct.Eigen::internal::evaluator.1444"* %8, %"struct.Eigen::internal::evaluator.1444"** %61, align 8, !tbaa !11
  %62 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1447", %"class.Eigen::internal::generic_dense_assignment_kernel.1447"* %10, i64 0, i32 2
  store %"struct.Eigen::internal::assign_op.512"* %11, %"struct.Eigen::internal::assign_op.512"** %62, align 8, !tbaa !11
  %63 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1447", %"class.Eigen::internal::generic_dense_assignment_kernel.1447"* %10, i64 0, i32 3
  store %"class.Eigen::Matrix.94"* %0, %"class.Eigen::Matrix.94"** %63, align 8, !tbaa !11
  %64 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1447"* %10 to %"struct.Eigen::internal::evaluator.554"**
  %65 = bitcast %"struct.Eigen::internal::evaluator.553"* %9 to <4 x i32>**
  %66 = load <4 x i32>*, <4 x i32>** %65, align 8, !tbaa !955
  store <4 x i32> zeroinitializer, <4 x i32>* %66, align 1, !tbaa !11
  %67 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %64, align 8, !tbaa !11
  %68 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %67, i64 0, i32 0
  %69 = load i32*, i32** %68, align 8, !tbaa !955
  %70 = getelementptr inbounds i32, i32* %69, i64 4
  %71 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %61, align 8, !tbaa !11
  %72 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %71, i64 0, i32 0, i32 0
  %73 = load i32, i32* %72, align 4, !tbaa !33
  %74 = insertelement <4 x i32> undef, i32 %73, i32 0
  %75 = shufflevector <4 x i32> %74, <4 x i32> undef, <4 x i32> zeroinitializer
  %76 = bitcast i32* %70 to <4 x i32>*
  store <4 x i32> %75, <4 x i32>* %76, align 1, !tbaa !11
  %77 = load i32*, i32** %68, align 8, !tbaa !955
  %78 = getelementptr inbounds i32, i32* %77, i64 8
  %79 = load i32, i32* %72, align 4, !tbaa !33
  %80 = insertelement <4 x i32> undef, i32 %79, i32 0
  %81 = shufflevector <4 x i32> %80, <4 x i32> undef, <4 x i32> zeroinitializer
  %82 = bitcast i32* %78 to <4 x i32>*
  store <4 x i32> %81, <4 x i32>* %82, align 1, !tbaa !11
  %83 = load i32*, i32** %68, align 8, !tbaa !955
  %84 = getelementptr inbounds i32, i32* %83, i64 12
  %85 = load i32, i32* %72, align 4, !tbaa !33
  %86 = insertelement <4 x i32> undef, i32 %85, i32 0
  %87 = shufflevector <4 x i32> %86, <4 x i32> undef, <4 x i32> zeroinitializer
  %88 = bitcast i32* %84 to <4 x i32>*
  store <4 x i32> %87, <4 x i32>* %88, align 1, !tbaa !11
  %89 = load i32*, i32** %68, align 8, !tbaa !955
  %90 = getelementptr inbounds i32, i32* %89, i64 16
  %91 = load i32, i32* %72, align 4, !tbaa !33
  %92 = insertelement <4 x i32> undef, i32 %91, i32 0
  %93 = shufflevector <4 x i32> %92, <4 x i32> undef, <4 x i32> zeroinitializer
  %94 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> %93, <4 x i32>* %94, align 1, !tbaa !11
  %95 = load i32*, i32** %68, align 8, !tbaa !955
  %96 = getelementptr inbounds i32, i32* %95, i64 20
  %97 = load i32, i32* %72, align 4, !tbaa !33
  %98 = insertelement <4 x i32> undef, i32 %97, i32 0
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> zeroinitializer
  %100 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %99, <4 x i32>* %100, align 1, !tbaa !11
  %101 = load i32*, i32** %68, align 8, !tbaa !955
  %102 = getelementptr inbounds i32, i32* %101, i64 24
  %103 = load i32, i32* %72, align 4, !tbaa !33
  %104 = insertelement <4 x i32> undef, i32 %103, i32 0
  %105 = shufflevector <4 x i32> %104, <4 x i32> undef, <4 x i32> zeroinitializer
  %106 = bitcast i32* %102 to <4 x i32>*
  store <4 x i32> %105, <4 x i32>* %106, align 1, !tbaa !11
  %107 = load i32*, i32** %68, align 8, !tbaa !955
  %108 = getelementptr inbounds i32, i32* %107, i64 28
  %109 = load i32, i32* %72, align 4, !tbaa !33
  %110 = insertelement <4 x i32> undef, i32 %109, i32 0
  %111 = shufflevector <4 x i32> %110, <4 x i32> undef, <4 x i32> zeroinitializer
  %112 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %111, <4 x i32>* %112, align 1, !tbaa !11
  %113 = load i32*, i32** %68, align 8, !tbaa !955
  %114 = getelementptr inbounds i32, i32* %113, i64 32
  %115 = load i32, i32* %72, align 4, !tbaa !33
  %116 = insertelement <4 x i32> undef, i32 %115, i32 0
  %117 = shufflevector <4 x i32> %116, <4 x i32> undef, <4 x i32> zeroinitializer
  %118 = bitcast i32* %114 to <4 x i32>*
  store <4 x i32> %117, <4 x i32>* %118, align 1, !tbaa !11
  %119 = load i32*, i32** %68, align 8, !tbaa !955
  %120 = getelementptr inbounds i32, i32* %119, i64 36
  %121 = load i32, i32* %72, align 4, !tbaa !33
  %122 = insertelement <4 x i32> undef, i32 %121, i32 0
  %123 = shufflevector <4 x i32> %122, <4 x i32> undef, <4 x i32> zeroinitializer
  %124 = bitcast i32* %120 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 1, !tbaa !11
  %125 = load i32*, i32** %68, align 8, !tbaa !955
  %126 = getelementptr inbounds i32, i32* %125, i64 40
  %127 = load i32, i32* %72, align 4, !tbaa !33
  %128 = insertelement <4 x i32> undef, i32 %127, i32 0
  %129 = shufflevector <4 x i32> %128, <4 x i32> undef, <4 x i32> zeroinitializer
  %130 = bitcast i32* %126 to <4 x i32>*
  store <4 x i32> %129, <4 x i32>* %130, align 1, !tbaa !11
  %131 = load i32*, i32** %68, align 8, !tbaa !955
  %132 = getelementptr inbounds i32, i32* %131, i64 44
  %133 = load i32, i32* %72, align 4, !tbaa !33
  %134 = insertelement <4 x i32> undef, i32 %133, i32 0
  %135 = shufflevector <4 x i32> %134, <4 x i32> undef, <4 x i32> zeroinitializer
  %136 = bitcast i32* %132 to <4 x i32>*
  store <4 x i32> %135, <4 x i32>* %136, align 1, !tbaa !11
  %137 = load i32*, i32** %68, align 8, !tbaa !955
  %138 = getelementptr inbounds i32, i32* %137, i64 48
  %139 = load i32, i32* %72, align 4, !tbaa !33
  %140 = insertelement <4 x i32> undef, i32 %139, i32 0
  %141 = shufflevector <4 x i32> %140, <4 x i32> undef, <4 x i32> zeroinitializer
  %142 = bitcast i32* %138 to <4 x i32>*
  store <4 x i32> %141, <4 x i32>* %142, align 1, !tbaa !11
  %143 = load i32*, i32** %68, align 8, !tbaa !955
  %144 = getelementptr inbounds i32, i32* %143, i64 52
  %145 = load i32, i32* %72, align 4, !tbaa !33
  %146 = insertelement <4 x i32> undef, i32 %145, i32 0
  %147 = shufflevector <4 x i32> %146, <4 x i32> undef, <4 x i32> zeroinitializer
  %148 = bitcast i32* %144 to <4 x i32>*
  store <4 x i32> %147, <4 x i32>* %148, align 1, !tbaa !11
  %149 = load i32*, i32** %68, align 8, !tbaa !955
  %150 = getelementptr inbounds i32, i32* %149, i64 56
  %151 = load i32, i32* %72, align 4, !tbaa !33
  %152 = insertelement <4 x i32> undef, i32 %151, i32 0
  %153 = shufflevector <4 x i32> %152, <4 x i32> undef, <4 x i32> zeroinitializer
  %154 = bitcast i32* %150 to <4 x i32>*
  store <4 x i32> %153, <4 x i32>* %154, align 1, !tbaa !11
  %155 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %64, align 8, !tbaa !11
  %156 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %155, i64 0, i32 0
  %157 = load i32*, i32** %156, align 8, !tbaa !955
  %158 = getelementptr inbounds i32, i32* %157, i64 60
  %159 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %61, align 8, !tbaa !11
  %160 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %159, i64 0, i32 0, i32 0
  %161 = load i32, i32* %160, align 4, !tbaa !33
  %162 = insertelement <4 x i32> undef, i32 %161, i32 0
  %163 = shufflevector <4 x i32> %162, <4 x i32> undef, <4 x i32> zeroinitializer
  %164 = bitcast i32* %158 to <4 x i32>*
  store <4 x i32> %163, <4 x i32>* %164, align 1, !tbaa !11
  %165 = load i32*, i32** %156, align 8, !tbaa !955
  %166 = getelementptr inbounds i32, i32* %165, i64 64
  %167 = load i32, i32* %160, align 4, !tbaa !33
  %168 = insertelement <4 x i32> undef, i32 %167, i32 0
  %169 = shufflevector <4 x i32> %168, <4 x i32> undef, <4 x i32> zeroinitializer
  %170 = bitcast i32* %166 to <4 x i32>*
  store <4 x i32> %169, <4 x i32>* %170, align 1, !tbaa !11
  %171 = load i32*, i32** %156, align 8, !tbaa !955
  %172 = getelementptr inbounds i32, i32* %171, i64 68
  %173 = load i32, i32* %160, align 4, !tbaa !33
  %174 = insertelement <4 x i32> undef, i32 %173, i32 0
  %175 = shufflevector <4 x i32> %174, <4 x i32> undef, <4 x i32> zeroinitializer
  %176 = bitcast i32* %172 to <4 x i32>*
  store <4 x i32> %175, <4 x i32>* %176, align 1, !tbaa !11
  %177 = load i32*, i32** %156, align 8, !tbaa !955
  %178 = getelementptr inbounds i32, i32* %177, i64 72
  %179 = load i32, i32* %160, align 4, !tbaa !33
  %180 = insertelement <4 x i32> undef, i32 %179, i32 0
  %181 = shufflevector <4 x i32> %180, <4 x i32> undef, <4 x i32> zeroinitializer
  %182 = bitcast i32* %178 to <4 x i32>*
  store <4 x i32> %181, <4 x i32>* %182, align 1, !tbaa !11
  %183 = load i32*, i32** %156, align 8, !tbaa !955
  %184 = getelementptr inbounds i32, i32* %183, i64 76
  %185 = load i32, i32* %160, align 4, !tbaa !33
  %186 = insertelement <4 x i32> undef, i32 %185, i32 0
  %187 = shufflevector <4 x i32> %186, <4 x i32> undef, <4 x i32> zeroinitializer
  %188 = bitcast i32* %184 to <4 x i32>*
  store <4 x i32> %187, <4 x i32>* %188, align 1, !tbaa !11
  %189 = load i32*, i32** %156, align 8, !tbaa !955
  %190 = getelementptr inbounds i32, i32* %189, i64 80
  %191 = load i32, i32* %160, align 4, !tbaa !33
  %192 = insertelement <4 x i32> undef, i32 %191, i32 0
  %193 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> zeroinitializer
  %194 = bitcast i32* %190 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %194, align 1, !tbaa !11
  %195 = load i32*, i32** %156, align 8, !tbaa !955
  %196 = getelementptr inbounds i32, i32* %195, i64 84
  %197 = load i32, i32* %160, align 4, !tbaa !33
  %198 = insertelement <4 x i32> undef, i32 %197, i32 0
  %199 = shufflevector <4 x i32> %198, <4 x i32> undef, <4 x i32> zeroinitializer
  %200 = bitcast i32* %196 to <4 x i32>*
  store <4 x i32> %199, <4 x i32>* %200, align 1, !tbaa !11
  %201 = load i32*, i32** %156, align 8, !tbaa !955
  %202 = getelementptr inbounds i32, i32* %201, i64 88
  %203 = load i32, i32* %160, align 4, !tbaa !33
  %204 = insertelement <4 x i32> undef, i32 %203, i32 0
  %205 = shufflevector <4 x i32> %204, <4 x i32> undef, <4 x i32> zeroinitializer
  %206 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> %205, <4 x i32>* %206, align 1, !tbaa !11
  %207 = load i32*, i32** %156, align 8, !tbaa !955
  %208 = getelementptr inbounds i32, i32* %207, i64 92
  %209 = load i32, i32* %160, align 4, !tbaa !33
  %210 = insertelement <4 x i32> undef, i32 %209, i32 0
  %211 = shufflevector <4 x i32> %210, <4 x i32> undef, <4 x i32> zeroinitializer
  %212 = bitcast i32* %208 to <4 x i32>*
  store <4 x i32> %211, <4 x i32>* %212, align 1, !tbaa !11
  %213 = load i32*, i32** %156, align 8, !tbaa !955
  %214 = getelementptr inbounds i32, i32* %213, i64 96
  %215 = load i32, i32* %160, align 4, !tbaa !33
  %216 = insertelement <4 x i32> undef, i32 %215, i32 0
  %217 = shufflevector <4 x i32> %216, <4 x i32> undef, <4 x i32> zeroinitializer
  %218 = bitcast i32* %214 to <4 x i32>*
  store <4 x i32> %217, <4 x i32>* %218, align 1, !tbaa !11
  %219 = load i32*, i32** %156, align 8, !tbaa !955
  %220 = getelementptr inbounds i32, i32* %219, i64 100
  %221 = load i32, i32* %160, align 4, !tbaa !33
  %222 = insertelement <4 x i32> undef, i32 %221, i32 0
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> zeroinitializer
  %224 = bitcast i32* %220 to <4 x i32>*
  store <4 x i32> %223, <4 x i32>* %224, align 1, !tbaa !11
  %225 = load i32*, i32** %156, align 8, !tbaa !955
  %226 = getelementptr inbounds i32, i32* %225, i64 104
  %227 = load i32, i32* %160, align 4, !tbaa !33
  %228 = insertelement <4 x i32> undef, i32 %227, i32 0
  %229 = shufflevector <4 x i32> %228, <4 x i32> undef, <4 x i32> zeroinitializer
  %230 = bitcast i32* %226 to <4 x i32>*
  store <4 x i32> %229, <4 x i32>* %230, align 1, !tbaa !11
  %231 = load i32*, i32** %156, align 8, !tbaa !955
  %232 = getelementptr inbounds i32, i32* %231, i64 108
  %233 = load i32, i32* %160, align 4, !tbaa !33
  %234 = insertelement <4 x i32> undef, i32 %233, i32 0
  %235 = shufflevector <4 x i32> %234, <4 x i32> undef, <4 x i32> zeroinitializer
  %236 = bitcast i32* %232 to <4 x i32>*
  store <4 x i32> %235, <4 x i32>* %236, align 1, !tbaa !11
  %237 = load i32*, i32** %156, align 8, !tbaa !955
  %238 = getelementptr inbounds i32, i32* %237, i64 112
  %239 = load i32, i32* %160, align 4, !tbaa !33
  %240 = insertelement <4 x i32> undef, i32 %239, i32 0
  %241 = shufflevector <4 x i32> %240, <4 x i32> undef, <4 x i32> zeroinitializer
  %242 = bitcast i32* %238 to <4 x i32>*
  store <4 x i32> %241, <4 x i32>* %242, align 1, !tbaa !11
  %243 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %64, align 8, !tbaa !11
  %244 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %243, i64 0, i32 0
  %245 = load i32*, i32** %244, align 8, !tbaa !955
  %246 = getelementptr inbounds i32, i32* %245, i64 116
  %247 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %61, align 8, !tbaa !11
  %248 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %247, i64 0, i32 0, i32 0
  %249 = load i32, i32* %248, align 4, !tbaa !33
  %250 = insertelement <4 x i32> undef, i32 %249, i32 0
  %251 = shufflevector <4 x i32> %250, <4 x i32> undef, <4 x i32> zeroinitializer
  %252 = bitcast i32* %246 to <4 x i32>*
  store <4 x i32> %251, <4 x i32>* %252, align 1, !tbaa !11
  %253 = load i32*, i32** %244, align 8, !tbaa !955
  %254 = getelementptr inbounds i32, i32* %253, i64 120
  %255 = load i32, i32* %248, align 4, !tbaa !33
  %256 = insertelement <4 x i32> undef, i32 %255, i32 0
  %257 = shufflevector <4 x i32> %256, <4 x i32> undef, <4 x i32> zeroinitializer
  %258 = bitcast i32* %254 to <4 x i32>*
  store <4 x i32> %257, <4 x i32>* %258, align 1, !tbaa !11
  call void @_ZN5Eigen8internal47copy_using_evaluator_innervec_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi6ELi47ELi0ELi6ELi47EEEEENS3_INS_14CwiseNullaryOpINS0_18scalar_constant_opIiEES5_EEEENS0_9assign_opIiiEELi0EEELi124ELi280EE3runERSE_(%"class.Eigen::internal::generic_dense_assignment_kernel.1447"* nonnull dereferenceable(32) %10) #11
  %259 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %64, align 8, !tbaa !11
  %260 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %259, i64 0, i32 0
  %261 = load i32*, i32** %260, align 8, !tbaa !955
  %262 = getelementptr inbounds i32, i32* %261, i64 280
  %263 = load %"struct.Eigen::internal::evaluator.1444"*, %"struct.Eigen::internal::evaluator.1444"** %61, align 8, !tbaa !11
  %264 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1444", %"struct.Eigen::internal::evaluator.1444"* %263, i64 0, i32 0, i32 0
  %265 = load i32, i32* %264, align 4, !tbaa !51
  store i32 %265, i32* %262, align 4, !tbaa !33
  %266 = getelementptr inbounds i32, i32* %261, i64 281
  %267 = load i32, i32* %264, align 4, !tbaa !51
  store i32 %267, i32* %266, align 4, !tbaa !33
  call void @llvm.lifetime.end(i64 32, i8* nonnull %59) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %57) #11
  call void @llvm.lifetime.end(i64 8, i8* nonnull %55) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %54) #11
  %268 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start(i64 4, i8* nonnull %268) #11
  store i32 1, i32* %12, align 4, !tbaa !33
  call void @_ZN5Eigen8internal20generic_product_implINS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS3_IiLin1ELi47ELi0ELin1ELi47EEENS_10DenseShapeES8_Li8EE13scaleAndAddToINS3_IiLi6ELi47ELi0ELi6ELi47EEEEEvRT_RKS6_RKS7_RKi(%"class.Eigen::Matrix.94"* nonnull dereferenceable(1128) %0, %"class.Eigen::Transpose.296"* nonnull dereferenceable(8) %1, %"class.Eigen::Matrix.32"* nonnull dereferenceable(16) %2, i32* nonnull dereferenceable(4) %12)
  call void @llvm.lifetime.end(i64 4, i8* nonnull %268) #11
  br label %269

; <label>:269:                                    ; preds = %53, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal20generic_product_implINS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS3_IiLin1ELi47ELi0ELin1ELi47EEENS_10DenseShapeES8_Li8EE13scaleAndAddToINS3_IiLi6ELi47ELi0ELi6ELi47EEEEEvRT_RKS6_RKS7_RKi(%"class.Eigen::Matrix.94"* dereferenceable(1128), %"class.Eigen::Transpose.296"* dereferenceable(8), %"class.Eigen::Matrix.32"* dereferenceable(16), i32* dereferenceable(4)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.Eigen::internal::gemm_blocking_space.1448", align 8
  %6 = bitcast %"class.Eigen::Transpose.296"* %1 to %"class.Eigen::PlainObjectBase.124"**
  %7 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %6, align 8, !tbaa !11
  %8 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %7, i64 0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8, !tbaa !43
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %50, label %11

; <label>:11:                                     ; preds = %4
  %12 = load i32, i32* %3, align 4, !tbaa !33
  %13 = bitcast %"class.Eigen::internal::gemm_blocking_space.1448"* %5 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %13) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %13, i8 0, i64 16, i32 8, i1 false) #11
  %14 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1448", %"class.Eigen::internal::gemm_blocking_space.1448"* %5, i64 0, i32 0, i32 2
  %15 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1448", %"class.Eigen::internal::gemm_blocking_space.1448"* %5, i64 0, i32 0, i32 3
  %16 = bitcast i64* %14 to <2 x i64>*
  store <2 x i64> <i64 6, i64 47>, <2 x i64>* %16, align 8, !tbaa !32
  %17 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1448", %"class.Eigen::internal::gemm_blocking_space.1448"* %5, i64 0, i32 0, i32 4
  store i64 %9, i64* %17, align 8, !tbaa !193
  call void @_ZN5Eigen8internal37evaluateProductBlockingSizesHeuristicIiiLi1ElEEvRT2_S3_S3_S2_(i64* nonnull dereferenceable(8) %17, i64* nonnull dereferenceable(8) %14, i64* nonnull dereferenceable(8) %15, i64 1) #11
  %18 = load i64, i64* %14, align 8, !tbaa !460
  %19 = load i64, i64* %17, align 8, !tbaa !193
  %20 = mul nsw i64 %19, %18
  %21 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1448", %"class.Eigen::internal::gemm_blocking_space.1448"* %5, i64 0, i32 1
  store i64 %20, i64* %21, align 8, !tbaa !957
  %22 = load i64, i64* %15, align 8, !tbaa !461
  %23 = mul nsw i64 %22, %19
  %24 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1448", %"class.Eigen::internal::gemm_blocking_space.1448"* %5, i64 0, i32 2
  store i64 %23, i64* %24, align 8, !tbaa !959
  %25 = load i64, i64* %8, align 8, !tbaa !43
  %26 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %7, i64 0, i32 0, i32 0
  %27 = load i32*, i32** %26, align 8, !tbaa !41
  %28 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %2, i64 0, i32 0, i32 0, i32 0
  %29 = load i32*, i32** %28, align 8, !tbaa !35
  %30 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %2, i64 0, i32 0, i32 0, i32 1
  %31 = load i64, i64* %30, align 8, !tbaa !37
  %32 = getelementptr inbounds %"class.Eigen::Matrix.94", %"class.Eigen::Matrix.94"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %33 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1448", %"class.Eigen::internal::gemm_blocking_space.1448"* %5, i64 0, i32 0
  call void @_ZN5Eigen8internal29general_matrix_matrix_productIliLi1ELb0EiLi0ELb0ELi0EE3runElllPKilS4_lPiliRNS0_15level3_blockingIiiEEPNS0_16GemmParallelInfoIlEE(i64 6, i64 47, i64 %25, i32* nonnull %27, i64 %25, i32* nonnull %29, i64 %31, i32* nonnull %32, i64 6, i32 %12, %"class.Eigen::internal::level3_blocking"* nonnull dereferenceable(40) %33, %"struct.Eigen::internal::GemmParallelInfo"* null) #11
  %34 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1448", %"class.Eigen::internal::gemm_blocking_space.1448"* %5, i64 0, i32 0, i32 0
  %35 = load i32*, i32** %34, align 8, !tbaa !195
  %36 = icmp eq i32* %35, null
  br i1 %36, label %41, label %37

; <label>:37:                                     ; preds = %11
  %38 = getelementptr inbounds i32, i32* %35, i64 -2
  %39 = bitcast i32* %38 to i8**
  %40 = load i8*, i8** %39, align 8, !tbaa !29
  call void @free(i8* %40) #11
  br label %41

; <label>:41:                                     ; preds = %37, %11
  %42 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1448", %"class.Eigen::internal::gemm_blocking_space.1448"* %5, i64 0, i32 0, i32 1
  %43 = load i32*, i32** %42, align 8, !tbaa !196
  %44 = icmp eq i32* %43, null
  br i1 %44, label %49, label %45

; <label>:45:                                     ; preds = %41
  %46 = getelementptr inbounds i32, i32* %43, i64 -2
  %47 = bitcast i32* %46 to i8**
  %48 = load i8*, i8** %47, align 8, !tbaa !29
  call void @free(i8* %48) #11
  br label %49

; <label>:49:                                     ; preds = %41, %45
  call void @llvm.lifetime.end(i64 56, i8* nonnull %13) #11
  br label %50

; <label>:50:                                     ; preds = %4, %49
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi6ELi47ELi0ELi6ELi47EEEEENS3_INS_7ProductINS_9TransposeIKNS4_IiLin1ELi6ELi0ELin1ELi6EEEEENS4_IiLin1ELi47ELi0ELin1ELi47EEELi1EEEEENS0_9assign_opIiiEELi0EEELi0ELi0EE3runERSH_(%"class.Eigen::internal::generic_dense_assignment_kernel.1529"* dereferenceable(32)) local_unnamed_addr #6 align 2 {
  %2 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1529"* %0 to %"struct.Eigen::internal::evaluator.554"**
  %3 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1529", %"class.Eigen::internal::generic_dense_assignment_kernel.1529"* %0, i64 0, i32 1
  %4 = bitcast %"struct.Eigen::internal::evaluator.1526"** %3 to %"struct.Eigen::internal::product_evaluator.1527"**
  br label %5

; <label>:5:                                      ; preds = %5, %1
  %6 = phi i64 [ 0, %1 ], [ %49, %5 ]
  %7 = mul nuw nsw i64 %6, 6
  %8 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %9 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %8, i64 0, i32 0
  %10 = load i32*, i32** %9, align 8, !tbaa !955
  %11 = getelementptr inbounds i32, i32* %10, i64 %7
  %12 = load %"struct.Eigen::internal::product_evaluator.1527"*, %"struct.Eigen::internal::product_evaluator.1527"** %4, align 8, !tbaa !11
  %13 = tail call i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS4_IiLin1ELi47ELi0ELin1ELi47EEELi1EEELi8ENS_10DenseShapeESA_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.1527"* %12, i64 0, i64 %6) #11
  store i32 %13, i32* %11, align 4, !tbaa !33
  %14 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %15 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %14, i64 0, i32 0
  %16 = load i32*, i32** %15, align 8, !tbaa !955
  %17 = or i64 %7, 1
  %18 = getelementptr inbounds i32, i32* %16, i64 %17
  %19 = load %"struct.Eigen::internal::product_evaluator.1527"*, %"struct.Eigen::internal::product_evaluator.1527"** %4, align 8, !tbaa !11
  %20 = tail call i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS4_IiLin1ELi47ELi0ELin1ELi47EEELi1EEELi8ENS_10DenseShapeESA_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.1527"* %19, i64 1, i64 %6) #11
  store i32 %20, i32* %18, align 4, !tbaa !33
  %21 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %22 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %21, i64 0, i32 0
  %23 = load i32*, i32** %22, align 8, !tbaa !955
  %24 = add nuw nsw i64 %7, 2
  %25 = getelementptr inbounds i32, i32* %23, i64 %24
  %26 = load %"struct.Eigen::internal::product_evaluator.1527"*, %"struct.Eigen::internal::product_evaluator.1527"** %4, align 8, !tbaa !11
  %27 = tail call i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS4_IiLin1ELi47ELi0ELin1ELi47EEELi1EEELi8ENS_10DenseShapeESA_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.1527"* %26, i64 2, i64 %6) #11
  store i32 %27, i32* %25, align 4, !tbaa !33
  %28 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %29 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %28, i64 0, i32 0
  %30 = load i32*, i32** %29, align 8, !tbaa !955
  %31 = add nuw nsw i64 %7, 3
  %32 = getelementptr inbounds i32, i32* %30, i64 %31
  %33 = load %"struct.Eigen::internal::product_evaluator.1527"*, %"struct.Eigen::internal::product_evaluator.1527"** %4, align 8, !tbaa !11
  %34 = tail call i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS4_IiLin1ELi47ELi0ELin1ELi47EEELi1EEELi8ENS_10DenseShapeESA_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.1527"* %33, i64 3, i64 %6) #11
  store i32 %34, i32* %32, align 4, !tbaa !33
  %35 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %36 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %35, i64 0, i32 0
  %37 = load i32*, i32** %36, align 8, !tbaa !955
  %38 = add nuw nsw i64 %7, 4
  %39 = getelementptr inbounds i32, i32* %37, i64 %38
  %40 = load %"struct.Eigen::internal::product_evaluator.1527"*, %"struct.Eigen::internal::product_evaluator.1527"** %4, align 8, !tbaa !11
  %41 = tail call i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS4_IiLin1ELi47ELi0ELin1ELi47EEELi1EEELi8ENS_10DenseShapeESA_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.1527"* %40, i64 4, i64 %6) #11
  store i32 %41, i32* %39, align 4, !tbaa !33
  %42 = load %"struct.Eigen::internal::evaluator.554"*, %"struct.Eigen::internal::evaluator.554"** %2, align 8, !tbaa !11
  %43 = getelementptr inbounds %"struct.Eigen::internal::evaluator.554", %"struct.Eigen::internal::evaluator.554"* %42, i64 0, i32 0
  %44 = load i32*, i32** %43, align 8, !tbaa !955
  %45 = add nuw nsw i64 %7, 5
  %46 = getelementptr inbounds i32, i32* %44, i64 %45
  %47 = load %"struct.Eigen::internal::product_evaluator.1527"*, %"struct.Eigen::internal::product_evaluator.1527"** %4, align 8, !tbaa !11
  %48 = tail call i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS4_IiLin1ELi47ELi0ELin1ELi47EEELi1EEELi8ENS_10DenseShapeESA_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.1527"* %47, i64 5, i64 %6) #11
  store i32 %48, i32* %46, align 4, !tbaa !33
  %49 = add nuw nsw i64 %6, 1
  %50 = icmp eq i64 %49, 47
  br i1 %50, label %51, label %5

; <label>:51:                                     ; preds = %5
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS4_IiLin1ELi47ELi0ELin1ELi47EEELi1EEELi8ENS_10DenseShapeESA_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.1527"*, i64, i64) local_unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1527", %"struct.Eigen::internal::product_evaluator.1527"* %0, i64 0, i32 0, i32 0
  %5 = load %"class.Eigen::Matrix.123"*, %"class.Eigen::Matrix.123"** %4, align 8, !tbaa !11, !noalias !1036
  %6 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %5, i64 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8, !tbaa !41, !noalias !1036
  %8 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %5, i64 0, i32 0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8, !tbaa !43, !noalias !1036
  %10 = mul nsw i64 %9, %1
  %11 = getelementptr inbounds i32, i32* %7, i64 %10
  %12 = icmp ne i32* %11, null
  %13 = icmp slt i64 %9, 0
  %14 = and i1 %13, %12
  br i1 %14, label %15, label %16, !prof !722

; <label>:15:                                     ; preds = %3
  tail call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEELi0EEC2EPKill, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.24, i64 0, i64 0), i32 175, i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.25, i64 0, i64 0)) #13, !noalias !1036
  unreachable

; <label>:16:                                     ; preds = %3
  %17 = icmp ugt i64 %1, 5
  br i1 %17, label %18, label %19, !prof !439

; <label>:18:                                     ; preds = %16
  tail call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !1036
  unreachable

; <label>:19:                                     ; preds = %16
  %20 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1527", %"struct.Eigen::internal::product_evaluator.1527"* %0, i64 0, i32 1
  %21 = bitcast %"class.Eigen::Matrix.32"** %20 to %"class.Eigen::DenseBase.35"**
  %22 = load %"class.Eigen::DenseBase.35"*, %"class.Eigen::DenseBase.35"** %21, align 8, !tbaa !11
  %23 = bitcast %"class.Eigen::DenseBase.35"* %22 to i32**
  %24 = load i32*, i32** %23, align 8, !tbaa !35, !noalias !1039
  %25 = getelementptr inbounds %"class.Eigen::DenseBase.35", %"class.Eigen::DenseBase.35"* %22, i64 8
  %26 = bitcast %"class.Eigen::DenseBase.35"* %25 to i64*
  %27 = load i64, i64* %26, align 8, !tbaa !37, !noalias !1039
  %28 = mul nsw i64 %27, %2
  %29 = getelementptr inbounds i32, i32* %24, i64 %28
  %30 = icmp ne i32* %29, null
  %31 = icmp slt i64 %27, 0
  %32 = and i1 %31, %30
  br i1 %32, label %33, label %34, !prof !722

; <label>:33:                                     ; preds = %19
  tail call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEELi0EEC2EPKill, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.24, i64 0, i64 0), i32 175, i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.25, i64 0, i64 0)) #13, !noalias !1039
  unreachable

; <label>:34:                                     ; preds = %19
  %35 = icmp ugt i64 %2, 46
  br i1 %35, label %36, label %37, !prof !439

; <label>:36:                                     ; preds = %34
  tail call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !1039
  unreachable

; <label>:37:                                     ; preds = %34
  %38 = icmp eq i64 %9, %27
  br i1 %38, label %40, label %39

; <label>:39:                                     ; preds = %37
  tail call void @__assert_rtn(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__func__._ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIddEEKNS_7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS5_IdLin1ELi1ELi0ELin1ELi1EEELi0EEEKS7_EC2ERS9_RSA_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.3, i64 0, i64 0), i32 110, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.4, i64 0, i64 0)) #13, !noalias !1042
  unreachable

; <label>:40:                                     ; preds = %37
  %41 = icmp eq i64 %9, 0
  br i1 %41, label %533, label %42

; <label>:42:                                     ; preds = %40
  %43 = icmp sgt i64 %9, 0
  br i1 %43, label %45, label %44

; <label>:44:                                     ; preds = %42
  tail call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZNK5Eigen9DenseBaseINS_12CwiseUnaryOpINS_8internal14scalar_abs2_opIdEEKNS_13CwiseBinaryOpINS2_20scalar_difference_opIddEEKNS_7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS9_IdLin1ELi1ELi0ELin1ELi1EEELi0EEEKSB_EEEEE5reduxINS2_13scalar_sum_opIddEEEEdRKT_, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.6, i64 0, i64 0), i32 413, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.7, i64 0, i64 0)) #13
  unreachable

; <label>:45:                                     ; preds = %42
  %46 = and i64 %9, -8
  %47 = and i64 %9, -4
  %48 = add i64 %9, 3
  %49 = icmp ugt i64 %48, 6
  br i1 %49, label %50, label %364

; <label>:50:                                     ; preds = %45
  %51 = bitcast i32* %11 to <4 x i32>*
  %52 = load <4 x i32>, <4 x i32>* %51, align 1, !tbaa !11
  %53 = bitcast i32* %29 to <4 x i32>*
  %54 = load <4 x i32>, <4 x i32>* %53, align 1, !tbaa !11
  %55 = mul <4 x i32> %54, %52
  %56 = icmp sgt i64 %47, 4
  br i1 %56, label %57, label %205

; <label>:57:                                     ; preds = %50
  %58 = getelementptr inbounds i32, i32* %11, i64 4
  %59 = bitcast i32* %58 to <4 x i32>*
  %60 = load <4 x i32>, <4 x i32>* %59, align 1, !tbaa !11
  %61 = getelementptr inbounds i32, i32* %29, i64 4
  %62 = bitcast i32* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 1, !tbaa !11
  %64 = mul <4 x i32> %63, %60
  %65 = icmp sgt i64 %46, 8
  br i1 %65, label %66, label %113

; <label>:66:                                     ; preds = %57
  %67 = add i64 %46, -9
  %68 = lshr i64 %67, 3
  %69 = add nuw nsw i64 %68, 1
  %70 = and i64 %69, 3
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %100, label %72

; <label>:72:                                     ; preds = %66
  br label %73

; <label>:73:                                     ; preds = %73, %72
  %74 = phi i64 [ %96, %73 ], [ 8, %72 ]
  %75 = phi i64 [ %74, %73 ], [ 0, %72 ]
  %76 = phi <4 x i32> [ %86, %73 ], [ %55, %72 ]
  %77 = phi <4 x i32> [ %95, %73 ], [ %64, %72 ]
  %78 = phi i64 [ %97, %73 ], [ %70, %72 ]
  %79 = getelementptr inbounds i32, i32* %11, i64 %74
  %80 = bitcast i32* %79 to <4 x i32>*
  %81 = load <4 x i32>, <4 x i32>* %80, align 1, !tbaa !11
  %82 = getelementptr inbounds i32, i32* %29, i64 %74
  %83 = bitcast i32* %82 to <4 x i32>*
  %84 = load <4 x i32>, <4 x i32>* %83, align 1, !tbaa !11
  %85 = mul <4 x i32> %84, %81
  %86 = add <4 x i32> %85, %76
  %87 = add nuw nsw i64 %75, 12
  %88 = getelementptr inbounds i32, i32* %11, i64 %87
  %89 = bitcast i32* %88 to <4 x i32>*
  %90 = load <4 x i32>, <4 x i32>* %89, align 1, !tbaa !11
  %91 = getelementptr inbounds i32, i32* %29, i64 %87
  %92 = bitcast i32* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 1, !tbaa !11
  %94 = mul <4 x i32> %93, %90
  %95 = add <4 x i32> %94, %77
  %96 = add nuw nsw i64 %74, 8
  %97 = add i64 %78, -1
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %73, !llvm.loop !1045

; <label>:99:                                     ; preds = %73
  br label %100

; <label>:100:                                    ; preds = %66, %99
  %101 = phi i64 [ 8, %66 ], [ %96, %99 ]
  %102 = phi i64 [ 0, %66 ], [ %74, %99 ]
  %103 = phi <4 x i32> [ %55, %66 ], [ %86, %99 ]
  %104 = phi <4 x i32> [ %64, %66 ], [ %95, %99 ]
  %105 = phi <4 x i32> [ undef, %66 ], [ %86, %99 ]
  %106 = phi <4 x i32> [ undef, %66 ], [ %95, %99 ]
  %107 = icmp ult i64 %67, 24
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %100
  br label %118

; <label>:109:                                    ; preds = %118
  br label %110

; <label>:110:                                    ; preds = %100, %109
  %111 = phi <4 x i32> [ %105, %100 ], [ %184, %109 ]
  %112 = phi <4 x i32> [ %106, %100 ], [ %193, %109 ]
  br label %113

; <label>:113:                                    ; preds = %110, %57
  %114 = phi <4 x i32> [ %64, %57 ], [ %112, %110 ]
  %115 = phi <4 x i32> [ %55, %57 ], [ %111, %110 ]
  %116 = add <4 x i32> %115, %114
  %117 = icmp sgt i64 %47, %46
  br i1 %117, label %196, label %205

; <label>:118:                                    ; preds = %118, %108
  %119 = phi i64 [ %101, %108 ], [ %194, %118 ]
  %120 = phi i64 [ %102, %108 ], [ %176, %118 ]
  %121 = phi <4 x i32> [ %103, %108 ], [ %184, %118 ]
  %122 = phi <4 x i32> [ %104, %108 ], [ %193, %118 ]
  %123 = getelementptr inbounds i32, i32* %11, i64 %119
  %124 = bitcast i32* %123 to <4 x i32>*
  %125 = load <4 x i32>, <4 x i32>* %124, align 1, !tbaa !11
  %126 = getelementptr inbounds i32, i32* %29, i64 %119
  %127 = bitcast i32* %126 to <4 x i32>*
  %128 = load <4 x i32>, <4 x i32>* %127, align 1, !tbaa !11
  %129 = mul <4 x i32> %128, %125
  %130 = add <4 x i32> %129, %121
  %131 = add nuw nsw i64 %120, 12
  %132 = getelementptr inbounds i32, i32* %11, i64 %131
  %133 = bitcast i32* %132 to <4 x i32>*
  %134 = load <4 x i32>, <4 x i32>* %133, align 1, !tbaa !11
  %135 = getelementptr inbounds i32, i32* %29, i64 %131
  %136 = bitcast i32* %135 to <4 x i32>*
  %137 = load <4 x i32>, <4 x i32>* %136, align 1, !tbaa !11
  %138 = mul <4 x i32> %137, %134
  %139 = add <4 x i32> %138, %122
  %140 = add nuw nsw i64 %119, 8
  %141 = getelementptr inbounds i32, i32* %11, i64 %140
  %142 = bitcast i32* %141 to <4 x i32>*
  %143 = load <4 x i32>, <4 x i32>* %142, align 1, !tbaa !11
  %144 = getelementptr inbounds i32, i32* %29, i64 %140
  %145 = bitcast i32* %144 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 1, !tbaa !11
  %147 = mul <4 x i32> %146, %143
  %148 = add <4 x i32> %147, %130
  %149 = add nuw nsw i64 %119, 12
  %150 = getelementptr inbounds i32, i32* %11, i64 %149
  %151 = bitcast i32* %150 to <4 x i32>*
  %152 = load <4 x i32>, <4 x i32>* %151, align 1, !tbaa !11
  %153 = getelementptr inbounds i32, i32* %29, i64 %149
  %154 = bitcast i32* %153 to <4 x i32>*
  %155 = load <4 x i32>, <4 x i32>* %154, align 1, !tbaa !11
  %156 = mul <4 x i32> %155, %152
  %157 = add <4 x i32> %156, %139
  %158 = add nsw i64 %119, 16
  %159 = getelementptr inbounds i32, i32* %11, i64 %158
  %160 = bitcast i32* %159 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 1, !tbaa !11
  %162 = getelementptr inbounds i32, i32* %29, i64 %158
  %163 = bitcast i32* %162 to <4 x i32>*
  %164 = load <4 x i32>, <4 x i32>* %163, align 1, !tbaa !11
  %165 = mul <4 x i32> %164, %161
  %166 = add <4 x i32> %165, %148
  %167 = add nsw i64 %119, 20
  %168 = getelementptr inbounds i32, i32* %11, i64 %167
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 1, !tbaa !11
  %171 = getelementptr inbounds i32, i32* %29, i64 %167
  %172 = bitcast i32* %171 to <4 x i32>*
  %173 = load <4 x i32>, <4 x i32>* %172, align 1, !tbaa !11
  %174 = mul <4 x i32> %173, %170
  %175 = add <4 x i32> %174, %157
  %176 = add nsw i64 %119, 24
  %177 = getelementptr inbounds i32, i32* %11, i64 %176
  %178 = bitcast i32* %177 to <4 x i32>*
  %179 = load <4 x i32>, <4 x i32>* %178, align 1, !tbaa !11
  %180 = getelementptr inbounds i32, i32* %29, i64 %176
  %181 = bitcast i32* %180 to <4 x i32>*
  %182 = load <4 x i32>, <4 x i32>* %181, align 1, !tbaa !11
  %183 = mul <4 x i32> %182, %179
  %184 = add <4 x i32> %183, %166
  %185 = add nsw i64 %119, 28
  %186 = getelementptr inbounds i32, i32* %11, i64 %185
  %187 = bitcast i32* %186 to <4 x i32>*
  %188 = load <4 x i32>, <4 x i32>* %187, align 1, !tbaa !11
  %189 = getelementptr inbounds i32, i32* %29, i64 %185
  %190 = bitcast i32* %189 to <4 x i32>*
  %191 = load <4 x i32>, <4 x i32>* %190, align 1, !tbaa !11
  %192 = mul <4 x i32> %191, %188
  %193 = add <4 x i32> %192, %175
  %194 = add nsw i64 %119, 32
  %195 = icmp slt i64 %194, %46
  br i1 %195, label %118, label %109

; <label>:196:                                    ; preds = %113
  %197 = getelementptr inbounds i32, i32* %11, i64 %46
  %198 = bitcast i32* %197 to <4 x i32>*
  %199 = load <4 x i32>, <4 x i32>* %198, align 1, !tbaa !11
  %200 = getelementptr inbounds i32, i32* %29, i64 %46
  %201 = bitcast i32* %200 to <4 x i32>*
  %202 = load <4 x i32>, <4 x i32>* %201, align 1, !tbaa !11
  %203 = mul <4 x i32> %202, %199
  %204 = add <4 x i32> %203, %116
  br label %205

; <label>:205:                                    ; preds = %196, %113, %50
  %206 = phi <4 x i32> [ %55, %50 ], [ %204, %196 ], [ %116, %113 ]
  %207 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %206, <4 x i32> %206) #11
  %208 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %207, <4 x i32> %207) #11
  %209 = extractelement <4 x i32> %208, i32 0
  %210 = icmp sgt i64 %9, %47
  br i1 %210, label %211, label %533

; <label>:211:                                    ; preds = %205
  %212 = sub i64 %9, %47
  %213 = icmp ult i64 %212, 16
  br i1 %213, label %350, label %214

; <label>:214:                                    ; preds = %211
  %215 = and i64 %212, -16
  %216 = icmp eq i64 %215, 0
  %217 = add i64 %47, %215
  br i1 %216, label %350, label %218

; <label>:218:                                    ; preds = %214
  %219 = insertelement <8 x i32> <i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %209, i32 0
  %220 = add i64 %215, -16
  %221 = lshr exact i64 %220, 4
  %222 = add nuw nsw i64 %221, 1
  %223 = and i64 %222, 3
  %224 = icmp eq i64 %223, 0
  br i1 %224, label %252, label %225

; <label>:225:                                    ; preds = %218
  br label %226

; <label>:226:                                    ; preds = %226, %225
  %227 = phi i64 [ 0, %225 ], [ %248, %226 ]
  %228 = phi <8 x i32> [ %219, %225 ], [ %246, %226 ]
  %229 = phi <8 x i32> [ zeroinitializer, %225 ], [ %247, %226 ]
  %230 = phi i64 [ %223, %225 ], [ %249, %226 ]
  %231 = add i64 %47, %227
  %232 = getelementptr inbounds i32, i32* %11, i64 %231
  %233 = bitcast i32* %232 to <8 x i32>*
  %234 = load <8 x i32>, <8 x i32>* %233, align 4, !tbaa !33
  %235 = getelementptr i32, i32* %232, i64 8
  %236 = bitcast i32* %235 to <8 x i32>*
  %237 = load <8 x i32>, <8 x i32>* %236, align 4, !tbaa !33
  %238 = getelementptr inbounds i32, i32* %29, i64 %231
  %239 = bitcast i32* %238 to <8 x i32>*
  %240 = load <8 x i32>, <8 x i32>* %239, align 4, !tbaa !33
  %241 = getelementptr i32, i32* %238, i64 8
  %242 = bitcast i32* %241 to <8 x i32>*
  %243 = load <8 x i32>, <8 x i32>* %242, align 4, !tbaa !33
  %244 = mul nsw <8 x i32> %240, %234
  %245 = mul nsw <8 x i32> %243, %237
  %246 = add nsw <8 x i32> %244, %228
  %247 = add nsw <8 x i32> %245, %229
  %248 = add i64 %227, 16
  %249 = add i64 %230, -1
  %250 = icmp eq i64 %249, 0
  br i1 %250, label %251, label %226, !llvm.loop !1046

; <label>:251:                                    ; preds = %226
  br label %252

; <label>:252:                                    ; preds = %218, %251
  %253 = phi <8 x i32> [ undef, %218 ], [ %246, %251 ]
  %254 = phi <8 x i32> [ undef, %218 ], [ %247, %251 ]
  %255 = phi i64 [ 0, %218 ], [ %248, %251 ]
  %256 = phi <8 x i32> [ %219, %218 ], [ %246, %251 ]
  %257 = phi <8 x i32> [ zeroinitializer, %218 ], [ %247, %251 ]
  %258 = icmp ult i64 %220, 48
  br i1 %258, label %338, label %259

; <label>:259:                                    ; preds = %252
  br label %260

; <label>:260:                                    ; preds = %260, %259
  %261 = phi i64 [ %255, %259 ], [ %335, %260 ]
  %262 = phi <8 x i32> [ %256, %259 ], [ %333, %260 ]
  %263 = phi <8 x i32> [ %257, %259 ], [ %334, %260 ]
  %264 = add i64 %47, %261
  %265 = getelementptr inbounds i32, i32* %11, i64 %264
  %266 = bitcast i32* %265 to <8 x i32>*
  %267 = load <8 x i32>, <8 x i32>* %266, align 4, !tbaa !33
  %268 = getelementptr i32, i32* %265, i64 8
  %269 = bitcast i32* %268 to <8 x i32>*
  %270 = load <8 x i32>, <8 x i32>* %269, align 4, !tbaa !33
  %271 = getelementptr inbounds i32, i32* %29, i64 %264
  %272 = bitcast i32* %271 to <8 x i32>*
  %273 = load <8 x i32>, <8 x i32>* %272, align 4, !tbaa !33
  %274 = getelementptr i32, i32* %271, i64 8
  %275 = bitcast i32* %274 to <8 x i32>*
  %276 = load <8 x i32>, <8 x i32>* %275, align 4, !tbaa !33
  %277 = mul nsw <8 x i32> %273, %267
  %278 = mul nsw <8 x i32> %276, %270
  %279 = add nsw <8 x i32> %277, %262
  %280 = add nsw <8 x i32> %278, %263
  %281 = add i64 %261, 16
  %282 = add i64 %47, %281
  %283 = getelementptr inbounds i32, i32* %11, i64 %282
  %284 = bitcast i32* %283 to <8 x i32>*
  %285 = load <8 x i32>, <8 x i32>* %284, align 4, !tbaa !33
  %286 = getelementptr i32, i32* %283, i64 8
  %287 = bitcast i32* %286 to <8 x i32>*
  %288 = load <8 x i32>, <8 x i32>* %287, align 4, !tbaa !33
  %289 = getelementptr inbounds i32, i32* %29, i64 %282
  %290 = bitcast i32* %289 to <8 x i32>*
  %291 = load <8 x i32>, <8 x i32>* %290, align 4, !tbaa !33
  %292 = getelementptr i32, i32* %289, i64 8
  %293 = bitcast i32* %292 to <8 x i32>*
  %294 = load <8 x i32>, <8 x i32>* %293, align 4, !tbaa !33
  %295 = mul nsw <8 x i32> %291, %285
  %296 = mul nsw <8 x i32> %294, %288
  %297 = add nsw <8 x i32> %295, %279
  %298 = add nsw <8 x i32> %296, %280
  %299 = add i64 %261, 32
  %300 = add i64 %47, %299
  %301 = getelementptr inbounds i32, i32* %11, i64 %300
  %302 = bitcast i32* %301 to <8 x i32>*
  %303 = load <8 x i32>, <8 x i32>* %302, align 4, !tbaa !33
  %304 = getelementptr i32, i32* %301, i64 8
  %305 = bitcast i32* %304 to <8 x i32>*
  %306 = load <8 x i32>, <8 x i32>* %305, align 4, !tbaa !33
  %307 = getelementptr inbounds i32, i32* %29, i64 %300
  %308 = bitcast i32* %307 to <8 x i32>*
  %309 = load <8 x i32>, <8 x i32>* %308, align 4, !tbaa !33
  %310 = getelementptr i32, i32* %307, i64 8
  %311 = bitcast i32* %310 to <8 x i32>*
  %312 = load <8 x i32>, <8 x i32>* %311, align 4, !tbaa !33
  %313 = mul nsw <8 x i32> %309, %303
  %314 = mul nsw <8 x i32> %312, %306
  %315 = add nsw <8 x i32> %313, %297
  %316 = add nsw <8 x i32> %314, %298
  %317 = add i64 %261, 48
  %318 = add i64 %47, %317
  %319 = getelementptr inbounds i32, i32* %11, i64 %318
  %320 = bitcast i32* %319 to <8 x i32>*
  %321 = load <8 x i32>, <8 x i32>* %320, align 4, !tbaa !33
  %322 = getelementptr i32, i32* %319, i64 8
  %323 = bitcast i32* %322 to <8 x i32>*
  %324 = load <8 x i32>, <8 x i32>* %323, align 4, !tbaa !33
  %325 = getelementptr inbounds i32, i32* %29, i64 %318
  %326 = bitcast i32* %325 to <8 x i32>*
  %327 = load <8 x i32>, <8 x i32>* %326, align 4, !tbaa !33
  %328 = getelementptr i32, i32* %325, i64 8
  %329 = bitcast i32* %328 to <8 x i32>*
  %330 = load <8 x i32>, <8 x i32>* %329, align 4, !tbaa !33
  %331 = mul nsw <8 x i32> %327, %321
  %332 = mul nsw <8 x i32> %330, %324
  %333 = add nsw <8 x i32> %331, %315
  %334 = add nsw <8 x i32> %332, %316
  %335 = add i64 %261, 64
  %336 = icmp eq i64 %335, %215
  br i1 %336, label %337, label %260, !llvm.loop !1047

; <label>:337:                                    ; preds = %260
  br label %338

; <label>:338:                                    ; preds = %252, %337
  %339 = phi <8 x i32> [ %253, %252 ], [ %333, %337 ]
  %340 = phi <8 x i32> [ %254, %252 ], [ %334, %337 ]
  %341 = add <8 x i32> %340, %339
  %342 = shufflevector <8 x i32> %341, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %343 = add <8 x i32> %341, %342
  %344 = shufflevector <8 x i32> %343, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %345 = add <8 x i32> %343, %344
  %346 = shufflevector <8 x i32> %345, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %347 = add <8 x i32> %345, %346
  %348 = extractelement <8 x i32> %347, i32 0
  %349 = icmp eq i64 %212, %215
  br i1 %349, label %533, label %350

; <label>:350:                                    ; preds = %338, %214, %211
  %351 = phi i64 [ %47, %214 ], [ %47, %211 ], [ %217, %338 ]
  %352 = phi i32 [ %209, %214 ], [ %209, %211 ], [ %348, %338 ]
  br label %353

; <label>:353:                                    ; preds = %350, %353
  %354 = phi i64 [ %362, %353 ], [ %351, %350 ]
  %355 = phi i32 [ %361, %353 ], [ %352, %350 ]
  %356 = getelementptr inbounds i32, i32* %11, i64 %354
  %357 = load i32, i32* %356, align 4, !tbaa !33
  %358 = getelementptr inbounds i32, i32* %29, i64 %354
  %359 = load i32, i32* %358, align 4, !tbaa !33
  %360 = mul nsw i32 %359, %357
  %361 = add nsw i32 %360, %355
  %362 = add nsw i64 %354, 1
  %363 = icmp eq i64 %362, %9
  br i1 %363, label %531, label %353, !llvm.loop !1048

; <label>:364:                                    ; preds = %45
  %365 = load i32, i32* %11, align 4, !tbaa !33
  %366 = load i32, i32* %29, align 4, !tbaa !33
  %367 = mul nsw i32 %366, %365
  %368 = icmp sgt i64 %9, 1
  br i1 %368, label %369, label %533

; <label>:369:                                    ; preds = %364
  %370 = add i64 %9, -1
  %371 = icmp ult i64 %370, 32
  br i1 %371, label %517, label %372

; <label>:372:                                    ; preds = %369
  %373 = and i64 %370, -32
  %374 = icmp eq i64 %373, 0
  %375 = or i64 %373, 1
  br i1 %374, label %517, label %376

; <label>:376:                                    ; preds = %372
  %377 = insertelement <8 x i32> <i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %367, i32 0
  %378 = add i64 %373, -32
  %379 = lshr exact i64 %378, 5
  %380 = and i64 %379, 1
  %381 = icmp eq i64 %380, 0
  br i1 %381, label %382, label %413

; <label>:382:                                    ; preds = %376
  br label %383

; <label>:383:                                    ; preds = %382
  %384 = getelementptr inbounds i32, i32* %11, i64 1
  %385 = bitcast i32* %384 to <8 x i32>*
  %386 = load <8 x i32>, <8 x i32>* %385, align 4, !tbaa !33
  %387 = getelementptr i32, i32* %384, i64 8
  %388 = bitcast i32* %387 to <8 x i32>*
  %389 = load <8 x i32>, <8 x i32>* %388, align 4, !tbaa !33
  %390 = getelementptr i32, i32* %384, i64 16
  %391 = bitcast i32* %390 to <8 x i32>*
  %392 = load <8 x i32>, <8 x i32>* %391, align 4, !tbaa !33
  %393 = getelementptr i32, i32* %384, i64 24
  %394 = bitcast i32* %393 to <8 x i32>*
  %395 = load <8 x i32>, <8 x i32>* %394, align 4, !tbaa !33
  %396 = getelementptr inbounds i32, i32* %29, i64 1
  %397 = bitcast i32* %396 to <8 x i32>*
  %398 = load <8 x i32>, <8 x i32>* %397, align 4, !tbaa !33
  %399 = getelementptr i32, i32* %396, i64 8
  %400 = bitcast i32* %399 to <8 x i32>*
  %401 = load <8 x i32>, <8 x i32>* %400, align 4, !tbaa !33
  %402 = getelementptr i32, i32* %396, i64 16
  %403 = bitcast i32* %402 to <8 x i32>*
  %404 = load <8 x i32>, <8 x i32>* %403, align 4, !tbaa !33
  %405 = getelementptr i32, i32* %396, i64 24
  %406 = bitcast i32* %405 to <8 x i32>*
  %407 = load <8 x i32>, <8 x i32>* %406, align 4, !tbaa !33
  %408 = mul nsw <8 x i32> %398, %386
  %409 = mul nsw <8 x i32> %401, %389
  %410 = mul nsw <8 x i32> %404, %392
  %411 = mul nsw <8 x i32> %407, %395
  %412 = add nsw <8 x i32> %408, %377
  br label %413

; <label>:413:                                    ; preds = %383, %376
  %414 = phi <8 x i32> [ undef, %376 ], [ %412, %383 ]
  %415 = phi <8 x i32> [ undef, %376 ], [ %409, %383 ]
  %416 = phi <8 x i32> [ undef, %376 ], [ %410, %383 ]
  %417 = phi <8 x i32> [ undef, %376 ], [ %411, %383 ]
  %418 = phi i64 [ 0, %376 ], [ 32, %383 ]
  %419 = phi <8 x i32> [ %377, %376 ], [ %412, %383 ]
  %420 = phi <8 x i32> [ zeroinitializer, %376 ], [ %409, %383 ]
  %421 = phi <8 x i32> [ zeroinitializer, %376 ], [ %410, %383 ]
  %422 = phi <8 x i32> [ zeroinitializer, %376 ], [ %411, %383 ]
  %423 = icmp eq i64 %379, 0
  br i1 %423, label %501, label %424

; <label>:424:                                    ; preds = %413
  br label %425

; <label>:425:                                    ; preds = %425, %424
  %426 = phi i64 [ %418, %424 ], [ %498, %425 ]
  %427 = phi <8 x i32> [ %419, %424 ], [ %494, %425 ]
  %428 = phi <8 x i32> [ %420, %424 ], [ %495, %425 ]
  %429 = phi <8 x i32> [ %421, %424 ], [ %496, %425 ]
  %430 = phi <8 x i32> [ %422, %424 ], [ %497, %425 ]
  %431 = or i64 %426, 1
  %432 = getelementptr inbounds i32, i32* %11, i64 %431
  %433 = bitcast i32* %432 to <8 x i32>*
  %434 = load <8 x i32>, <8 x i32>* %433, align 4, !tbaa !33
  %435 = getelementptr i32, i32* %432, i64 8
  %436 = bitcast i32* %435 to <8 x i32>*
  %437 = load <8 x i32>, <8 x i32>* %436, align 4, !tbaa !33
  %438 = getelementptr i32, i32* %432, i64 16
  %439 = bitcast i32* %438 to <8 x i32>*
  %440 = load <8 x i32>, <8 x i32>* %439, align 4, !tbaa !33
  %441 = getelementptr i32, i32* %432, i64 24
  %442 = bitcast i32* %441 to <8 x i32>*
  %443 = load <8 x i32>, <8 x i32>* %442, align 4, !tbaa !33
  %444 = getelementptr inbounds i32, i32* %29, i64 %431
  %445 = bitcast i32* %444 to <8 x i32>*
  %446 = load <8 x i32>, <8 x i32>* %445, align 4, !tbaa !33
  %447 = getelementptr i32, i32* %444, i64 8
  %448 = bitcast i32* %447 to <8 x i32>*
  %449 = load <8 x i32>, <8 x i32>* %448, align 4, !tbaa !33
  %450 = getelementptr i32, i32* %444, i64 16
  %451 = bitcast i32* %450 to <8 x i32>*
  %452 = load <8 x i32>, <8 x i32>* %451, align 4, !tbaa !33
  %453 = getelementptr i32, i32* %444, i64 24
  %454 = bitcast i32* %453 to <8 x i32>*
  %455 = load <8 x i32>, <8 x i32>* %454, align 4, !tbaa !33
  %456 = mul nsw <8 x i32> %446, %434
  %457 = mul nsw <8 x i32> %449, %437
  %458 = mul nsw <8 x i32> %452, %440
  %459 = mul nsw <8 x i32> %455, %443
  %460 = add nsw <8 x i32> %456, %427
  %461 = add nsw <8 x i32> %457, %428
  %462 = add nsw <8 x i32> %458, %429
  %463 = add nsw <8 x i32> %459, %430
  %464 = add i64 %426, 32
  %465 = or i64 %464, 1
  %466 = getelementptr inbounds i32, i32* %11, i64 %465
  %467 = bitcast i32* %466 to <8 x i32>*
  %468 = load <8 x i32>, <8 x i32>* %467, align 4, !tbaa !33
  %469 = getelementptr i32, i32* %466, i64 8
  %470 = bitcast i32* %469 to <8 x i32>*
  %471 = load <8 x i32>, <8 x i32>* %470, align 4, !tbaa !33
  %472 = getelementptr i32, i32* %466, i64 16
  %473 = bitcast i32* %472 to <8 x i32>*
  %474 = load <8 x i32>, <8 x i32>* %473, align 4, !tbaa !33
  %475 = getelementptr i32, i32* %466, i64 24
  %476 = bitcast i32* %475 to <8 x i32>*
  %477 = load <8 x i32>, <8 x i32>* %476, align 4, !tbaa !33
  %478 = getelementptr inbounds i32, i32* %29, i64 %465
  %479 = bitcast i32* %478 to <8 x i32>*
  %480 = load <8 x i32>, <8 x i32>* %479, align 4, !tbaa !33
  %481 = getelementptr i32, i32* %478, i64 8
  %482 = bitcast i32* %481 to <8 x i32>*
  %483 = load <8 x i32>, <8 x i32>* %482, align 4, !tbaa !33
  %484 = getelementptr i32, i32* %478, i64 16
  %485 = bitcast i32* %484 to <8 x i32>*
  %486 = load <8 x i32>, <8 x i32>* %485, align 4, !tbaa !33
  %487 = getelementptr i32, i32* %478, i64 24
  %488 = bitcast i32* %487 to <8 x i32>*
  %489 = load <8 x i32>, <8 x i32>* %488, align 4, !tbaa !33
  %490 = mul nsw <8 x i32> %480, %468
  %491 = mul nsw <8 x i32> %483, %471
  %492 = mul nsw <8 x i32> %486, %474
  %493 = mul nsw <8 x i32> %489, %477
  %494 = add nsw <8 x i32> %490, %460
  %495 = add nsw <8 x i32> %491, %461
  %496 = add nsw <8 x i32> %492, %462
  %497 = add nsw <8 x i32> %493, %463
  %498 = add i64 %426, 64
  %499 = icmp eq i64 %498, %373
  br i1 %499, label %500, label %425, !llvm.loop !1049

; <label>:500:                                    ; preds = %425
  br label %501

; <label>:501:                                    ; preds = %413, %500
  %502 = phi <8 x i32> [ %414, %413 ], [ %494, %500 ]
  %503 = phi <8 x i32> [ %415, %413 ], [ %495, %500 ]
  %504 = phi <8 x i32> [ %416, %413 ], [ %496, %500 ]
  %505 = phi <8 x i32> [ %417, %413 ], [ %497, %500 ]
  %506 = add <8 x i32> %503, %502
  %507 = add <8 x i32> %504, %506
  %508 = add <8 x i32> %505, %507
  %509 = shufflevector <8 x i32> %508, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %510 = add <8 x i32> %508, %509
  %511 = shufflevector <8 x i32> %510, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %512 = add <8 x i32> %510, %511
  %513 = shufflevector <8 x i32> %512, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %514 = add <8 x i32> %512, %513
  %515 = extractelement <8 x i32> %514, i32 0
  %516 = icmp eq i64 %370, %373
  br i1 %516, label %533, label %517

; <label>:517:                                    ; preds = %501, %372, %369
  %518 = phi i64 [ 1, %372 ], [ 1, %369 ], [ %375, %501 ]
  %519 = phi i32 [ %367, %372 ], [ %367, %369 ], [ %515, %501 ]
  br label %520

; <label>:520:                                    ; preds = %517, %520
  %521 = phi i64 [ %529, %520 ], [ %518, %517 ]
  %522 = phi i32 [ %528, %520 ], [ %519, %517 ]
  %523 = getelementptr inbounds i32, i32* %11, i64 %521
  %524 = load i32, i32* %523, align 4, !tbaa !33
  %525 = getelementptr inbounds i32, i32* %29, i64 %521
  %526 = load i32, i32* %525, align 4, !tbaa !33
  %527 = mul nsw i32 %526, %524
  %528 = add nsw i32 %527, %522
  %529 = add nuw nsw i64 %521, 1
  %530 = icmp eq i64 %529, %9
  br i1 %530, label %532, label %520, !llvm.loop !1050

; <label>:531:                                    ; preds = %353
  br label %533

; <label>:532:                                    ; preds = %520
  br label %533

; <label>:533:                                    ; preds = %532, %531, %501, %338, %364, %205, %40
  %534 = phi i32 [ 0, %40 ], [ %209, %205 ], [ %367, %364 ], [ %348, %338 ], [ %515, %501 ], [ %361, %531 ], [ %528, %532 ]
  ret i32 %534
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS3_IiLin1ELi47ELi0ELin1ELi47EEENS_10DenseShapeESB_Li8EE6evalToINS3_IiLi47ELi47ELi0ELi47ELi47EEEEEvRT_RKS9_RKSA_(%"class.Eigen::Matrix.63"* dereferenceable(8836), %"class.Eigen::Product.430"* dereferenceable(16), %"class.Eigen::Matrix.32"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.Eigen::Product.1582", align 8
  %5 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %2, i64 0, i32 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8, !tbaa !37
  %9 = add nsw i64 %8, 94
  %10 = icmp slt i64 %9, 20
  %11 = icmp sgt i64 %8, 0
  %12 = and i1 %11, %10
  br i1 %12, label %13, label %26

; <label>:13:                                     ; preds = %3
  %14 = bitcast %"class.Eigen::Product.1582"* %4 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %14) #11
  %15 = bitcast %"class.Eigen::Product.430"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %14, i8* nonnull %15, i64 16, i32 8, i1 false) #11
  %16 = getelementptr inbounds %"class.Eigen::Product.1582", %"class.Eigen::Product.1582"* %4, i64 0, i32 1
  store %"class.Eigen::Matrix.32"* %2, %"class.Eigen::Matrix.32"** %16, align 8, !tbaa !11, !alias.scope !1051
  %17 = getelementptr inbounds %"class.Eigen::Product.430", %"class.Eigen::Product.430"* %1, i64 0, i32 1
  %18 = bitcast %"class.Eigen::Transpose.296"* %17 to %"class.Eigen::PlainObjectBase.124"**
  %19 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %18, align 8, !tbaa !11, !noalias !1051
  %20 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %19, i64 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8, !tbaa !43, !noalias !1051
  %22 = icmp eq i64 %21, %8
  br i1 %22, label %24, label %23, !prof !10

; <label>:23:                                     ; preds = %13
  tail call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS1_IdLin1ELi1ELi0ELin1ELi1EEELi0EEC2ERKS2_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 97, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2, i64 0, i64 0)) #13, !noalias !1051
  unreachable

; <label>:24:                                     ; preds = %13
  %25 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %5, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %25) #11
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLi47ELi47ELi0ELi47ELi47EEENS_7ProductINS4_INS2_IiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS2_IiLin1ELi47ELi0ELin1ELi47EEELi1EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.63"* nonnull dereferenceable(8836) %0, %"class.Eigen::Product.1582"* nonnull dereferenceable(24) %4, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %5) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %25) #11
  call void @llvm.lifetime.end(i64 24, i8* nonnull %14) #11
  br label %59

; <label>:26:                                     ; preds = %3
  %27 = bitcast %"class.Eigen::Matrix.63"* %0 to %"class.Eigen::DenseBase.66"*
  %28 = bitcast %"class.Eigen::Matrix.63"* %0 to i8*
  %29 = ptrtoint %"class.Eigen::Matrix.63"* %0 to i64
  %30 = and i64 %29, 3
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %33, label %32

; <label>:32:                                     ; preds = %26
  tail call void @llvm.memset.p0i8.i64(i8* nonnull %28, i8 0, i64 8836, i32 4, i1 false) #11
  br label %57

; <label>:33:                                     ; preds = %26
  %34 = lshr i64 %29, 2
  %35 = sub nsw i64 0, %34
  %36 = and i64 %35, 3
  %37 = sub nsw i64 2209, %36
  %38 = and i64 %37, 2236
  %39 = or i64 %38, %36
  %40 = icmp eq i64 %36, 0
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %33
  %42 = shl nuw nsw i64 %36, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull %28, i8 0, i64 %42, i32 4, i1 false) #11
  br label %43

; <label>:43:                                     ; preds = %41, %33
  %44 = phi i64 [ %36, %41 ], [ 0, %33 ]
  %45 = shl nuw nsw i64 %44, 2
  %46 = getelementptr inbounds %"class.Eigen::DenseBase.66", %"class.Eigen::DenseBase.66"* %27, i64 %45, i32 0
  %47 = add nuw nsw i64 %39, 4611686018427387903
  %48 = sub nsw i64 %47, %44
  %49 = lshr i64 %48, 2
  %50 = shl i64 %49, 4
  %51 = add i64 %50, 16
  tail call void @llvm.memset.p0i8.i64(i8* %46, i8 0, i64 %51, i32 16, i1 false) #11
  %52 = icmp ult i64 %39, 2209
  br i1 %52, label %53, label %57

; <label>:53:                                     ; preds = %43
  %54 = shl nuw nsw i64 %39, 2
  %55 = getelementptr inbounds %"class.Eigen::DenseBase.66", %"class.Eigen::DenseBase.66"* %27, i64 %54, i32 0
  %56 = sub nsw i64 8836, %54
  tail call void @llvm.memset.p0i8.i64(i8* %55, i8 0, i64 %56, i32 4, i1 false) #11
  br label %57

; <label>:57:                                     ; preds = %32, %43, %53
  %58 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start(i64 4, i8* nonnull %58) #11
  store i32 1, i32* %6, align 4, !tbaa !33
  call void @_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS3_IiLin1ELi47ELi0ELin1ELi47EEENS_10DenseShapeESB_Li8EE13scaleAndAddToINS3_IiLi47ELi47ELi0ELi47ELi47EEEEEvRT_RKS9_RKSA_RKi(%"class.Eigen::Matrix.63"* nonnull dereferenceable(8836) %0, %"class.Eigen::Product.430"* nonnull dereferenceable(16) %1, %"class.Eigen::Matrix.32"* nonnull dereferenceable(16) %2, i32* nonnull dereferenceable(4) %6)
  call void @llvm.lifetime.end(i64 4, i8* nonnull %58) #11
  br label %59

; <label>:59:                                     ; preds = %57, %24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS3_IiLin1ELi47ELi0ELin1ELi47EEENS_10DenseShapeESB_Li8EE13scaleAndAddToINS3_IiLi47ELi47ELi0ELi47ELi47EEEEEvRT_RKS9_RKSA_RKi(%"class.Eigen::Matrix.63"* dereferenceable(8836), %"class.Eigen::Product.430"* dereferenceable(16), %"class.Eigen::Matrix.32"* dereferenceable(16), i32* dereferenceable(4)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.Eigen::Matrix.48", align 8
  %6 = alloca %"class.Eigen::internal::gemm_blocking_space.1624", align 8
  %7 = getelementptr inbounds %"class.Eigen::Product.430", %"class.Eigen::Product.430"* %1, i64 0, i32 1
  %8 = bitcast %"class.Eigen::Transpose.296"* %7 to %"class.Eigen::PlainObjectBase.124"**
  %9 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %8, align 8, !tbaa !11
  %10 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %9, i64 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8, !tbaa !43
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %64, label %13

; <label>:13:                                     ; preds = %4
  %14 = bitcast %"class.Eigen::Matrix.48"* %5 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #11
  %15 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %5, i64 0, i32 0
  %16 = bitcast %"class.Eigen::Product.430"* %1 to %"class.Eigen::DenseBase.434"*
  call void @_ZN5Eigen15PlainObjectBaseINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEEC2INS_7ProductINS1_IiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS1_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEEEERKNS_9DenseBaseIT_EE(%"class.Eigen::PlainObjectBase.49"* nonnull %15, %"class.Eigen::DenseBase.434"* nonnull dereferenceable(1) %16) #11
  %17 = load i32, i32* %3, align 4, !tbaa !33
  %18 = bitcast %"class.Eigen::internal::gemm_blocking_space.1624"* %6 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %18) #11
  %19 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %5, i64 0, i32 0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8, !tbaa !40
  call void @llvm.memset.p0i8.i64(i8* nonnull %18, i8 0, i64 16, i32 8, i1 false) #11
  %21 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1624", %"class.Eigen::internal::gemm_blocking_space.1624"* %6, i64 0, i32 0, i32 2
  %22 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1624", %"class.Eigen::internal::gemm_blocking_space.1624"* %6, i64 0, i32 0, i32 3
  %23 = bitcast i64* %21 to <2 x i64>*
  store <2 x i64> <i64 47, i64 47>, <2 x i64>* %23, align 8, !tbaa !32
  %24 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1624", %"class.Eigen::internal::gemm_blocking_space.1624"* %6, i64 0, i32 0, i32 4
  store i64 %20, i64* %24, align 8, !tbaa !193
  call void @_ZN5Eigen8internal37evaluateProductBlockingSizesHeuristicIiiLi1ElEEvRT2_S3_S3_S2_(i64* nonnull dereferenceable(8) %24, i64* nonnull dereferenceable(8) %21, i64* nonnull dereferenceable(8) %22, i64 1) #11
  %25 = load i64, i64* %21, align 8, !tbaa !460
  %26 = load i64, i64* %24, align 8, !tbaa !193
  %27 = mul nsw i64 %26, %25
  %28 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1624", %"class.Eigen::internal::gemm_blocking_space.1624"* %6, i64 0, i32 1
  store i64 %27, i64* %28, align 8, !tbaa !1054
  %29 = load i64, i64* %22, align 8, !tbaa !461
  %30 = mul nsw i64 %29, %26
  %31 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1624", %"class.Eigen::internal::gemm_blocking_space.1624"* %6, i64 0, i32 2
  store i64 %30, i64* %31, align 8, !tbaa !1056
  %32 = load i64, i64* %19, align 8, !tbaa !40
  %33 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %5, i64 0, i32 0, i32 0, i32 0
  %34 = load i32*, i32** %33, align 8, !tbaa !38
  %35 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %2, i64 0, i32 0, i32 0, i32 0
  %36 = load i32*, i32** %35, align 8, !tbaa !35
  %37 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %2, i64 0, i32 0, i32 0, i32 1
  %38 = load i64, i64* %37, align 8, !tbaa !37
  %39 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %40 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1624", %"class.Eigen::internal::gemm_blocking_space.1624"* %6, i64 0, i32 0
  call void @_ZN5Eigen8internal29general_matrix_matrix_productIliLi0ELb0EiLi0ELb0ELi0EE3runElllPKilS4_lPiliRNS0_15level3_blockingIiiEEPNS0_16GemmParallelInfoIlEE(i64 47, i64 47, i64 %32, i32* nonnull %34, i64 47, i32* nonnull %36, i64 %38, i32* nonnull %39, i64 47, i32 %17, %"class.Eigen::internal::level3_blocking"* nonnull dereferenceable(40) %40, %"struct.Eigen::internal::GemmParallelInfo"* null) #11
  %41 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1624", %"class.Eigen::internal::gemm_blocking_space.1624"* %6, i64 0, i32 0, i32 0
  %42 = load i32*, i32** %41, align 8, !tbaa !195
  %43 = icmp eq i32* %42, null
  br i1 %43, label %48, label %44

; <label>:44:                                     ; preds = %13
  %45 = getelementptr inbounds i32, i32* %42, i64 -2
  %46 = bitcast i32* %45 to i8**
  %47 = load i8*, i8** %46, align 8, !tbaa !29
  call void @free(i8* %47) #11
  br label %48

; <label>:48:                                     ; preds = %44, %13
  %49 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1624", %"class.Eigen::internal::gemm_blocking_space.1624"* %6, i64 0, i32 0, i32 1
  %50 = load i32*, i32** %49, align 8, !tbaa !196
  %51 = icmp eq i32* %50, null
  br i1 %51, label %56, label %52

; <label>:52:                                     ; preds = %48
  %53 = getelementptr inbounds i32, i32* %50, i64 -2
  %54 = bitcast i32* %53 to i8**
  %55 = load i8*, i8** %54, align 8, !tbaa !29
  call void @free(i8* %55) #11
  br label %56

; <label>:56:                                     ; preds = %48, %52
  call void @llvm.lifetime.end(i64 56, i8* nonnull %18) #11
  %57 = load i32*, i32** %33, align 8, !tbaa !38
  %58 = icmp eq i32* %57, null
  br i1 %58, label %63, label %59

; <label>:59:                                     ; preds = %56
  %60 = getelementptr inbounds i32, i32* %57, i64 -2
  %61 = bitcast i32* %60 to i8**
  %62 = load i8*, i8** %61, align 8, !tbaa !29
  call void @free(i8* %62) #11
  br label %63

; <label>:63:                                     ; preds = %56, %59
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #11
  br label %64

; <label>:64:                                     ; preds = %4, %63
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLi47ELi47ELi0ELi47ELi47EEENS_7ProductINS4_INS2_IiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS2_IiLin1ELi47ELi0ELin1ELi47EEELi1EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.63"* dereferenceable(8836), %"class.Eigen::Product.1582"* dereferenceable(24), %"struct.Eigen::internal::assign_op.512"* dereferenceable(1)) local_unnamed_addr #6 {
  %4 = alloca %"struct.Eigen::internal::evaluator.1589", align 8
  %5 = alloca %"struct.Eigen::internal::evaluator.537", align 8
  %6 = alloca %"class.Eigen::internal::generic_dense_assignment_kernel.1592", align 8
  %7 = bitcast %"struct.Eigen::internal::evaluator.1589"* %4 to i8*
  call void @llvm.lifetime.start(i64 64, i8* nonnull %7) #11
  %8 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1589", %"struct.Eigen::internal::evaluator.1589"* %4, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull %7, i8 0, i64 16, i32 8, i1 false) #11
  %9 = getelementptr inbounds %"class.Eigen::Product.1582", %"class.Eigen::Product.1582"* %1, i64 0, i32 0, i32 1
  %10 = bitcast %"class.Eigen::Transpose.296"* %9 to %"class.Eigen::PlainObjectBase.124"**
  %11 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %10, align 8, !tbaa !11
  %12 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %11, i64 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8, !tbaa !43
  %14 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1589", %"struct.Eigen::internal::evaluator.1589"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %15 = icmp eq i64 %13, 0
  br i1 %15, label %16, label %18

; <label>:16:                                     ; preds = %3
  %17 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1589", %"struct.Eigen::internal::evaluator.1589"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %36

; <label>:18:                                     ; preds = %3
  %19 = icmp sgt i64 %13, -1
  br i1 %19, label %21, label %20, !prof !10

; <label>:20:                                     ; preds = %18
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:21:                                     ; preds = %18
  %22 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1589", %"struct.Eigen::internal::evaluator.1589"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = mul i64 %13, 188
  %24 = add i64 %23, 32
  %25 = tail call i8* @malloc(i64 %24) #14
  %26 = icmp eq i8* %25, null
  br i1 %26, label %34, label %27

; <label>:27:                                     ; preds = %21
  %28 = ptrtoint i8* %25 to i64
  %29 = add i64 %28, 32
  %30 = and i64 %29, -32
  %31 = inttoptr i64 %30 to i8**
  %32 = getelementptr inbounds i8*, i8** %31, i64 -1
  store i8* %25, i8** %32, align 8, !tbaa !29
  %33 = inttoptr i64 %30 to i32*
  br label %34

; <label>:34:                                     ; preds = %27, %21
  %35 = phi i32* [ %33, %27 ], [ null, %21 ]
  store i32* %35, i32** %22, align 8, !tbaa !38
  store i64 %13, i64* %14, align 8, !tbaa !40
  br label %36

; <label>:36:                                     ; preds = %16, %34
  %37 = phi i32** [ %17, %16 ], [ %22, %34 ]
  %38 = getelementptr inbounds %"class.Eigen::Product.1582", %"class.Eigen::Product.1582"* %1, i64 0, i32 0, i32 0
  %39 = load %"class.Eigen::Matrix.77"*, %"class.Eigen::Matrix.77"** %38, align 8, !tbaa !11
  call void @_ZN5Eigen8internal20generic_product_implINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeES8_Li8EE6evalToINS2_IiLi47ELin1ELi0ELi47ELin1EEEEEvRT_RKS3_RKS7_(%"class.Eigen::Matrix.48"* nonnull dereferenceable(16) %8, %"class.Eigen::Matrix.77"* nonnull dereferenceable(1128) %39, %"class.Eigen::Transpose.296"* nonnull dereferenceable(8) %9) #11
  %40 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1589", %"struct.Eigen::internal::evaluator.1589"* %4, i64 0, i32 0, i32 1
  %41 = getelementptr inbounds %"class.Eigen::Product.1582", %"class.Eigen::Product.1582"* %1, i64 0, i32 1
  %42 = bitcast %"class.Eigen::Matrix.32"** %41 to i64*
  %43 = load i64, i64* %42, align 8, !tbaa !11
  %44 = bitcast %"class.Eigen::Matrix.32"** %40 to i64*
  store i64 %43, i64* %44, align 8, !tbaa !11
  %45 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1589", %"struct.Eigen::internal::evaluator.1589"* %4, i64 0, i32 0, i32 2
  %46 = bitcast %"struct.Eigen::internal::evaluator.1589"* %4 to i64*
  %47 = load i64, i64* %46, align 8, !tbaa !38
  %48 = bitcast %"struct.Eigen::internal::evaluator.529"* %45 to i64*
  store i64 %47, i64* %48, align 8, !tbaa !475
  %49 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1589", %"struct.Eigen::internal::evaluator.1589"* %4, i64 0, i32 0, i32 3
  %50 = inttoptr i64 %43 to %"class.Eigen::Matrix.32"*
  %51 = inttoptr i64 %43 to i64*
  %52 = load i64, i64* %51, align 8, !tbaa !35
  %53 = bitcast %"struct.Eigen::internal::evaluator.523"* %49 to i64*
  store i64 %52, i64* %53, align 8, !tbaa !813
  %54 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %50, i64 0, i32 0, i32 0, i32 1
  %55 = load i64, i64* %54, align 8, !tbaa !37
  %56 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1589", %"struct.Eigen::internal::evaluator.1589"* %4, i64 0, i32 0, i32 3, i32 0, i32 1, i32 0
  store i64 %55, i64* %56, align 8, !tbaa !59
  %57 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1589", %"struct.Eigen::internal::evaluator.1589"* %4, i64 0, i32 0, i32 4
  %58 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %10, align 8, !tbaa !11
  %59 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %58, i64 0, i32 0, i32 1
  %60 = load i64, i64* %59, align 8, !tbaa !43
  store i64 %60, i64* %57, align 8, !tbaa !1057
  %61 = bitcast %"struct.Eigen::internal::evaluator.537"* %5 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %61) #11
  %62 = getelementptr inbounds %"struct.Eigen::internal::evaluator.537", %"struct.Eigen::internal::evaluator.537"* %5, i64 0, i32 0, i32 0
  %63 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  store i32* %63, i32** %62, align 8, !tbaa !1060
  %64 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1592"* %6 to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %64) #11
  %65 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1592", %"class.Eigen::internal::generic_dense_assignment_kernel.1592"* %6, i64 0, i32 0
  store %"struct.Eigen::internal::evaluator.537"* %5, %"struct.Eigen::internal::evaluator.537"** %65, align 8, !tbaa !11
  %66 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1592", %"class.Eigen::internal::generic_dense_assignment_kernel.1592"* %6, i64 0, i32 1
  store %"struct.Eigen::internal::evaluator.1589"* %4, %"struct.Eigen::internal::evaluator.1589"** %66, align 8, !tbaa !11
  %67 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1592", %"class.Eigen::internal::generic_dense_assignment_kernel.1592"* %6, i64 0, i32 2
  store %"struct.Eigen::internal::assign_op.512"* %2, %"struct.Eigen::internal::assign_op.512"** %67, align 8, !tbaa !11
  %68 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1592", %"class.Eigen::internal::generic_dense_assignment_kernel.1592"* %6, i64 0, i32 3
  store %"class.Eigen::Matrix.63"* %0, %"class.Eigen::Matrix.63"** %68, align 8, !tbaa !11
  call void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi47ELi47ELi0ELi47ELi47EEEEENS3_INS_7ProductINS7_INS4_IiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS4_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS4_IiLin1ELi47ELi0ELin1ELi47EEELi1EEEEENS0_9assign_opIiiEELi0EEELi4ELi0EE3runERSJ_(%"class.Eigen::internal::generic_dense_assignment_kernel.1592"* nonnull dereferenceable(32) %6)
  call void @llvm.lifetime.end(i64 32, i8* nonnull %64) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %61) #11
  %69 = load i32*, i32** %37, align 8, !tbaa !38
  %70 = icmp eq i32* %69, null
  br i1 %70, label %75, label %71

; <label>:71:                                     ; preds = %36
  %72 = getelementptr inbounds i32, i32* %69, i64 -2
  %73 = bitcast i32* %72 to i8**
  %74 = load i8*, i8** %73, align 8, !tbaa !29
  call void @free(i8* %74) #11
  br label %75

; <label>:75:                                     ; preds = %36, %71
  call void @llvm.lifetime.end(i64 64, i8* nonnull %7) #11
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi47ELi47ELi0ELi47ELi47EEEEENS3_INS_7ProductINS7_INS4_IiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS4_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS4_IiLin1ELi47ELi0ELin1ELi47EEELi1EEEEENS0_9assign_opIiiEELi0EEELi4ELi0EE3runERSJ_(%"class.Eigen::internal::generic_dense_assignment_kernel.1592"* dereferenceable(32)) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1592", %"class.Eigen::internal::generic_dense_assignment_kernel.1592"* %0, i64 0, i32 3
  %3 = bitcast %"class.Eigen::Matrix.63"** %2 to i64*
  %4 = load i64, i64* %3, align 8, !tbaa !11
  %5 = and i64 %4, 3
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %28, label %7

; <label>:7:                                      ; preds = %1
  %8 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1592"* %0 to %"struct.Eigen::internal::evaluator.538"**
  %9 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1592", %"class.Eigen::internal::generic_dense_assignment_kernel.1592"* %0, i64 0, i32 1
  %10 = bitcast %"struct.Eigen::internal::evaluator.1589"** %9 to %"struct.Eigen::internal::product_evaluator.1590"**
  br label %11

; <label>:11:                                     ; preds = %14, %7
  %12 = phi i64 [ 0, %7 ], [ %15, %14 ]
  %13 = mul nuw nsw i64 %12, 47
  br label %17

; <label>:14:                                     ; preds = %17
  %15 = add nuw nsw i64 %12, 1
  %16 = icmp eq i64 %15, 47
  br i1 %16, label %193, label %11

; <label>:17:                                     ; preds = %17, %11
  %18 = phi i64 [ 0, %11 ], [ %26, %17 ]
  %19 = load %"struct.Eigen::internal::evaluator.538"*, %"struct.Eigen::internal::evaluator.538"** %8, align 8, !tbaa !11
  %20 = getelementptr inbounds %"struct.Eigen::internal::evaluator.538", %"struct.Eigen::internal::evaluator.538"* %19, i64 0, i32 0
  %21 = load i32*, i32** %20, align 8, !tbaa !1060
  %22 = add nuw nsw i64 %18, %13
  %23 = getelementptr inbounds i32, i32* %21, i64 %22
  %24 = load %"struct.Eigen::internal::product_evaluator.1590"*, %"struct.Eigen::internal::product_evaluator.1590"** %10, align 8, !tbaa !11
  %25 = tail call i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS3_IiLin1ELi47ELi0ELin1ELi47EEELi1EEELi8ENS_10DenseShapeESC_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.1590"* %24, i64 %18, i64 %12) #11
  store i32 %25, i32* %23, align 4, !tbaa !33
  %26 = add nuw nsw i64 %18, 1
  %27 = icmp eq i64 %26, 47
  br i1 %27, label %14, label %17

; <label>:28:                                     ; preds = %1
  %29 = lshr i64 %4, 2
  %30 = sub nsw i64 0, %29
  %31 = and i64 %30, 3
  %32 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1592"* %0 to %"struct.Eigen::internal::evaluator.538"**
  %33 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1592", %"class.Eigen::internal::generic_dense_assignment_kernel.1592"* %0, i64 0, i32 1
  %34 = bitcast %"struct.Eigen::internal::evaluator.1589"** %33 to %"struct.Eigen::internal::product_evaluator.1590"**
  br label %35

; <label>:35:                                     ; preds = %176, %28
  %36 = phi i64 [ 0, %28 ], [ %179, %176 ]
  %37 = phi i64 [ %31, %28 ], [ %178, %176 ]
  %38 = sub nsw i64 47, %37
  %39 = and i64 %38, -4
  %40 = add nsw i64 %39, %37
  %41 = icmp sgt i64 %37, 0
  br i1 %41, label %42, label %45

; <label>:42:                                     ; preds = %35
  %43 = mul nuw nsw i64 %36, 47
  br label %49

; <label>:44:                                     ; preds = %49
  br label %45

; <label>:45:                                     ; preds = %44, %35
  %46 = icmp sgt i64 %39, 0
  br i1 %46, label %47, label %61

; <label>:47:                                     ; preds = %45
  %48 = mul nuw nsw i64 %36, 47
  br label %65

; <label>:49:                                     ; preds = %49, %42
  %50 = phi i64 [ 0, %42 ], [ %58, %49 ]
  %51 = load %"struct.Eigen::internal::evaluator.538"*, %"struct.Eigen::internal::evaluator.538"** %32, align 8, !tbaa !11
  %52 = getelementptr inbounds %"struct.Eigen::internal::evaluator.538", %"struct.Eigen::internal::evaluator.538"* %51, i64 0, i32 0
  %53 = load i32*, i32** %52, align 8, !tbaa !1060
  %54 = add nuw nsw i64 %50, %43
  %55 = getelementptr inbounds i32, i32* %53, i64 %54
  %56 = load %"struct.Eigen::internal::product_evaluator.1590"*, %"struct.Eigen::internal::product_evaluator.1590"** %34, align 8, !tbaa !11
  %57 = tail call i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS3_IiLin1ELi47ELi0ELin1ELi47EEELi1EEELi8ENS_10DenseShapeESC_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.1590"* %56, i64 %50, i64 %36) #11
  store i32 %57, i32* %55, align 4, !tbaa !33
  %58 = add nuw nsw i64 %50, 1
  %59 = icmp eq i64 %58, %37
  br i1 %59, label %44, label %49

; <label>:60:                                     ; preds = %170
  br label %61

; <label>:61:                                     ; preds = %60, %45
  %62 = icmp slt i64 %40, 47
  br i1 %62, label %63, label %176

; <label>:63:                                     ; preds = %61
  %64 = mul nuw nsw i64 %36, 47
  br label %181

; <label>:65:                                     ; preds = %47, %170
  %66 = phi i64 [ %37, %47 ], [ %173, %170 ]
  %67 = load %"struct.Eigen::internal::evaluator.538"*, %"struct.Eigen::internal::evaluator.538"** %32, align 8, !tbaa !11
  %68 = getelementptr inbounds %"struct.Eigen::internal::evaluator.538", %"struct.Eigen::internal::evaluator.538"* %67, i64 0, i32 0
  %69 = load i32*, i32** %68, align 8, !tbaa !1060
  %70 = add nsw i64 %66, %48
  %71 = getelementptr inbounds i32, i32* %69, i64 %70
  %72 = load %"struct.Eigen::internal::product_evaluator.1590"*, %"struct.Eigen::internal::product_evaluator.1590"** %34, align 8, !tbaa !11
  %73 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1590", %"struct.Eigen::internal::product_evaluator.1590"* %72, i64 0, i32 4
  %74 = load i64, i64* %73, align 8, !tbaa !1057
  %75 = icmp sgt i64 %74, 0
  br i1 %75, label %76, label %170

; <label>:76:                                     ; preds = %65
  %77 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1590", %"struct.Eigen::internal::product_evaluator.1590"* %72, i64 0, i32 2, i32 0, i32 0
  %78 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1590", %"struct.Eigen::internal::product_evaluator.1590"* %72, i64 0, i32 3, i32 0, i32 0
  %79 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1590", %"struct.Eigen::internal::product_evaluator.1590"* %72, i64 0, i32 3, i32 0, i32 1, i32 0
  %80 = load i32*, i32** %77, align 8, !tbaa !475
  %81 = getelementptr inbounds i32, i32* %80, i64 %66
  %82 = load i32*, i32** %78, align 8, !tbaa !813
  %83 = load i64, i64* %79, align 8, !tbaa !59
  %84 = mul nsw i64 %83, %36
  %85 = add i64 %74, -1
  %86 = and i64 %74, 3
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %108, label %88

; <label>:88:                                     ; preds = %76
  br label %89

; <label>:89:                                     ; preds = %89, %88
  %90 = phi <4 x i32> [ zeroinitializer, %88 ], [ %103, %89 ]
  %91 = phi i64 [ 0, %88 ], [ %104, %89 ]
  %92 = phi i64 [ %86, %88 ], [ %105, %89 ]
  %93 = mul nuw nsw i64 %91, 47
  %94 = getelementptr inbounds i32, i32* %81, i64 %93
  %95 = bitcast i32* %94 to <4 x i32>*
  %96 = load <4 x i32>, <4 x i32>* %95, align 1, !tbaa !11
  %97 = add nsw i64 %91, %84
  %98 = getelementptr inbounds i32, i32* %82, i64 %97
  %99 = load i32, i32* %98, align 4, !tbaa !33
  %100 = insertelement <4 x i32> undef, i32 %99, i32 0
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> zeroinitializer
  %102 = mul <4 x i32> %101, %96
  %103 = add <4 x i32> %102, %90
  %104 = add nuw nsw i64 %91, 1
  %105 = add i64 %92, -1
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %107, label %89, !llvm.loop !1062

; <label>:107:                                    ; preds = %89
  br label %108

; <label>:108:                                    ; preds = %76, %107
  %109 = phi <4 x i32> [ undef, %76 ], [ %103, %107 ]
  %110 = phi <4 x i32> [ zeroinitializer, %76 ], [ %103, %107 ]
  %111 = phi i64 [ 0, %76 ], [ %104, %107 ]
  %112 = icmp ult i64 %85, 3
  br i1 %112, label %167, label %113

; <label>:113:                                    ; preds = %108
  br label %114

; <label>:114:                                    ; preds = %114, %113
  %115 = phi <4 x i32> [ %110, %113 ], [ %163, %114 ]
  %116 = phi i64 [ %111, %113 ], [ %164, %114 ]
  %117 = mul nuw nsw i64 %116, 47
  %118 = getelementptr inbounds i32, i32* %81, i64 %117
  %119 = bitcast i32* %118 to <4 x i32>*
  %120 = load <4 x i32>, <4 x i32>* %119, align 1, !tbaa !11
  %121 = add nsw i64 %116, %84
  %122 = getelementptr inbounds i32, i32* %82, i64 %121
  %123 = load i32, i32* %122, align 4, !tbaa !33
  %124 = insertelement <4 x i32> undef, i32 %123, i32 0
  %125 = shufflevector <4 x i32> %124, <4 x i32> undef, <4 x i32> zeroinitializer
  %126 = mul <4 x i32> %125, %120
  %127 = add <4 x i32> %126, %115
  %128 = add nuw nsw i64 %116, 1
  %129 = mul nuw nsw i64 %128, 47
  %130 = getelementptr inbounds i32, i32* %81, i64 %129
  %131 = bitcast i32* %130 to <4 x i32>*
  %132 = load <4 x i32>, <4 x i32>* %131, align 1, !tbaa !11
  %133 = add nsw i64 %128, %84
  %134 = getelementptr inbounds i32, i32* %82, i64 %133
  %135 = load i32, i32* %134, align 4, !tbaa !33
  %136 = insertelement <4 x i32> undef, i32 %135, i32 0
  %137 = shufflevector <4 x i32> %136, <4 x i32> undef, <4 x i32> zeroinitializer
  %138 = mul <4 x i32> %137, %132
  %139 = add <4 x i32> %138, %127
  %140 = add nsw i64 %116, 2
  %141 = mul nuw nsw i64 %140, 47
  %142 = getelementptr inbounds i32, i32* %81, i64 %141
  %143 = bitcast i32* %142 to <4 x i32>*
  %144 = load <4 x i32>, <4 x i32>* %143, align 1, !tbaa !11
  %145 = add nsw i64 %140, %84
  %146 = getelementptr inbounds i32, i32* %82, i64 %145
  %147 = load i32, i32* %146, align 4, !tbaa !33
  %148 = insertelement <4 x i32> undef, i32 %147, i32 0
  %149 = shufflevector <4 x i32> %148, <4 x i32> undef, <4 x i32> zeroinitializer
  %150 = mul <4 x i32> %149, %144
  %151 = add <4 x i32> %150, %139
  %152 = add nsw i64 %116, 3
  %153 = mul nuw nsw i64 %152, 47
  %154 = getelementptr inbounds i32, i32* %81, i64 %153
  %155 = bitcast i32* %154 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 1, !tbaa !11
  %157 = add nsw i64 %152, %84
  %158 = getelementptr inbounds i32, i32* %82, i64 %157
  %159 = load i32, i32* %158, align 4, !tbaa !33
  %160 = insertelement <4 x i32> undef, i32 %159, i32 0
  %161 = shufflevector <4 x i32> %160, <4 x i32> undef, <4 x i32> zeroinitializer
  %162 = mul <4 x i32> %161, %156
  %163 = add <4 x i32> %162, %151
  %164 = add nsw i64 %116, 4
  %165 = icmp eq i64 %164, %74
  br i1 %165, label %166, label %114

; <label>:166:                                    ; preds = %114
  br label %167

; <label>:167:                                    ; preds = %108, %166
  %168 = phi <4 x i32> [ %109, %108 ], [ %163, %166 ]
  %169 = bitcast <4 x i32> %168 to <2 x i64>
  br label %170

; <label>:170:                                    ; preds = %65, %167
  %171 = phi <2 x i64> [ zeroinitializer, %65 ], [ %169, %167 ]
  %172 = bitcast i32* %71 to <2 x i64>*
  store <2 x i64> %171, <2 x i64>* %172, align 16, !tbaa !11
  %173 = add nsw i64 %66, 4
  %174 = icmp slt i64 %173, %40
  br i1 %174, label %65, label %60

; <label>:175:                                    ; preds = %181
  br label %176

; <label>:176:                                    ; preds = %175, %61
  %177 = add nsw i64 %37, 1
  %178 = srem i64 %177, 4
  %179 = add nuw nsw i64 %36, 1
  %180 = icmp eq i64 %179, 47
  br i1 %180, label %192, label %35

; <label>:181:                                    ; preds = %181, %63
  %182 = phi i64 [ %40, %63 ], [ %190, %181 ]
  %183 = load %"struct.Eigen::internal::evaluator.538"*, %"struct.Eigen::internal::evaluator.538"** %32, align 8, !tbaa !11
  %184 = getelementptr inbounds %"struct.Eigen::internal::evaluator.538", %"struct.Eigen::internal::evaluator.538"* %183, i64 0, i32 0
  %185 = load i32*, i32** %184, align 8, !tbaa !1060
  %186 = add nsw i64 %182, %64
  %187 = getelementptr inbounds i32, i32* %185, i64 %186
  %188 = load %"struct.Eigen::internal::product_evaluator.1590"*, %"struct.Eigen::internal::product_evaluator.1590"** %34, align 8, !tbaa !11
  %189 = tail call i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS3_IiLin1ELi47ELi0ELin1ELi47EEELi1EEELi8ENS_10DenseShapeESC_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.1590"* %188, i64 %182, i64 %36) #11
  store i32 %189, i32* %187, align 4, !tbaa !33
  %190 = add nsw i64 %182, 1
  %191 = icmp eq i64 %190, 47
  br i1 %191, label %175, label %181

; <label>:192:                                    ; preds = %176
  br label %194

; <label>:193:                                    ; preds = %14
  br label %194

; <label>:194:                                    ; preds = %193, %192
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal20generic_product_implINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeES8_Li8EE6evalToINS2_IiLi47ELin1ELi0ELi47ELin1EEEEEvRT_RKS3_RKS7_(%"class.Eigen::Matrix.48"* dereferenceable(16), %"class.Eigen::Matrix.77"* dereferenceable(1128), %"class.Eigen::Transpose.296"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.Eigen::Product.1593", align 8
  %5 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8, !tbaa !40
  %9 = add nsw i64 %8, 53
  %10 = icmp slt i64 %9, 20
  br i1 %10, label %11, label %19

; <label>:11:                                     ; preds = %3
  %12 = bitcast %"class.Eigen::Product.1593"* %4 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12) #11
  %13 = bitcast %"class.Eigen::Transpose.296"* %2 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.Eigen::Product.1593", %"class.Eigen::Product.1593"* %4, i64 0, i32 0
  store %"class.Eigen::Matrix.77"* %1, %"class.Eigen::Matrix.77"** %15, align 8
  %16 = getelementptr inbounds %"class.Eigen::Product.1593", %"class.Eigen::Product.1593"* %4, i64 0, i32 1, i32 0
  %17 = bitcast %"class.Eigen::Matrix.123"** %16 to i64*
  store i64 %14, i64* %17, align 8
  %18 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %5, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %18) #11
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS_7ProductINS2_IiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.48"* nonnull dereferenceable(16) %0, %"class.Eigen::Product.1593"* nonnull dereferenceable(16) %4, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %5) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %18) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12) #11
  br label %47

; <label>:19:                                     ; preds = %3
  %20 = icmp sgt i64 %8, -1
  br i1 %20, label %22, label %21, !prof !10

; <label>:21:                                     ; preds = %19
  tail call void @__assert_rtn(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__._ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEENS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEC2EllRKS3_, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.13, i64 0, i64 0), i32 74, i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.14, i64 0, i64 0)) #13, !noalias !1063
  unreachable

; <label>:22:                                     ; preds = %19
  %23 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i32*, i32** %23, align 8, !tbaa !38
  %25 = mul nsw i64 %8, 47
  %26 = sdiv i64 %25, 4
  %27 = shl nsw i64 %26, 2
  %28 = icmp sgt i64 %25, 3
  br i1 %28, label %29, label %37

; <label>:29:                                     ; preds = %22
  %30 = bitcast i32* %24 to i8*
  %31 = icmp sgt i64 %27, 4
  %32 = select i1 %31, i64 %27, i64 4
  %33 = add nuw i64 %32, 4611686018427387903
  %34 = lshr i64 %33, 2
  %35 = shl i64 %34, 4
  %36 = add i64 %35, 16
  tail call void @llvm.memset.p0i8.i64(i8* %30, i8 0, i64 %36, i32 16, i1 false) #11
  br label %37

; <label>:37:                                     ; preds = %29, %22
  %38 = icmp slt i64 %27, %25
  br i1 %38, label %39, label %45

; <label>:39:                                     ; preds = %37
  %40 = getelementptr i32, i32* %24, i64 %27
  %41 = bitcast i32* %40 to i8*
  %42 = mul i64 %8, 188
  %43 = shl i64 %26, 4
  %44 = sub i64 %42, %43
  tail call void @llvm.memset.p0i8.i64(i8* %41, i8 0, i64 %44, i32 4, i1 false) #11
  br label %45

; <label>:45:                                     ; preds = %37, %39
  %46 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start(i64 4, i8* nonnull %46) #11
  store i32 1, i32* %6, align 4, !tbaa !33
  call void @_ZN5Eigen8internal20generic_product_implINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeES8_Li8EE13scaleAndAddToINS2_IiLi47ELin1ELi0ELi47ELin1EEEEEvRT_RKS3_RKS7_RKi(%"class.Eigen::Matrix.48"* nonnull dereferenceable(16) %0, %"class.Eigen::Matrix.77"* nonnull dereferenceable(1128) %1, %"class.Eigen::Transpose.296"* nonnull dereferenceable(8) %2, i32* nonnull dereferenceable(4) %6)
  call void @llvm.lifetime.end(i64 4, i8* nonnull %46) #11
  br label %47

; <label>:47:                                     ; preds = %45, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal20generic_product_implINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeES8_Li8EE13scaleAndAddToINS2_IiLi47ELin1ELi0ELi47ELin1EEEEEvRT_RKS3_RKS7_RKi(%"class.Eigen::Matrix.48"* dereferenceable(16), %"class.Eigen::Matrix.77"* dereferenceable(1128), %"class.Eigen::Transpose.296"* dereferenceable(8), i32* dereferenceable(4)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.Eigen::internal::gemm_blocking_space", align 8
  %6 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i64, i64* %6, align 8, !tbaa !40
  %8 = bitcast %"class.Eigen::Transpose.296"* %2 to %"class.Eigen::PlainObjectBase.124"**
  %9 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %8, align 8, !tbaa !11
  %10 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %9, i64 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8, !tbaa !43
  %12 = icmp eq i64 %7, %11
  br i1 %12, label %14, label %13, !prof !10

; <label>:13:                                     ; preds = %4
  tail call void @__assert_rtn(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__func__._ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EENS_9TransposeIKNS8_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeESI_Li8EE13scaleAndAddToINS8_IiLi47ELin1ELi0ELi47ELin1EEEEEvRT_RKSD_RKSH_RKi, i64 0, i64 0), i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.33, i64 0, i64 0), i32 460, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.34, i64 0, i64 0)) #13
  unreachable

; <label>:14:                                     ; preds = %4
  %15 = icmp eq i64 %7, 0
  br i1 %15, label %58, label %16

; <label>:16:                                     ; preds = %14
  %17 = load i32, i32* %3, align 4, !tbaa !33
  %18 = bitcast %"class.Eigen::internal::gemm_blocking_space"* %5 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %18) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %18, i8 0, i64 16, i32 8, i1 false) #11
  %19 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 0, i32 2
  store i64 47, i64* %19, align 8, !tbaa !460
  %20 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 0, i32 3
  store i64 %7, i64* %20, align 8, !tbaa !461
  %21 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 0, i32 4
  store i64 6, i64* %21, align 8, !tbaa !193
  call void @_ZN5Eigen8internal37evaluateProductBlockingSizesHeuristicIiiLi1ElEEvRT2_S3_S3_S2_(i64* nonnull dereferenceable(8) %21, i64* nonnull dereferenceable(8) %19, i64* nonnull dereferenceable(8) %20, i64 1) #11
  %22 = load i64, i64* %19, align 8, !tbaa !460
  %23 = load i64, i64* %21, align 8, !tbaa !193
  %24 = mul nsw i64 %23, %22
  %25 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 1
  store i64 %24, i64* %25, align 8, !tbaa !462
  %26 = load i64, i64* %20, align 8, !tbaa !461
  %27 = mul nsw i64 %26, %23
  %28 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 2
  store i64 %27, i64* %28, align 8, !tbaa !464
  %29 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %8, align 8, !tbaa !11
  %30 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %29, i64 0, i32 0, i32 1
  %31 = load i64, i64* %30, align 8, !tbaa !43
  %32 = icmp eq i64 %31, -1
  %33 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %9, i64 0, i32 0, i32 1
  %34 = load i64, i64* %33, align 8, !tbaa !43
  %35 = select i1 %32, i64 %34, i64 %31
  %36 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %37 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %9, i64 0, i32 0, i32 0
  %38 = load i32*, i32** %37, align 8, !tbaa !41
  %39 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %0, i64 0, i32 0, i32 0, i32 0
  %40 = load i32*, i32** %39, align 8, !tbaa !38
  %41 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 0
  call void @_ZN5Eigen8internal29general_matrix_matrix_productIliLi0ELb0EiLi1ELb0ELi0EE3runElllPKilS4_lPiliRNS0_15level3_blockingIiiEEPNS0_16GemmParallelInfoIlEE(i64 47, i64 %35, i64 6, i32* nonnull %36, i64 47, i32* nonnull %38, i64 %34, i32* nonnull %40, i64 47, i32 %17, %"class.Eigen::internal::level3_blocking"* nonnull dereferenceable(40) %41, %"struct.Eigen::internal::GemmParallelInfo"* null) #11
  %42 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 0, i32 0
  %43 = load i32*, i32** %42, align 8, !tbaa !195
  %44 = icmp eq i32* %43, null
  br i1 %44, label %49, label %45

; <label>:45:                                     ; preds = %16
  %46 = getelementptr inbounds i32, i32* %43, i64 -2
  %47 = bitcast i32* %46 to i8**
  %48 = load i8*, i8** %47, align 8, !tbaa !29
  call void @free(i8* %48) #11
  br label %49

; <label>:49:                                     ; preds = %45, %16
  %50 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 0, i32 1
  %51 = load i32*, i32** %50, align 8, !tbaa !196
  %52 = icmp eq i32* %51, null
  br i1 %52, label %57, label %53

; <label>:53:                                     ; preds = %49
  %54 = getelementptr inbounds i32, i32* %51, i64 -2
  %55 = bitcast i32* %54 to i8**
  %56 = load i8*, i8** %55, align 8, !tbaa !29
  call void @free(i8* %56) #11
  br label %57

; <label>:57:                                     ; preds = %49, %53
  call void @llvm.lifetime.end(i64 56, i8* nonnull %18) #11
  br label %58

; <label>:58:                                     ; preds = %14, %57
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS_7ProductINS2_IiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.48"* dereferenceable(16), %"class.Eigen::Product.1593"* dereferenceable(16), %"struct.Eigen::internal::assign_op.512"* dereferenceable(1)) local_unnamed_addr #6 {
  %4 = alloca %"struct.Eigen::internal::evaluator.1600", align 8
  %5 = alloca %"struct.Eigen::internal::evaluator.529", align 8
  %6 = alloca %"class.Eigen::internal::generic_dense_assignment_kernel.1603", align 8
  %7 = bitcast %"struct.Eigen::internal::evaluator.1600"* %4 to i8*
  call void @llvm.lifetime.start(i64 64, i8* nonnull %7) #11
  %8 = bitcast %"class.Eigen::Product.1593"* %1 to i64*
  %9 = load i64, i64* %8, align 8, !tbaa !11
  %10 = bitcast %"struct.Eigen::internal::evaluator.1600"* %4 to i64*
  store i64 %9, i64* %10, align 8, !tbaa !11
  %11 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1600", %"struct.Eigen::internal::evaluator.1600"* %4, i64 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.Eigen::Product.1593", %"class.Eigen::Product.1593"* %1, i64 0, i32 1
  %13 = bitcast %"class.Eigen::Transpose.296"* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.Eigen::Transpose.296"* %11 to i64*
  store i64 %14, i64* %15, align 8
  %16 = inttoptr i64 %9 to %"class.Eigen::Matrix.77"*
  %17 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1600", %"struct.Eigen::internal::evaluator.1600"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  store i32* %18, i32** %17, align 8, !tbaa !94
  %19 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1600", %"struct.Eigen::internal::evaluator.1600"* %4, i64 0, i32 0, i32 3, i32 0, i32 1
  %20 = inttoptr i64 %14 to %"class.Eigen::Matrix.123"*
  %21 = inttoptr i64 %14 to i64*
  %22 = load i64, i64* %21, align 8, !tbaa !41
  %23 = bitcast %"struct.Eigen::internal::evaluator.898"* %19 to i64*
  store i64 %22, i64* %23, align 8, !tbaa !468
  %24 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %20, i64 0, i32 0, i32 0, i32 1
  %25 = load i64, i64* %24, align 8, !tbaa !43
  %26 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1600", %"struct.Eigen::internal::evaluator.1600"* %4, i64 0, i32 0, i32 3, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0
  store i64 %25, i64* %26, align 8, !tbaa !59
  %27 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1600", %"struct.Eigen::internal::evaluator.1600"* %4, i64 0, i32 0, i32 4
  store i64 6, i64* %27, align 8, !tbaa !1068
  %28 = inttoptr i64 %14 to %"class.Eigen::PlainObjectBase.124"*
  %29 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %28, i64 0, i32 0, i32 1
  %30 = load i64, i64* %29, align 8, !tbaa !43
  %31 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %0, i64 0, i32 0, i32 0, i32 1
  %32 = load i64, i64* %31, align 8, !tbaa !40
  %33 = icmp eq i64 %32, %30
  br i1 %33, label %34, label %37

; <label>:34:                                     ; preds = %3
  %35 = bitcast %"class.Eigen::Matrix.48"* %0 to i64*
  %36 = load i64, i64* %35, align 8, !tbaa !38
  br label %65

; <label>:37:                                     ; preds = %3
  %38 = icmp sgt i64 %30, -1
  br i1 %38, label %40, label %39, !prof !10

; <label>:39:                                     ; preds = %37
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:40:                                     ; preds = %37
  %41 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %0, i64 0, i32 0, i32 0, i32 0
  %42 = load i32*, i32** %41, align 8, !tbaa !38
  %43 = icmp eq i32* %42, null
  br i1 %43, label %48, label %44

; <label>:44:                                     ; preds = %40
  %45 = getelementptr inbounds i32, i32* %42, i64 -2
  %46 = bitcast i32* %45 to i8**
  %47 = load i8*, i8** %46, align 8, !tbaa !29
  tail call void @free(i8* %47) #11
  br label %48

; <label>:48:                                     ; preds = %44, %40
  %49 = icmp eq i64 %30, 0
  br i1 %49, label %62, label %50

; <label>:50:                                     ; preds = %48
  %51 = mul i64 %30, 188
  %52 = add i64 %51, 32
  %53 = tail call i8* @malloc(i64 %52) #14
  %54 = icmp eq i8* %53, null
  br i1 %54, label %62, label %55

; <label>:55:                                     ; preds = %50
  %56 = ptrtoint i8* %53 to i64
  %57 = add i64 %56, 32
  %58 = and i64 %57, -32
  %59 = inttoptr i64 %58 to i8**
  %60 = getelementptr inbounds i8*, i8** %59, i64 -1
  store i8* %53, i8** %60, align 8, !tbaa !29
  %61 = inttoptr i64 %58 to i32*
  br label %62

; <label>:62:                                     ; preds = %48, %50, %55
  %63 = phi i32* [ %61, %55 ], [ null, %50 ], [ null, %48 ]
  store i32* %63, i32** %41, align 8, !tbaa !38
  store i64 %30, i64* %31, align 8, !tbaa !40
  %64 = ptrtoint i32* %63 to i64
  br label %65

; <label>:65:                                     ; preds = %34, %62
  %66 = phi i64 [ %36, %34 ], [ %64, %62 ]
  %67 = bitcast %"struct.Eigen::internal::evaluator.529"* %5 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %67) #11
  %68 = bitcast %"struct.Eigen::internal::evaluator.529"* %5 to i64*
  store i64 %66, i64* %68, align 8, !tbaa !475
  %69 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1603"* %6 to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %69) #11
  %70 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1603", %"class.Eigen::internal::generic_dense_assignment_kernel.1603"* %6, i64 0, i32 0
  store %"struct.Eigen::internal::evaluator.529"* %5, %"struct.Eigen::internal::evaluator.529"** %70, align 8, !tbaa !11
  %71 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1603", %"class.Eigen::internal::generic_dense_assignment_kernel.1603"* %6, i64 0, i32 1
  store %"struct.Eigen::internal::evaluator.1600"* %4, %"struct.Eigen::internal::evaluator.1600"** %71, align 8, !tbaa !11
  %72 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1603", %"class.Eigen::internal::generic_dense_assignment_kernel.1603"* %6, i64 0, i32 2
  store %"struct.Eigen::internal::assign_op.512"* %2, %"struct.Eigen::internal::assign_op.512"** %72, align 8, !tbaa !11
  %73 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1603", %"class.Eigen::internal::generic_dense_assignment_kernel.1603"* %6, i64 0, i32 3
  store %"class.Eigen::Matrix.48"* %0, %"class.Eigen::Matrix.48"** %73, align 8, !tbaa !11
  call void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEEENS3_INS_7ProductINS4_IiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS4_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEEEENS0_9assign_opIiiEELi0EEELi4ELi0EE3runERSH_(%"class.Eigen::internal::generic_dense_assignment_kernel.1603"* nonnull dereferenceable(32) %6)
  call void @llvm.lifetime.end(i64 32, i8* nonnull %69) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %67) #11
  call void @llvm.lifetime.end(i64 64, i8* nonnull %7) #11
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEEENS3_INS_7ProductINS4_IiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS4_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEEEENS0_9assign_opIiiEELi0EEELi4ELi0EE3runERSH_(%"class.Eigen::internal::generic_dense_assignment_kernel.1603"* dereferenceable(32)) local_unnamed_addr #6 align 2 {
  %2 = alloca %"struct.Eigen::internal::scalar_sum_op", align 1
  %3 = alloca %"class.Eigen::CwiseBinaryOp.916", align 8
  %4 = alloca %"struct.Eigen::internal::scalar_sum_op", align 1
  %5 = alloca %"class.Eigen::CwiseBinaryOp.916", align 8
  %6 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1603", %"class.Eigen::internal::generic_dense_assignment_kernel.1603"* %0, i64 0, i32 3
  %7 = bitcast %"class.Eigen::Matrix.48"** %6 to %"class.Eigen::DenseBase.51"**
  %8 = load %"class.Eigen::DenseBase.51"*, %"class.Eigen::DenseBase.51"** %7, align 8, !tbaa !11
  %9 = getelementptr inbounds %"class.Eigen::DenseBase.51", %"class.Eigen::DenseBase.51"* %8, i64 8
  %10 = bitcast %"class.Eigen::DenseBase.51"* %9 to i64*
  %11 = load i64, i64* %10, align 8, !tbaa !40
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %50

; <label>:13:                                     ; preds = %1
  %14 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1603"* %0 to %"struct.Eigen::internal::evaluator.530"**
  %15 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1603", %"class.Eigen::internal::generic_dense_assignment_kernel.1603"* %0, i64 0, i32 1
  %16 = bitcast %"struct.Eigen::internal::evaluator.1600"** %15 to %"struct.Eigen::internal::product_evaluator.1601"**
  %17 = bitcast %"class.Eigen::CwiseBinaryOp.916"* %3 to i8*
  %18 = bitcast %"class.Eigen::CwiseBinaryOp.916"* %3 to i64*
  %19 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %20 = bitcast %"class.Eigen::Matrix.77"** %19 to %"class.Eigen::DenseBase.80"**
  %21 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  %22 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 0
  %23 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %3, i64 0, i32 1
  %24 = bitcast %"class.Eigen::Block.922"* %23 to i64*
  %25 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %3, i64 0, i32 1, i32 0, i32 0, i32 1
  %26 = bitcast %"class.Eigen::Transpose.296"* %25 to i64*
  %27 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %3, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0
  %28 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %3, i64 0, i32 1, i32 0, i32 0, i32 3, i32 0
  %29 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %3, i64 0, i32 1, i32 0, i32 0, i32 4
  %30 = bitcast %"class.Eigen::CwiseBinaryOp.916"* %3 to %"class.Eigen::DenseBase.919"*
  %31 = getelementptr inbounds %"struct.Eigen::internal::scalar_sum_op", %"struct.Eigen::internal::scalar_sum_op"* %2, i64 0, i32 0
  %32 = bitcast %"class.Eigen::CwiseBinaryOp.916"* %5 to i8*
  %33 = bitcast %"class.Eigen::CwiseBinaryOp.916"* %5 to i64*
  %34 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %35 = bitcast %"class.Eigen::Matrix.77"** %34 to %"class.Eigen::DenseBase.80"**
  %36 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  %37 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 0
  %38 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %5, i64 0, i32 1
  %39 = bitcast %"class.Eigen::Block.922"* %38 to i64*
  %40 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %5, i64 0, i32 1, i32 0, i32 0, i32 1
  %41 = bitcast %"class.Eigen::Transpose.296"* %40 to i64*
  %42 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %5, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0
  %43 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %5, i64 0, i32 1, i32 0, i32 0, i32 3, i32 0
  %44 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.916", %"class.Eigen::CwiseBinaryOp.916"* %5, i64 0, i32 1, i32 0, i32 0, i32 4
  %45 = bitcast %"class.Eigen::CwiseBinaryOp.916"* %5 to %"class.Eigen::DenseBase.919"*
  %46 = getelementptr inbounds %"struct.Eigen::internal::scalar_sum_op", %"struct.Eigen::internal::scalar_sum_op"* %4, i64 0, i32 0
  %47 = bitcast i64* %22 to <2 x i64>*
  %48 = bitcast i64* %37 to <2 x i64>*
  br label %51

; <label>:49:                                     ; preds = %205
  br label %50

; <label>:50:                                     ; preds = %49, %1
  ret void

; <label>:51:                                     ; preds = %13, %205
  %52 = phi i64 [ 0, %13 ], [ %207, %205 ]
  %53 = phi i64 [ 0, %13 ], [ %208, %205 ]
  %54 = sub nsw i64 47, %52
  %55 = and i64 %54, -4
  %56 = add nsw i64 %55, %52
  %57 = icmp sgt i64 %52, 0
  br i1 %57, label %58, label %88

; <label>:58:                                     ; preds = %51
  %59 = mul nsw i64 %53, 47
  br label %60

; <label>:60:                                     ; preds = %73, %58
  %61 = phi i64 [ %85, %73 ], [ 0, %58 ]
  %62 = load %"struct.Eigen::internal::evaluator.530"*, %"struct.Eigen::internal::evaluator.530"** %14, align 8, !tbaa !11
  %63 = getelementptr inbounds %"struct.Eigen::internal::evaluator.530", %"struct.Eigen::internal::evaluator.530"* %62, i64 0, i32 0
  %64 = load i32*, i32** %63, align 8, !tbaa !475
  %65 = load %"struct.Eigen::internal::product_evaluator.1601"*, %"struct.Eigen::internal::product_evaluator.1601"** %16, align 8, !tbaa !11
  call void @llvm.lifetime.start(i64 104, i8* nonnull %17) #11
  %66 = bitcast %"struct.Eigen::internal::product_evaluator.1601"* %65 to %"class.Eigen::DenseBase.80"**
  %67 = load %"class.Eigen::DenseBase.80"*, %"class.Eigen::DenseBase.80"** %66, align 8, !tbaa !11
  %68 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1601", %"struct.Eigen::internal::product_evaluator.1601"* %65, i64 0, i32 1, i32 0
  %69 = load %"class.Eigen::Matrix.123"*, %"class.Eigen::Matrix.123"** %68, align 8, !tbaa !11, !noalias !1070
  %70 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %69, i64 0, i32 0, i32 0, i32 1
  %71 = load i64, i64* %70, align 8, !tbaa !43, !noalias !1070
  %72 = icmp sgt i64 %71, %53
  br i1 %72, label %73, label %92, !prof !10

; <label>:73:                                     ; preds = %60
  %74 = bitcast %"class.Eigen::DenseBase.80"* %67 to %"class.Eigen::Matrix.77"*
  %75 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %74, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %61
  %76 = ptrtoint i32* %75 to i64
  %77 = add nsw i64 %61, %59
  %78 = getelementptr inbounds i32, i32* %64, i64 %77
  %79 = ptrtoint %"class.Eigen::Matrix.123"* %69 to i64
  %80 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %69, i64 0, i32 0, i32 0, i32 0
  %81 = load i32*, i32** %80, align 8, !tbaa !41, !noalias !1070
  %82 = getelementptr inbounds i32, i32* %81, i64 %53
  %83 = ptrtoint i32* %82 to i64
  store i64 %76, i64* %18, align 8, !tbaa !480, !alias.scope !1073
  store %"class.Eigen::DenseBase.80"* %67, %"class.Eigen::DenseBase.80"** %20, align 8
  store i64 %61, i64* %21, align 8
  store <2 x i64> <i64 0, i64 1>, <2 x i64>* %47, align 8
  store i64 %83, i64* %24, align 8, !tbaa !485, !alias.scope !1073
  store i64 %79, i64* %26, align 8
  store i64 0, i64* %27, align 8
  store i64 %53, i64* %28, align 8
  store i64 1, i64* %29, align 8
  call void @llvm.lifetime.start(i64 1, i8* nonnull %31) #11
  %84 = call i32 @_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0EEEEEKNS6_IKNS5_IKNS7_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIiiEEEEiRKT_(%"class.Eigen::DenseBase.919"* nonnull %30, %"struct.Eigen::internal::scalar_sum_op"* nonnull dereferenceable(1) %2) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %31) #11
  call void @llvm.lifetime.end(i64 104, i8* nonnull %17) #11
  store i32 %84, i32* %78, align 4, !tbaa !33
  %85 = add nuw nsw i64 %61, 1
  %86 = icmp slt i64 %85, %52
  br i1 %86, label %60, label %87

; <label>:87:                                     ; preds = %73
  br label %88

; <label>:88:                                     ; preds = %87, %51
  %89 = icmp sgt i64 %55, 0
  br i1 %89, label %90, label %94

; <label>:90:                                     ; preds = %88
  %91 = mul nsw i64 %53, 47
  br label %125

; <label>:92:                                     ; preds = %60
  call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !1070
  unreachable

; <label>:93:                                     ; preds = %125
  br label %94

; <label>:94:                                     ; preds = %93, %88
  %95 = icmp slt i64 %56, 47
  br i1 %95, label %96, label %205

; <label>:96:                                     ; preds = %94
  %97 = mul nsw i64 %53, 47
  br label %98

; <label>:98:                                     ; preds = %111, %96
  %99 = phi i64 [ %123, %111 ], [ %56, %96 ]
  %100 = load %"struct.Eigen::internal::evaluator.530"*, %"struct.Eigen::internal::evaluator.530"** %14, align 8, !tbaa !11
  %101 = getelementptr inbounds %"struct.Eigen::internal::evaluator.530", %"struct.Eigen::internal::evaluator.530"* %100, i64 0, i32 0
  %102 = load i32*, i32** %101, align 8, !tbaa !475
  %103 = load %"struct.Eigen::internal::product_evaluator.1601"*, %"struct.Eigen::internal::product_evaluator.1601"** %16, align 8, !tbaa !11
  call void @llvm.lifetime.start(i64 104, i8* nonnull %32) #11
  %104 = bitcast %"struct.Eigen::internal::product_evaluator.1601"* %103 to %"class.Eigen::DenseBase.80"**
  %105 = load %"class.Eigen::DenseBase.80"*, %"class.Eigen::DenseBase.80"** %104, align 8, !tbaa !11
  %106 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1601", %"struct.Eigen::internal::product_evaluator.1601"* %103, i64 0, i32 1, i32 0
  %107 = load %"class.Eigen::Matrix.123"*, %"class.Eigen::Matrix.123"** %106, align 8, !tbaa !11, !noalias !1076
  %108 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %107, i64 0, i32 0, i32 0, i32 1
  %109 = load i64, i64* %108, align 8, !tbaa !43, !noalias !1076
  %110 = icmp sgt i64 %109, %53
  br i1 %110, label %111, label %210, !prof !10

; <label>:111:                                    ; preds = %98
  %112 = bitcast %"class.Eigen::DenseBase.80"* %105 to %"class.Eigen::Matrix.77"*
  %113 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %112, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %99
  %114 = ptrtoint i32* %113 to i64
  %115 = add nsw i64 %99, %97
  %116 = getelementptr inbounds i32, i32* %102, i64 %115
  %117 = ptrtoint %"class.Eigen::Matrix.123"* %107 to i64
  %118 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %107, i64 0, i32 0, i32 0, i32 0
  %119 = load i32*, i32** %118, align 8, !tbaa !41, !noalias !1076
  %120 = getelementptr inbounds i32, i32* %119, i64 %53
  %121 = ptrtoint i32* %120 to i64
  store i64 %114, i64* %33, align 8, !tbaa !480, !alias.scope !1079
  store %"class.Eigen::DenseBase.80"* %105, %"class.Eigen::DenseBase.80"** %35, align 8
  store i64 %99, i64* %36, align 8
  store <2 x i64> <i64 0, i64 1>, <2 x i64>* %48, align 8
  store i64 %121, i64* %39, align 8, !tbaa !485, !alias.scope !1079
  store i64 %117, i64* %41, align 8
  store i64 0, i64* %42, align 8
  store i64 %53, i64* %43, align 8
  store i64 1, i64* %44, align 8
  call void @llvm.lifetime.start(i64 1, i8* nonnull %46) #11
  %122 = call i32 @_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0EEEEEKNS6_IKNS5_IKNS7_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIiiEEEEiRKT_(%"class.Eigen::DenseBase.919"* nonnull %45, %"struct.Eigen::internal::scalar_sum_op"* nonnull dereferenceable(1) %4) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %46) #11
  call void @llvm.lifetime.end(i64 104, i8* nonnull %32) #11
  store i32 %122, i32* %116, align 4, !tbaa !33
  %123 = add nsw i64 %99, 1
  %124 = icmp slt i64 %123, 47
  br i1 %124, label %98, label %204

; <label>:125:                                    ; preds = %90, %125
  %126 = phi i64 [ %52, %90 ], [ %202, %125 ]
  %127 = load %"struct.Eigen::internal::evaluator.530"*, %"struct.Eigen::internal::evaluator.530"** %14, align 8, !tbaa !11
  %128 = getelementptr inbounds %"struct.Eigen::internal::evaluator.530", %"struct.Eigen::internal::evaluator.530"* %127, i64 0, i32 0
  %129 = load i32*, i32** %128, align 8, !tbaa !475
  %130 = add nsw i64 %126, %91
  %131 = getelementptr inbounds i32, i32* %129, i64 %130
  %132 = load %"struct.Eigen::internal::product_evaluator.1601"*, %"struct.Eigen::internal::product_evaluator.1601"** %16, align 8, !tbaa !11
  %133 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1601", %"struct.Eigen::internal::product_evaluator.1601"* %132, i64 0, i32 2, i32 0, i32 0
  %134 = load i32*, i32** %133, align 8, !tbaa !94
  %135 = getelementptr inbounds i32, i32* %134, i64 %126
  %136 = bitcast i32* %135 to <4 x i32>*
  %137 = load <4 x i32>, <4 x i32>* %136, align 1, !tbaa !11
  %138 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1601", %"struct.Eigen::internal::product_evaluator.1601"* %132, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0, i32 0
  %139 = load i32*, i32** %138, align 8, !tbaa !468
  %140 = getelementptr inbounds i32, i32* %139, i64 %53
  %141 = load i32, i32* %140, align 4, !tbaa !33
  %142 = insertelement <4 x i32> undef, i32 %141, i32 0
  %143 = shufflevector <4 x i32> %142, <4 x i32> undef, <4 x i32> zeroinitializer
  %144 = mul <4 x i32> %143, %137
  %145 = getelementptr inbounds i32, i32* %135, i64 47
  %146 = bitcast i32* %145 to <4 x i32>*
  %147 = load <4 x i32>, <4 x i32>* %146, align 1, !tbaa !11
  %148 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1601", %"struct.Eigen::internal::product_evaluator.1601"* %132, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0
  %149 = load i64, i64* %148, align 8, !tbaa !59
  %150 = add nsw i64 %149, %53
  %151 = getelementptr inbounds i32, i32* %139, i64 %150
  %152 = load i32, i32* %151, align 4, !tbaa !33
  %153 = insertelement <4 x i32> undef, i32 %152, i32 0
  %154 = shufflevector <4 x i32> %153, <4 x i32> undef, <4 x i32> zeroinitializer
  %155 = mul <4 x i32> %154, %147
  %156 = add <4 x i32> %155, %144
  %157 = getelementptr inbounds i32, i32* %135, i64 94
  %158 = bitcast i32* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 1, !tbaa !11
  %160 = shl i64 %149, 1
  %161 = add nsw i64 %160, %53
  %162 = getelementptr inbounds i32, i32* %139, i64 %161
  %163 = load i32, i32* %162, align 4, !tbaa !33
  %164 = insertelement <4 x i32> undef, i32 %163, i32 0
  %165 = shufflevector <4 x i32> %164, <4 x i32> undef, <4 x i32> zeroinitializer
  %166 = mul <4 x i32> %165, %159
  %167 = add <4 x i32> %156, %166
  %168 = getelementptr inbounds i32, i32* %135, i64 141
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 1, !tbaa !11
  %171 = mul nsw i64 %149, 3
  %172 = add nsw i64 %171, %53
  %173 = getelementptr inbounds i32, i32* %139, i64 %172
  %174 = load i32, i32* %173, align 4, !tbaa !33
  %175 = insertelement <4 x i32> undef, i32 %174, i32 0
  %176 = shufflevector <4 x i32> %175, <4 x i32> undef, <4 x i32> zeroinitializer
  %177 = mul <4 x i32> %176, %170
  %178 = add <4 x i32> %167, %177
  %179 = getelementptr inbounds i32, i32* %135, i64 188
  %180 = bitcast i32* %179 to <4 x i32>*
  %181 = load <4 x i32>, <4 x i32>* %180, align 1, !tbaa !11
  %182 = shl i64 %149, 2
  %183 = add nsw i64 %182, %53
  %184 = getelementptr inbounds i32, i32* %139, i64 %183
  %185 = load i32, i32* %184, align 4, !tbaa !33
  %186 = insertelement <4 x i32> undef, i32 %185, i32 0
  %187 = shufflevector <4 x i32> %186, <4 x i32> undef, <4 x i32> zeroinitializer
  %188 = mul <4 x i32> %187, %181
  %189 = add <4 x i32> %178, %188
  %190 = getelementptr inbounds i32, i32* %135, i64 235
  %191 = bitcast i32* %190 to <4 x i32>*
  %192 = load <4 x i32>, <4 x i32>* %191, align 1, !tbaa !11
  %193 = mul nsw i64 %149, 5
  %194 = add nsw i64 %193, %53
  %195 = getelementptr inbounds i32, i32* %139, i64 %194
  %196 = load i32, i32* %195, align 4, !tbaa !33
  %197 = insertelement <4 x i32> undef, i32 %196, i32 0
  %198 = shufflevector <4 x i32> %197, <4 x i32> undef, <4 x i32> zeroinitializer
  %199 = mul <4 x i32> %198, %192
  %200 = add <4 x i32> %189, %199
  %201 = bitcast i32* %131 to <4 x i32>*
  store <4 x i32> %200, <4 x i32>* %201, align 16, !tbaa !11
  %202 = add nsw i64 %126, 4
  %203 = icmp slt i64 %202, %56
  br i1 %203, label %125, label %93

; <label>:204:                                    ; preds = %111
  br label %205

; <label>:205:                                    ; preds = %204, %94
  %206 = add nsw i64 %52, 1
  %207 = srem i64 %206, 4
  %208 = add nuw nsw i64 %53, 1
  %209 = icmp slt i64 %208, %11
  br i1 %209, label %51, label %49

; <label>:210:                                    ; preds = %98
  call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !1076
  unreachable
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS3_IiLin1ELi47ELi0ELin1ELi47EEELi1EEELi8ENS_10DenseShapeESC_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.1590"*, i64, i64) local_unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1590", %"struct.Eigen::internal::product_evaluator.1590"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i32*, i32** %4, align 8, !tbaa !38, !noalias !1082
  %6 = getelementptr inbounds i32, i32* %5, i64 %1
  %7 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1590", %"struct.Eigen::internal::product_evaluator.1590"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8, !tbaa !40, !noalias !1082
  %9 = icmp ne i32* %6, null
  %10 = icmp slt i64 %8, 0
  %11 = and i1 %9, %10
  br i1 %11, label %12, label %13, !prof !722

; <label>:12:                                     ; preds = %3
  tail call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEELi0EEC2EPKill, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.24, i64 0, i64 0), i32 175, i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.25, i64 0, i64 0)) #13, !noalias !1082
  unreachable

; <label>:13:                                     ; preds = %3
  %14 = icmp ugt i64 %1, 46
  br i1 %14, label %15, label %16, !prof !439

; <label>:15:                                     ; preds = %13
  tail call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !1082
  unreachable

; <label>:16:                                     ; preds = %13
  %17 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1590", %"struct.Eigen::internal::product_evaluator.1590"* %0, i64 0, i32 1
  %18 = bitcast %"class.Eigen::Matrix.32"** %17 to %"class.Eigen::DenseBase.35"**
  %19 = load %"class.Eigen::DenseBase.35"*, %"class.Eigen::DenseBase.35"** %18, align 8, !tbaa !11
  %20 = bitcast %"class.Eigen::DenseBase.35"* %19 to i32**
  %21 = load i32*, i32** %20, align 8, !tbaa !35, !noalias !1085
  %22 = getelementptr inbounds %"class.Eigen::DenseBase.35", %"class.Eigen::DenseBase.35"* %19, i64 8
  %23 = bitcast %"class.Eigen::DenseBase.35"* %22 to i64*
  %24 = load i64, i64* %23, align 8, !tbaa !37, !noalias !1085
  %25 = mul nsw i64 %24, %2
  %26 = getelementptr inbounds i32, i32* %21, i64 %25
  %27 = icmp ne i32* %26, null
  %28 = icmp slt i64 %24, 0
  %29 = and i1 %28, %27
  br i1 %29, label %30, label %31, !prof !722

; <label>:30:                                     ; preds = %16
  tail call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEELi0EEC2EPKill, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.24, i64 0, i64 0), i32 175, i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.25, i64 0, i64 0)) #13, !noalias !1085
  unreachable

; <label>:31:                                     ; preds = %16
  %32 = icmp ugt i64 %2, 46
  br i1 %32, label %33, label %34, !prof !439

; <label>:33:                                     ; preds = %31
  tail call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !1085
  unreachable

; <label>:34:                                     ; preds = %31
  %35 = icmp eq i64 %8, %24
  br i1 %35, label %37, label %36

; <label>:36:                                     ; preds = %34
  tail call void @__assert_rtn(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__func__._ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIddEEKNS_7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS5_IdLin1ELi1ELi0ELin1ELi1EEELi0EEEKS7_EC2ERS9_RSA_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.3, i64 0, i64 0), i32 110, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.4, i64 0, i64 0)) #13, !noalias !1088
  unreachable

; <label>:37:                                     ; preds = %34
  %38 = icmp eq i64 %8, 0
  br i1 %38, label %61, label %39

; <label>:39:                                     ; preds = %37
  %40 = icmp sgt i64 %8, 0
  br i1 %40, label %42, label %41

; <label>:41:                                     ; preds = %39
  tail call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZNK5Eigen9DenseBaseINS_12CwiseUnaryOpINS_8internal14scalar_abs2_opIdEEKNS_13CwiseBinaryOpINS2_20scalar_difference_opIddEEKNS_7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS9_IdLin1ELi1ELi0ELin1ELi1EEELi0EEEKSB_EEEEE5reduxINS2_13scalar_sum_opIddEEEEdRKT_, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.6, i64 0, i64 0), i32 413, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.7, i64 0, i64 0)) #13
  unreachable

; <label>:42:                                     ; preds = %39
  %43 = load i32, i32* %6, align 4, !tbaa !33
  %44 = load i32, i32* %26, align 4, !tbaa !33
  %45 = mul nsw i32 %44, %43
  %46 = icmp eq i64 %8, 1
  br i1 %46, label %61, label %47

; <label>:47:                                     ; preds = %42
  br label %48

; <label>:48:                                     ; preds = %47, %48
  %49 = phi i64 [ %58, %48 ], [ 1, %47 ]
  %50 = phi i32 [ %57, %48 ], [ %45, %47 ]
  %51 = mul nuw nsw i64 %49, 47
  %52 = getelementptr inbounds i32, i32* %6, i64 %51
  %53 = load i32, i32* %52, align 4, !tbaa !33
  %54 = getelementptr inbounds i32, i32* %26, i64 %49
  %55 = load i32, i32* %54, align 4, !tbaa !33
  %56 = mul nsw i32 %55, %53
  %57 = add nsw i32 %56, %50
  %58 = add nuw nsw i64 %49, 1
  %59 = icmp slt i64 %58, %8
  br i1 %59, label %48, label %60

; <label>:60:                                     ; preds = %48
  br label %61

; <label>:61:                                     ; preds = %60, %37, %42
  %62 = phi i32 [ 0, %37 ], [ %45, %42 ], [ %57, %60 ]
  ret i32 %62
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen15PlainObjectBaseINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEEC2INS_7ProductINS1_IiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS1_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEEEERKNS_9DenseBaseIT_EE(%"class.Eigen::PlainObjectBase.49"*, %"class.Eigen::DenseBase.434"* dereferenceable(1)) unnamed_addr #6 align 2 {
  %3 = bitcast %"class.Eigen::PlainObjectBase.49"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 16, i32 8, i1 false) #11
  %4 = getelementptr inbounds %"class.Eigen::DenseBase.434", %"class.Eigen::DenseBase.434"* %1, i64 8
  %5 = bitcast %"class.Eigen::DenseBase.434"* %4 to %"class.Eigen::PlainObjectBase.124"**
  %6 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %5, align 8, !tbaa !11
  %7 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %6, i64 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8, !tbaa !43
  %9 = icmp sgt i64 %8, -1
  br i1 %9, label %11, label %10, !prof !10

; <label>:10:                                     ; preds = %2
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:11:                                     ; preds = %2
  %12 = getelementptr inbounds %"class.Eigen::PlainObjectBase.49", %"class.Eigen::PlainObjectBase.49"* %0, i64 0, i32 0, i32 1
  %13 = icmp eq i64 %8, 0
  br i1 %13, label %29, label %14

; <label>:14:                                     ; preds = %11
  %15 = getelementptr inbounds %"class.Eigen::PlainObjectBase.49", %"class.Eigen::PlainObjectBase.49"* %0, i64 0, i32 0, i32 0
  %16 = mul i64 %8, 188
  %17 = add i64 %16, 32
  %18 = tail call i8* @malloc(i64 %17) #14
  %19 = icmp eq i8* %18, null
  br i1 %19, label %27, label %20

; <label>:20:                                     ; preds = %14
  %21 = ptrtoint i8* %18 to i64
  %22 = add i64 %21, 32
  %23 = and i64 %22, -32
  %24 = inttoptr i64 %23 to i8**
  %25 = getelementptr inbounds i8*, i8** %24, i64 -1
  store i8* %18, i8** %25, align 8, !tbaa !29
  %26 = inttoptr i64 %23 to i32*
  br label %27

; <label>:27:                                     ; preds = %20, %14
  %28 = phi i32* [ %26, %20 ], [ null, %14 ]
  store i32* %28, i32** %15, align 8, !tbaa !38
  br label %29

; <label>:29:                                     ; preds = %11, %27
  %30 = phi i32* [ null, %11 ], [ %28, %27 ]
  store i64 %8, i64* %12, align 8, !tbaa !40
  %31 = bitcast %"class.Eigen::PlainObjectBase.49"* %0 to %"class.Eigen::Matrix.48"*
  %32 = bitcast %"class.Eigen::DenseBase.434"* %4 to %"class.Eigen::Transpose.296"*
  %33 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %5, align 8, !tbaa !11
  %34 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %33, i64 0, i32 0, i32 1
  %35 = load i64, i64* %34, align 8, !tbaa !43
  %36 = icmp eq i64 %8, %35
  br i1 %36, label %63, label %37

; <label>:37:                                     ; preds = %29
  %38 = icmp sgt i64 %35, -1
  br i1 %38, label %40, label %39, !prof !10

; <label>:39:                                     ; preds = %37
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:40:                                     ; preds = %37
  %41 = getelementptr inbounds %"class.Eigen::PlainObjectBase.49", %"class.Eigen::PlainObjectBase.49"* %0, i64 0, i32 0, i32 0
  %42 = icmp eq i32* %30, null
  br i1 %42, label %47, label %43

; <label>:43:                                     ; preds = %40
  %44 = getelementptr inbounds i32, i32* %30, i64 -2
  %45 = bitcast i32* %44 to i8**
  %46 = load i8*, i8** %45, align 8, !tbaa !29
  tail call void @free(i8* %46) #11
  br label %47

; <label>:47:                                     ; preds = %43, %40
  %48 = icmp eq i64 %35, 0
  br i1 %48, label %61, label %49

; <label>:49:                                     ; preds = %47
  %50 = mul i64 %35, 188
  %51 = add i64 %50, 32
  %52 = tail call i8* @malloc(i64 %51) #14
  %53 = icmp eq i8* %52, null
  br i1 %53, label %61, label %54

; <label>:54:                                     ; preds = %49
  %55 = ptrtoint i8* %52 to i64
  %56 = add i64 %55, 32
  %57 = and i64 %56, -32
  %58 = inttoptr i64 %57 to i8**
  %59 = getelementptr inbounds i8*, i8** %58, i64 -1
  store i8* %52, i8** %59, align 8, !tbaa !29
  %60 = inttoptr i64 %57 to i32*
  br label %61

; <label>:61:                                     ; preds = %54, %49, %47
  %62 = phi i32* [ %60, %54 ], [ null, %49 ], [ null, %47 ]
  store i32* %62, i32** %41, align 8, !tbaa !38
  store i64 %35, i64* %12, align 8, !tbaa !40
  br label %63

; <label>:63:                                     ; preds = %29, %61
  %64 = bitcast %"class.Eigen::DenseBase.434"* %1 to %"class.Eigen::Matrix.77"**
  %65 = load %"class.Eigen::Matrix.77"*, %"class.Eigen::Matrix.77"** %64, align 8, !tbaa !11
  tail call void @_ZN5Eigen8internal20generic_product_implINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeES8_Li8EE6evalToINS2_IiLi47ELin1ELi0ELi47ELin1EEEEEvRT_RKS3_RKS7_(%"class.Eigen::Matrix.48"* nonnull dereferenceable(16) %31, %"class.Eigen::Matrix.77"* nonnull dereferenceable(1128) %65, %"class.Eigen::Transpose.296"* nonnull dereferenceable(8) %32) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS3_IiLin1ELi47ELi0ELin1ELi47EEENS_10DenseShapeESA_Li8EE6evalToINS3_IiLi47ELi47ELi0ELi47ELi47EEEEEvRT_RKS8_RKS9_(%"class.Eigen::Matrix.63"* dereferenceable(8836), %"class.Eigen::Product.444"* dereferenceable(16), %"class.Eigen::Matrix.32"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.Eigen::Product.1627", align 8
  %5 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %2, i64 0, i32 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8, !tbaa !37
  %9 = add nsw i64 %8, 94
  %10 = icmp slt i64 %9, 20
  %11 = icmp sgt i64 %8, 0
  %12 = and i1 %11, %10
  br i1 %12, label %13, label %26

; <label>:13:                                     ; preds = %3
  %14 = bitcast %"class.Eigen::Product.1627"* %4 to i8*
  call void @llvm.lifetime.start(i64 24, i8* nonnull %14) #11
  %15 = bitcast %"class.Eigen::Product.444"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %14, i8* nonnull %15, i64 16, i32 8, i1 false) #11
  %16 = getelementptr inbounds %"class.Eigen::Product.1627", %"class.Eigen::Product.1627"* %4, i64 0, i32 1
  store %"class.Eigen::Matrix.32"* %2, %"class.Eigen::Matrix.32"** %16, align 8, !tbaa !11, !alias.scope !1091
  %17 = getelementptr inbounds %"class.Eigen::Product.444", %"class.Eigen::Product.444"* %1, i64 0, i32 1
  %18 = bitcast %"class.Eigen::Transpose.331"* %17 to %"class.Eigen::PlainObjectBase.124"**
  %19 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %18, align 8, !tbaa !11, !noalias !1091
  %20 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %19, i64 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8, !tbaa !43, !noalias !1091
  %22 = icmp eq i64 %21, %8
  br i1 %22, label %24, label %23, !prof !10

; <label>:23:                                     ; preds = %13
  tail call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS1_IdLin1ELi1ELi0ELin1ELi1EEELi0EEC2ERKS2_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 97, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2, i64 0, i64 0)) #13, !noalias !1091
  unreachable

; <label>:24:                                     ; preds = %13
  %25 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %5, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %25) #11
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLi47ELi47ELi0ELi47ELi47EEENS_7ProductINS4_INS2_IiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS2_IiLin1ELi47ELi0ELin1ELi47EEELi1EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.63"* nonnull dereferenceable(8836) %0, %"class.Eigen::Product.1627"* nonnull dereferenceable(24) %4, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %5) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %25) #11
  call void @llvm.lifetime.end(i64 24, i8* nonnull %14) #11
  br label %59

; <label>:26:                                     ; preds = %3
  %27 = bitcast %"class.Eigen::Matrix.63"* %0 to %"class.Eigen::DenseBase.66"*
  %28 = bitcast %"class.Eigen::Matrix.63"* %0 to i8*
  %29 = ptrtoint %"class.Eigen::Matrix.63"* %0 to i64
  %30 = and i64 %29, 3
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %33, label %32

; <label>:32:                                     ; preds = %26
  tail call void @llvm.memset.p0i8.i64(i8* nonnull %28, i8 0, i64 8836, i32 4, i1 false) #11
  br label %57

; <label>:33:                                     ; preds = %26
  %34 = lshr i64 %29, 2
  %35 = sub nsw i64 0, %34
  %36 = and i64 %35, 3
  %37 = sub nsw i64 2209, %36
  %38 = and i64 %37, 2236
  %39 = or i64 %38, %36
  %40 = icmp eq i64 %36, 0
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %33
  %42 = shl nuw nsw i64 %36, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull %28, i8 0, i64 %42, i32 4, i1 false) #11
  br label %43

; <label>:43:                                     ; preds = %41, %33
  %44 = phi i64 [ %36, %41 ], [ 0, %33 ]
  %45 = shl nuw nsw i64 %44, 2
  %46 = getelementptr inbounds %"class.Eigen::DenseBase.66", %"class.Eigen::DenseBase.66"* %27, i64 %45, i32 0
  %47 = add nuw nsw i64 %39, 4611686018427387903
  %48 = sub nsw i64 %47, %44
  %49 = lshr i64 %48, 2
  %50 = shl i64 %49, 4
  %51 = add i64 %50, 16
  tail call void @llvm.memset.p0i8.i64(i8* %46, i8 0, i64 %51, i32 16, i1 false) #11
  %52 = icmp ult i64 %39, 2209
  br i1 %52, label %53, label %57

; <label>:53:                                     ; preds = %43
  %54 = shl nuw nsw i64 %39, 2
  %55 = getelementptr inbounds %"class.Eigen::DenseBase.66", %"class.Eigen::DenseBase.66"* %27, i64 %54, i32 0
  %56 = sub nsw i64 8836, %54
  tail call void @llvm.memset.p0i8.i64(i8* %55, i8 0, i64 %56, i32 4, i1 false) #11
  br label %57

; <label>:57:                                     ; preds = %32, %43, %53
  %58 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start(i64 4, i8* nonnull %58) #11
  store i32 1, i32* %6, align 4, !tbaa !33
  call void @_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS3_IiLin1ELi47ELi0ELin1ELi47EEENS_10DenseShapeESA_Li8EE13scaleAndAddToINS3_IiLi47ELi47ELi0ELi47ELi47EEEEEvRT_RKS8_RKS9_RKi(%"class.Eigen::Matrix.63"* nonnull dereferenceable(8836) %0, %"class.Eigen::Product.444"* nonnull dereferenceable(16) %1, %"class.Eigen::Matrix.32"* nonnull dereferenceable(16) %2, i32* nonnull dereferenceable(4) %6)
  call void @llvm.lifetime.end(i64 4, i8* nonnull %58) #11
  br label %59

; <label>:59:                                     ; preds = %57, %24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS3_IiLin1ELi47ELi0ELin1ELi47EEENS_10DenseShapeESA_Li8EE13scaleAndAddToINS3_IiLi47ELi47ELi0ELi47ELi47EEEEEvRT_RKS8_RKS9_RKi(%"class.Eigen::Matrix.63"* dereferenceable(8836), %"class.Eigen::Product.444"* dereferenceable(16), %"class.Eigen::Matrix.32"* dereferenceable(16), i32* dereferenceable(4)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.Eigen::Matrix.48", align 8
  %6 = alloca %"class.Eigen::internal::gemm_blocking_space.1624", align 8
  %7 = getelementptr inbounds %"class.Eigen::Product.444", %"class.Eigen::Product.444"* %1, i64 0, i32 1
  %8 = bitcast %"class.Eigen::Transpose.331"* %7 to %"class.Eigen::PlainObjectBase.124"**
  %9 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %8, align 8, !tbaa !11
  %10 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %9, i64 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8, !tbaa !43
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %64, label %13

; <label>:13:                                     ; preds = %4
  %14 = bitcast %"class.Eigen::Matrix.48"* %5 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #11
  %15 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %5, i64 0, i32 0
  %16 = bitcast %"class.Eigen::Product.444"* %1 to %"class.Eigen::DenseBase.448"*
  call void @_ZN5Eigen15PlainObjectBaseINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEEC2INS_7ProductINS1_IiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS1_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEEEERKNS_9DenseBaseIT_EE(%"class.Eigen::PlainObjectBase.49"* nonnull %15, %"class.Eigen::DenseBase.448"* nonnull dereferenceable(1) %16) #11
  %17 = load i32, i32* %3, align 4, !tbaa !33
  %18 = bitcast %"class.Eigen::internal::gemm_blocking_space.1624"* %6 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %18) #11
  %19 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %5, i64 0, i32 0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8, !tbaa !40
  call void @llvm.memset.p0i8.i64(i8* nonnull %18, i8 0, i64 16, i32 8, i1 false) #11
  %21 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1624", %"class.Eigen::internal::gemm_blocking_space.1624"* %6, i64 0, i32 0, i32 2
  %22 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1624", %"class.Eigen::internal::gemm_blocking_space.1624"* %6, i64 0, i32 0, i32 3
  %23 = bitcast i64* %21 to <2 x i64>*
  store <2 x i64> <i64 47, i64 47>, <2 x i64>* %23, align 8, !tbaa !32
  %24 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1624", %"class.Eigen::internal::gemm_blocking_space.1624"* %6, i64 0, i32 0, i32 4
  store i64 %20, i64* %24, align 8, !tbaa !193
  call void @_ZN5Eigen8internal37evaluateProductBlockingSizesHeuristicIiiLi1ElEEvRT2_S3_S3_S2_(i64* nonnull dereferenceable(8) %24, i64* nonnull dereferenceable(8) %21, i64* nonnull dereferenceable(8) %22, i64 1) #11
  %25 = load i64, i64* %21, align 8, !tbaa !460
  %26 = load i64, i64* %24, align 8, !tbaa !193
  %27 = mul nsw i64 %26, %25
  %28 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1624", %"class.Eigen::internal::gemm_blocking_space.1624"* %6, i64 0, i32 1
  store i64 %27, i64* %28, align 8, !tbaa !1054
  %29 = load i64, i64* %22, align 8, !tbaa !461
  %30 = mul nsw i64 %29, %26
  %31 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1624", %"class.Eigen::internal::gemm_blocking_space.1624"* %6, i64 0, i32 2
  store i64 %30, i64* %31, align 8, !tbaa !1056
  %32 = load i64, i64* %19, align 8, !tbaa !40
  %33 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %5, i64 0, i32 0, i32 0, i32 0
  %34 = load i32*, i32** %33, align 8, !tbaa !38
  %35 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %2, i64 0, i32 0, i32 0, i32 0
  %36 = load i32*, i32** %35, align 8, !tbaa !35
  %37 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %2, i64 0, i32 0, i32 0, i32 1
  %38 = load i64, i64* %37, align 8, !tbaa !37
  %39 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %40 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1624", %"class.Eigen::internal::gemm_blocking_space.1624"* %6, i64 0, i32 0
  call void @_ZN5Eigen8internal29general_matrix_matrix_productIliLi0ELb0EiLi0ELb0ELi0EE3runElllPKilS4_lPiliRNS0_15level3_blockingIiiEEPNS0_16GemmParallelInfoIlEE(i64 47, i64 47, i64 %32, i32* nonnull %34, i64 47, i32* nonnull %36, i64 %38, i32* nonnull %39, i64 47, i32 %17, %"class.Eigen::internal::level3_blocking"* nonnull dereferenceable(40) %40, %"struct.Eigen::internal::GemmParallelInfo"* null) #11
  %41 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1624", %"class.Eigen::internal::gemm_blocking_space.1624"* %6, i64 0, i32 0, i32 0
  %42 = load i32*, i32** %41, align 8, !tbaa !195
  %43 = icmp eq i32* %42, null
  br i1 %43, label %48, label %44

; <label>:44:                                     ; preds = %13
  %45 = getelementptr inbounds i32, i32* %42, i64 -2
  %46 = bitcast i32* %45 to i8**
  %47 = load i8*, i8** %46, align 8, !tbaa !29
  call void @free(i8* %47) #11
  br label %48

; <label>:48:                                     ; preds = %44, %13
  %49 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space.1624", %"class.Eigen::internal::gemm_blocking_space.1624"* %6, i64 0, i32 0, i32 1
  %50 = load i32*, i32** %49, align 8, !tbaa !196
  %51 = icmp eq i32* %50, null
  br i1 %51, label %56, label %52

; <label>:52:                                     ; preds = %48
  %53 = getelementptr inbounds i32, i32* %50, i64 -2
  %54 = bitcast i32* %53 to i8**
  %55 = load i8*, i8** %54, align 8, !tbaa !29
  call void @free(i8* %55) #11
  br label %56

; <label>:56:                                     ; preds = %48, %52
  call void @llvm.lifetime.end(i64 56, i8* nonnull %18) #11
  %57 = load i32*, i32** %33, align 8, !tbaa !38
  %58 = icmp eq i32* %57, null
  br i1 %58, label %63, label %59

; <label>:59:                                     ; preds = %56
  %60 = getelementptr inbounds i32, i32* %57, i64 -2
  %61 = bitcast i32* %60 to i8**
  %62 = load i8*, i8** %61, align 8, !tbaa !29
  call void @free(i8* %62) #11
  br label %63

; <label>:63:                                     ; preds = %56, %59
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #11
  br label %64

; <label>:64:                                     ; preds = %4, %63
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLi47ELi47ELi0ELi47ELi47EEENS_7ProductINS4_INS2_IiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS2_IiLin1ELi47ELi0ELin1ELi47EEELi1EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.63"* dereferenceable(8836), %"class.Eigen::Product.1627"* dereferenceable(24), %"struct.Eigen::internal::assign_op.512"* dereferenceable(1)) local_unnamed_addr #6 {
  %4 = alloca %"struct.Eigen::internal::evaluator.1634", align 8
  %5 = alloca %"struct.Eigen::internal::evaluator.537", align 8
  %6 = alloca %"class.Eigen::internal::generic_dense_assignment_kernel.1637", align 8
  %7 = bitcast %"struct.Eigen::internal::evaluator.1634"* %4 to i8*
  call void @llvm.lifetime.start(i64 64, i8* nonnull %7) #11
  %8 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1634", %"struct.Eigen::internal::evaluator.1634"* %4, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull %7, i8 0, i64 16, i32 8, i1 false) #11
  %9 = getelementptr inbounds %"class.Eigen::Product.1627", %"class.Eigen::Product.1627"* %1, i64 0, i32 0, i32 1
  %10 = bitcast %"class.Eigen::Transpose.331"* %9 to %"class.Eigen::PlainObjectBase.124"**
  %11 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %10, align 8, !tbaa !11
  %12 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %11, i64 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8, !tbaa !43
  %14 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1634", %"struct.Eigen::internal::evaluator.1634"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %15 = icmp eq i64 %13, 0
  br i1 %15, label %16, label %18

; <label>:16:                                     ; preds = %3
  %17 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1634", %"struct.Eigen::internal::evaluator.1634"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %36

; <label>:18:                                     ; preds = %3
  %19 = icmp sgt i64 %13, -1
  br i1 %19, label %21, label %20, !prof !10

; <label>:20:                                     ; preds = %18
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:21:                                     ; preds = %18
  %22 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1634", %"struct.Eigen::internal::evaluator.1634"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = mul i64 %13, 188
  %24 = add i64 %23, 32
  %25 = tail call i8* @malloc(i64 %24) #14
  %26 = icmp eq i8* %25, null
  br i1 %26, label %34, label %27

; <label>:27:                                     ; preds = %21
  %28 = ptrtoint i8* %25 to i64
  %29 = add i64 %28, 32
  %30 = and i64 %29, -32
  %31 = inttoptr i64 %30 to i8**
  %32 = getelementptr inbounds i8*, i8** %31, i64 -1
  store i8* %25, i8** %32, align 8, !tbaa !29
  %33 = inttoptr i64 %30 to i32*
  br label %34

; <label>:34:                                     ; preds = %27, %21
  %35 = phi i32* [ %33, %27 ], [ null, %21 ]
  store i32* %35, i32** %22, align 8, !tbaa !38
  store i64 %13, i64* %14, align 8, !tbaa !40
  br label %36

; <label>:36:                                     ; preds = %16, %34
  %37 = phi i32** [ %17, %16 ], [ %22, %34 ]
  %38 = getelementptr inbounds %"class.Eigen::Product.1627", %"class.Eigen::Product.1627"* %1, i64 0, i32 0, i32 0
  %39 = load %"class.Eigen::Matrix.77"*, %"class.Eigen::Matrix.77"** %38, align 8, !tbaa !11
  call void @_ZN5Eigen8internal20generic_product_implINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeES7_Li8EE6evalToINS2_IiLi47ELin1ELi0ELi47ELin1EEEEEvRT_RKS3_RKS6_(%"class.Eigen::Matrix.48"* nonnull dereferenceable(16) %8, %"class.Eigen::Matrix.77"* nonnull dereferenceable(1128) %39, %"class.Eigen::Transpose.331"* nonnull dereferenceable(8) %9) #11
  %40 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1634", %"struct.Eigen::internal::evaluator.1634"* %4, i64 0, i32 0, i32 1
  %41 = getelementptr inbounds %"class.Eigen::Product.1627", %"class.Eigen::Product.1627"* %1, i64 0, i32 1
  %42 = bitcast %"class.Eigen::Matrix.32"** %41 to i64*
  %43 = load i64, i64* %42, align 8, !tbaa !11
  %44 = bitcast %"class.Eigen::Matrix.32"** %40 to i64*
  store i64 %43, i64* %44, align 8, !tbaa !11
  %45 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1634", %"struct.Eigen::internal::evaluator.1634"* %4, i64 0, i32 0, i32 2
  %46 = bitcast %"struct.Eigen::internal::evaluator.1634"* %4 to i64*
  %47 = load i64, i64* %46, align 8, !tbaa !38
  %48 = bitcast %"struct.Eigen::internal::evaluator.529"* %45 to i64*
  store i64 %47, i64* %48, align 8, !tbaa !475
  %49 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1634", %"struct.Eigen::internal::evaluator.1634"* %4, i64 0, i32 0, i32 3
  %50 = inttoptr i64 %43 to %"class.Eigen::Matrix.32"*
  %51 = inttoptr i64 %43 to i64*
  %52 = load i64, i64* %51, align 8, !tbaa !35
  %53 = bitcast %"struct.Eigen::internal::evaluator.523"* %49 to i64*
  store i64 %52, i64* %53, align 8, !tbaa !813
  %54 = getelementptr inbounds %"class.Eigen::Matrix.32", %"class.Eigen::Matrix.32"* %50, i64 0, i32 0, i32 0, i32 1
  %55 = load i64, i64* %54, align 8, !tbaa !37
  %56 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1634", %"struct.Eigen::internal::evaluator.1634"* %4, i64 0, i32 0, i32 3, i32 0, i32 1, i32 0
  store i64 %55, i64* %56, align 8, !tbaa !59
  %57 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1634", %"struct.Eigen::internal::evaluator.1634"* %4, i64 0, i32 0, i32 4
  %58 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %10, align 8, !tbaa !11
  %59 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %58, i64 0, i32 0, i32 1
  %60 = load i64, i64* %59, align 8, !tbaa !43
  store i64 %60, i64* %57, align 8, !tbaa !1094
  %61 = bitcast %"struct.Eigen::internal::evaluator.537"* %5 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %61) #11
  %62 = getelementptr inbounds %"struct.Eigen::internal::evaluator.537", %"struct.Eigen::internal::evaluator.537"* %5, i64 0, i32 0, i32 0
  %63 = getelementptr inbounds %"class.Eigen::Matrix.63", %"class.Eigen::Matrix.63"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  store i32* %63, i32** %62, align 8, !tbaa !1060
  %64 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1637"* %6 to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %64) #11
  %65 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1637", %"class.Eigen::internal::generic_dense_assignment_kernel.1637"* %6, i64 0, i32 0
  store %"struct.Eigen::internal::evaluator.537"* %5, %"struct.Eigen::internal::evaluator.537"** %65, align 8, !tbaa !11
  %66 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1637", %"class.Eigen::internal::generic_dense_assignment_kernel.1637"* %6, i64 0, i32 1
  store %"struct.Eigen::internal::evaluator.1634"* %4, %"struct.Eigen::internal::evaluator.1634"** %66, align 8, !tbaa !11
  %67 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1637", %"class.Eigen::internal::generic_dense_assignment_kernel.1637"* %6, i64 0, i32 2
  store %"struct.Eigen::internal::assign_op.512"* %2, %"struct.Eigen::internal::assign_op.512"** %67, align 8, !tbaa !11
  %68 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1637", %"class.Eigen::internal::generic_dense_assignment_kernel.1637"* %6, i64 0, i32 3
  store %"class.Eigen::Matrix.63"* %0, %"class.Eigen::Matrix.63"** %68, align 8, !tbaa !11
  call void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi47ELi47ELi0ELi47ELi47EEEEENS3_INS_7ProductINS7_INS4_IiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS4_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS4_IiLin1ELi47ELi0ELin1ELi47EEELi1EEEEENS0_9assign_opIiiEELi0EEELi4ELi0EE3runERSI_(%"class.Eigen::internal::generic_dense_assignment_kernel.1637"* nonnull dereferenceable(32) %6)
  call void @llvm.lifetime.end(i64 32, i8* nonnull %64) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %61) #11
  %69 = load i32*, i32** %37, align 8, !tbaa !38
  %70 = icmp eq i32* %69, null
  br i1 %70, label %75, label %71

; <label>:71:                                     ; preds = %36
  %72 = getelementptr inbounds i32, i32* %69, i64 -2
  %73 = bitcast i32* %72 to i8**
  %74 = load i8*, i8** %73, align 8, !tbaa !29
  call void @free(i8* %74) #11
  br label %75

; <label>:75:                                     ; preds = %36, %71
  call void @llvm.lifetime.end(i64 64, i8* nonnull %7) #11
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi47ELi47ELi0ELi47ELi47EEEEENS3_INS_7ProductINS7_INS4_IiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS4_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS4_IiLin1ELi47ELi0ELin1ELi47EEELi1EEEEENS0_9assign_opIiiEELi0EEELi4ELi0EE3runERSI_(%"class.Eigen::internal::generic_dense_assignment_kernel.1637"* dereferenceable(32)) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1637", %"class.Eigen::internal::generic_dense_assignment_kernel.1637"* %0, i64 0, i32 3
  %3 = bitcast %"class.Eigen::Matrix.63"** %2 to i64*
  %4 = load i64, i64* %3, align 8, !tbaa !11
  %5 = and i64 %4, 3
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %28, label %7

; <label>:7:                                      ; preds = %1
  %8 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1637"* %0 to %"struct.Eigen::internal::evaluator.538"**
  %9 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1637", %"class.Eigen::internal::generic_dense_assignment_kernel.1637"* %0, i64 0, i32 1
  %10 = bitcast %"struct.Eigen::internal::evaluator.1634"** %9 to %"struct.Eigen::internal::product_evaluator.1635"**
  br label %11

; <label>:11:                                     ; preds = %14, %7
  %12 = phi i64 [ 0, %7 ], [ %15, %14 ]
  %13 = mul nuw nsw i64 %12, 47
  br label %17

; <label>:14:                                     ; preds = %17
  %15 = add nuw nsw i64 %12, 1
  %16 = icmp eq i64 %15, 47
  br i1 %16, label %193, label %11

; <label>:17:                                     ; preds = %17, %11
  %18 = phi i64 [ 0, %11 ], [ %26, %17 ]
  %19 = load %"struct.Eigen::internal::evaluator.538"*, %"struct.Eigen::internal::evaluator.538"** %8, align 8, !tbaa !11
  %20 = getelementptr inbounds %"struct.Eigen::internal::evaluator.538", %"struct.Eigen::internal::evaluator.538"* %19, i64 0, i32 0
  %21 = load i32*, i32** %20, align 8, !tbaa !1060
  %22 = add nuw nsw i64 %18, %13
  %23 = getelementptr inbounds i32, i32* %21, i64 %22
  %24 = load %"struct.Eigen::internal::product_evaluator.1635"*, %"struct.Eigen::internal::product_evaluator.1635"** %10, align 8, !tbaa !11
  %25 = tail call i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS3_IiLin1ELi47ELi0ELin1ELi47EEELi1EEELi8ENS_10DenseShapeESB_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.1635"* %24, i64 %18, i64 %12) #11
  store i32 %25, i32* %23, align 4, !tbaa !33
  %26 = add nuw nsw i64 %18, 1
  %27 = icmp eq i64 %26, 47
  br i1 %27, label %14, label %17

; <label>:28:                                     ; preds = %1
  %29 = lshr i64 %4, 2
  %30 = sub nsw i64 0, %29
  %31 = and i64 %30, 3
  %32 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1637"* %0 to %"struct.Eigen::internal::evaluator.538"**
  %33 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1637", %"class.Eigen::internal::generic_dense_assignment_kernel.1637"* %0, i64 0, i32 1
  %34 = bitcast %"struct.Eigen::internal::evaluator.1634"** %33 to %"struct.Eigen::internal::product_evaluator.1635"**
  br label %35

; <label>:35:                                     ; preds = %176, %28
  %36 = phi i64 [ 0, %28 ], [ %179, %176 ]
  %37 = phi i64 [ %31, %28 ], [ %178, %176 ]
  %38 = sub nsw i64 47, %37
  %39 = and i64 %38, -4
  %40 = add nsw i64 %39, %37
  %41 = icmp sgt i64 %37, 0
  br i1 %41, label %42, label %45

; <label>:42:                                     ; preds = %35
  %43 = mul nuw nsw i64 %36, 47
  br label %49

; <label>:44:                                     ; preds = %49
  br label %45

; <label>:45:                                     ; preds = %44, %35
  %46 = icmp sgt i64 %39, 0
  br i1 %46, label %47, label %61

; <label>:47:                                     ; preds = %45
  %48 = mul nuw nsw i64 %36, 47
  br label %65

; <label>:49:                                     ; preds = %49, %42
  %50 = phi i64 [ 0, %42 ], [ %58, %49 ]
  %51 = load %"struct.Eigen::internal::evaluator.538"*, %"struct.Eigen::internal::evaluator.538"** %32, align 8, !tbaa !11
  %52 = getelementptr inbounds %"struct.Eigen::internal::evaluator.538", %"struct.Eigen::internal::evaluator.538"* %51, i64 0, i32 0
  %53 = load i32*, i32** %52, align 8, !tbaa !1060
  %54 = add nuw nsw i64 %50, %43
  %55 = getelementptr inbounds i32, i32* %53, i64 %54
  %56 = load %"struct.Eigen::internal::product_evaluator.1635"*, %"struct.Eigen::internal::product_evaluator.1635"** %34, align 8, !tbaa !11
  %57 = tail call i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS3_IiLin1ELi47ELi0ELin1ELi47EEELi1EEELi8ENS_10DenseShapeESB_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.1635"* %56, i64 %50, i64 %36) #11
  store i32 %57, i32* %55, align 4, !tbaa !33
  %58 = add nuw nsw i64 %50, 1
  %59 = icmp eq i64 %58, %37
  br i1 %59, label %44, label %49

; <label>:60:                                     ; preds = %170
  br label %61

; <label>:61:                                     ; preds = %60, %45
  %62 = icmp slt i64 %40, 47
  br i1 %62, label %63, label %176

; <label>:63:                                     ; preds = %61
  %64 = mul nuw nsw i64 %36, 47
  br label %181

; <label>:65:                                     ; preds = %47, %170
  %66 = phi i64 [ %37, %47 ], [ %173, %170 ]
  %67 = load %"struct.Eigen::internal::evaluator.538"*, %"struct.Eigen::internal::evaluator.538"** %32, align 8, !tbaa !11
  %68 = getelementptr inbounds %"struct.Eigen::internal::evaluator.538", %"struct.Eigen::internal::evaluator.538"* %67, i64 0, i32 0
  %69 = load i32*, i32** %68, align 8, !tbaa !1060
  %70 = add nsw i64 %66, %48
  %71 = getelementptr inbounds i32, i32* %69, i64 %70
  %72 = load %"struct.Eigen::internal::product_evaluator.1635"*, %"struct.Eigen::internal::product_evaluator.1635"** %34, align 8, !tbaa !11
  %73 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1635", %"struct.Eigen::internal::product_evaluator.1635"* %72, i64 0, i32 4
  %74 = load i64, i64* %73, align 8, !tbaa !1094
  %75 = icmp sgt i64 %74, 0
  br i1 %75, label %76, label %170

; <label>:76:                                     ; preds = %65
  %77 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1635", %"struct.Eigen::internal::product_evaluator.1635"* %72, i64 0, i32 2, i32 0, i32 0
  %78 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1635", %"struct.Eigen::internal::product_evaluator.1635"* %72, i64 0, i32 3, i32 0, i32 0
  %79 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1635", %"struct.Eigen::internal::product_evaluator.1635"* %72, i64 0, i32 3, i32 0, i32 1, i32 0
  %80 = load i32*, i32** %77, align 8, !tbaa !475
  %81 = getelementptr inbounds i32, i32* %80, i64 %66
  %82 = load i32*, i32** %78, align 8, !tbaa !813
  %83 = load i64, i64* %79, align 8, !tbaa !59
  %84 = mul nsw i64 %83, %36
  %85 = add i64 %74, -1
  %86 = and i64 %74, 3
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %108, label %88

; <label>:88:                                     ; preds = %76
  br label %89

; <label>:89:                                     ; preds = %89, %88
  %90 = phi <4 x i32> [ zeroinitializer, %88 ], [ %103, %89 ]
  %91 = phi i64 [ 0, %88 ], [ %104, %89 ]
  %92 = phi i64 [ %86, %88 ], [ %105, %89 ]
  %93 = mul nuw nsw i64 %91, 47
  %94 = getelementptr inbounds i32, i32* %81, i64 %93
  %95 = bitcast i32* %94 to <4 x i32>*
  %96 = load <4 x i32>, <4 x i32>* %95, align 1, !tbaa !11
  %97 = add nsw i64 %91, %84
  %98 = getelementptr inbounds i32, i32* %82, i64 %97
  %99 = load i32, i32* %98, align 4, !tbaa !33
  %100 = insertelement <4 x i32> undef, i32 %99, i32 0
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> zeroinitializer
  %102 = mul <4 x i32> %101, %96
  %103 = add <4 x i32> %102, %90
  %104 = add nuw nsw i64 %91, 1
  %105 = add i64 %92, -1
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %107, label %89, !llvm.loop !1096

; <label>:107:                                    ; preds = %89
  br label %108

; <label>:108:                                    ; preds = %76, %107
  %109 = phi <4 x i32> [ undef, %76 ], [ %103, %107 ]
  %110 = phi <4 x i32> [ zeroinitializer, %76 ], [ %103, %107 ]
  %111 = phi i64 [ 0, %76 ], [ %104, %107 ]
  %112 = icmp ult i64 %85, 3
  br i1 %112, label %167, label %113

; <label>:113:                                    ; preds = %108
  br label %114

; <label>:114:                                    ; preds = %114, %113
  %115 = phi <4 x i32> [ %110, %113 ], [ %163, %114 ]
  %116 = phi i64 [ %111, %113 ], [ %164, %114 ]
  %117 = mul nuw nsw i64 %116, 47
  %118 = getelementptr inbounds i32, i32* %81, i64 %117
  %119 = bitcast i32* %118 to <4 x i32>*
  %120 = load <4 x i32>, <4 x i32>* %119, align 1, !tbaa !11
  %121 = add nsw i64 %116, %84
  %122 = getelementptr inbounds i32, i32* %82, i64 %121
  %123 = load i32, i32* %122, align 4, !tbaa !33
  %124 = insertelement <4 x i32> undef, i32 %123, i32 0
  %125 = shufflevector <4 x i32> %124, <4 x i32> undef, <4 x i32> zeroinitializer
  %126 = mul <4 x i32> %125, %120
  %127 = add <4 x i32> %126, %115
  %128 = add nuw nsw i64 %116, 1
  %129 = mul nuw nsw i64 %128, 47
  %130 = getelementptr inbounds i32, i32* %81, i64 %129
  %131 = bitcast i32* %130 to <4 x i32>*
  %132 = load <4 x i32>, <4 x i32>* %131, align 1, !tbaa !11
  %133 = add nsw i64 %128, %84
  %134 = getelementptr inbounds i32, i32* %82, i64 %133
  %135 = load i32, i32* %134, align 4, !tbaa !33
  %136 = insertelement <4 x i32> undef, i32 %135, i32 0
  %137 = shufflevector <4 x i32> %136, <4 x i32> undef, <4 x i32> zeroinitializer
  %138 = mul <4 x i32> %137, %132
  %139 = add <4 x i32> %138, %127
  %140 = add nsw i64 %116, 2
  %141 = mul nuw nsw i64 %140, 47
  %142 = getelementptr inbounds i32, i32* %81, i64 %141
  %143 = bitcast i32* %142 to <4 x i32>*
  %144 = load <4 x i32>, <4 x i32>* %143, align 1, !tbaa !11
  %145 = add nsw i64 %140, %84
  %146 = getelementptr inbounds i32, i32* %82, i64 %145
  %147 = load i32, i32* %146, align 4, !tbaa !33
  %148 = insertelement <4 x i32> undef, i32 %147, i32 0
  %149 = shufflevector <4 x i32> %148, <4 x i32> undef, <4 x i32> zeroinitializer
  %150 = mul <4 x i32> %149, %144
  %151 = add <4 x i32> %150, %139
  %152 = add nsw i64 %116, 3
  %153 = mul nuw nsw i64 %152, 47
  %154 = getelementptr inbounds i32, i32* %81, i64 %153
  %155 = bitcast i32* %154 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 1, !tbaa !11
  %157 = add nsw i64 %152, %84
  %158 = getelementptr inbounds i32, i32* %82, i64 %157
  %159 = load i32, i32* %158, align 4, !tbaa !33
  %160 = insertelement <4 x i32> undef, i32 %159, i32 0
  %161 = shufflevector <4 x i32> %160, <4 x i32> undef, <4 x i32> zeroinitializer
  %162 = mul <4 x i32> %161, %156
  %163 = add <4 x i32> %162, %151
  %164 = add nsw i64 %116, 4
  %165 = icmp eq i64 %164, %74
  br i1 %165, label %166, label %114

; <label>:166:                                    ; preds = %114
  br label %167

; <label>:167:                                    ; preds = %108, %166
  %168 = phi <4 x i32> [ %109, %108 ], [ %163, %166 ]
  %169 = bitcast <4 x i32> %168 to <2 x i64>
  br label %170

; <label>:170:                                    ; preds = %65, %167
  %171 = phi <2 x i64> [ zeroinitializer, %65 ], [ %169, %167 ]
  %172 = bitcast i32* %71 to <2 x i64>*
  store <2 x i64> %171, <2 x i64>* %172, align 16, !tbaa !11
  %173 = add nsw i64 %66, 4
  %174 = icmp slt i64 %173, %40
  br i1 %174, label %65, label %60

; <label>:175:                                    ; preds = %181
  br label %176

; <label>:176:                                    ; preds = %175, %61
  %177 = add nsw i64 %37, 1
  %178 = srem i64 %177, 4
  %179 = add nuw nsw i64 %36, 1
  %180 = icmp eq i64 %179, 47
  br i1 %180, label %192, label %35

; <label>:181:                                    ; preds = %181, %63
  %182 = phi i64 [ %40, %63 ], [ %190, %181 ]
  %183 = load %"struct.Eigen::internal::evaluator.538"*, %"struct.Eigen::internal::evaluator.538"** %32, align 8, !tbaa !11
  %184 = getelementptr inbounds %"struct.Eigen::internal::evaluator.538", %"struct.Eigen::internal::evaluator.538"* %183, i64 0, i32 0
  %185 = load i32*, i32** %184, align 8, !tbaa !1060
  %186 = add nsw i64 %182, %64
  %187 = getelementptr inbounds i32, i32* %185, i64 %186
  %188 = load %"struct.Eigen::internal::product_evaluator.1635"*, %"struct.Eigen::internal::product_evaluator.1635"** %34, align 8, !tbaa !11
  %189 = tail call i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS3_IiLin1ELi47ELi0ELin1ELi47EEELi1EEELi8ENS_10DenseShapeESB_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.1635"* %188, i64 %182, i64 %36) #11
  store i32 %189, i32* %187, align 4, !tbaa !33
  %190 = add nsw i64 %182, 1
  %191 = icmp eq i64 %190, 47
  br i1 %191, label %175, label %181

; <label>:192:                                    ; preds = %176
  br label %194

; <label>:193:                                    ; preds = %14
  br label %194

; <label>:194:                                    ; preds = %193, %192
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal20generic_product_implINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeES7_Li8EE6evalToINS2_IiLi47ELin1ELi0ELi47ELin1EEEEEvRT_RKS3_RKS6_(%"class.Eigen::Matrix.48"* dereferenceable(16), %"class.Eigen::Matrix.77"* dereferenceable(1128), %"class.Eigen::Transpose.331"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.Eigen::Product.1638", align 8
  %5 = alloca %"struct.Eigen::internal::assign_op.512", align 1
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8, !tbaa !40
  %9 = add nsw i64 %8, 53
  %10 = icmp slt i64 %9, 20
  br i1 %10, label %11, label %19

; <label>:11:                                     ; preds = %3
  %12 = bitcast %"class.Eigen::Product.1638"* %4 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12) #11
  %13 = bitcast %"class.Eigen::Transpose.331"* %2 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.Eigen::Product.1638", %"class.Eigen::Product.1638"* %4, i64 0, i32 0
  store %"class.Eigen::Matrix.77"* %1, %"class.Eigen::Matrix.77"** %15, align 8
  %16 = getelementptr inbounds %"class.Eigen::Product.1638", %"class.Eigen::Product.1638"* %4, i64 0, i32 1, i32 0
  %17 = bitcast %"class.Eigen::Matrix.123"** %16 to i64*
  store i64 %14, i64* %17, align 8
  %18 = getelementptr inbounds %"struct.Eigen::internal::assign_op.512", %"struct.Eigen::internal::assign_op.512"* %5, i64 0, i32 0
  call void @llvm.lifetime.start(i64 1, i8* nonnull %18) #11
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS_7ProductINS2_IiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.48"* nonnull dereferenceable(16) %0, %"class.Eigen::Product.1638"* nonnull dereferenceable(16) %4, %"struct.Eigen::internal::assign_op.512"* nonnull dereferenceable(1) %5) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %18) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12) #11
  br label %47

; <label>:19:                                     ; preds = %3
  %20 = icmp sgt i64 %8, -1
  br i1 %20, label %22, label %21, !prof !10

; <label>:21:                                     ; preds = %19
  tail call void @__assert_rtn(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__._ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIdEENS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEC2EllRKS3_, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.13, i64 0, i64 0), i32 74, i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.14, i64 0, i64 0)) #13, !noalias !1097
  unreachable

; <label>:22:                                     ; preds = %19
  %23 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i32*, i32** %23, align 8, !tbaa !38
  %25 = mul nsw i64 %8, 47
  %26 = sdiv i64 %25, 4
  %27 = shl nsw i64 %26, 2
  %28 = icmp sgt i64 %25, 3
  br i1 %28, label %29, label %37

; <label>:29:                                     ; preds = %22
  %30 = bitcast i32* %24 to i8*
  %31 = icmp sgt i64 %27, 4
  %32 = select i1 %31, i64 %27, i64 4
  %33 = add nuw i64 %32, 4611686018427387903
  %34 = lshr i64 %33, 2
  %35 = shl i64 %34, 4
  %36 = add i64 %35, 16
  tail call void @llvm.memset.p0i8.i64(i8* %30, i8 0, i64 %36, i32 16, i1 false) #11
  br label %37

; <label>:37:                                     ; preds = %29, %22
  %38 = icmp slt i64 %27, %25
  br i1 %38, label %39, label %45

; <label>:39:                                     ; preds = %37
  %40 = getelementptr i32, i32* %24, i64 %27
  %41 = bitcast i32* %40 to i8*
  %42 = mul i64 %8, 188
  %43 = shl i64 %26, 4
  %44 = sub i64 %42, %43
  tail call void @llvm.memset.p0i8.i64(i8* %41, i8 0, i64 %44, i32 4, i1 false) #11
  br label %45

; <label>:45:                                     ; preds = %37, %39
  %46 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start(i64 4, i8* nonnull %46) #11
  store i32 1, i32* %6, align 4, !tbaa !33
  call void @_ZN5Eigen8internal20generic_product_implINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeES7_Li8EE13scaleAndAddToINS2_IiLi47ELin1ELi0ELi47ELin1EEEEEvRT_RKS3_RKS6_RKi(%"class.Eigen::Matrix.48"* nonnull dereferenceable(16) %0, %"class.Eigen::Matrix.77"* nonnull dereferenceable(1128) %1, %"class.Eigen::Transpose.331"* nonnull dereferenceable(8) %2, i32* nonnull dereferenceable(4) %6)
  call void @llvm.lifetime.end(i64 4, i8* nonnull %46) #11
  br label %47

; <label>:47:                                     ; preds = %45, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal20generic_product_implINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeES7_Li8EE13scaleAndAddToINS2_IiLi47ELin1ELi0ELi47ELin1EEEEEvRT_RKS3_RKS6_RKi(%"class.Eigen::Matrix.48"* dereferenceable(16), %"class.Eigen::Matrix.77"* dereferenceable(1128), %"class.Eigen::Transpose.331"* dereferenceable(8), i32* dereferenceable(4)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.Eigen::internal::gemm_blocking_space", align 8
  %6 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i64, i64* %6, align 8, !tbaa !40
  %8 = bitcast %"class.Eigen::Transpose.331"* %2 to %"class.Eigen::PlainObjectBase.124"**
  %9 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %8, align 8, !tbaa !11
  %10 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %9, i64 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8, !tbaa !43
  %12 = icmp eq i64 %7, %11
  br i1 %12, label %14, label %13, !prof !10

; <label>:13:                                     ; preds = %4
  tail call void @__assert_rtn(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__func__._ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EENS_9TransposeIKNS8_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeESI_Li8EE13scaleAndAddToINS8_IiLi47ELin1ELi0ELi47ELin1EEEEEvRT_RKSD_RKSH_RKi, i64 0, i64 0), i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.33, i64 0, i64 0), i32 460, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.34, i64 0, i64 0)) #13
  unreachable

; <label>:14:                                     ; preds = %4
  %15 = icmp eq i64 %7, 0
  br i1 %15, label %58, label %16

; <label>:16:                                     ; preds = %14
  %17 = load i32, i32* %3, align 4, !tbaa !33
  %18 = bitcast %"class.Eigen::internal::gemm_blocking_space"* %5 to i8*
  call void @llvm.lifetime.start(i64 56, i8* nonnull %18) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %18, i8 0, i64 16, i32 8, i1 false) #11
  %19 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 0, i32 2
  store i64 47, i64* %19, align 8, !tbaa !460
  %20 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 0, i32 3
  store i64 %7, i64* %20, align 8, !tbaa !461
  %21 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 0, i32 4
  store i64 6, i64* %21, align 8, !tbaa !193
  call void @_ZN5Eigen8internal37evaluateProductBlockingSizesHeuristicIiiLi1ElEEvRT2_S3_S3_S2_(i64* nonnull dereferenceable(8) %21, i64* nonnull dereferenceable(8) %19, i64* nonnull dereferenceable(8) %20, i64 1) #11
  %22 = load i64, i64* %19, align 8, !tbaa !460
  %23 = load i64, i64* %21, align 8, !tbaa !193
  %24 = mul nsw i64 %23, %22
  %25 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 1
  store i64 %24, i64* %25, align 8, !tbaa !462
  %26 = load i64, i64* %20, align 8, !tbaa !461
  %27 = mul nsw i64 %26, %23
  %28 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 2
  store i64 %27, i64* %28, align 8, !tbaa !464
  %29 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %8, align 8, !tbaa !11
  %30 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %29, i64 0, i32 0, i32 1
  %31 = load i64, i64* %30, align 8, !tbaa !43
  %32 = icmp eq i64 %31, -1
  %33 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %9, i64 0, i32 0, i32 1
  %34 = load i64, i64* %33, align 8, !tbaa !43
  %35 = select i1 %32, i64 %34, i64 %31
  %36 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %37 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %9, i64 0, i32 0, i32 0
  %38 = load i32*, i32** %37, align 8, !tbaa !41
  %39 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %0, i64 0, i32 0, i32 0, i32 0
  %40 = load i32*, i32** %39, align 8, !tbaa !38
  %41 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 0
  call void @_ZN5Eigen8internal29general_matrix_matrix_productIliLi0ELb0EiLi1ELb0ELi0EE3runElllPKilS4_lPiliRNS0_15level3_blockingIiiEEPNS0_16GemmParallelInfoIlEE(i64 47, i64 %35, i64 6, i32* nonnull %36, i64 47, i32* nonnull %38, i64 %34, i32* nonnull %40, i64 47, i32 %17, %"class.Eigen::internal::level3_blocking"* nonnull dereferenceable(40) %41, %"struct.Eigen::internal::GemmParallelInfo"* null) #11
  %42 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 0, i32 0
  %43 = load i32*, i32** %42, align 8, !tbaa !195
  %44 = icmp eq i32* %43, null
  br i1 %44, label %49, label %45

; <label>:45:                                     ; preds = %16
  %46 = getelementptr inbounds i32, i32* %43, i64 -2
  %47 = bitcast i32* %46 to i8**
  %48 = load i8*, i8** %47, align 8, !tbaa !29
  call void @free(i8* %48) #11
  br label %49

; <label>:49:                                     ; preds = %45, %16
  %50 = getelementptr inbounds %"class.Eigen::internal::gemm_blocking_space", %"class.Eigen::internal::gemm_blocking_space"* %5, i64 0, i32 0, i32 1
  %51 = load i32*, i32** %50, align 8, !tbaa !196
  %52 = icmp eq i32* %51, null
  br i1 %52, label %57, label %53

; <label>:53:                                     ; preds = %49
  %54 = getelementptr inbounds i32, i32* %51, i64 -2
  %55 = bitcast i32* %54 to i8**
  %56 = load i8*, i8** %55, align 8, !tbaa !29
  call void @free(i8* %56) #11
  br label %57

; <label>:57:                                     ; preds = %49, %53
  call void @llvm.lifetime.end(i64 56, i8* nonnull %18) #11
  br label %58

; <label>:58:                                     ; preds = %14, %57
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS_7ProductINS2_IiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEENS0_9assign_opIiiEEEEvRT_RKT0_RKT1_(%"class.Eigen::Matrix.48"* dereferenceable(16), %"class.Eigen::Product.1638"* dereferenceable(16), %"struct.Eigen::internal::assign_op.512"* dereferenceable(1)) local_unnamed_addr #6 {
  %4 = alloca %"struct.Eigen::internal::evaluator.1645", align 8
  %5 = alloca %"struct.Eigen::internal::evaluator.529", align 8
  %6 = alloca %"class.Eigen::internal::generic_dense_assignment_kernel.1648", align 8
  %7 = bitcast %"struct.Eigen::internal::evaluator.1645"* %4 to i8*
  call void @llvm.lifetime.start(i64 64, i8* nonnull %7) #11
  %8 = bitcast %"class.Eigen::Product.1638"* %1 to i64*
  %9 = load i64, i64* %8, align 8, !tbaa !11
  %10 = bitcast %"struct.Eigen::internal::evaluator.1645"* %4 to i64*
  store i64 %9, i64* %10, align 8, !tbaa !11
  %11 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1645", %"struct.Eigen::internal::evaluator.1645"* %4, i64 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.Eigen::Product.1638", %"class.Eigen::Product.1638"* %1, i64 0, i32 1
  %13 = bitcast %"class.Eigen::Transpose.331"* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.Eigen::Transpose.331"* %11 to i64*
  store i64 %14, i64* %15, align 8
  %16 = inttoptr i64 %9 to %"class.Eigen::Matrix.77"*
  %17 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1645", %"struct.Eigen::internal::evaluator.1645"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  store i32* %18, i32** %17, align 8, !tbaa !94
  %19 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1645", %"struct.Eigen::internal::evaluator.1645"* %4, i64 0, i32 0, i32 3, i32 0, i32 1
  %20 = inttoptr i64 %14 to %"class.Eigen::Matrix.123"*
  %21 = inttoptr i64 %14 to i64*
  %22 = load i64, i64* %21, align 8, !tbaa !41
  %23 = bitcast %"struct.Eigen::internal::evaluator.569"* %19 to i64*
  store i64 %22, i64* %23, align 8, !tbaa !468
  %24 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %20, i64 0, i32 0, i32 0, i32 1
  %25 = load i64, i64* %24, align 8, !tbaa !43
  %26 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1645", %"struct.Eigen::internal::evaluator.1645"* %4, i64 0, i32 0, i32 3, i32 0, i32 1, i32 0, i32 1, i32 0
  store i64 %25, i64* %26, align 8, !tbaa !59
  %27 = getelementptr inbounds %"struct.Eigen::internal::evaluator.1645", %"struct.Eigen::internal::evaluator.1645"* %4, i64 0, i32 0, i32 4
  store i64 6, i64* %27, align 8, !tbaa !1102
  %28 = inttoptr i64 %14 to %"class.Eigen::PlainObjectBase.124"*
  %29 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %28, i64 0, i32 0, i32 1
  %30 = load i64, i64* %29, align 8, !tbaa !43
  %31 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %0, i64 0, i32 0, i32 0, i32 1
  %32 = load i64, i64* %31, align 8, !tbaa !40
  %33 = icmp eq i64 %32, %30
  br i1 %33, label %34, label %37

; <label>:34:                                     ; preds = %3
  %35 = bitcast %"class.Eigen::Matrix.48"* %0 to i64*
  %36 = load i64, i64* %35, align 8, !tbaa !38
  br label %65

; <label>:37:                                     ; preds = %3
  %38 = icmp sgt i64 %30, -1
  br i1 %38, label %40, label %39, !prof !10

; <label>:39:                                     ; preds = %37
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:40:                                     ; preds = %37
  %41 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %0, i64 0, i32 0, i32 0, i32 0
  %42 = load i32*, i32** %41, align 8, !tbaa !38
  %43 = icmp eq i32* %42, null
  br i1 %43, label %48, label %44

; <label>:44:                                     ; preds = %40
  %45 = getelementptr inbounds i32, i32* %42, i64 -2
  %46 = bitcast i32* %45 to i8**
  %47 = load i8*, i8** %46, align 8, !tbaa !29
  tail call void @free(i8* %47) #11
  br label %48

; <label>:48:                                     ; preds = %44, %40
  %49 = icmp eq i64 %30, 0
  br i1 %49, label %62, label %50

; <label>:50:                                     ; preds = %48
  %51 = mul i64 %30, 188
  %52 = add i64 %51, 32
  %53 = tail call i8* @malloc(i64 %52) #14
  %54 = icmp eq i8* %53, null
  br i1 %54, label %62, label %55

; <label>:55:                                     ; preds = %50
  %56 = ptrtoint i8* %53 to i64
  %57 = add i64 %56, 32
  %58 = and i64 %57, -32
  %59 = inttoptr i64 %58 to i8**
  %60 = getelementptr inbounds i8*, i8** %59, i64 -1
  store i8* %53, i8** %60, align 8, !tbaa !29
  %61 = inttoptr i64 %58 to i32*
  br label %62

; <label>:62:                                     ; preds = %48, %50, %55
  %63 = phi i32* [ %61, %55 ], [ null, %50 ], [ null, %48 ]
  store i32* %63, i32** %41, align 8, !tbaa !38
  store i64 %30, i64* %31, align 8, !tbaa !40
  %64 = ptrtoint i32* %63 to i64
  br label %65

; <label>:65:                                     ; preds = %34, %62
  %66 = phi i64 [ %36, %34 ], [ %64, %62 ]
  %67 = bitcast %"struct.Eigen::internal::evaluator.529"* %5 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %67) #11
  %68 = bitcast %"struct.Eigen::internal::evaluator.529"* %5 to i64*
  store i64 %66, i64* %68, align 8, !tbaa !475
  %69 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1648"* %6 to i8*
  call void @llvm.lifetime.start(i64 32, i8* nonnull %69) #11
  %70 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1648", %"class.Eigen::internal::generic_dense_assignment_kernel.1648"* %6, i64 0, i32 0
  store %"struct.Eigen::internal::evaluator.529"* %5, %"struct.Eigen::internal::evaluator.529"** %70, align 8, !tbaa !11
  %71 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1648", %"class.Eigen::internal::generic_dense_assignment_kernel.1648"* %6, i64 0, i32 1
  store %"struct.Eigen::internal::evaluator.1645"* %4, %"struct.Eigen::internal::evaluator.1645"** %71, align 8, !tbaa !11
  %72 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1648", %"class.Eigen::internal::generic_dense_assignment_kernel.1648"* %6, i64 0, i32 2
  store %"struct.Eigen::internal::assign_op.512"* %2, %"struct.Eigen::internal::assign_op.512"** %72, align 8, !tbaa !11
  %73 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1648", %"class.Eigen::internal::generic_dense_assignment_kernel.1648"* %6, i64 0, i32 3
  store %"class.Eigen::Matrix.48"* %0, %"class.Eigen::Matrix.48"** %73, align 8, !tbaa !11
  call void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEEENS3_INS_7ProductINS4_IiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS4_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEEEENS0_9assign_opIiiEELi0EEELi4ELi0EE3runERSG_(%"class.Eigen::internal::generic_dense_assignment_kernel.1648"* nonnull dereferenceable(32) %6)
  call void @llvm.lifetime.end(i64 32, i8* nonnull %69) #11
  call void @llvm.lifetime.end(i64 16, i8* nonnull %67) #11
  call void @llvm.lifetime.end(i64 64, i8* nonnull %7) #11
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEEENS3_INS_7ProductINS4_IiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS4_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEEEENS0_9assign_opIiiEELi0EEELi4ELi0EE3runERSG_(%"class.Eigen::internal::generic_dense_assignment_kernel.1648"* dereferenceable(32)) local_unnamed_addr #6 align 2 {
  %2 = alloca %"struct.Eigen::internal::scalar_sum_op", align 1
  %3 = alloca %"class.Eigen::CwiseBinaryOp.1353", align 8
  %4 = alloca %"struct.Eigen::internal::scalar_sum_op", align 1
  %5 = alloca %"class.Eigen::CwiseBinaryOp.1353", align 8
  %6 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1648", %"class.Eigen::internal::generic_dense_assignment_kernel.1648"* %0, i64 0, i32 3
  %7 = bitcast %"class.Eigen::Matrix.48"** %6 to %"class.Eigen::DenseBase.51"**
  %8 = load %"class.Eigen::DenseBase.51"*, %"class.Eigen::DenseBase.51"** %7, align 8, !tbaa !11
  %9 = getelementptr inbounds %"class.Eigen::DenseBase.51", %"class.Eigen::DenseBase.51"* %8, i64 8
  %10 = bitcast %"class.Eigen::DenseBase.51"* %9 to i64*
  %11 = load i64, i64* %10, align 8, !tbaa !40
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %50

; <label>:13:                                     ; preds = %1
  %14 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.1648"* %0 to %"struct.Eigen::internal::evaluator.530"**
  %15 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.1648", %"class.Eigen::internal::generic_dense_assignment_kernel.1648"* %0, i64 0, i32 1
  %16 = bitcast %"struct.Eigen::internal::evaluator.1645"** %15 to %"struct.Eigen::internal::product_evaluator.1646"**
  %17 = bitcast %"class.Eigen::CwiseBinaryOp.1353"* %3 to i8*
  %18 = bitcast %"class.Eigen::CwiseBinaryOp.1353"* %3 to i64*
  %19 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %20 = bitcast %"class.Eigen::Matrix.77"** %19 to %"class.Eigen::DenseBase.80"**
  %21 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  %22 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 0
  %23 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %3, i64 0, i32 1
  %24 = bitcast %"class.Eigen::Block.1189"* %23 to i64*
  %25 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %3, i64 0, i32 1, i32 0, i32 0, i32 1
  %26 = bitcast %"class.Eigen::Transpose.331"* %25 to i64*
  %27 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %3, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0
  %28 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %3, i64 0, i32 1, i32 0, i32 0, i32 3, i32 0
  %29 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %3, i64 0, i32 1, i32 0, i32 0, i32 4
  %30 = bitcast %"class.Eigen::CwiseBinaryOp.1353"* %3 to %"class.Eigen::DenseBase.1356"*
  %31 = getelementptr inbounds %"struct.Eigen::internal::scalar_sum_op", %"struct.Eigen::internal::scalar_sum_op"* %2, i64 0, i32 0
  %32 = bitcast %"class.Eigen::CwiseBinaryOp.1353"* %5 to i8*
  %33 = bitcast %"class.Eigen::CwiseBinaryOp.1353"* %5 to i64*
  %34 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %35 = bitcast %"class.Eigen::Matrix.77"** %34 to %"class.Eigen::DenseBase.80"**
  %36 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  %37 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 0
  %38 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %5, i64 0, i32 1
  %39 = bitcast %"class.Eigen::Block.1189"* %38 to i64*
  %40 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %5, i64 0, i32 1, i32 0, i32 0, i32 1
  %41 = bitcast %"class.Eigen::Transpose.331"* %40 to i64*
  %42 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %5, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0
  %43 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %5, i64 0, i32 1, i32 0, i32 0, i32 3, i32 0
  %44 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.1353", %"class.Eigen::CwiseBinaryOp.1353"* %5, i64 0, i32 1, i32 0, i32 0, i32 4
  %45 = bitcast %"class.Eigen::CwiseBinaryOp.1353"* %5 to %"class.Eigen::DenseBase.1356"*
  %46 = getelementptr inbounds %"struct.Eigen::internal::scalar_sum_op", %"struct.Eigen::internal::scalar_sum_op"* %4, i64 0, i32 0
  %47 = bitcast i64* %22 to <2 x i64>*
  %48 = bitcast i64* %37 to <2 x i64>*
  br label %51

; <label>:49:                                     ; preds = %205
  br label %50

; <label>:50:                                     ; preds = %49, %1
  ret void

; <label>:51:                                     ; preds = %13, %205
  %52 = phi i64 [ 0, %13 ], [ %207, %205 ]
  %53 = phi i64 [ 0, %13 ], [ %208, %205 ]
  %54 = sub nsw i64 47, %52
  %55 = and i64 %54, -4
  %56 = add nsw i64 %55, %52
  %57 = icmp sgt i64 %52, 0
  br i1 %57, label %58, label %88

; <label>:58:                                     ; preds = %51
  %59 = mul nsw i64 %53, 47
  br label %60

; <label>:60:                                     ; preds = %73, %58
  %61 = phi i64 [ %85, %73 ], [ 0, %58 ]
  %62 = load %"struct.Eigen::internal::evaluator.530"*, %"struct.Eigen::internal::evaluator.530"** %14, align 8, !tbaa !11
  %63 = getelementptr inbounds %"struct.Eigen::internal::evaluator.530", %"struct.Eigen::internal::evaluator.530"* %62, i64 0, i32 0
  %64 = load i32*, i32** %63, align 8, !tbaa !475
  %65 = load %"struct.Eigen::internal::product_evaluator.1646"*, %"struct.Eigen::internal::product_evaluator.1646"** %16, align 8, !tbaa !11
  call void @llvm.lifetime.start(i64 104, i8* nonnull %17) #11
  %66 = bitcast %"struct.Eigen::internal::product_evaluator.1646"* %65 to %"class.Eigen::DenseBase.80"**
  %67 = load %"class.Eigen::DenseBase.80"*, %"class.Eigen::DenseBase.80"** %66, align 8, !tbaa !11
  %68 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1646", %"struct.Eigen::internal::product_evaluator.1646"* %65, i64 0, i32 1, i32 0
  %69 = load %"class.Eigen::Matrix.123"*, %"class.Eigen::Matrix.123"** %68, align 8, !tbaa !11, !noalias !1104
  %70 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %69, i64 0, i32 0, i32 0, i32 1
  %71 = load i64, i64* %70, align 8, !tbaa !43, !noalias !1104
  %72 = icmp sgt i64 %71, %53
  br i1 %72, label %73, label %92, !prof !10

; <label>:73:                                     ; preds = %60
  %74 = bitcast %"class.Eigen::DenseBase.80"* %67 to %"class.Eigen::Matrix.77"*
  %75 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %74, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %61
  %76 = ptrtoint i32* %75 to i64
  %77 = add nsw i64 %61, %59
  %78 = getelementptr inbounds i32, i32* %64, i64 %77
  %79 = ptrtoint %"class.Eigen::Matrix.123"* %69 to i64
  %80 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %69, i64 0, i32 0, i32 0, i32 0
  %81 = load i32*, i32** %80, align 8, !tbaa !41, !noalias !1104
  %82 = getelementptr inbounds i32, i32* %81, i64 %53
  %83 = ptrtoint i32* %82 to i64
  store i64 %76, i64* %18, align 8, !tbaa !480, !alias.scope !1107
  store %"class.Eigen::DenseBase.80"* %67, %"class.Eigen::DenseBase.80"** %20, align 8
  store i64 %61, i64* %21, align 8
  store <2 x i64> <i64 0, i64 1>, <2 x i64>* %47, align 8
  store i64 %83, i64* %24, align 8, !tbaa !863, !alias.scope !1107
  store i64 %79, i64* %26, align 8
  store i64 0, i64* %27, align 8
  store i64 %53, i64* %28, align 8
  store i64 1, i64* %29, align 8
  call void @llvm.lifetime.start(i64 1, i8* nonnull %31) #11
  %84 = call i32 @_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0EEEEEKNS6_IKNS5_INS7_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIiiEEEEiRKT_(%"class.Eigen::DenseBase.1356"* nonnull %30, %"struct.Eigen::internal::scalar_sum_op"* nonnull dereferenceable(1) %2) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %31) #11
  call void @llvm.lifetime.end(i64 104, i8* nonnull %17) #11
  store i32 %84, i32* %78, align 4, !tbaa !33
  %85 = add nuw nsw i64 %61, 1
  %86 = icmp slt i64 %85, %52
  br i1 %86, label %60, label %87

; <label>:87:                                     ; preds = %73
  br label %88

; <label>:88:                                     ; preds = %87, %51
  %89 = icmp sgt i64 %55, 0
  br i1 %89, label %90, label %94

; <label>:90:                                     ; preds = %88
  %91 = mul nsw i64 %53, 47
  br label %125

; <label>:92:                                     ; preds = %60
  call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !1104
  unreachable

; <label>:93:                                     ; preds = %125
  br label %94

; <label>:94:                                     ; preds = %93, %88
  %95 = icmp slt i64 %56, 47
  br i1 %95, label %96, label %205

; <label>:96:                                     ; preds = %94
  %97 = mul nsw i64 %53, 47
  br label %98

; <label>:98:                                     ; preds = %111, %96
  %99 = phi i64 [ %123, %111 ], [ %56, %96 ]
  %100 = load %"struct.Eigen::internal::evaluator.530"*, %"struct.Eigen::internal::evaluator.530"** %14, align 8, !tbaa !11
  %101 = getelementptr inbounds %"struct.Eigen::internal::evaluator.530", %"struct.Eigen::internal::evaluator.530"* %100, i64 0, i32 0
  %102 = load i32*, i32** %101, align 8, !tbaa !475
  %103 = load %"struct.Eigen::internal::product_evaluator.1646"*, %"struct.Eigen::internal::product_evaluator.1646"** %16, align 8, !tbaa !11
  call void @llvm.lifetime.start(i64 104, i8* nonnull %32) #11
  %104 = bitcast %"struct.Eigen::internal::product_evaluator.1646"* %103 to %"class.Eigen::DenseBase.80"**
  %105 = load %"class.Eigen::DenseBase.80"*, %"class.Eigen::DenseBase.80"** %104, align 8, !tbaa !11
  %106 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1646", %"struct.Eigen::internal::product_evaluator.1646"* %103, i64 0, i32 1, i32 0
  %107 = load %"class.Eigen::Matrix.123"*, %"class.Eigen::Matrix.123"** %106, align 8, !tbaa !11, !noalias !1110
  %108 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %107, i64 0, i32 0, i32 0, i32 1
  %109 = load i64, i64* %108, align 8, !tbaa !43, !noalias !1110
  %110 = icmp sgt i64 %109, %53
  br i1 %110, label %111, label %210, !prof !10

; <label>:111:                                    ; preds = %98
  %112 = bitcast %"class.Eigen::DenseBase.80"* %105 to %"class.Eigen::Matrix.77"*
  %113 = getelementptr inbounds %"class.Eigen::Matrix.77", %"class.Eigen::Matrix.77"* %112, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %99
  %114 = ptrtoint i32* %113 to i64
  %115 = add nsw i64 %99, %97
  %116 = getelementptr inbounds i32, i32* %102, i64 %115
  %117 = ptrtoint %"class.Eigen::Matrix.123"* %107 to i64
  %118 = getelementptr inbounds %"class.Eigen::Matrix.123", %"class.Eigen::Matrix.123"* %107, i64 0, i32 0, i32 0, i32 0
  %119 = load i32*, i32** %118, align 8, !tbaa !41, !noalias !1110
  %120 = getelementptr inbounds i32, i32* %119, i64 %53
  %121 = ptrtoint i32* %120 to i64
  store i64 %114, i64* %33, align 8, !tbaa !480, !alias.scope !1113
  store %"class.Eigen::DenseBase.80"* %105, %"class.Eigen::DenseBase.80"** %35, align 8
  store i64 %99, i64* %36, align 8
  store <2 x i64> <i64 0, i64 1>, <2 x i64>* %48, align 8
  store i64 %121, i64* %39, align 8, !tbaa !863, !alias.scope !1113
  store i64 %117, i64* %41, align 8
  store i64 0, i64* %42, align 8
  store i64 %53, i64* %43, align 8
  store i64 1, i64* %44, align 8
  call void @llvm.lifetime.start(i64 1, i8* nonnull %46) #11
  %122 = call i32 @_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0EEEEEKNS6_IKNS5_INS7_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIiiEEEEiRKT_(%"class.Eigen::DenseBase.1356"* nonnull %45, %"struct.Eigen::internal::scalar_sum_op"* nonnull dereferenceable(1) %4) #11
  call void @llvm.lifetime.end(i64 1, i8* nonnull %46) #11
  call void @llvm.lifetime.end(i64 104, i8* nonnull %32) #11
  store i32 %122, i32* %116, align 4, !tbaa !33
  %123 = add nsw i64 %99, 1
  %124 = icmp slt i64 %123, 47
  br i1 %124, label %98, label %204

; <label>:125:                                    ; preds = %90, %125
  %126 = phi i64 [ %52, %90 ], [ %202, %125 ]
  %127 = load %"struct.Eigen::internal::evaluator.530"*, %"struct.Eigen::internal::evaluator.530"** %14, align 8, !tbaa !11
  %128 = getelementptr inbounds %"struct.Eigen::internal::evaluator.530", %"struct.Eigen::internal::evaluator.530"* %127, i64 0, i32 0
  %129 = load i32*, i32** %128, align 8, !tbaa !475
  %130 = add nsw i64 %126, %91
  %131 = getelementptr inbounds i32, i32* %129, i64 %130
  %132 = load %"struct.Eigen::internal::product_evaluator.1646"*, %"struct.Eigen::internal::product_evaluator.1646"** %16, align 8, !tbaa !11
  %133 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1646", %"struct.Eigen::internal::product_evaluator.1646"* %132, i64 0, i32 2, i32 0, i32 0
  %134 = load i32*, i32** %133, align 8, !tbaa !94
  %135 = getelementptr inbounds i32, i32* %134, i64 %126
  %136 = bitcast i32* %135 to <4 x i32>*
  %137 = load <4 x i32>, <4 x i32>* %136, align 1, !tbaa !11
  %138 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1646", %"struct.Eigen::internal::product_evaluator.1646"* %132, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %139 = load i32*, i32** %138, align 8, !tbaa !468
  %140 = getelementptr inbounds i32, i32* %139, i64 %53
  %141 = load i32, i32* %140, align 4, !tbaa !33
  %142 = insertelement <4 x i32> undef, i32 %141, i32 0
  %143 = shufflevector <4 x i32> %142, <4 x i32> undef, <4 x i32> zeroinitializer
  %144 = mul <4 x i32> %143, %137
  %145 = getelementptr inbounds i32, i32* %135, i64 47
  %146 = bitcast i32* %145 to <4 x i32>*
  %147 = load <4 x i32>, <4 x i32>* %146, align 1, !tbaa !11
  %148 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1646", %"struct.Eigen::internal::product_evaluator.1646"* %132, i64 0, i32 3, i32 0, i32 1, i32 0, i32 1, i32 0
  %149 = load i64, i64* %148, align 8, !tbaa !59
  %150 = add nsw i64 %149, %53
  %151 = getelementptr inbounds i32, i32* %139, i64 %150
  %152 = load i32, i32* %151, align 4, !tbaa !33
  %153 = insertelement <4 x i32> undef, i32 %152, i32 0
  %154 = shufflevector <4 x i32> %153, <4 x i32> undef, <4 x i32> zeroinitializer
  %155 = mul <4 x i32> %154, %147
  %156 = add <4 x i32> %155, %144
  %157 = getelementptr inbounds i32, i32* %135, i64 94
  %158 = bitcast i32* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 1, !tbaa !11
  %160 = shl i64 %149, 1
  %161 = add nsw i64 %160, %53
  %162 = getelementptr inbounds i32, i32* %139, i64 %161
  %163 = load i32, i32* %162, align 4, !tbaa !33
  %164 = insertelement <4 x i32> undef, i32 %163, i32 0
  %165 = shufflevector <4 x i32> %164, <4 x i32> undef, <4 x i32> zeroinitializer
  %166 = mul <4 x i32> %165, %159
  %167 = add <4 x i32> %156, %166
  %168 = getelementptr inbounds i32, i32* %135, i64 141
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 1, !tbaa !11
  %171 = mul nsw i64 %149, 3
  %172 = add nsw i64 %171, %53
  %173 = getelementptr inbounds i32, i32* %139, i64 %172
  %174 = load i32, i32* %173, align 4, !tbaa !33
  %175 = insertelement <4 x i32> undef, i32 %174, i32 0
  %176 = shufflevector <4 x i32> %175, <4 x i32> undef, <4 x i32> zeroinitializer
  %177 = mul <4 x i32> %176, %170
  %178 = add <4 x i32> %167, %177
  %179 = getelementptr inbounds i32, i32* %135, i64 188
  %180 = bitcast i32* %179 to <4 x i32>*
  %181 = load <4 x i32>, <4 x i32>* %180, align 1, !tbaa !11
  %182 = shl i64 %149, 2
  %183 = add nsw i64 %182, %53
  %184 = getelementptr inbounds i32, i32* %139, i64 %183
  %185 = load i32, i32* %184, align 4, !tbaa !33
  %186 = insertelement <4 x i32> undef, i32 %185, i32 0
  %187 = shufflevector <4 x i32> %186, <4 x i32> undef, <4 x i32> zeroinitializer
  %188 = mul <4 x i32> %187, %181
  %189 = add <4 x i32> %178, %188
  %190 = getelementptr inbounds i32, i32* %135, i64 235
  %191 = bitcast i32* %190 to <4 x i32>*
  %192 = load <4 x i32>, <4 x i32>* %191, align 1, !tbaa !11
  %193 = mul nsw i64 %149, 5
  %194 = add nsw i64 %193, %53
  %195 = getelementptr inbounds i32, i32* %139, i64 %194
  %196 = load i32, i32* %195, align 4, !tbaa !33
  %197 = insertelement <4 x i32> undef, i32 %196, i32 0
  %198 = shufflevector <4 x i32> %197, <4 x i32> undef, <4 x i32> zeroinitializer
  %199 = mul <4 x i32> %198, %192
  %200 = add <4 x i32> %189, %199
  %201 = bitcast i32* %131 to <4 x i32>*
  store <4 x i32> %200, <4 x i32>* %201, align 16, !tbaa !11
  %202 = add nsw i64 %126, 4
  %203 = icmp slt i64 %202, %56
  br i1 %203, label %125, label %93

; <label>:204:                                    ; preds = %111
  br label %205

; <label>:205:                                    ; preds = %204, %94
  %206 = add nsw i64 %52, 1
  %207 = srem i64 %206, 4
  %208 = add nuw nsw i64 %53, 1
  %209 = icmp slt i64 %208, %11
  br i1 %209, label %51, label %49

; <label>:210:                                    ; preds = %98
  call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !1110
  unreachable
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr i32 @_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS3_IiLin1ELi47ELi0ELin1ELi47EEELi1EEELi8ENS_10DenseShapeESB_iiE5coeffEll(%"struct.Eigen::internal::product_evaluator.1635"*, i64, i64) local_unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1635", %"struct.Eigen::internal::product_evaluator.1635"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i32*, i32** %4, align 8, !tbaa !38, !noalias !1116
  %6 = getelementptr inbounds i32, i32* %5, i64 %1
  %7 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1635", %"struct.Eigen::internal::product_evaluator.1635"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8, !tbaa !40, !noalias !1116
  %9 = icmp ne i32* %6, null
  %10 = icmp slt i64 %8, 0
  %11 = and i1 %9, %10
  br i1 %11, label %12, label %13, !prof !722

; <label>:12:                                     ; preds = %3
  tail call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEELi0EEC2EPKill, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.24, i64 0, i64 0), i32 175, i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.25, i64 0, i64 0)) #13, !noalias !1116
  unreachable

; <label>:13:                                     ; preds = %3
  %14 = icmp ugt i64 %1, 46
  br i1 %14, label %15, label %16, !prof !439

; <label>:15:                                     ; preds = %13
  tail call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !1116
  unreachable

; <label>:16:                                     ; preds = %13
  %17 = getelementptr inbounds %"struct.Eigen::internal::product_evaluator.1635", %"struct.Eigen::internal::product_evaluator.1635"* %0, i64 0, i32 1
  %18 = bitcast %"class.Eigen::Matrix.32"** %17 to %"class.Eigen::DenseBase.35"**
  %19 = load %"class.Eigen::DenseBase.35"*, %"class.Eigen::DenseBase.35"** %18, align 8, !tbaa !11
  %20 = bitcast %"class.Eigen::DenseBase.35"* %19 to i32**
  %21 = load i32*, i32** %20, align 8, !tbaa !35, !noalias !1119
  %22 = getelementptr inbounds %"class.Eigen::DenseBase.35", %"class.Eigen::DenseBase.35"* %19, i64 8
  %23 = bitcast %"class.Eigen::DenseBase.35"* %22 to i64*
  %24 = load i64, i64* %23, align 8, !tbaa !37, !noalias !1119
  %25 = mul nsw i64 %24, %2
  %26 = getelementptr inbounds i32, i32* %21, i64 %25
  %27 = icmp ne i32* %26, null
  %28 = icmp slt i64 %24, 0
  %29 = and i1 %28, %27
  br i1 %29, label %30, label %31, !prof !722

; <label>:30:                                     ; preds = %16
  tail call void @__assert_rtn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__._ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEELi0EEC2EPKill, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.24, i64 0, i64 0), i32 175, i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.25, i64 0, i64 0)) #13, !noalias !1119
  unreachable

; <label>:31:                                     ; preds = %16
  %32 = icmp ugt i64 %2, 46
  br i1 %32, label %33, label %34, !prof !439

; <label>:33:                                     ; preds = %31
  tail call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZN5Eigen5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEC2ERS3_l, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.22, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.23, i64 0, i64 0)) #13, !noalias !1119
  unreachable

; <label>:34:                                     ; preds = %31
  %35 = icmp eq i64 %8, %24
  br i1 %35, label %37, label %36

; <label>:36:                                     ; preds = %34
  tail call void @__assert_rtn(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__func__._ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIddEEKNS_7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS5_IdLin1ELi1ELi0ELin1ELi1EEELi0EEEKS7_EC2ERS9_RSA_RKS3_, i64 0, i64 0), i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.3, i64 0, i64 0), i32 110, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.4, i64 0, i64 0)) #13, !noalias !1122
  unreachable

; <label>:37:                                     ; preds = %34
  %38 = icmp eq i64 %8, 0
  br i1 %38, label %61, label %39

; <label>:39:                                     ; preds = %37
  %40 = icmp sgt i64 %8, 0
  br i1 %40, label %42, label %41

; <label>:41:                                     ; preds = %39
  tail call void @__assert_rtn(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__._ZNK5Eigen9DenseBaseINS_12CwiseUnaryOpINS_8internal14scalar_abs2_opIdEEKNS_13CwiseBinaryOpINS2_20scalar_difference_opIddEEKNS_7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS9_IdLin1ELi1ELi0ELin1ELi1EEELi0EEEKSB_EEEEE5reduxINS2_13scalar_sum_opIddEEEEdRKT_, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.6, i64 0, i64 0), i32 413, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.7, i64 0, i64 0)) #13
  unreachable

; <label>:42:                                     ; preds = %39
  %43 = load i32, i32* %6, align 4, !tbaa !33
  %44 = load i32, i32* %26, align 4, !tbaa !33
  %45 = mul nsw i32 %44, %43
  %46 = icmp eq i64 %8, 1
  br i1 %46, label %61, label %47

; <label>:47:                                     ; preds = %42
  br label %48

; <label>:48:                                     ; preds = %47, %48
  %49 = phi i64 [ %58, %48 ], [ 1, %47 ]
  %50 = phi i32 [ %57, %48 ], [ %45, %47 ]
  %51 = mul nuw nsw i64 %49, 47
  %52 = getelementptr inbounds i32, i32* %6, i64 %51
  %53 = load i32, i32* %52, align 4, !tbaa !33
  %54 = getelementptr inbounds i32, i32* %26, i64 %49
  %55 = load i32, i32* %54, align 4, !tbaa !33
  %56 = mul nsw i32 %55, %53
  %57 = add nsw i32 %56, %50
  %58 = add nuw nsw i64 %49, 1
  %59 = icmp slt i64 %58, %8
  br i1 %59, label %48, label %60

; <label>:60:                                     ; preds = %48
  br label %61

; <label>:61:                                     ; preds = %60, %37, %42
  %62 = phi i32 [ 0, %37 ], [ %45, %42 ], [ %57, %60 ]
  ret i32 %62
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen15PlainObjectBaseINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEEC2INS_7ProductINS1_IiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS1_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEEEERKNS_9DenseBaseIT_EE(%"class.Eigen::PlainObjectBase.49"*, %"class.Eigen::DenseBase.448"* dereferenceable(1)) unnamed_addr #6 align 2 {
  %3 = bitcast %"class.Eigen::PlainObjectBase.49"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 16, i32 8, i1 false) #11
  %4 = getelementptr inbounds %"class.Eigen::DenseBase.448", %"class.Eigen::DenseBase.448"* %1, i64 8
  %5 = bitcast %"class.Eigen::DenseBase.448"* %4 to %"class.Eigen::PlainObjectBase.124"**
  %6 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %5, align 8, !tbaa !11
  %7 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %6, i64 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8, !tbaa !43
  %9 = icmp sgt i64 %8, -1
  br i1 %9, label %11, label %10, !prof !10

; <label>:10:                                     ; preds = %2
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:11:                                     ; preds = %2
  %12 = getelementptr inbounds %"class.Eigen::PlainObjectBase.49", %"class.Eigen::PlainObjectBase.49"* %0, i64 0, i32 0, i32 1
  %13 = icmp eq i64 %8, 0
  br i1 %13, label %29, label %14

; <label>:14:                                     ; preds = %11
  %15 = getelementptr inbounds %"class.Eigen::PlainObjectBase.49", %"class.Eigen::PlainObjectBase.49"* %0, i64 0, i32 0, i32 0
  %16 = mul i64 %8, 188
  %17 = add i64 %16, 32
  %18 = tail call i8* @malloc(i64 %17) #14
  %19 = icmp eq i8* %18, null
  br i1 %19, label %27, label %20

; <label>:20:                                     ; preds = %14
  %21 = ptrtoint i8* %18 to i64
  %22 = add i64 %21, 32
  %23 = and i64 %22, -32
  %24 = inttoptr i64 %23 to i8**
  %25 = getelementptr inbounds i8*, i8** %24, i64 -1
  store i8* %18, i8** %25, align 8, !tbaa !29
  %26 = inttoptr i64 %23 to i32*
  br label %27

; <label>:27:                                     ; preds = %20, %14
  %28 = phi i32* [ %26, %20 ], [ null, %14 ]
  store i32* %28, i32** %15, align 8, !tbaa !38
  br label %29

; <label>:29:                                     ; preds = %11, %27
  %30 = phi i32* [ null, %11 ], [ %28, %27 ]
  store i64 %8, i64* %12, align 8, !tbaa !40
  %31 = bitcast %"class.Eigen::PlainObjectBase.49"* %0 to %"class.Eigen::Matrix.48"*
  %32 = bitcast %"class.Eigen::DenseBase.448"* %4 to %"class.Eigen::Transpose.331"*
  %33 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %5, align 8, !tbaa !11
  %34 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %33, i64 0, i32 0, i32 1
  %35 = load i64, i64* %34, align 8, !tbaa !43
  %36 = icmp eq i64 %8, %35
  br i1 %36, label %63, label %37

; <label>:37:                                     ; preds = %29
  %38 = icmp sgt i64 %35, -1
  br i1 %38, label %40, label %39, !prof !10

; <label>:39:                                     ; preds = %37
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:40:                                     ; preds = %37
  %41 = getelementptr inbounds %"class.Eigen::PlainObjectBase.49", %"class.Eigen::PlainObjectBase.49"* %0, i64 0, i32 0, i32 0
  %42 = icmp eq i32* %30, null
  br i1 %42, label %47, label %43

; <label>:43:                                     ; preds = %40
  %44 = getelementptr inbounds i32, i32* %30, i64 -2
  %45 = bitcast i32* %44 to i8**
  %46 = load i8*, i8** %45, align 8, !tbaa !29
  tail call void @free(i8* %46) #11
  br label %47

; <label>:47:                                     ; preds = %43, %40
  %48 = icmp eq i64 %35, 0
  br i1 %48, label %61, label %49

; <label>:49:                                     ; preds = %47
  %50 = mul i64 %35, 188
  %51 = add i64 %50, 32
  %52 = tail call i8* @malloc(i64 %51) #14
  %53 = icmp eq i8* %52, null
  br i1 %53, label %61, label %54

; <label>:54:                                     ; preds = %49
  %55 = ptrtoint i8* %52 to i64
  %56 = add i64 %55, 32
  %57 = and i64 %56, -32
  %58 = inttoptr i64 %57 to i8**
  %59 = getelementptr inbounds i8*, i8** %58, i64 -1
  store i8* %52, i8** %59, align 8, !tbaa !29
  %60 = inttoptr i64 %57 to i32*
  br label %61

; <label>:61:                                     ; preds = %54, %49, %47
  %62 = phi i32* [ %60, %54 ], [ null, %49 ], [ null, %47 ]
  store i32* %62, i32** %41, align 8, !tbaa !38
  store i64 %35, i64* %12, align 8, !tbaa !40
  br label %63

; <label>:63:                                     ; preds = %29, %61
  %64 = bitcast %"class.Eigen::DenseBase.448"* %1 to %"class.Eigen::Matrix.77"**
  %65 = load %"class.Eigen::Matrix.77"*, %"class.Eigen::Matrix.77"** %64, align 8, !tbaa !11
  tail call void @_ZN5Eigen8internal20generic_product_implINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeES7_Li8EE6evalToINS2_IiLi47ELin1ELi0ELi47ELin1EEEEEvRT_RKS3_RKS6_(%"class.Eigen::Matrix.48"* nonnull dereferenceable(16) %31, %"class.Eigen::Matrix.77"* nonnull dereferenceable(1128) %65, %"class.Eigen::Transpose.331"* nonnull dereferenceable(8) %32) #11
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr void @_ZN5Eigen8internal15call_assignmentINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS2_IiLi47ELi6ELi0ELi47ELi6EEEEESC_EENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS0_13add_assign_opIiiEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsr25evaluator_assume_aliasingISP_EE5valueEPvE4typeE(%"class.Eigen::Matrix.48"* dereferenceable(16), %"class.Eigen::Product.277"* dereferenceable(40), %"struct.Eigen::internal::add_assign_op"* dereferenceable(1), i8*) local_unnamed_addr #6 {
  %5 = alloca %"class.Eigen::Matrix.48", align 8
  %6 = bitcast %"class.Eigen::Matrix.48"* %5 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %6) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull %6, i8 0, i64 16, i32 8, i1 false) #11
  %7 = getelementptr inbounds %"class.Eigen::Product.277", %"class.Eigen::Product.277"* %1, i64 0, i32 1
  %8 = bitcast %"class.Eigen::Transpose.296"* %7 to %"class.Eigen::PlainObjectBase.124"**
  %9 = load %"class.Eigen::PlainObjectBase.124"*, %"class.Eigen::PlainObjectBase.124"** %8, align 8, !tbaa !11
  %10 = getelementptr inbounds %"class.Eigen::PlainObjectBase.124", %"class.Eigen::PlainObjectBase.124"* %9, i64 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8, !tbaa !43
  %12 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %5, i64 0, i32 0, i32 0, i32 1
  %13 = icmp eq i64 %11, 0
  br i1 %13, label %32, label %14

; <label>:14:                                     ; preds = %4
  %15 = icmp sgt i64 %11, -1
  br i1 %15, label %17, label %16, !prof !10

; <label>:16:                                     ; preds = %14
  tail call void @__assert_rtn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__._ZN5Eigen15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEE6resizeEll, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([399 x i8], [399 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

; <label>:17:                                     ; preds = %14
  %18 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %5, i64 0, i32 0, i32 0, i32 0
  %19 = mul i64 %11, 188
  %20 = add i64 %19, 32
  %21 = tail call i8* @malloc(i64 %20) #14
  %22 = icmp eq i8* %21, null
  br i1 %22, label %30, label %23

; <label>:23:                                     ; preds = %17
  %24 = ptrtoint i8* %21 to i64
  %25 = add i64 %24, 32
  %26 = and i64 %25, -32
  %27 = inttoptr i64 %26 to i8**
  %28 = getelementptr inbounds i8*, i8** %27, i64 -1
  store i8* %21, i8** %28, align 8, !tbaa !29
  %29 = inttoptr i64 %26 to i32*
  br label %30

; <label>:30:                                     ; preds = %23, %17
  %31 = phi i32* [ %29, %23 ], [ null, %17 ]
  store i32* %31, i32** %18, align 8, !tbaa !38
  store i64 %11, i64* %12, align 8, !tbaa !40
  br label %32

; <label>:32:                                     ; preds = %4, %30
  %33 = getelementptr inbounds %"class.Eigen::Product.277", %"class.Eigen::Product.277"* %1, i64 0, i32 0
  call void @_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EENS_9TransposeIKNS8_IiLin1ELi6ELi0ELin1ELi6EEEEENS_10DenseShapeESI_Li8EE6evalToINS8_IiLi47ELin1ELi0ELi47ELin1EEEEEvRT_RKSD_RKSH_(%"class.Eigen::Matrix.48"* nonnull dereferenceable(16) %5, %"class.Eigen::CwiseBinaryOp.284"* nonnull dereferenceable(32) %33, %"class.Eigen::Transpose.296"* nonnull dereferenceable(8) %7) #11
  %34 = bitcast %"class.Eigen::Matrix.48"* %5 to i64*
  %35 = load i64, i64* %34, align 8, !tbaa !38
  %36 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %0, i64 0, i32 0, i32 0, i32 1
  %37 = load i64, i64* %36, align 8, !tbaa !40
  %38 = load i64, i64* %12, align 8, !tbaa !40
  %39 = icmp eq i64 %37, %38
  br i1 %39, label %41, label %40, !prof !10

; <label>:40:                                     ; preds = %32
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__._ZN5Eigen8internal17resize_if_allowedINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEENS_14CwiseNullaryOpINS0_18scalar_constant_opIdEES3_EEddEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.15, i64 0, i64 0), i32 710, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.29, i64 0, i64 0)) #13
  unreachable

; <label>:41:                                     ; preds = %32
  %42 = bitcast %"class.Eigen::Matrix.48"* %0 to i64*
  %43 = load i64, i64* %42, align 8, !tbaa !38
  %44 = mul nsw i64 %37, 47
  %45 = sdiv i64 %44, 4
  %46 = shl nsw i64 %45, 2
  %47 = icmp sgt i64 %44, 3
  br i1 %47, label %48, label %79

; <label>:48:                                     ; preds = %41
  %49 = inttoptr i64 %43 to i32*
  %50 = inttoptr i64 %35 to i32*
  %51 = icmp sgt i64 %46, 4
  %52 = select i1 %51, i64 %46, i64 4
  %53 = add nsw i64 %52, -1
  %54 = lshr i64 %53, 2
  %55 = add nuw nsw i64 %54, 1
  %56 = and i64 %55, 7
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %73, label %58

; <label>:58:                                     ; preds = %48
  br label %59

; <label>:59:                                     ; preds = %59, %58
  %60 = phi i64 [ %69, %59 ], [ 0, %58 ]
  %61 = phi i64 [ %70, %59 ], [ %56, %58 ]
  %62 = getelementptr inbounds i32, i32* %49, i64 %60
  %63 = getelementptr inbounds i32, i32* %50, i64 %60
  %64 = bitcast i32* %63 to <4 x i32>*
  %65 = load <4 x i32>, <4 x i32>* %64, align 16, !tbaa !11
  %66 = bitcast i32* %62 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 16, !tbaa !11
  %68 = add <4 x i32> %67, %65
  store <4 x i32> %68, <4 x i32>* %66, align 16, !tbaa !11
  %69 = add nuw nsw i64 %60, 4
  %70 = add i64 %61, -1
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %59, !llvm.loop !1125

; <label>:72:                                     ; preds = %59
  br label %73

; <label>:73:                                     ; preds = %48, %72
  %74 = phi i64 [ 0, %48 ], [ %69, %72 ]
  %75 = icmp ult i64 %53, 28
  br i1 %75, label %78, label %76

; <label>:76:                                     ; preds = %73
  br label %290

; <label>:77:                                     ; preds = %290
  br label %78

; <label>:78:                                     ; preds = %73, %77
  br label %79

; <label>:79:                                     ; preds = %78, %41
  %80 = icmp sgt i64 %44, %46
  br i1 %80, label %81, label %359

; <label>:81:                                     ; preds = %79
  %82 = inttoptr i64 %43 to i32*
  %83 = inttoptr i64 %35 to i32*
  %84 = sub i64 %44, %46
  %85 = icmp ult i64 %84, 32
  br i1 %85, label %215, label %86

; <label>:86:                                     ; preds = %81
  %87 = and i64 %84, -32
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %215, label %89

; <label>:89:                                     ; preds = %86
  %90 = getelementptr i32, i32* %82, i64 %46
  %91 = getelementptr i32, i32* %82, i64 %44
  %92 = getelementptr i32, i32* %83, i64 %46
  %93 = getelementptr i32, i32* %83, i64 %44
  %94 = icmp ult i32* %90, %93
  %95 = icmp ult i32* %92, %91
  %96 = and i1 %94, %95
  %97 = add i64 %46, %87
  br i1 %96, label %215, label %98

; <label>:98:                                     ; preds = %89
  %99 = add i64 %87, -32
  %100 = lshr exact i64 %99, 5
  %101 = and i64 %100, 1
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %103, label %137

; <label>:103:                                    ; preds = %98
  br label %104

; <label>:104:                                    ; preds = %103
  %105 = getelementptr inbounds i32, i32* %82, i64 %46
  %106 = getelementptr inbounds i32, i32* %83, i64 %46
  %107 = bitcast i32* %106 to <8 x i32>*
  %108 = load <8 x i32>, <8 x i32>* %107, align 4, !tbaa !33, !alias.scope !1126
  %109 = getelementptr i32, i32* %106, i64 8
  %110 = bitcast i32* %109 to <8 x i32>*
  %111 = load <8 x i32>, <8 x i32>* %110, align 4, !tbaa !33, !alias.scope !1126
  %112 = getelementptr i32, i32* %106, i64 16
  %113 = bitcast i32* %112 to <8 x i32>*
  %114 = load <8 x i32>, <8 x i32>* %113, align 4, !tbaa !33, !alias.scope !1126
  %115 = getelementptr i32, i32* %106, i64 24
  %116 = bitcast i32* %115 to <8 x i32>*
  %117 = load <8 x i32>, <8 x i32>* %116, align 4, !tbaa !33, !alias.scope !1126
  %118 = bitcast i32* %105 to <8 x i32>*
  %119 = load <8 x i32>, <8 x i32>* %118, align 4, !tbaa !33, !alias.scope !1129, !noalias !1126
  %120 = getelementptr i32, i32* %105, i64 8
  %121 = bitcast i32* %120 to <8 x i32>*
  %122 = load <8 x i32>, <8 x i32>* %121, align 4, !tbaa !33, !alias.scope !1129, !noalias !1126
  %123 = getelementptr i32, i32* %105, i64 16
  %124 = bitcast i32* %123 to <8 x i32>*
  %125 = load <8 x i32>, <8 x i32>* %124, align 4, !tbaa !33, !alias.scope !1129, !noalias !1126
  %126 = getelementptr i32, i32* %105, i64 24
  %127 = bitcast i32* %126 to <8 x i32>*
  %128 = load <8 x i32>, <8 x i32>* %127, align 4, !tbaa !33, !alias.scope !1129, !noalias !1126
  %129 = add nsw <8 x i32> %119, %108
  %130 = add nsw <8 x i32> %122, %111
  %131 = add nsw <8 x i32> %125, %114
  %132 = add nsw <8 x i32> %128, %117
  %133 = bitcast i32* %105 to <8 x i32>*
  store <8 x i32> %129, <8 x i32>* %133, align 4, !tbaa !33, !alias.scope !1129, !noalias !1126
  %134 = bitcast i32* %120 to <8 x i32>*
  store <8 x i32> %130, <8 x i32>* %134, align 4, !tbaa !33, !alias.scope !1129, !noalias !1126
  %135 = bitcast i32* %123 to <8 x i32>*
  store <8 x i32> %131, <8 x i32>* %135, align 4, !tbaa !33, !alias.scope !1129, !noalias !1126
  %136 = bitcast i32* %126 to <8 x i32>*
  store <8 x i32> %132, <8 x i32>* %136, align 4, !tbaa !33, !alias.scope !1129, !noalias !1126
  br label %137

; <label>:137:                                    ; preds = %104, %98
  %138 = phi i64 [ 0, %98 ], [ 32, %104 ]
  %139 = icmp eq i64 %100, 0
  br i1 %139, label %213, label %140

; <label>:140:                                    ; preds = %137
  br label %141

; <label>:141:                                    ; preds = %141, %140
  %142 = phi i64 [ %138, %140 ], [ %210, %141 ]
  %143 = add i64 %46, %142
  %144 = getelementptr inbounds i32, i32* %82, i64 %143
  %145 = getelementptr inbounds i32, i32* %83, i64 %143
  %146 = bitcast i32* %145 to <8 x i32>*
  %147 = load <8 x i32>, <8 x i32>* %146, align 4, !tbaa !33, !alias.scope !1126
  %148 = getelementptr i32, i32* %145, i64 8
  %149 = bitcast i32* %148 to <8 x i32>*
  %150 = load <8 x i32>, <8 x i32>* %149, align 4, !tbaa !33, !alias.scope !1126
  %151 = getelementptr i32, i32* %145, i64 16
  %152 = bitcast i32* %151 to <8 x i32>*
  %153 = load <8 x i32>, <8 x i32>* %152, align 4, !tbaa !33, !alias.scope !1126
  %154 = getelementptr i32, i32* %145, i64 24
  %155 = bitcast i32* %154 to <8 x i32>*
  %156 = load <8 x i32>, <8 x i32>* %155, align 4, !tbaa !33, !alias.scope !1126
  %157 = bitcast i32* %144 to <8 x i32>*
  %158 = load <8 x i32>, <8 x i32>* %157, align 4, !tbaa !33, !alias.scope !1129, !noalias !1126
  %159 = getelementptr i32, i32* %144, i64 8
  %160 = bitcast i32* %159 to <8 x i32>*
  %161 = load <8 x i32>, <8 x i32>* %160, align 4, !tbaa !33, !alias.scope !1129, !noalias !1126
  %162 = getelementptr i32, i32* %144, i64 16
  %163 = bitcast i32* %162 to <8 x i32>*
  %164 = load <8 x i32>, <8 x i32>* %163, align 4, !tbaa !33, !alias.scope !1129, !noalias !1126
  %165 = getelementptr i32, i32* %144, i64 24
  %166 = bitcast i32* %165 to <8 x i32>*
  %167 = load <8 x i32>, <8 x i32>* %166, align 4, !tbaa !33, !alias.scope !1129, !noalias !1126
  %168 = add nsw <8 x i32> %158, %147
  %169 = add nsw <8 x i32> %161, %150
  %170 = add nsw <8 x i32> %164, %153
  %171 = add nsw <8 x i32> %167, %156
  %172 = bitcast i32* %144 to <8 x i32>*
  store <8 x i32> %168, <8 x i32>* %172, align 4, !tbaa !33, !alias.scope !1129, !noalias !1126
  %173 = bitcast i32* %159 to <8 x i32>*
  store <8 x i32> %169, <8 x i32>* %173, align 4, !tbaa !33, !alias.scope !1129, !noalias !1126
  %174 = bitcast i32* %162 to <8 x i32>*
  store <8 x i32> %170, <8 x i32>* %174, align 4, !tbaa !33, !alias.scope !1129, !noalias !1126
  %175 = bitcast i32* %165 to <8 x i32>*
  store <8 x i32> %171, <8 x i32>* %175, align 4, !tbaa !33, !alias.scope !1129, !noalias !1126
  %176 = add i64 %142, 32
  %177 = add i64 %46, %176
  %178 = getelementptr inbounds i32, i32* %82, i64 %177
  %179 = getelementptr inbounds i32, i32* %83, i64 %177
  %180 = bitcast i32* %179 to <8 x i32>*
  %181 = load <8 x i32>, <8 x i32>* %180, align 4, !tbaa !33, !alias.scope !1126
  %182 = getelementptr i32, i32* %179, i64 8
  %183 = bitcast i32* %182 to <8 x i32>*
  %184 = load <8 x i32>, <8 x i32>* %183, align 4, !tbaa !33, !alias.scope !1126
  %185 = getelementptr i32, i32* %179, i64 16
  %186 = bitcast i32* %185 to <8 x i32>*
  %187 = load <8 x i32>, <8 x i32>* %186, align 4, !tbaa !33, !alias.scope !1126
  %188 = getelementptr i32, i32* %179, i64 24
  %189 = bitcast i32* %188 to <8 x i32>*
  %190 = load <8 x i32>, <8 x i32>* %189, align 4, !tbaa !33, !alias.scope !1126
  %191 = bitcast i32* %178 to <8 x i32>*
  %192 = load <8 x i32>, <8 x i32>* %191, align 4, !tbaa !33, !alias.scope !1129, !noalias !1126
  %193 = getelementptr i32, i32* %178, i64 8
  %194 = bitcast i32* %193 to <8 x i32>*
  %195 = load <8 x i32>, <8 x i32>* %194, align 4, !tbaa !33, !alias.scope !1129, !noalias !1126
  %196 = getelementptr i32, i32* %178, i64 16
  %197 = bitcast i32* %196 to <8 x i32>*
  %198 = load <8 x i32>, <8 x i32>* %197, align 4, !tbaa !33, !alias.scope !1129, !noalias !1126
  %199 = getelementptr i32, i32* %178, i64 24
  %200 = bitcast i32* %199 to <8 x i32>*
  %201 = load <8 x i32>, <8 x i32>* %200, align 4, !tbaa !33, !alias.scope !1129, !noalias !1126
  %202 = add nsw <8 x i32> %192, %181
  %203 = add nsw <8 x i32> %195, %184
  %204 = add nsw <8 x i32> %198, %187
  %205 = add nsw <8 x i32> %201, %190
  %206 = bitcast i32* %178 to <8 x i32>*
  store <8 x i32> %202, <8 x i32>* %206, align 4, !tbaa !33, !alias.scope !1129, !noalias !1126
  %207 = bitcast i32* %193 to <8 x i32>*
  store <8 x i32> %203, <8 x i32>* %207, align 4, !tbaa !33, !alias.scope !1129, !noalias !1126
  %208 = bitcast i32* %196 to <8 x i32>*
  store <8 x i32> %204, <8 x i32>* %208, align 4, !tbaa !33, !alias.scope !1129, !noalias !1126
  %209 = bitcast i32* %199 to <8 x i32>*
  store <8 x i32> %205, <8 x i32>* %209, align 4, !tbaa !33, !alias.scope !1129, !noalias !1126
  %210 = add i64 %142, 64
  %211 = icmp eq i64 %210, %87
  br i1 %211, label %212, label %141, !llvm.loop !1131

; <label>:212:                                    ; preds = %141
  br label %213

; <label>:213:                                    ; preds = %137, %212
  %214 = icmp eq i64 %84, %87
  br i1 %214, label %359, label %215

; <label>:215:                                    ; preds = %213, %89, %86, %81
  %216 = phi i64 [ %46, %89 ], [ %46, %86 ], [ %46, %81 ], [ %97, %213 ]
  %217 = sub i64 %44, %216
  %218 = add i64 %44, -1
  %219 = sub i64 %218, %216
  %220 = and i64 %217, 7
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %235, label %222

; <label>:222:                                    ; preds = %215
  br label %223

; <label>:223:                                    ; preds = %223, %222
  %224 = phi i64 [ %231, %223 ], [ %216, %222 ]
  %225 = phi i64 [ %232, %223 ], [ %220, %222 ]
  %226 = getelementptr inbounds i32, i32* %82, i64 %224
  %227 = getelementptr inbounds i32, i32* %83, i64 %224
  %228 = load i32, i32* %227, align 4, !tbaa !33
  %229 = load i32, i32* %226, align 4, !tbaa !33
  %230 = add nsw i32 %229, %228
  store i32 %230, i32* %226, align 4, !tbaa !33
  %231 = add nsw i64 %224, 1
  %232 = add i64 %225, -1
  %233 = icmp eq i64 %232, 0
  br i1 %233, label %234, label %223, !llvm.loop !1132

; <label>:234:                                    ; preds = %223
  br label %235

; <label>:235:                                    ; preds = %215, %234
  %236 = phi i64 [ %216, %215 ], [ %231, %234 ]
  %237 = icmp ult i64 %219, 7
  br i1 %237, label %358, label %238

; <label>:238:                                    ; preds = %235
  br label %239

; <label>:239:                                    ; preds = %239, %238
  %240 = phi i64 [ %236, %238 ], [ %288, %239 ]
  %241 = getelementptr inbounds i32, i32* %82, i64 %240
  %242 = getelementptr inbounds i32, i32* %83, i64 %240
  %243 = load i32, i32* %242, align 4, !tbaa !33
  %244 = load i32, i32* %241, align 4, !tbaa !33
  %245 = add nsw i32 %244, %243
  store i32 %245, i32* %241, align 4, !tbaa !33
  %246 = add nsw i64 %240, 1
  %247 = getelementptr inbounds i32, i32* %82, i64 %246
  %248 = getelementptr inbounds i32, i32* %83, i64 %246
  %249 = load i32, i32* %248, align 4, !tbaa !33
  %250 = load i32, i32* %247, align 4, !tbaa !33
  %251 = add nsw i32 %250, %249
  store i32 %251, i32* %247, align 4, !tbaa !33
  %252 = add nsw i64 %240, 2
  %253 = getelementptr inbounds i32, i32* %82, i64 %252
  %254 = getelementptr inbounds i32, i32* %83, i64 %252
  %255 = load i32, i32* %254, align 4, !tbaa !33
  %256 = load i32, i32* %253, align 4, !tbaa !33
  %257 = add nsw i32 %256, %255
  store i32 %257, i32* %253, align 4, !tbaa !33
  %258 = add nsw i64 %240, 3
  %259 = getelementptr inbounds i32, i32* %82, i64 %258
  %260 = getelementptr inbounds i32, i32* %83, i64 %258
  %261 = load i32, i32* %260, align 4, !tbaa !33
  %262 = load i32, i32* %259, align 4, !tbaa !33
  %263 = add nsw i32 %262, %261
  store i32 %263, i32* %259, align 4, !tbaa !33
  %264 = add nsw i64 %240, 4
  %265 = getelementptr inbounds i32, i32* %82, i64 %264
  %266 = getelementptr inbounds i32, i32* %83, i64 %264
  %267 = load i32, i32* %266, align 4, !tbaa !33
  %268 = load i32, i32* %265, align 4, !tbaa !33
  %269 = add nsw i32 %268, %267
  store i32 %269, i32* %265, align 4, !tbaa !33
  %270 = add nsw i64 %240, 5
  %271 = getelementptr inbounds i32, i32* %82, i64 %270
  %272 = getelementptr inbounds i32, i32* %83, i64 %270
  %273 = load i32, i32* %272, align 4, !tbaa !33
  %274 = load i32, i32* %271, align 4, !tbaa !33
  %275 = add nsw i32 %274, %273
  store i32 %275, i32* %271, align 4, !tbaa !33
  %276 = add nsw i64 %240, 6
  %277 = getelementptr inbounds i32, i32* %82, i64 %276
  %278 = getelementptr inbounds i32, i32* %83, i64 %276
  %279 = load i32, i32* %278, align 4, !tbaa !33
  %280 = load i32, i32* %277, align 4, !tbaa !33
  %281 = add nsw i32 %280, %279
  store i32 %281, i32* %277, align 4, !tbaa !33
  %282 = add nsw i64 %240, 7
  %283 = getelementptr inbounds i32, i32* %82, i64 %282
  %284 = getelementptr inbounds i32, i32* %83, i64 %282
  %285 = load i32, i32* %284, align 4, !tbaa !33
  %286 = load i32, i32* %283, align 4, !tbaa !33
  %287 = add nsw i32 %286, %285
  store i32 %287, i32* %283, align 4, !tbaa !33
  %288 = add nsw i64 %240, 8
  %289 = icmp eq i64 %288, %44
  br i1 %289, label %357, label %239, !llvm.loop !1133

; <label>:290:                                    ; preds = %290, %76
  %291 = phi i64 [ %74, %76 ], [ %355, %290 ]
  %292 = getelementptr inbounds i32, i32* %49, i64 %291
  %293 = getelementptr inbounds i32, i32* %50, i64 %291
  %294 = bitcast i32* %293 to <4 x i32>*
  %295 = load <4 x i32>, <4 x i32>* %294, align 16, !tbaa !11
  %296 = bitcast i32* %292 to <4 x i32>*
  %297 = load <4 x i32>, <4 x i32>* %296, align 16, !tbaa !11
  %298 = add <4 x i32> %297, %295
  store <4 x i32> %298, <4 x i32>* %296, align 16, !tbaa !11
  %299 = add nuw nsw i64 %291, 4
  %300 = getelementptr inbounds i32, i32* %49, i64 %299
  %301 = getelementptr inbounds i32, i32* %50, i64 %299
  %302 = bitcast i32* %301 to <4 x i32>*
  %303 = load <4 x i32>, <4 x i32>* %302, align 16, !tbaa !11
  %304 = bitcast i32* %300 to <4 x i32>*
  %305 = load <4 x i32>, <4 x i32>* %304, align 16, !tbaa !11
  %306 = add <4 x i32> %305, %303
  store <4 x i32> %306, <4 x i32>* %304, align 16, !tbaa !11
  %307 = add nsw i64 %291, 8
  %308 = getelementptr inbounds i32, i32* %49, i64 %307
  %309 = getelementptr inbounds i32, i32* %50, i64 %307
  %310 = bitcast i32* %309 to <4 x i32>*
  %311 = load <4 x i32>, <4 x i32>* %310, align 16, !tbaa !11
  %312 = bitcast i32* %308 to <4 x i32>*
  %313 = load <4 x i32>, <4 x i32>* %312, align 16, !tbaa !11
  %314 = add <4 x i32> %313, %311
  store <4 x i32> %314, <4 x i32>* %312, align 16, !tbaa !11
  %315 = add nsw i64 %291, 12
  %316 = getelementptr inbounds i32, i32* %49, i64 %315
  %317 = getelementptr inbounds i32, i32* %50, i64 %315
  %318 = bitcast i32* %317 to <4 x i32>*
  %319 = load <4 x i32>, <4 x i32>* %318, align 16, !tbaa !11
  %320 = bitcast i32* %316 to <4 x i32>*
  %321 = load <4 x i32>, <4 x i32>* %320, align 16, !tbaa !11
  %322 = add <4 x i32> %321, %319
  store <4 x i32> %322, <4 x i32>* %320, align 16, !tbaa !11
  %323 = add nsw i64 %291, 16
  %324 = getelementptr inbounds i32, i32* %49, i64 %323
  %325 = getelementptr inbounds i32, i32* %50, i64 %323
  %326 = bitcast i32* %325 to <4 x i32>*
  %327 = load <4 x i32>, <4 x i32>* %326, align 16, !tbaa !11
  %328 = bitcast i32* %324 to <4 x i32>*
  %329 = load <4 x i32>, <4 x i32>* %328, align 16, !tbaa !11
  %330 = add <4 x i32> %329, %327
  store <4 x i32> %330, <4 x i32>* %328, align 16, !tbaa !11
  %331 = add nsw i64 %291, 20
  %332 = getelementptr inbounds i32, i32* %49, i64 %331
  %333 = getelementptr inbounds i32, i32* %50, i64 %331
  %334 = bitcast i32* %333 to <4 x i32>*
  %335 = load <4 x i32>, <4 x i32>* %334, align 16, !tbaa !11
  %336 = bitcast i32* %332 to <4 x i32>*
  %337 = load <4 x i32>, <4 x i32>* %336, align 16, !tbaa !11
  %338 = add <4 x i32> %337, %335
  store <4 x i32> %338, <4 x i32>* %336, align 16, !tbaa !11
  %339 = add nsw i64 %291, 24
  %340 = getelementptr inbounds i32, i32* %49, i64 %339
  %341 = getelementptr inbounds i32, i32* %50, i64 %339
  %342 = bitcast i32* %341 to <4 x i32>*
  %343 = load <4 x i32>, <4 x i32>* %342, align 16, !tbaa !11
  %344 = bitcast i32* %340 to <4 x i32>*
  %345 = load <4 x i32>, <4 x i32>* %344, align 16, !tbaa !11
  %346 = add <4 x i32> %345, %343
  store <4 x i32> %346, <4 x i32>* %344, align 16, !tbaa !11
  %347 = add nsw i64 %291, 28
  %348 = getelementptr inbounds i32, i32* %49, i64 %347
  %349 = getelementptr inbounds i32, i32* %50, i64 %347
  %350 = bitcast i32* %349 to <4 x i32>*
  %351 = load <4 x i32>, <4 x i32>* %350, align 16, !tbaa !11
  %352 = bitcast i32* %348 to <4 x i32>*
  %353 = load <4 x i32>, <4 x i32>* %352, align 16, !tbaa !11
  %354 = add <4 x i32> %353, %351
  store <4 x i32> %354, <4 x i32>* %352, align 16, !tbaa !11
  %355 = add nsw i64 %291, 32
  %356 = icmp slt i64 %355, %46
  br i1 %356, label %290, label %77

; <label>:357:                                    ; preds = %239
  br label %358

; <label>:358:                                    ; preds = %235, %357
  br label %359

; <label>:359:                                    ; preds = %358, %213, %79
  %360 = getelementptr inbounds %"class.Eigen::Matrix.48", %"class.Eigen::Matrix.48"* %5, i64 0, i32 0, i32 0, i32 0
  %361 = load i32*, i32** %360, align 8, !tbaa !38
  %362 = icmp eq i32* %361, null
  br i1 %362, label %367, label %363

; <label>:363:                                    ; preds = %359
  %364 = getelementptr inbounds i32, i32* %361, i64 -2
  %365 = bitcast i32* %364 to i8**
  %366 = load i8*, i8** %365, align 8, !tbaa !29
  call void @free(i8* %366) #11
  br label %367

; <label>:367:                                    ; preds = %359, %363
  call void @llvm.lifetime.end(i64 16, i8* nonnull %6) #11
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #2

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.fma.v4f64(<4 x double>, <4 x double>, <4 x double>) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core-avx2" "target-features"="+aes,+avx,+avx2,+bmi,+bmi2,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+rtm,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core-avx2" "target-features"="+aes,+avx,+avx2,+bmi,+bmi2,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+rtm,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core-avx2" "target-features"="+aes,+avx,+avx2,+bmi,+bmi2,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+rtm,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="true" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core-avx2" "target-features"="+aes,+avx,+avx2,+bmi,+bmi2,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+rtm,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core-avx2" "target-features"="+aes,+avx,+avx2,+bmi,+bmi2,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+rtm,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind allocsize(0) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core-avx2" "target-features"="+aes,+avx,+avx2,+bmi,+bmi2,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+rtm,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core-avx2" "target-features"="+aes,+avx,+avx2,+bmi,+bmi2,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+rtm,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core-avx2" "target-features"="+aes,+avx,+avx2,+bmi,+bmi2,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+rtm,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core-avx2" "target-features"="+aes,+avx,+avx2,+bmi,+bmi2,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+rtm,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { inlinehint norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core-avx2" "target-features"="+aes,+avx,+avx2,+bmi,+bmi2,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+rtm,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noreturn nounwind }
attributes #14 = { nounwind allocsize(0) }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{!"Apple LLVM version 9.0.0 (clang-900.0.39.2)"}
!2 = !{!3, !7, i64 16}
!3 = !{!"_ZTSN5Eigen12DenseStorageIdLin1ELin1ELin1ELi0EEE", !4, i64 0, !7, i64 8, !7, i64 16}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!"long", !5, i64 0}
!8 = !{!9, !7, i64 8}
!9 = !{!"_ZTSN5Eigen12DenseStorageIdLin1ELin1ELi1ELi0EEE", !4, i64 0, !7, i64 8}
!10 = !{!"branch_weights", i32 2000, i32 1}
!11 = !{!5, !5, i64 0}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS2_IdLin1ELi1ELi0ELin1ELi1EEELi0EEEEmiIS4_EEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIdNS9_6traitsIT_E6ScalarEEEKS5_KSC_EERKNS0_ISC_EE: argument 0"}
!14 = distinct !{!14, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIdLin1ELin1ELi0ELin1ELin1EEENS2_IdLin1ELi1ELi0ELin1ELi1EEELi0EEEEmiIS4_EEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIdNS9_6traitsIT_E6ScalarEEEKS5_KSC_EERKNS0_ISC_EE"}
!15 = !{!3, !7, i64 8}
!16 = !{!9, !4, i64 0}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.unroll.disable"}
!19 = !{!20, !20, i64 0}
!20 = !{!"double", !5, i64 0}
!21 = distinct !{!21, !18}
!22 = distinct !{!22, !18}
!23 = !{!24, !4, i64 0}
!24 = !{!"_ZTSN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE", !4, i64 0, !25, i64 8}
!25 = !{!"_ZTSN5Eigen8internal19variable_if_dynamicIlLi0EEE"}
!26 = distinct !{!26, !18}
!27 = distinct !{!27, !18}
!28 = distinct !{!28, !18}
!29 = !{!4, !4, i64 0}
!30 = !{!31, !4, i64 0}
!31 = !{!"_ZTSN5Eigen12DenseStorageIiLin1ELin1ELin1ELi0EEE", !4, i64 0, !7, i64 8, !7, i64 16}
!32 = !{!7, !7, i64 0}
!33 = !{!34, !34, i64 0}
!34 = !{!"int", !5, i64 0}
!35 = !{!36, !4, i64 0}
!36 = !{!"_ZTSN5Eigen12DenseStorageIiLin1ELin1ELi47ELi0EEE", !4, i64 0, !7, i64 8}
!37 = !{!36, !7, i64 8}
!38 = !{!39, !4, i64 0}
!39 = !{!"_ZTSN5Eigen12DenseStorageIiLin1ELi47ELin1ELi0EEE", !4, i64 0, !7, i64 8}
!40 = !{!39, !7, i64 8}
!41 = !{!42, !4, i64 0}
!42 = !{!"_ZTSN5Eigen12DenseStorageIiLin1ELin1ELi6ELi0EEE", !4, i64 0, !7, i64 8}
!43 = !{!42, !7, i64 8}
!44 = !{!45, !4, i64 0}
!45 = !{!"_ZTSN5Eigen12DenseStorageIiLin1ELin1ELi1ELi0EEE", !4, i64 0, !7, i64 8}
!46 = !{!45, !7, i64 8}
!47 = !{!48}
!48 = distinct !{!48, !49, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEENS2_IiLi6ELi1ELi0ELi6ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_: argument 0"}
!49 = distinct !{!49, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEENS2_IiLi6ELi1ELi0ELi6ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_"}
!50 = !{!"branch_weights", i32 1, i32 2000}
!51 = !{!52, !34, i64 0}
!52 = !{!"_ZTSN5Eigen8internal18scalar_constant_opIiEE", !34, i64 0}
!53 = !{!54}
!54 = distinct !{!54, !55, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEENS2_IiLi6ELi1ELi0ELi6ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_: argument 0"}
!55 = distinct !{!55, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEENS2_IiLi6ELi1ELi0ELi6ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_"}
!56 = !{!57}
!57 = distinct !{!57, !58, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi1ELi0ELi47ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_: argument 0"}
!58 = distinct !{!58, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi1ELi0ELi47ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_"}
!59 = !{!60, !7, i64 0}
!60 = !{!"_ZTSN5Eigen8internal19variable_if_dynamicIlLin1EEE", !7, i64 0}
!61 = !{!62, !4, i64 0}
!62 = !{!"_ZTSN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEEEEEE", !4, i64 0, !25, i64 8}
!63 = distinct !{!63, !18}
!64 = !{!65}
!65 = distinct !{!65, !66}
!66 = distinct !{!66, !"LVerDomain"}
!67 = !{!68}
!68 = distinct !{!68, !66}
!69 = !{!70}
!70 = distinct !{!70, !66}
!71 = !{!65, !68}
!72 = distinct !{!72, !73, !74}
!73 = !{!"llvm.loop.vectorize.width", i32 1}
!74 = !{!"llvm.loop.interleave.count", i32 1}
!75 = distinct !{!75, !18}
!76 = distinct !{!76, !73, !74}
!77 = !{!78}
!78 = distinct !{!78, !79, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi1ELi0ELi47ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_: argument 0"}
!79 = distinct !{!79, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi1ELi0ELi47ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_"}
!80 = distinct !{!80, !18}
!81 = !{!82}
!82 = distinct !{!82, !83}
!83 = distinct !{!83, !"LVerDomain"}
!84 = !{!85}
!85 = distinct !{!85, !83}
!86 = !{!87}
!87 = distinct !{!87, !83}
!88 = !{!82, !85}
!89 = distinct !{!89, !73, !74}
!90 = distinct !{!90, !18}
!91 = distinct !{!91, !73, !74}
!92 = !{!93, !4, i64 0}
!93 = !{!"_ZTSN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIiLi47ELi1ELi0ELi47ELi1EEEEEEE", !4, i64 0, !25, i64 8}
!94 = !{!95, !4, i64 0}
!95 = !{!"_ZTSN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEEEE", !4, i64 0, !96, i64 8}
!96 = !{!"_ZTSN5Eigen8internal19variable_if_dynamicIlLi47EEE"}
!97 = !{!98, !4, i64 0}
!98 = !{!"_ZTSN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIiLi6ELi1ELi0ELi6ELi1EEEEEEE", !4, i64 0, !25, i64 8}
!99 = !{!100, !7, i64 48}
!100 = !{!"_ZTSN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS3_IiLi6ELi1ELi0ELi6ELi1EEELi1EEELi3ENS_10DenseShapeES7_iiEE", !5, i64 0, !5, i64 8, !101, i64 16, !102, i64 32, !7, i64 48}
!101 = !{!"_ZTSN5Eigen8internal9evaluatorINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEE"}
!102 = !{!"_ZTSN5Eigen8internal9evaluatorINS_6MatrixIiLi6ELi1ELi0ELi6ELi1EEEEE"}
!103 = !{!104, !4, i64 0}
!104 = !{!"_ZTSN5Eigen8internal17mapbase_evaluatorINS_5BlockINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi47ELi1ELb1EEENS3_IiLi47ELi1ELi0ELi47ELi1EEEEE", !4, i64 0, !105, i64 8, !96, i64 9}
!105 = !{!"_ZTSN5Eigen8internal19variable_if_dynamicIlLi1EEE"}
!106 = !{!107}
!107 = distinct !{!107, !108, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEENS2_IiLi6ELi1ELi0ELi6ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_: argument 0"}
!108 = distinct !{!108, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEENS2_IiLi6ELi1ELi0ELi6ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_"}
!109 = !{!110}
!110 = distinct !{!110, !111, !"_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EEEmlINS_9TransposeIKNS8_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS_7ProductISD_T_Li0EEERKNS0_ISL_EE: argument 0"}
!111 = distinct !{!111, !"_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EEEmlINS_9TransposeIKNS8_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS_7ProductISD_T_Li0EEERKNS0_ISL_EE"}
!112 = distinct !{!112, !18}
!113 = distinct !{!113, !73, !74}
!114 = distinct !{!114, !115, !73, !74}
!115 = !{!"llvm.loop.unroll.runtime.disable"}
!116 = !{!117}
!117 = distinct !{!117, !118, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEEEmlINS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS1_IS5_T_Li0EEERKNS0_ISC_EE: argument 0"}
!118 = distinct !{!118, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEEEmlINS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS1_IS5_T_Li0EEERKNS0_ISC_EE"}
!119 = distinct !{!119, !18}
!120 = distinct !{!120, !73, !74}
!121 = distinct !{!121, !115, !73, !74}
!122 = !{!123}
!123 = distinct !{!123, !124, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEEEmlINS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS1_IS5_T_Li0EEERKNS0_ISB_EE: argument 0"}
!124 = distinct !{!124, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEEEmlINS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS1_IS5_T_Li0EEERKNS0_ISB_EE"}
!125 = !{!126, !7, i64 64}
!126 = !{!"_ZTSN5Eigen8internal17product_evaluatorINS_7ProductINS_9TransposeINS_6MatrixIiLi6ELi1ELi0ELi6ELi1EEEEENS3_INS4_IiLi47ELi6ELi0ELi47ELi6EEEEELi1EEELi3ENS_10DenseShapeESA_iiEE", !127, i64 0, !128, i64 8, !129, i64 16, !130, i64 40, !7, i64 64}
!127 = !{!"_ZTSN5Eigen9TransposeINS_6MatrixIiLi6ELi1ELi0ELi6ELi1EEEEE", !5, i64 0}
!128 = !{!"_ZTSN5Eigen9TransposeINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEE", !5, i64 0}
!129 = !{!"_ZTSN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIiLi6ELi1ELi0ELi6ELi1EEEEEEE"}
!130 = !{!"_ZTSN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEEEE"}
!131 = !{!132, !4, i64 0}
!132 = !{!"_ZTSN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIiLi1ELi47ELi1ELi1ELi47EEEEEEE", !4, i64 0, !25, i64 8}
!133 = !{!134}
!134 = distinct !{!134, !135, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEENS2_IiLi6ELi1ELi0ELi6ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_: argument 0"}
!135 = distinct !{!135, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEENS2_IiLi6ELi1ELi0ELi6ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_"}
!136 = !{!137}
!137 = distinct !{!137, !138, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi1ELi0ELi47ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_: argument 0"}
!138 = distinct !{!138, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi1ELi0ELi47ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_"}
!139 = distinct !{!139, !18}
!140 = distinct !{!140, !73, !74}
!141 = distinct !{!141, !115, !73, !74}
!142 = !{!143}
!143 = distinct !{!143, !144, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEEEmlINS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS1_IS5_T_Li0EEERKNS0_ISB_EE: argument 0"}
!144 = distinct !{!144, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEEEmlINS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS1_IS5_T_Li0EEERKNS0_ISB_EE"}
!145 = !{!146}
!146 = distinct !{!146, !147, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi1ELi0ELi47ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_: argument 0"}
!147 = distinct !{!147, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi1ELi0ELi47ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_"}
!148 = !{!149}
!149 = distinct !{!149, !150, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi1ELi0ELi47ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_: argument 0"}
!150 = distinct !{!150, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi1ELi0ELi47ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_"}
!151 = distinct !{!151, !18}
!152 = !{!153}
!153 = distinct !{!153, !154}
!154 = distinct !{!154, !"LVerDomain"}
!155 = !{!156}
!156 = distinct !{!156, !154}
!157 = !{!158}
!158 = distinct !{!158, !154}
!159 = !{!153, !156}
!160 = distinct !{!160, !73, !74}
!161 = distinct !{!161, !18}
!162 = distinct !{!162, !73, !74}
!163 = !{!164}
!164 = distinct !{!164, !165, !"_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EEEmlINS_9TransposeINS8_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS_7ProductISD_T_Li0EEERKNS0_ISK_EE: argument 0"}
!165 = distinct !{!165, !"_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EEEmlINS_9TransposeINS8_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS_7ProductISD_T_Li0EEERKNS0_ISK_EE"}
!166 = !{!167}
!167 = distinct !{!167, !168, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi1ELi0ELi47ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_: argument 0"}
!168 = distinct !{!168, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi1ELi0ELi47ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_"}
!169 = distinct !{!169, !18}
!170 = !{!171}
!171 = distinct !{!171, !172}
!172 = distinct !{!172, !"LVerDomain"}
!173 = !{!174}
!174 = distinct !{!174, !172}
!175 = !{!176}
!176 = distinct !{!176, !172}
!177 = !{!171, !174}
!178 = distinct !{!178, !73, !74}
!179 = distinct !{!179, !18}
!180 = distinct !{!180, !73, !74}
!181 = !{!182}
!182 = distinct !{!182, !183, !"_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EEEmlINS_9TransposeINS8_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS_7ProductISD_T_Li0EEERKNS0_ISK_EE: argument 0"}
!183 = distinct !{!183, !"_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EEEmlINS_9TransposeINS8_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS_7ProductISD_T_Li0EEERKNS0_ISK_EE"}
!184 = distinct !{!184, !18}
!185 = distinct !{!185, !73, !74}
!186 = distinct !{!186, !115, !73, !74}
!187 = !{!188}
!188 = distinct !{!188, !189, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEEEmlINS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS1_IS5_T_Li0EEERKNS0_ISC_EE: argument 0"}
!189 = distinct !{!189, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEEEmlINS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS1_IS5_T_Li0EEERKNS0_ISC_EE"}
!190 = !{!191}
!191 = distinct !{!191, !192, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS3_IiLin1ELi47ELi0ELin1ELi47EEELi0EEEEmlINS3_IiLi47ELi6ELi0ELi47ELi6EEEEEKNS1_IS7_T_Li0EEERKNS0_ISB_EE: argument 0"}
!192 = distinct !{!192, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS3_IiLin1ELi47ELi0ELin1ELi47EEELi0EEEEmlINS3_IiLi47ELi6ELi0ELi47ELi6EEEEEKNS1_IS7_T_Li0EEERKNS0_ISB_EE"}
!193 = !{!194, !7, i64 32}
!194 = !{!"_ZTSN5Eigen8internal15level3_blockingIiiEE", !4, i64 0, !4, i64 8, !7, i64 16, !7, i64 24, !7, i64 32}
!195 = !{!194, !4, i64 0}
!196 = !{!194, !4, i64 8}
!197 = !{!198, !4, i64 0}
!198 = !{!"_ZTSN5Eigen12DenseStorageIiLin1ELi1ELin1ELi1EEE", !4, i64 0, !7, i64 8}
!199 = !{!200}
!200 = distinct !{!200, !201, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi1ELi0ELi47ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_: argument 0"}
!201 = distinct !{!201, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi1ELi0ELi47ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_"}
!202 = distinct !{!202, !18}
!203 = !{!204}
!204 = distinct !{!204, !205}
!205 = distinct !{!205, !"LVerDomain"}
!206 = !{!207}
!207 = distinct !{!207, !205}
!208 = !{!209}
!209 = distinct !{!209, !205}
!210 = !{!204, !207}
!211 = distinct !{!211, !73, !74}
!212 = distinct !{!212, !18}
!213 = distinct !{!213, !73, !74}
!214 = distinct !{!214, !18}
!215 = distinct !{!215, !73, !74}
!216 = distinct !{!216, !115, !73, !74}
!217 = !{!218}
!218 = distinct !{!218, !219, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEEEmlINS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS1_IS5_T_Li0EEERKNS0_ISB_EE: argument 0"}
!219 = distinct !{!219, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEEEmlINS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS1_IS5_T_Li0EEERKNS0_ISB_EE"}
!220 = !{!221}
!221 = distinct !{!221, !222, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEENS2_IiLi6ELi1ELi0ELi6ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_: argument 0"}
!222 = distinct !{!222, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEENS2_IiLi6ELi1ELi0ELi6ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_"}
!223 = distinct !{!223, !18}
!224 = !{!225}
!225 = distinct !{!225, !226}
!226 = distinct !{!226, !"LVerDomain"}
!227 = !{!228}
!228 = distinct !{!228, !226}
!229 = distinct !{!229, !18}
!230 = distinct !{!230, !73, !74}
!231 = distinct !{!231, !18}
!232 = distinct !{!232, !73, !74}
!233 = !{!234}
!234 = distinct !{!234, !235, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS3_IiLin1ELi47ELi0ELin1ELi47EEELi0EEEEmlINS3_IiLi47ELi6ELi0ELi47ELi6EEEEEKNS1_IS8_T_Li0EEERKNS0_ISC_EE: argument 0"}
!235 = distinct !{!235, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS3_IiLin1ELi47ELi0ELin1ELi47EEELi0EEEEmlINS3_IiLi47ELi6ELi0ELi47ELi6EEEEEKNS1_IS8_T_Li0EEERKNS0_ISC_EE"}
!236 = distinct !{!236, !18}
!237 = distinct !{!237, !73, !74}
!238 = distinct !{!238, !115, !73, !74}
!239 = !{!240}
!240 = distinct !{!240, !241, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEEEmlINS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS1_IS5_T_Li0EEERKNS0_ISB_EE: argument 0"}
!241 = distinct !{!241, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEEEmlINS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS1_IS5_T_Li0EEERKNS0_ISB_EE"}
!242 = distinct !{!242, !18}
!243 = distinct !{!243, !73, !74}
!244 = distinct !{!244, !115, !73, !74}
!245 = !{!246}
!246 = distinct !{!246, !247, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEEEmlINS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS1_IS5_T_Li0EEERKNS0_ISC_EE: argument 0"}
!247 = distinct !{!247, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEEEmlINS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS1_IS5_T_Li0EEERKNS0_ISC_EE"}
!248 = !{!249}
!249 = distinct !{!249, !250, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi1ELi0ELi47ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_: argument 0"}
!250 = distinct !{!250, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi1ELi0ELi47ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_"}
!251 = !{!252}
!252 = distinct !{!252, !253, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEEEmlINS2_IiLin1ELi47ELi0ELin1ELi47EEEEEKNS1_IS8_T_Li0EEERKNS0_ISC_EE: argument 0"}
!253 = distinct !{!253, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEEEmlINS2_IiLin1ELi47ELi0ELin1ELi47EEEEEKNS1_IS8_T_Li0EEERKNS0_ISC_EE"}
!254 = distinct !{!254, !18}
!255 = distinct !{!255, !73, !74}
!256 = distinct !{!256, !115, !73, !74}
!257 = !{!258}
!258 = distinct !{!258, !259, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEEEmlINS2_IiLin1ELi47ELi0ELin1ELi47EEEEEKNS1_IS7_T_Li0EEERKNS0_ISB_EE: argument 0"}
!259 = distinct !{!259, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEEEmlINS2_IiLin1ELi47ELi0ELin1ELi47EEEEEKNS1_IS7_T_Li0EEERKNS0_ISB_EE"}
!260 = !{!261}
!261 = distinct !{!261, !262, !"_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EEEmlINS_9TransposeIKNS8_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS_7ProductISD_T_Li0EEERKNS0_ISL_EE: argument 0"}
!262 = distinct !{!262, !"_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EEEmlINS_9TransposeIKNS8_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS_7ProductISD_T_Li0EEERKNS0_ISL_EE"}
!263 = !{!264}
!264 = distinct !{!264, !265, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEEEmlINS2_IiLin1ELi47ELi0ELin1ELi47EEEEEKNS1_IS8_T_Li0EEERKNS0_ISC_EE: argument 0"}
!265 = distinct !{!265, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEEEmlINS2_IiLin1ELi47ELi0ELin1ELi47EEEEEKNS1_IS8_T_Li0EEERKNS0_ISC_EE"}
!266 = distinct !{!266, !18}
!267 = distinct !{!267, !73, !74}
!268 = distinct !{!268, !115, !73, !74}
!269 = !{!270}
!270 = distinct !{!270, !271, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEENS2_IiLi6ELi1ELi0ELi6ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_: argument 0"}
!271 = distinct !{!271, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEENS2_IiLi6ELi1ELi0ELi6ELi1EEELi0EEEEmlIiEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS8_17scalar_product_opIiNS8_18promote_scalar_argIiT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIiSD_NSB_IiSD_EEEEEE5valueEE4typeEEEKS5_KNS8_19plain_constant_typeIS5_SI_E4typeEEEE4typeERKSD_"}
!272 = !{!3, !4, i64 0}
!273 = !{!274, !4, i64 0}
!274 = !{!"_ZTSN5Eigen8internal16blas_data_mapperIKdlLi0ELi0EEE", !4, i64 0, !7, i64 8}
!275 = !{!274, !7, i64 8}
!276 = !{!277, !4, i64 0}
!277 = !{!"_ZTSN5Eigen8internal16blas_data_mapperIKdlLi1ELi0EEE", !4, i64 0, !7, i64 8}
!278 = !{!277, !7, i64 8}
!279 = !{!280}
!280 = distinct !{!280, !281}
!281 = distinct !{!281, !"LVerDomain"}
!282 = !{!283}
!283 = distinct !{!283, !281}
!284 = !{!285, !286, !287, !280}
!285 = distinct !{!285, !281}
!286 = distinct !{!286, !281}
!287 = distinct !{!287, !281}
!288 = !{!287}
!289 = !{!286}
!290 = !{!285}
!291 = distinct !{!291, !73, !74}
!292 = !{!293}
!293 = distinct !{!293, !294}
!294 = distinct !{!294, !"LVerDomain"}
!295 = !{!296}
!296 = distinct !{!296, !294}
!297 = !{!298, !299, !300, !293}
!298 = distinct !{!298, !294}
!299 = distinct !{!299, !294}
!300 = distinct !{!300, !294}
!301 = !{!300}
!302 = !{!299}
!303 = !{!298}
!304 = distinct !{!304, !73, !74}
!305 = distinct !{!305, !73, !74}
!306 = distinct !{!306, !73, !74}
!307 = distinct !{!307, !18}
!308 = !{!309}
!309 = distinct !{!309, !310}
!310 = distinct !{!310, !"LVerDomain"}
!311 = !{!312}
!312 = distinct !{!312, !310}
!313 = distinct !{!313, !73, !74}
!314 = distinct !{!314, !73, !74}
!315 = distinct !{!315, !73, !74}
!316 = distinct !{!316, !18}
!317 = !{!318}
!318 = distinct !{!318, !319}
!319 = distinct !{!319, !"LVerDomain"}
!320 = !{!321}
!321 = distinct !{!321, !319}
!322 = distinct !{!322, !73, !74}
!323 = distinct !{!323, !18}
!324 = distinct !{!324, !18}
!325 = distinct !{!325, !18}
!326 = distinct !{!326, !18}
!327 = distinct !{!327, !18}
!328 = !{!329}
!329 = distinct !{!329, !330}
!330 = distinct !{!330, !"LVerDomain"}
!331 = !{!332}
!332 = distinct !{!332, !330}
!333 = distinct !{!333, !73, !74}
!334 = distinct !{!334, !73, !74}
!335 = distinct !{!335, !18}
!336 = !{!337}
!337 = distinct !{!337, !338}
!338 = distinct !{!338, !"LVerDomain"}
!339 = !{!340}
!340 = distinct !{!340, !338}
!341 = !{!342}
!342 = distinct !{!342, !338}
!343 = !{!337, !340}
!344 = distinct !{!344, !73, !74}
!345 = distinct !{!345, !18}
!346 = distinct !{!346, !73, !74}
!347 = !{!348}
!348 = distinct !{!348, !349, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEE3rowEl: argument 0"}
!349 = distinct !{!349, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEE3rowEl"}
!350 = !{!351, !4, i64 0}
!351 = !{!"_ZTSN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEELi0EEE", !4, i64 0, !105, i64 8, !352, i64 9}
!352 = !{!"_ZTSN5Eigen8internal19variable_if_dynamicIlLi6EEE"}
!353 = !{!354}
!354 = distinct !{!354, !355, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEEEEE12cwiseProductINS2_IKNS3_IiLi6ELi1ELi0ELi6ELi1EEELi6ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE: argument 0"}
!355 = distinct !{!355, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEEEEE12cwiseProductINS2_IKNS3_IiLi6ELi1ELi0ELi6ELi1EEELi6ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE"}
!356 = !{!357, !4, i64 0}
!357 = !{!"_ZTSN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIiLi6ELi1ELi0ELi6ELi1EEELi6ELi1ELb1EEELi0EEE", !4, i64 0, !352, i64 8, !105, i64 9}
!358 = !{!359, !7, i64 40}
!359 = !{!"_ZTSN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIiLi6ELi1ELi0ELi6ELi1EEELi6ELi1ELb1ELb1EEE", !5, i64 16, !60, i64 24, !25, i64 32, !7, i64 40}
!360 = !{!361, !7, i64 40}
!361 = !{!"_ZTSN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0ELb1EEE", !5, i64 16, !60, i64 24, !60, i64 32, !7, i64 40}
!362 = !{!363, !4, i64 0}
!363 = !{!"_ZTSN5Eigen8internal16blas_data_mapperIKilLi0ELi0EEE", !4, i64 0, !7, i64 8}
!364 = !{!363, !7, i64 8}
!365 = !{!366, !4, i64 0}
!366 = !{!"_ZTSN5Eigen8internal16blas_data_mapperIKilLi1ELi0EEE", !4, i64 0, !7, i64 8}
!367 = !{!366, !7, i64 8}
!368 = !{!369}
!369 = distinct !{!369, !370}
!370 = distinct !{!370, !"LVerDomain"}
!371 = !{!372}
!372 = distinct !{!372, !370}
!373 = !{!374, !375, !376, !369}
!374 = distinct !{!374, !370}
!375 = distinct !{!375, !370}
!376 = distinct !{!376, !370}
!377 = !{!376}
!378 = !{!375}
!379 = !{!374}
!380 = distinct !{!380, !73, !74}
!381 = !{!382}
!382 = distinct !{!382, !383}
!383 = distinct !{!383, !"LVerDomain"}
!384 = !{!385}
!385 = distinct !{!385, !383}
!386 = !{!387, !388, !389, !382}
!387 = distinct !{!387, !383}
!388 = distinct !{!388, !383}
!389 = distinct !{!389, !383}
!390 = !{!389}
!391 = !{!388}
!392 = !{!387}
!393 = distinct !{!393, !73, !74}
!394 = distinct !{!394, !73, !74}
!395 = distinct !{!395, !73, !74}
!396 = distinct !{!396, !18}
!397 = !{!398}
!398 = distinct !{!398, !399}
!399 = distinct !{!399, !"LVerDomain"}
!400 = !{!401}
!401 = distinct !{!401, !399}
!402 = distinct !{!402, !73, !74}
!403 = distinct !{!403, !73, !74}
!404 = distinct !{!404, !73, !74}
!405 = distinct !{!405, !18}
!406 = !{!407}
!407 = distinct !{!407, !408}
!408 = distinct !{!408, !"LVerDomain"}
!409 = !{!410}
!410 = distinct !{!410, !408}
!411 = distinct !{!411, !73, !74}
!412 = distinct !{!412, !18}
!413 = distinct !{!413, !18}
!414 = distinct !{!414, !18}
!415 = distinct !{!415, !18}
!416 = distinct !{!416, !18}
!417 = !{!418}
!418 = distinct !{!418, !419}
!419 = distinct !{!419, !"LVerDomain"}
!420 = !{!421}
!421 = distinct !{!421, !419}
!422 = distinct !{!422, !73, !74}
!423 = distinct !{!423, !73, !74}
!424 = !{!198, !7, i64 8}
!425 = distinct !{!425, !18}
!426 = !{!427}
!427 = distinct !{!427, !428}
!428 = distinct !{!428, !"LVerDomain"}
!429 = !{!430}
!430 = distinct !{!430, !428}
!431 = distinct !{!431, !73, !74}
!432 = distinct !{!432, !18}
!433 = distinct !{!433, !73, !74}
!434 = !{!435, !437}
!435 = distinct !{!435, !436, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLi1ELin1ELi1ELi1ELin1EEEE11NullaryExprINS_8internal18scalar_constant_opIiEEEEKNS_14CwiseNullaryOpIT_S2_EEllRKS9_: argument 0"}
!436 = distinct !{!436, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLi1ELin1ELi1ELi1ELin1EEEE11NullaryExprINS_8internal18scalar_constant_opIiEEEEKNS_14CwiseNullaryOpIT_S2_EEllRKS9_"}
!437 = distinct !{!437, !438, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLi1ELin1ELi1ELi1ELin1EEEE8ConstantEllRKi: argument 0"}
!438 = distinct !{!438, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLi1ELin1ELi1ELi1ELin1EEEE8ConstantEllRKi"}
!439 = !{!"branch_weights", i32 2002, i32 2000}
!440 = !{!441}
!441 = distinct !{!441, !442, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEE3rowEl: argument 0"}
!442 = distinct !{!442, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEE3rowEl"}
!443 = distinct !{!443, !18}
!444 = !{!445}
!445 = distinct !{!445, !446}
!446 = distinct !{!446, !"LVerDomain"}
!447 = !{!448}
!448 = distinct !{!448, !446}
!449 = distinct !{!449, !73, !74}
!450 = distinct !{!450, !18}
!451 = distinct !{!451, !73, !74}
!452 = !{!453}
!453 = distinct !{!453, !454, !"_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EEE11lazyProductINS_9TransposeIKNS8_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS_7ProductISD_T_Li1EEERKNS0_ISL_EE: argument 0"}
!454 = distinct !{!454, !"_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EEE11lazyProductINS_9TransposeIKNS8_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS_7ProductISD_T_Li1EEERKNS0_ISL_EE"}
!455 = !{!456, !458}
!456 = distinct !{!456, !457, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEE11NullaryExprINS_8internal18scalar_constant_opIiEEEEKNS_14CwiseNullaryOpIT_S2_EEllRKS9_: argument 0"}
!457 = distinct !{!457, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEE11NullaryExprINS_8internal18scalar_constant_opIiEEEEKNS_14CwiseNullaryOpIT_S2_EEllRKS9_"}
!458 = distinct !{!458, !459, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEE8ConstantEllRKi: argument 0"}
!459 = distinct !{!459, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEE8ConstantEllRKi"}
!460 = !{!194, !7, i64 16}
!461 = !{!194, !7, i64 24}
!462 = !{!463, !7, i64 40}
!463 = !{!"_ZTSN5Eigen8internal19gemm_blocking_spaceILi0EiiLi47ELin1ELi6ELi1ELb0EEE", !7, i64 40, !7, i64 48}
!464 = !{!463, !7, i64 48}
!465 = distinct !{!465, !18}
!466 = distinct !{!466, !18}
!467 = distinct !{!467, !73, !74}
!468 = !{!469, !4, i64 0}
!469 = !{!"_ZTSN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEEE", !4, i64 0, !60, i64 8}
!470 = !{!471, !7, i64 1176}
!471 = !{!"_ZTSN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESB_EENS_9TransposeIKNS9_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEELi8ENS_10DenseShapeESK_iiEE", !472, i64 0, !473, i64 1128, !101, i64 1136, !474, i64 1152, !7, i64 1176}
!472 = !{!"_ZTSN5Eigen6MatrixIiLi47ELi6ELi0ELi47ELi6EEE"}
!473 = !{!"_ZTSN5Eigen9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEE", !5, i64 0}
!474 = !{!"_ZTSN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEEE"}
!475 = !{!476, !4, i64 0}
!476 = !{!"_ZTSN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEEEEE", !4, i64 0, !96, i64 8}
!477 = !{!478}
!478 = distinct !{!478, !479, !"_ZNK5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEE3colEl: argument 0"}
!479 = distinct !{!479, !"_ZNK5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEE3colEl"}
!480 = !{!481, !4, i64 0}
!481 = !{!"_ZTSN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0EEELi0EEE", !4, i64 0, !105, i64 8, !352, i64 9}
!482 = !{!483}
!483 = distinct !{!483, !484, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0EEEEEE12cwiseProductINS2_IKNS1_IKNS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSH_6traitsIT_E6ScalarEEEKS8_KSK_EERKNS0_ISK_EE: argument 0"}
!484 = distinct !{!484, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0EEEEEE12cwiseProductINS2_IKNS1_IKNS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSH_6traitsIT_E6ScalarEEEKS8_KSK_EERKNS0_ISK_EE"}
!485 = !{!486, !4, i64 0}
!486 = !{!"_ZTSN5Eigen7MapBaseINS_5BlockIKNS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEELi0EEE", !4, i64 0, !352, i64 8, !105, i64 9}
!487 = !{!488}
!488 = distinct !{!488, !489, !"_ZNK5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEE3colEl: argument 0"}
!489 = distinct !{!489, !"_ZNK5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEE3colEl"}
!490 = !{!491}
!491 = distinct !{!491, !492, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0EEEEEE12cwiseProductINS2_IKNS1_IKNS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSH_6traitsIT_E6ScalarEEEKS8_KSK_EERKNS0_ISK_EE: argument 0"}
!492 = distinct !{!492, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0EEEEEE12cwiseProductINS2_IKNS1_IKNS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSH_6traitsIT_E6ScalarEEEKS8_KSK_EERKNS0_ISK_EE"}
!493 = !{!494, !7, i64 40}
!494 = !{!"_ZTSN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0ELb1EEE", !5, i64 16, !60, i64 24, !60, i64 32, !7, i64 40}
!495 = !{!496, !7, i64 40}
!496 = !{!"_ZTSN5Eigen8internal15BlockImpl_denseIKNS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0ELb1EEE", !473, i64 16, !60, i64 24, !60, i64 32, !7, i64 40}
!497 = !{!498, !7, i64 0}
!498 = !{!"_ZTSN5Eigen8internal10CacheSizesE", !7, i64 0, !7, i64 8, !7, i64 16}
!499 = !{!498, !7, i64 8}
!500 = !{!498, !7, i64 16}
!501 = !{i32 -2138222265}
!502 = !{i32 -2138223061}
!503 = !{i32 -2138222663}
!504 = !{i32 -2138222464}
!505 = !{i32 -2138222862}
!506 = !{i32 -2136538790}
!507 = distinct !{!507, !18}
!508 = distinct !{!508, !18}
!509 = !{!510}
!510 = distinct !{!510, !511}
!511 = distinct !{!511, !"LVerDomain"}
!512 = !{!513}
!513 = distinct !{!513, !511}
!514 = distinct !{!514, !18}
!515 = distinct !{!515, !73, !74}
!516 = distinct !{!516, !18}
!517 = distinct !{!517, !73, !74}
!518 = !{i32 -2136535959}
!519 = distinct !{!519, !18}
!520 = !{!521}
!521 = distinct !{!521, !522}
!522 = distinct !{!522, !"LVerDomain"}
!523 = !{!524}
!524 = distinct !{!524, !522}
!525 = distinct !{!525, !18}
!526 = distinct !{!526, !73, !74}
!527 = distinct !{!527, !18}
!528 = distinct !{!528, !73, !74}
!529 = !{!530, !4, i64 0}
!530 = !{!"_ZTSN5Eigen8internal16blas_data_mapperIilLi0ELi0EEE", !4, i64 0, !7, i64 8}
!531 = !{!530, !7, i64 8}
!532 = !{i32 -2136599360}
!533 = !{i32 -2136597826}
!534 = !{i32 -2136597772}
!535 = !{i32 -2136597707}
!536 = !{i32 -2136596167}
!537 = !{i32 -2136596113}
!538 = !{i32 -2136596048}
!539 = !{i32 -2136594508}
!540 = !{i32 -2136594454}
!541 = !{i32 -2136594389}
!542 = !{i32 -2136592849}
!543 = !{i32 -2136592795}
!544 = !{i32 -2136592730}
!545 = !{i32 -2136591190}
!546 = !{i32 -2136591136}
!547 = !{i32 -2136591071}
!548 = !{i32 -2136589531}
!549 = !{i32 -2136589477}
!550 = !{i32 -2136589412}
!551 = !{i32 -2136587872}
!552 = !{i32 -2136587818}
!553 = !{i32 -2136587753}
!554 = !{i32 -2136586213}
!555 = !{i32 -2136586159}
!556 = !{i32 -2136586094}
!557 = !{i32 -2136586042}
!558 = !{i32 -2136584510}
!559 = !{i32 -2136584456}
!560 = !{i32 -2136584391}
!561 = !{i32 -2136584339}
!562 = !{i32 -2136583622}
!563 = !{i32 -2136583568}
!564 = !{i32 -2136583505}
!565 = !{i32 -2136582782}
!566 = !{i32 -2136582728}
!567 = !{i32 -2136582665}
!568 = !{i32 -2136581942}
!569 = !{i32 -2136581888}
!570 = !{i32 -2136581825}
!571 = !{i32 -2136581102}
!572 = !{i32 -2136581048}
!573 = !{i32 -2136580985}
!574 = !{i32 -2136580262}
!575 = !{i32 -2136580208}
!576 = !{i32 -2136580145}
!577 = !{i32 -2136579422}
!578 = !{i32 -2136579368}
!579 = !{i32 -2136579305}
!580 = !{i32 -2136578582}
!581 = !{i32 -2136578528}
!582 = !{i32 -2136578465}
!583 = !{i32 -2136577742}
!584 = !{i32 -2136577688}
!585 = !{i32 -2136577625}
!586 = !{i32 -2136577573}
!587 = !{i32 -2136576858}
!588 = !{i32 -2136576804}
!589 = !{i32 -2136576741}
!590 = !{i32 -2136576689}
!591 = !{i32 -2136575390}
!592 = !{i32 -2136575336}
!593 = !{i32 -2136575273}
!594 = !{i32 -2136573968}
!595 = !{i32 -2136573914}
!596 = !{i32 -2136573851}
!597 = !{i32 -2136572546}
!598 = !{i32 -2136572492}
!599 = !{i32 -2136572429}
!600 = !{i32 -2136571124}
!601 = !{i32 -2136571070}
!602 = !{i32 -2136571007}
!603 = !{i32 -2136569702}
!604 = !{i32 -2136569648}
!605 = !{i32 -2136569585}
!606 = !{i32 -2136568280}
!607 = !{i32 -2136568226}
!608 = !{i32 -2136568163}
!609 = !{i32 -2136566858}
!610 = !{i32 -2136566804}
!611 = !{i32 -2136566741}
!612 = !{i32 -2136565436}
!613 = !{i32 -2136565382}
!614 = !{i32 -2136565319}
!615 = !{i32 -2136565267}
!616 = !{i32 -2136563970}
!617 = !{i32 -2136563916}
!618 = !{i32 -2136563853}
!619 = !{i32 -2136563801}
!620 = !{i32 -2136562978}
!621 = !{i32 -2136562924}
!622 = !{i32 -2136562861}
!623 = !{i32 -2136562032}
!624 = !{i32 -2136561978}
!625 = !{i32 -2136561915}
!626 = !{i32 -2136561086}
!627 = !{i32 -2136561032}
!628 = !{i32 -2136560969}
!629 = !{i32 -2136560140}
!630 = !{i32 -2136560086}
!631 = !{i32 -2136560023}
!632 = !{i32 -2136559194}
!633 = !{i32 -2136559140}
!634 = !{i32 -2136559077}
!635 = !{i32 -2136558248}
!636 = !{i32 -2136558194}
!637 = !{i32 -2136558131}
!638 = !{i32 -2136557302}
!639 = !{i32 -2136557248}
!640 = !{i32 -2136557185}
!641 = !{i32 -2136556356}
!642 = !{i32 -2136556302}
!643 = !{i32 -2136556239}
!644 = !{i32 -2136556187}
!645 = !{i32 -2136555366}
!646 = !{i32 -2136555312}
!647 = !{i32 -2136555249}
!648 = !{i32 -2136555197}
!649 = !{i32 -2136554310}
!650 = !{i32 -2136554256}
!651 = !{i32 -2136554193}
!652 = !{i32 -2136553300}
!653 = !{i32 -2136553246}
!654 = !{i32 -2136553183}
!655 = !{i32 -2136552290}
!656 = !{i32 -2136552236}
!657 = !{i32 -2136552173}
!658 = !{i32 -2136551280}
!659 = !{i32 -2136551226}
!660 = !{i32 -2136551163}
!661 = !{i32 -2136550270}
!662 = !{i32 -2136550216}
!663 = !{i32 -2136550153}
!664 = !{i32 -2136549260}
!665 = !{i32 -2136549206}
!666 = !{i32 -2136549143}
!667 = !{i32 -2136548250}
!668 = !{i32 -2136548196}
!669 = !{i32 -2136548133}
!670 = !{i32 -2136547240}
!671 = !{i32 -2136547186}
!672 = !{i32 -2136547123}
!673 = !{i32 -2136547071}
!674 = !{i32 -2136546186}
!675 = !{i32 -2136546132}
!676 = !{i32 -2136546069}
!677 = !{i32 -2136546017}
!678 = !{i32 -2136545375}
!679 = !{i32 -2136545321}
!680 = !{i32 -2136545258}
!681 = !{i32 -2136544610}
!682 = !{i32 -2136544556}
!683 = !{i32 -2136544493}
!684 = !{i32 -2136543845}
!685 = !{i32 -2136543791}
!686 = !{i32 -2136543728}
!687 = !{i32 -2136543080}
!688 = !{i32 -2136543026}
!689 = !{i32 -2136542963}
!690 = !{i32 -2136542315}
!691 = !{i32 -2136542261}
!692 = !{i32 -2136542198}
!693 = !{i32 -2136541550}
!694 = !{i32 -2136541496}
!695 = !{i32 -2136541433}
!696 = !{i32 -2136540785}
!697 = !{i32 -2136540731}
!698 = !{i32 -2136540668}
!699 = !{i32 -2136540020}
!700 = !{i32 -2136539966}
!701 = !{i32 -2136539903}
!702 = !{i32 -2136539851}
!703 = !{i32 -2136539211}
!704 = !{i32 -2136539157}
!705 = !{i32 -2136539094}
!706 = distinct !{!706, !18}
!707 = distinct !{!707, !18}
!708 = distinct !{!708, !73, !74}
!709 = distinct !{!709, !115, !73, !74}
!710 = distinct !{!710, !18}
!711 = !{!712, !7, i64 48}
!712 = !{!"_ZTSN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEENS3_IiLin1ELi6ELi0ELin1ELi6EEELi1EEELi8ENS_10DenseShapeES7_iiEE", !5, i64 0, !5, i64 8, !713, i64 16, !714, i64 32, !7, i64 48}
!713 = !{!"_ZTSN5Eigen8internal9evaluatorINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEEE"}
!714 = !{!"_ZTSN5Eigen8internal9evaluatorINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEE"}
!715 = !{!716, !7, i64 40}
!716 = !{!"_ZTSN5Eigen8internal19gemm_blocking_spaceILi0EiiLi47ELi6ELin1ELi1ELb0EEE", !7, i64 40, !7, i64 48}
!717 = !{!716, !7, i64 48}
!718 = distinct !{!718, !18}
!719 = !{!720}
!720 = distinct !{!720, !721, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEE3rowEl: argument 0"}
!721 = distinct !{!721, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEE3rowEl"}
!722 = !{!"branch_weights", i32 1, i32 4001}
!723 = !{!724}
!724 = distinct !{!724, !725, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEE3colEl: argument 0"}
!725 = distinct !{!725, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEE3colEl"}
!726 = !{!727}
!727 = distinct !{!727, !728, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEELi1ELin1ELb0EEEEEE12cwiseProductINS2_IKNS3_IiLin1ELi6ELi0ELin1ELi6EEELin1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE: argument 0"}
!728 = distinct !{!728, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEELi1ELin1ELb0EEEEEE12cwiseProductINS2_IKNS3_IiLin1ELi6ELi0ELin1ELi6EEELin1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE"}
!729 = !{i32 -2136536753}
!730 = distinct !{!730, !73, !74}
!731 = !{!732}
!732 = distinct !{!732, !733}
!733 = distinct !{!733, !"LVerDomain"}
!734 = !{!735}
!735 = distinct !{!735, !733}
!736 = !{!737}
!737 = distinct !{!737, !733}
!738 = !{!739}
!739 = distinct !{!739, !733}
!740 = !{!741}
!741 = distinct !{!741, !733}
!742 = !{!739, !737, !735, !732}
!743 = distinct !{!743, !73, !74}
!744 = !{!745}
!745 = distinct !{!745, !746}
!746 = distinct !{!746, !"LVerDomain"}
!747 = !{!748}
!748 = distinct !{!748, !746}
!749 = distinct !{!749, !18}
!750 = distinct !{!750, !73, !74}
!751 = distinct !{!751, !18}
!752 = distinct !{!752, !73, !74}
!753 = !{!754}
!754 = distinct !{!754, !755}
!755 = distinct !{!755, !"LVerDomain"}
!756 = !{!757}
!757 = distinct !{!757, !755}
!758 = !{!759}
!759 = distinct !{!759, !755}
!760 = !{!761}
!761 = distinct !{!761, !755}
!762 = !{!763}
!763 = distinct !{!763, !755}
!764 = !{!761, !759, !757, !754}
!765 = distinct !{!765, !73, !74}
!766 = distinct !{!766, !73, !74}
!767 = !{!768, !4, i64 0}
!768 = !{!"_ZTSN5Eigen12DenseStorageIiLin1ELin1ELin1ELi1EEE", !4, i64 0, !7, i64 8, !7, i64 16}
!769 = !{!768, !7, i64 8}
!770 = !{!768, !7, i64 16}
!771 = !{!31, !7, i64 8}
!772 = !{!31, !7, i64 16}
!773 = !{!774}
!774 = distinct !{!774, !775}
!775 = distinct !{!775, !"LVerDomain"}
!776 = !{!777}
!777 = distinct !{!777, !775}
!778 = distinct !{!778, !18}
!779 = distinct !{!779, !73, !74}
!780 = distinct !{!780, !18}
!781 = distinct !{!781, !73, !74}
!782 = !{!783}
!783 = distinct !{!783, !784, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEEE11lazyProductINS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS1_IS5_T_Li1EEERKNS0_ISC_EE: argument 0"}
!784 = distinct !{!784, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEEE11lazyProductINS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS1_IS5_T_Li1EEERKNS0_ISC_EE"}
!785 = !{!786, !788}
!786 = distinct !{!786, !787, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLin1ELin1ELi1ELin1ELin1EEEE11NullaryExprINS_8internal18scalar_constant_opIiEEEEKNS_14CwiseNullaryOpIT_S2_EEllRKS9_: argument 0"}
!787 = distinct !{!787, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLin1ELin1ELi1ELin1ELin1EEEE11NullaryExprINS_8internal18scalar_constant_opIiEEEEKNS_14CwiseNullaryOpIT_S2_EEllRKS9_"}
!788 = distinct !{!788, !789, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLin1ELin1ELi1ELin1ELin1EEEE8ConstantEllRKi: argument 0"}
!789 = distinct !{!789, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLin1ELin1ELi1ELin1ELin1EEEE8ConstantEllRKi"}
!790 = !{!791, !7, i64 40}
!791 = !{!"_ZTSN5Eigen8internal19gemm_blocking_spaceILi1EiiLin1ELin1ELi6ELi1ELb0EEE", !7, i64 40, !7, i64 48}
!792 = !{!791, !7, i64 48}
!793 = !{!794, !7, i64 64}
!794 = !{!"_ZTSN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS3_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS_9TransposeIKNS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEELi8ENS_10DenseShapeESC_iiEE", !795, i64 0, !473, i64 16, !714, i64 24, !474, i64 40, !7, i64 64}
!795 = !{!"_ZTSN5Eigen6MatrixIiLin1ELi6ELi0ELin1ELi6EEE"}
!796 = !{!797}
!797 = distinct !{!797, !798, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEE3rowEl: argument 0"}
!798 = distinct !{!798, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEE3rowEl"}
!799 = !{!800}
!800 = distinct !{!800, !801, !"_ZNK5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEE3colEl: argument 0"}
!801 = distinct !{!801, !"_ZNK5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEE3colEl"}
!802 = !{!803}
!803 = distinct !{!803, !804, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEEEEE12cwiseProductINS2_IKNS1_IS5_EELi6ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE: argument 0"}
!804 = distinct !{!804, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEEEEE12cwiseProductINS2_IKNS1_IS5_EELi6ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE"}
!805 = !{!806, !808}
!806 = distinct !{!806, !807, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEE11NullaryExprINS_8internal18scalar_constant_opIiEEEEKNS_14CwiseNullaryOpIT_S2_EEllRKS9_: argument 0"}
!807 = distinct !{!807, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEE11NullaryExprINS_8internal18scalar_constant_opIiEEEEKNS_14CwiseNullaryOpIT_S2_EEllRKS9_"}
!808 = distinct !{!808, !809, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEE8ConstantEllRKi: argument 0"}
!809 = distinct !{!809, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEE8ConstantEllRKi"}
!810 = !{!811, !7, i64 40}
!811 = !{!"_ZTSN5Eigen8internal19gemm_blocking_spaceILi0EiiLin1ELi6ELi47ELi1ELb0EEE", !7, i64 40, !7, i64 48}
!812 = !{!811, !7, i64 48}
!813 = !{!814, !4, i64 0}
!814 = !{!"_ZTSN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEEEEEE", !4, i64 0, !60, i64 8}
!815 = !{!816, !7, i64 48}
!816 = !{!"_ZTSN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS3_IiLi47ELi6ELi0ELi47ELi6EEELi1EEELi8ENS_10DenseShapeES7_iiEE", !5, i64 0, !5, i64 8, !817, i64 16, !101, i64 32, !7, i64 48}
!817 = !{!"_ZTSN5Eigen8internal9evaluatorINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEEEE"}
!818 = !{!819}
!819 = distinct !{!819, !820, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEEE3rowEl: argument 0"}
!820 = distinct !{!820, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEEE3rowEl"}
!821 = distinct !{!821, !18}
!822 = distinct !{!822, !73, !74}
!823 = distinct !{!823, !18}
!824 = !{!825}
!825 = distinct !{!825, !826, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEEE3rowEl: argument 0"}
!826 = distinct !{!826, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEEE3rowEl"}
!827 = distinct !{!827, !18}
!828 = distinct !{!828, !73, !74}
!829 = distinct !{!829, !18}
!830 = distinct !{!830, !18}
!831 = distinct !{!831, !73, !74}
!832 = distinct !{!832, !115, !73, !74}
!833 = !{!834}
!834 = distinct !{!834, !835}
!835 = distinct !{!835, !"LVerDomain"}
!836 = !{!837}
!837 = distinct !{!837, !835}
!838 = distinct !{!838, !18}
!839 = distinct !{!839, !73, !74}
!840 = distinct !{!840, !18}
!841 = distinct !{!841, !73, !74}
!842 = !{!843}
!843 = distinct !{!843, !844, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEEE11lazyProductINS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS1_IS5_T_Li1EEERKNS0_ISB_EE: argument 0"}
!844 = distinct !{!844, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS2_IiLi47ELi6ELi0ELi47ELi6EEELi0EEEE11lazyProductINS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS1_IS5_T_Li1EEERKNS0_ISB_EE"}
!845 = !{!846, !848}
!846 = distinct !{!846, !847, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLin1ELin1ELi1ELin1ELin1EEEE11NullaryExprINS_8internal18scalar_constant_opIiEEEEKNS_14CwiseNullaryOpIT_S2_EEllRKS9_: argument 0"}
!847 = distinct !{!847, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLin1ELin1ELi1ELin1ELin1EEEE11NullaryExprINS_8internal18scalar_constant_opIiEEEEKNS_14CwiseNullaryOpIT_S2_EEllRKS9_"}
!848 = distinct !{!848, !849, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLin1ELin1ELi1ELin1ELin1EEEE8ConstantEllRKi: argument 0"}
!849 = distinct !{!849, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLin1ELin1ELi1ELin1ELin1EEEE8ConstantEllRKi"}
!850 = !{!851, !7, i64 64}
!851 = !{!"_ZTSN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEENS3_IiLi47ELi6ELi0ELi47ELi6EEELi0EEENS_9TransposeINS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEELi8ENS_10DenseShapeESB_iiEE", !795, i64 0, !852, i64 16, !714, i64 24, !853, i64 40, !7, i64 64}
!852 = !{!"_ZTSN5Eigen9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEE", !5, i64 0}
!853 = !{!"_ZTSN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEEE"}
!854 = !{!855}
!855 = distinct !{!855, !856, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEE3rowEl: argument 0"}
!856 = distinct !{!856, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEE3rowEl"}
!857 = !{!858}
!858 = distinct !{!858, !859, !"_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEE3colEl: argument 0"}
!859 = distinct !{!859, !"_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEE3colEl"}
!860 = !{!861}
!861 = distinct !{!861, !862, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEEEEE12cwiseProductINS2_IKNS1_IS4_EELi6ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE: argument 0"}
!862 = distinct !{!862, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEELi1ELi6ELb0EEEEEE12cwiseProductINS2_IKNS1_IS4_EELi6ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE"}
!863 = !{!864, !4, i64 0}
!864 = !{!"_ZTSN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEELi0EEE", !4, i64 0, !352, i64 8, !105, i64 9}
!865 = !{!866, !7, i64 40}
!866 = !{!"_ZTSN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0ELb1EEE", !852, i64 16, !60, i64 24, !60, i64 32, !7, i64 40}
!867 = !{!868}
!868 = distinct !{!868, !869, !"_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIiLi6ELi1ELi0ELi6ELi1EEEEEE3rowEl: argument 0"}
!869 = distinct !{!869, !"_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIiLi6ELi1ELi0ELi6ELi1EEEEEE3rowEl"}
!870 = !{!871}
!871 = distinct !{!871, !872, !"_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEEE3colEl: argument 0"}
!872 = distinct !{!872, !"_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEEE3colEl"}
!873 = !{!874}
!874 = distinct !{!874, !875, !"_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIiLi6ELi1ELi0ELi6ELi1EEEEEE3rowEl: argument 0"}
!875 = distinct !{!875, !"_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIiLi6ELi1ELi0ELi6ELi1EEEEEE3rowEl"}
!876 = !{!877}
!877 = distinct !{!877, !878, !"_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEEE3colEl: argument 0"}
!878 = distinct !{!878, !"_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEEE3colEl"}
!879 = distinct !{!879, !18}
!880 = !{!881}
!881 = distinct !{!881, !882}
!882 = distinct !{!882, !"LVerDomain"}
!883 = !{!884}
!884 = distinct !{!884, !882}
!885 = distinct !{!885, !73, !74}
!886 = distinct !{!886, !18}
!887 = distinct !{!887, !73, !74}
!888 = !{!889}
!889 = distinct !{!889, !890, !"_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEE3colEl: argument 0"}
!890 = distinct !{!890, !"_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEE3colEl"}
!891 = !{!892, !4, i64 0}
!892 = !{!"_ZTSN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIiLi6ELi1ELi0ELi6ELi1EEEEELi1ELi6ELb1EEELi0EEE", !4, i64 0, !105, i64 8, !352, i64 9}
!893 = !{!894}
!894 = distinct !{!894, !895, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS1_INS_6MatrixIiLi6ELi1ELi0ELi6ELi1EEEEELi1ELi6ELb1EEEEEE12cwiseProductINS2_IKNS1_INS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSH_6traitsIT_E6ScalarEEEKS9_KSK_EERKNS0_ISK_EE: argument 0"}
!895 = distinct !{!895, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS1_INS_6MatrixIiLi6ELi1ELi0ELi6ELi1EEEEELi1ELi6ELb1EEEEEE12cwiseProductINS2_IKNS1_INS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSH_6traitsIT_E6ScalarEEEKS9_KSK_EERKNS0_ISK_EE"}
!896 = !{!897, !7, i64 40}
!897 = !{!"_ZTSN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIiLi6ELi1ELi0ELi6ELi1EEEEELi1ELi6ELb1ELb1EEE", !127, i64 16, !25, i64 24, !60, i64 32, !7, i64 40}
!898 = distinct !{!898, !18}
!899 = !{!900}
!900 = distinct !{!900, !901}
!901 = distinct !{!901, !"LVerDomain"}
!902 = !{!903}
!903 = distinct !{!903, !901}
!904 = !{!905}
!905 = distinct !{!905, !901}
!906 = !{!900, !903}
!907 = distinct !{!907, !73, !74}
!908 = distinct !{!908, !18}
!909 = distinct !{!909, !73, !74}
!910 = distinct !{!910, !18}
!911 = !{!912}
!912 = distinct !{!912, !913}
!913 = distinct !{!913, !"LVerDomain"}
!914 = !{!915}
!915 = distinct !{!915, !913}
!916 = distinct !{!916, !73, !74}
!917 = distinct !{!917, !18}
!918 = distinct !{!918, !73, !74}
!919 = !{!920}
!920 = distinct !{!920, !921, !"_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EEE11lazyProductINS_9TransposeINS8_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS_7ProductISD_T_Li1EEERKNS0_ISK_EE: argument 0"}
!921 = distinct !{!921, !"_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESA_EEE11lazyProductINS_9TransposeINS8_IiLin1ELi6ELi0ELin1ELi6EEEEEEEKNS_7ProductISD_T_Li1EEERKNS0_ISK_EE"}
!922 = !{!923, !925}
!923 = distinct !{!923, !924, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEE11NullaryExprINS_8internal18scalar_constant_opIiEEEEKNS_14CwiseNullaryOpIT_S2_EEllRKS9_: argument 0"}
!924 = distinct !{!924, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEE11NullaryExprINS_8internal18scalar_constant_opIiEEEEKNS_14CwiseNullaryOpIT_S2_EEllRKS9_"}
!925 = distinct !{!925, !926, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEE8ConstantEllRKi: argument 0"}
!926 = distinct !{!926, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEE8ConstantEllRKi"}
!927 = distinct !{!927, !18}
!928 = distinct !{!928, !18}
!929 = distinct !{!929, !73, !74}
!930 = !{!931, !7, i64 1176}
!931 = !{!"_ZTSN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIiiEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIiEEKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEEEESB_EENS_9TransposeINS9_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEELi8ENS_10DenseShapeESJ_iiEE", !472, i64 0, !852, i64 1128, !101, i64 1136, !853, i64 1152, !7, i64 1176}
!932 = !{!933}
!933 = distinct !{!933, !934, !"_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEE3colEl: argument 0"}
!934 = distinct !{!934, !"_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEE3colEl"}
!935 = !{!936}
!936 = distinct !{!936, !937, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE: argument 0"}
!937 = distinct !{!937, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE"}
!938 = !{!939}
!939 = distinct !{!939, !940, !"_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEE3colEl: argument 0"}
!940 = distinct !{!940, !"_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEE3colEl"}
!941 = !{!942}
!942 = distinct !{!942, !943, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE: argument 0"}
!943 = distinct !{!943, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE"}
!944 = !{!945}
!945 = distinct !{!945, !946}
!946 = distinct !{!946, !"LVerDomain"}
!947 = !{!948}
!948 = distinct !{!948, !946}
!949 = distinct !{!949, !18}
!950 = distinct !{!950, !73, !74}
!951 = distinct !{!951, !18}
!952 = distinct !{!952, !73, !74}
!953 = !{!954, !7, i64 56}
!954 = !{!"_ZTSN5Eigen8internal17product_evaluatorINS_7ProductINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS4_IiLin1ELi47ELi0ELin1ELi47EEELi1EEELi8ENS_10DenseShapeES9_iiEE", !852, i64 0, !5, i64 8, !853, i64 16, !817, i64 40, !7, i64 56}
!955 = !{!956, !4, i64 0}
!956 = !{!"_ZTSN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIiLi6ELi47ELi0ELi6ELi47EEEEEEE", !4, i64 0, !352, i64 8}
!957 = !{!958, !7, i64 40}
!958 = !{!"_ZTSN5Eigen8internal19gemm_blocking_spaceILi0EiiLi6ELi47ELin1ELi1ELb0EEE", !7, i64 40, !7, i64 48}
!959 = !{!958, !7, i64 48}
!960 = !{!961}
!961 = distinct !{!961, !962, !"_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEE3rowEl: argument 0"}
!962 = distinct !{!962, !"_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEE3rowEl"}
!963 = !{!964}
!964 = distinct !{!964, !965, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEEE3colEl: argument 0"}
!965 = distinct !{!965, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEEE3colEl"}
!966 = !{!967}
!967 = distinct !{!967, !968, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS1_INS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEELi1ELin1ELb1EEEEEE12cwiseProductINS2_IKNS3_IiLin1ELi47ELi0ELin1ELi47EEELin1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSG_6traitsIT_E6ScalarEEEKS9_KSJ_EERKNS0_ISJ_EE: argument 0"}
!968 = distinct !{!968, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS1_INS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEELi1ELin1ELb1EEEEEE12cwiseProductINS2_IKNS3_IiLin1ELi47ELi0ELin1ELi47EEELin1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSG_6traitsIT_E6ScalarEEEKS9_KSJ_EERKNS0_ISJ_EE"}
!969 = distinct !{!969, !18}
!970 = distinct !{!970, !18}
!971 = distinct !{!971, !73, !74}
!972 = distinct !{!972, !115, !73, !74}
!973 = distinct !{!973, !73, !74}
!974 = distinct !{!974, !115, !73, !74}
!975 = !{i32 -2136537538}
!976 = !{!977}
!977 = distinct !{!977, !978}
!978 = distinct !{!978, !"LVerDomain"}
!979 = !{!980}
!980 = distinct !{!980, !978}
!981 = distinct !{!981, !18}
!982 = distinct !{!982, !73, !74}
!983 = distinct !{!983, !18}
!984 = distinct !{!984, !73, !74}
!985 = distinct !{!985, !73, !74}
!986 = distinct !{!986, !18}
!987 = !{!988}
!988 = distinct !{!988, !989}
!989 = distinct !{!989, !"LVerDomain"}
!990 = !{!991}
!991 = distinct !{!991, !989}
!992 = distinct !{!992, !18}
!993 = distinct !{!993, !73, !74}
!994 = !{!995}
!995 = distinct !{!995, !996}
!996 = distinct !{!996, !"LVerDomain"}
!997 = !{!998}
!998 = distinct !{!998, !996}
!999 = distinct !{!999, !18}
!1000 = distinct !{!1000, !73, !74}
!1001 = distinct !{!1001, !18}
!1002 = distinct !{!1002, !73, !74}
!1003 = distinct !{!1003, !18}
!1004 = !{!1005}
!1005 = distinct !{!1005, !1006}
!1006 = distinct !{!1006, !"LVerDomain"}
!1007 = !{!1008}
!1008 = distinct !{!1008, !1006}
!1009 = distinct !{!1009, !18}
!1010 = distinct !{!1010, !73, !74}
!1011 = distinct !{!1011, !18}
!1012 = distinct !{!1012, !73, !74}
!1013 = !{!1014}
!1014 = distinct !{!1014, !1015}
!1015 = distinct !{!1015, !"LVerDomain"}
!1016 = !{!1017}
!1017 = distinct !{!1017, !1015}
!1018 = distinct !{!1018, !18}
!1019 = distinct !{!1019, !73, !74}
!1020 = distinct !{!1020, !18}
!1021 = distinct !{!1021, !73, !74}
!1022 = distinct !{!1022, !18}
!1023 = !{!1024}
!1024 = distinct !{!1024, !1025}
!1025 = distinct !{!1025, !"LVerDomain"}
!1026 = !{!1027}
!1027 = distinct !{!1027, !1025}
!1028 = !{!1029}
!1029 = distinct !{!1029, !1025}
!1030 = !{!1024, !1027}
!1031 = distinct !{!1031, !73, !74}
!1032 = distinct !{!1032, !18}
!1033 = distinct !{!1033, !73, !74}
!1034 = !{!1035, !7, i64 56}
!1035 = !{!"_ZTSN5Eigen8internal17product_evaluatorINS_7ProductINS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEENS4_IiLin1ELi47ELi0ELin1ELi47EEELi1EEELi8ENS_10DenseShapeESA_iiEE", !473, i64 0, !5, i64 8, !474, i64 16, !817, i64 40, !7, i64 56}
!1036 = !{!1037}
!1037 = distinct !{!1037, !1038, !"_ZNK5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEE3rowEl: argument 0"}
!1038 = distinct !{!1038, !"_ZNK5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEE3rowEl"}
!1039 = !{!1040}
!1040 = distinct !{!1040, !1041, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEEE3colEl: argument 0"}
!1041 = distinct !{!1041, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEEE3colEl"}
!1042 = !{!1043}
!1043 = distinct !{!1043, !1044, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS1_IKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEELi1ELin1ELb1EEEEEE12cwiseProductINS2_IKNS3_IiLin1ELi47ELi0ELin1ELi47EEELin1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSH_6traitsIT_E6ScalarEEEKSA_KSK_EERKNS0_ISK_EE: argument 0"}
!1044 = distinct !{!1044, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS1_IKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEELi1ELin1ELb1EEEEEE12cwiseProductINS2_IKNS3_IiLin1ELi47ELi0ELin1ELi47EEELin1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSH_6traitsIT_E6ScalarEEEKSA_KSK_EERKNS0_ISK_EE"}
!1045 = distinct !{!1045, !18}
!1046 = distinct !{!1046, !18}
!1047 = distinct !{!1047, !73, !74}
!1048 = distinct !{!1048, !115, !73, !74}
!1049 = distinct !{!1049, !73, !74}
!1050 = distinct !{!1050, !115, !73, !74}
!1051 = !{!1052}
!1052 = distinct !{!1052, !1053, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEEE11lazyProductINS2_IiLin1ELi47ELi0ELin1ELi47EEEEEKNS1_IS8_T_Li1EEERKNS0_ISC_EE: argument 0"}
!1053 = distinct !{!1053, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEEE11lazyProductINS2_IiLin1ELi47ELi0ELin1ELi47EEEEEKNS1_IS8_T_Li1EEERKNS0_ISC_EE"}
!1054 = !{!1055, !7, i64 40}
!1055 = !{!"_ZTSN5Eigen8internal19gemm_blocking_spaceILi0EiiLi47ELi47ELin1ELi1ELb0EEE", !7, i64 40, !7, i64 48}
!1056 = !{!1055, !7, i64 48}
!1057 = !{!1058, !7, i64 56}
!1058 = !{!"_ZTSN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS3_IiLin1ELi47ELi0ELin1ELi47EEELi1EEELi8ENS_10DenseShapeESC_iiEE", !1059, i64 0, !5, i64 16, !713, i64 24, !817, i64 40, !7, i64 56}
!1059 = !{!"_ZTSN5Eigen6MatrixIiLi47ELin1ELi0ELi47ELin1EEE"}
!1060 = !{!1061, !4, i64 0}
!1061 = !{!"_ZTSN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIiLi47ELi47ELi0ELi47ELi47EEEEEEE", !4, i64 0, !96, i64 8}
!1062 = distinct !{!1062, !18}
!1063 = !{!1064, !1066}
!1064 = distinct !{!1064, !1065, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEE11NullaryExprINS_8internal18scalar_constant_opIiEEEEKNS_14CwiseNullaryOpIT_S2_EEllRKS9_: argument 0"}
!1065 = distinct !{!1065, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEE11NullaryExprINS_8internal18scalar_constant_opIiEEEEKNS_14CwiseNullaryOpIT_S2_EEllRKS9_"}
!1066 = distinct !{!1066, !1067, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEE8ConstantEllRKi: argument 0"}
!1067 = distinct !{!1067, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEE8ConstantEllRKi"}
!1068 = !{!1069, !7, i64 56}
!1069 = !{!"_ZTSN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeIKNS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEELi8ENS_10DenseShapeESA_iiEE", !5, i64 0, !473, i64 8, !101, i64 16, !474, i64 32, !7, i64 56}
!1070 = !{!1071}
!1071 = distinct !{!1071, !1072, !"_ZNK5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEE3colEl: argument 0"}
!1072 = distinct !{!1072, !"_ZNK5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEE3colEl"}
!1073 = !{!1074}
!1074 = distinct !{!1074, !1075, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0EEEEEE12cwiseProductINS2_IKNS1_IKNS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSH_6traitsIT_E6ScalarEEEKS8_KSK_EERKNS0_ISK_EE: argument 0"}
!1075 = distinct !{!1075, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0EEEEEE12cwiseProductINS2_IKNS1_IKNS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSH_6traitsIT_E6ScalarEEEKS8_KSK_EERKNS0_ISK_EE"}
!1076 = !{!1077}
!1077 = distinct !{!1077, !1078, !"_ZNK5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEE3colEl: argument 0"}
!1078 = distinct !{!1078, !"_ZNK5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEE3colEl"}
!1079 = !{!1080}
!1080 = distinct !{!1080, !1081, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0EEEEEE12cwiseProductINS2_IKNS1_IKNS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSH_6traitsIT_E6ScalarEEEKS8_KSK_EERKNS0_ISK_EE: argument 0"}
!1081 = distinct !{!1081, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0EEEEEE12cwiseProductINS2_IKNS1_IKNS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSH_6traitsIT_E6ScalarEEEKS8_KSK_EERKNS0_ISK_EE"}
!1082 = !{!1083}
!1083 = distinct !{!1083, !1084, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEE3rowEl: argument 0"}
!1084 = distinct !{!1084, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEE3rowEl"}
!1085 = !{!1086}
!1086 = distinct !{!1086, !1087, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEEE3colEl: argument 0"}
!1087 = distinct !{!1087, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEEE3colEl"}
!1088 = !{!1089}
!1089 = distinct !{!1089, !1090, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEELi1ELin1ELb0EEEEEE12cwiseProductINS2_IKNS3_IiLin1ELi47ELi0ELin1ELi47EEELin1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE: argument 0"}
!1090 = distinct !{!1090, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEELi1ELin1ELb0EEEEEE12cwiseProductINS2_IKNS3_IiLin1ELi47ELi0ELin1ELi47EEELin1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE"}
!1091 = !{!1092}
!1092 = distinct !{!1092, !1093, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEEE11lazyProductINS2_IiLin1ELi47ELi0ELin1ELi47EEEEEKNS1_IS7_T_Li1EEERKNS0_ISB_EE: argument 0"}
!1093 = distinct !{!1093, !"_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS2_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEEE11lazyProductINS2_IiLin1ELi47ELi0ELin1ELi47EEEEEKNS1_IS7_T_Li1EEERKNS0_ISB_EE"}
!1094 = !{!1095, !7, i64 56}
!1095 = !{!"_ZTSN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi0EEENS3_IiLin1ELi47ELi0ELin1ELi47EEELi1EEELi8ENS_10DenseShapeESB_iiEE", !1059, i64 0, !5, i64 16, !713, i64 24, !817, i64 40, !7, i64 56}
!1096 = distinct !{!1096, !18}
!1097 = !{!1098, !1100}
!1098 = distinct !{!1098, !1099, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEE11NullaryExprINS_8internal18scalar_constant_opIiEEEEKNS_14CwiseNullaryOpIT_S2_EEllRKS9_: argument 0"}
!1099 = distinct !{!1099, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEE11NullaryExprINS_8internal18scalar_constant_opIiEEEEKNS_14CwiseNullaryOpIT_S2_EEllRKS9_"}
!1100 = distinct !{!1100, !1101, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEE8ConstantEllRKi: argument 0"}
!1101 = distinct !{!1101, !"_ZN5Eigen9DenseBaseINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEE8ConstantEllRKi"}
!1102 = !{!1103, !7, i64 56}
!1103 = !{!"_ZTSN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEENS_9TransposeINS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi1EEELi8ENS_10DenseShapeES9_iiEE", !5, i64 0, !852, i64 8, !101, i64 16, !853, i64 32, !7, i64 56}
!1104 = !{!1105}
!1105 = distinct !{!1105, !1106, !"_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEE3colEl: argument 0"}
!1106 = distinct !{!1106, !"_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEE3colEl"}
!1107 = !{!1108}
!1108 = distinct !{!1108, !1109, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE: argument 0"}
!1109 = distinct !{!1109, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE"}
!1110 = !{!1111}
!1111 = distinct !{!1111, !1112, !"_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEE3colEl: argument 0"}
!1112 = distinct !{!1112, !"_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIiLin1ELi6ELi0ELin1ELi6EEEEEE3colEl"}
!1113 = !{!1114}
!1114 = distinct !{!1114, !1115, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE: argument 0"}
!1115 = distinct !{!1115, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELi6ELi0ELi47ELi6EEELi1ELi6ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IiLin1ELi6ELi0ELin1ELi6EEEEELi6ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE"}
!1116 = !{!1117}
!1117 = distinct !{!1117, !1118, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEE3rowEl: argument 0"}
!1118 = distinct !{!1118, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEEE3rowEl"}
!1119 = !{!1120}
!1120 = distinct !{!1120, !1121, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEEE3colEl: argument 0"}
!1121 = distinct !{!1121, !"_ZNK5Eigen9DenseBaseINS_6MatrixIiLin1ELi47ELi0ELin1ELi47EEEE3colEl"}
!1122 = !{!1123}
!1123 = distinct !{!1123, !1124, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEELi1ELin1ELb0EEEEEE12cwiseProductINS2_IKNS3_IiLin1ELi47ELi0ELin1ELi47EEELin1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE: argument 0"}
!1124 = distinct !{!1124, !"_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIiLi47ELin1ELi0ELi47ELin1EEELi1ELin1ELb0EEEEEE12cwiseProductINS2_IKNS3_IiLin1ELi47ELi0ELin1ELi47EEELin1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIiNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE"}
!1125 = distinct !{!1125, !18}
!1126 = !{!1127}
!1127 = distinct !{!1127, !1128}
!1128 = distinct !{!1128, !"LVerDomain"}
!1129 = !{!1130}
!1130 = distinct !{!1130, !1128}
!1131 = distinct !{!1131, !73, !74}
!1132 = distinct !{!1132, !18}
!1133 = distinct !{!1133, !73, !74}
